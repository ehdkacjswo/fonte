is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,27, This class is not intended to be instantiated directly: it should serve
False,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,28, as a base class to create all the exceptions that share the semantics of
False,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,29," the standard {@link IllegalArgumentException}, but must also provide a"
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,27,"* In most cases, this class should not be instantiated directly: it should"
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,28,* serve as a base class to create all the exceptions that share the semantics
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,29,"* of the standard {@link IllegalArgumentException}, but must also provide a"
False,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,59,"rotected MathIllegalArgumentException(Localizable specific,"
False,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,60,"ocalizable general,"
False,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,61,bject ... args) {
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,59,"public MathIllegalArgumentException(Localizable specific,"
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,60,"Localizable general,"
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,61,Object ... args) {
False,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,70,"rotected MathIllegalArgumentException(Localizable general,"
False,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,71,bject ... args) {
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,70,"public MathIllegalArgumentException(Localizable general,"
True,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java,71,Object ... args) {
False,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,48,his.value  = value;
True,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,46,this.value = value;
False,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,63,his.value  = value;
True,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java,61,this.value = value;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,18,package org.apache.commons.math.optimization.direct;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,20,import java.util.Arrays;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,21,import java.util.Comparator;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,23,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,24,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,25,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,26,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,27,import org.apache.commons.math.exception.ZeroException;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,28,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,29,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,30,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,31,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,32,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,35,* This class implements the simplex concept.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,36,* It is intended to be used in conjunction with {@link SimplexOptimizer}.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,37,* <br/>
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,38,* The initial configuration of the simplex is set by the constructors
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,39,* {@link #AbstractSimplex(double[])} or {@link #AbstractSimplex(double[][])}.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,40,* The other {@link #AbstractSimplex(int) constructor} will set all steps
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,41,"* to 1, thus building a default configuration from a unit hypercube."
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,42,* <br/>
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,43,* Users <em>must</em> call the {@link #build(double[]) build} method in order
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,44,* to create the data structure that will be acted on by the other methods of
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,45,* this class.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,47,* @see SimplexOptimizer
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,48,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,49,* @since 3.0
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,51,public abstract class AbstractSimplex {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,52,/** Simplex. */
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,53,private RealPointValuePair[] simplex;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,54,/** Start simplex configuration. */
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,55,private double[][] startConfiguration;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,56,/** Simplex dimension (must be equal to {@code simplex.length - 1}). */
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,57,private final int dimension;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,60,* Default constructor.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,61,* Build a unit hypercube.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,63,* @param n Dimension of the simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,65,protected AbstractSimplex(int n) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,66,this(createUnitHypercubeSteps(n));
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,70,* The start configuration for simplex is built from a box parallel to
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,71,* the canonical axes of the space. The simplex is the subset of vertices
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,72,* of a box parallel to the canonical axes. It is built as the path followed
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,73,* while traveling from one vertex of the box to the diagonally opposite
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,74,* vertex moving only along the box edges. The first vertex of the box will
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,75,* be located at the start point of the optimization.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,76,"* As an example, in dimension 3 a simplex has 4 vertices. Setting the"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,77,"* steps to (1, 10, 2) and the start point to (1, 1, 1) would imply the"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,78,"* start simplex would be: { (1, 1, 1), (2, 1, 1), (2, 11, 1), (2, 11, 3) }."
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,79,"* The first vertex would be set to the start point at (1, 1, 1) and the"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,80,"* last vertex would be set to the diagonally opposite vertex at (2, 11, 3)."
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,82,* @param steps Steps along the canonical axes representing box edges. They
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,83,* may be negative but not zero.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,84,* @throws NullArgumentException if {@code steps} is {@code null}.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,85,* @throws ZeroException if one of the steps is zero.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,87,protected AbstractSimplex(final double[] steps) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,88,if (steps == null) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,89,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,91,if (steps.length == 0) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,92,throw new ZeroException();
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,94,dimension = steps.length;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,96,// Only the relative position of the n final vertices with respect
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,97,// to the first one are stored.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,98,startConfiguration = new double[dimension][dimension];
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,99,for (int i = 0; i < dimension; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,100,final double[] vertexI = startConfiguration[i];
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,101,for (int j = 0; j < i + 1; j++) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,102,if (steps[j] == 0) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,103,throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,105,"System.arraycopy(steps, 0, vertexI, 0, j + 1);"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,111,* The real initial simplex will be set up by moving the reference
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,112,* simplex such that its first point is located at the start point of the
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,113,* optimization.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,115,* @param referenceSimplex Reference simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,116,* @throws NotStrictlyPositiveException if the reference simplex does not
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,117,* contain at least one point.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,118,* @throws DimensionMismatchException if there is a dimension mismatch
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,119,* in the reference simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,120,* @throws IllegalArgumentException if one of its vertices is duplicated.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,122,protected AbstractSimplex(final double[][] referenceSimplex) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,123,if (referenceSimplex.length <= 0) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,124,"throw new NotStrictlyPositiveException(LocalizedFormats.SIMPLEX_NEED_ONE_POINT,"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,125,referenceSimplex.length);
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,127,dimension = referenceSimplex.length - 1;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,129,// Only the relative position of the n final vertices with respect
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,130,// to the first one are stored.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,131,startConfiguration = new double[dimension][dimension];
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,132,final double[] ref0 = referenceSimplex[0];
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,134,// Loop over vertices.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,135,for (int i = 0; i < referenceSimplex.length; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,136,final double[] refI = referenceSimplex[i];
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,138,// Safety checks.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,139,if (refI.length != dimension) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,140,"throw new DimensionMismatchException(refI.length, dimension);"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,142,for (int j = 0; j < i; j++) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,143,final double[] refJ = referenceSimplex[j];
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,144,boolean allEquals = true;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,145,for (int k = 0; k < dimension; k++) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,146,if (refI[k] != refJ[k]) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,147,allEquals = false;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,148,break;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,151,if (allEquals) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,152,"throw new MathIllegalArgumentException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX,"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,153,"i, j);"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,157,// Store vertex i position relative to vertex 0 position.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,158,if (i > 0) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,159,final double[] confI = startConfiguration[i - 1];
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,160,for (int k = 0; k < dimension; k++) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,161,confI[k] = refI[k] - ref0[k];
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,168,* Get simplex dimension.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,170,* @return the dimension of the simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,172,public int getDimension() {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,173,return dimension;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,177,* Get simplex size.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,178,"* After calling the {@link #build(double[]) build} method, this method will"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,179,* will be equivalent to {@code getDimension() + 1}.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,181,* @return the size of the simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,183,public int getSize() {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,184,return simplex.length;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,188,* Compute the next simplex of the algorithm.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,190,* @param evaluationFunction Evaluation function.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,191,* @param comparator Comparator to use to sort simplex vertices from best
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,192,* to worst.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,193,* @throws FunctionEvaluationException if the function cannot be evaluated
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,194,* at some point.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,195,* @throws org.apache.commons.math.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,196,* if the algorithm fails to converge.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,198,"public abstract void iterate(final MultivariateRealFunction evaluationFunction,"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,199,final Comparator<RealPointValuePair> comparator)
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,200,throws FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,203,* Build an initial simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,205,* @param startPoint First point of the simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,206,* @throws DimensionMismatchException if the start point does not match
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,207,* simplex dimension.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,209,public void build(final double[] startPoint) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,210,if (dimension != startPoint.length) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,211,"throw new DimensionMismatchException(dimension, startPoint.length);"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,214,// Set first vertex.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,215,simplex = new RealPointValuePair[dimension + 1];
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,216,"simplex[0] = new RealPointValuePair(startPoint, Double.NaN);"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,218,// Set remaining vertices.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,219,for (int i = 0; i < dimension; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,220,final double[] confI = startConfiguration[i];
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,221,final double[] vertexI = new double[dimension];
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,222,for (int k = 0; k < dimension; k++) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,223,vertexI[k] = startPoint[k] + confI[k];
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,225,"simplex[i + 1] = new RealPointValuePair(vertexI, Double.NaN);"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,230,* Evaluate all the non-evaluated points of the simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,232,* @param evaluationFunction Evaluation function.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,233,* @param comparator Comparator to use to sort simplex vertices from best to worst.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,234,* @throws FunctionEvaluationException if no value can be computed for the parameters.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,235,* @throws org.apache.commons.math.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,236,* if the maximal number of evaluations is exceeded.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,238,"public void evaluate(final MultivariateRealFunction evaluationFunction,"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,239,final Comparator<RealPointValuePair> comparator)
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,240,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,242,// Evaluate the objective function at all non-evaluated simplex points.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,243,for (int i = 0; i < simplex.length; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,244,final RealPointValuePair vertex = simplex[i];
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,245,final double[] point = vertex.getPointRef();
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,246,if (Double.isNaN(vertex.getValue())) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,247,"simplex[i] = new RealPointValuePair(point, evaluationFunction.value(point), false);"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,251,// Sort the simplex from best to worst.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,252,"Arrays.sort(simplex, comparator);"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,256,* Replace the worst point of the simplex by a new point.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,258,* @param pointValuePair Point to insert.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,259,* @param comparator Comparator to use for sorting the simplex vertices
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,260,* from best to worst.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,262,"protected void replaceWorstPoint(RealPointValuePair pointValuePair,"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,263,final Comparator<RealPointValuePair> comparator) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,264,for (int i = 0; i < dimension; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,265,"if (comparator.compare(simplex[i], pointValuePair) > 0) {"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,266,RealPointValuePair tmp = simplex[i];
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,267,simplex[i] = pointValuePair;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,268,pointValuePair = tmp;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,271,simplex[dimension] = pointValuePair;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,275,* Get the points of the simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,277,* @return all the simplex points.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,279,public RealPointValuePair[] getPoints() {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,280,final RealPointValuePair[] copy = new RealPointValuePair[simplex.length];
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,281,"System.arraycopy(simplex, 0, copy, 0, simplex.length);"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,282,return copy;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,286,* Get the simplex point stored at the requested {@code index}.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,288,* @param index Location.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,289,* @return the point at location {@code index}.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,291,public RealPointValuePair getPoint(int index) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,292,if (index < 0 ||
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,293,index >= simplex.length) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,294,"throw new OutOfRangeException(index, 0, simplex.length - 1);"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,296,return simplex[index];
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,300,* Store a new point at location {@code index}.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,301,* Note that no deep-copy of {@code point} is performed.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,303,* @param index Location.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,304,* @param point New value.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,306,"protected void setPoint(int index, RealPointValuePair point) {"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,307,if (index < 0 ||
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,308,index >= simplex.length) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,309,"throw new OutOfRangeException(index, 0, simplex.length - 1);"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,311,simplex[index] = point;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,315,* Replace all points.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,316,* Note that no deep-copy of {@code points} is performed.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,318,* @param points New Points.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,320,protected void setPoints(RealPointValuePair[] points) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,321,if (points.length != simplex.length) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,322,"throw new DimensionMismatchException(points.length, simplex.length);"
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,324,simplex = points;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,328,* Create steps for a unit hypercube.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,330,* @param n Dimension of the hypercube.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,331,* @return unit steps.
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,333,private static double[] createUnitHypercubeSteps(int n) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,334,final double[] steps = new double[n];
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,335,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,336,steps[i] = 1;
True,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java,338,return steps;
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,83,* @deprecated in 2.2 (to be removed in 3.0). Please use {@link SimplexOptimizer} instead.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,32,* @deprecated in 2.2 (to be removed in 3.0). Please use {@link MultiDirectionalSimplex} instead.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,18,package org.apache.commons.math.optimization.direct;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,20,import java.util.Comparator;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,22,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,23,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,24,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,27,* This class implements the multi-directional direct search method.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,29,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,30,* @since 3.0
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,32,public class MultiDirectionalSimplex extends AbstractSimplex {
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,33,/** Default value for {@link #khi}: {@value}. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,34,private static final double DEFAULT_KHI = 2;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,35,/** Default value for {@link #gamma}: {@value}. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,36,private static final double DEFAULT_GAMMA = 0.5;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,37,/** Expansion coefficient. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,38,private final double khi;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,39,/** Contraction coefficient. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,40,private final double gamma;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,43,* Build a multi-directional simplex with default coefficients.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,44,* The default values are 2.0 for khi and 0.5 for gamma.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,46,* @param n Dimension of the simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,48,public MultiDirectionalSimplex(final int n) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,49,"this(n, DEFAULT_KHI, DEFAULT_GAMMA);"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,53,* Build a multi-directional simplex with specified coefficients.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,55,* @param n Dimension of the simplex. See
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,56,* {@link AbstractSimplex#AbstractSimplex(int)}.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,57,* @param khi Expansion coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,58,* @param gamma Contraction coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,60,"public MultiDirectionalSimplex(final int n,"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,61,"final double khi, final double gamma) {"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,62,super(n);
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,64,this.khi   = khi;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,65,this.gamma = gamma;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,69,* Build a multi-directional simplex with default coefficients.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,70,* The default values are 2.0 for khi and 0.5 for gamma.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,72,* @param steps Steps along the canonical axes representing box edges.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,73,* They may be negative but not zero. See
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,75,public MultiDirectionalSimplex(final double[] steps) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,76,"this(steps, DEFAULT_KHI, DEFAULT_GAMMA);"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,80,* Build a multi-directional simplex with specified coefficients.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,82,* @param steps Steps along the canonical axes representing box edges.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,83,* They may be negative but not zero. See
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,84,* {@link AbstractSimplex#AbstractSimplex(double[])}.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,85,* @param khi Expansion coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,86,* @param gamma Contraction coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,88,"public MultiDirectionalSimplex(final double[] steps,"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,89,"final double khi, final double gamma) {"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,90,super(steps);
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,92,this.khi   = khi;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,93,this.gamma = gamma;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,97,* Build a multi-directional simplex with default coefficients.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,98,* The default values are 2.0 for khi and 0.5 for gamma.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,100,* @param referenceSimplex Reference simplex. See
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,101,* {@link AbstractSimplex#AbstractSimplex(double[][])}.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,103,public MultiDirectionalSimplex(final double[][] referenceSimplex) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,104,"this(referenceSimplex, DEFAULT_KHI, DEFAULT_GAMMA);"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,108,* Build a multi-directional simplex with specified coefficients.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,110,* @param referenceSimplex Reference simplex. See
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,111,* {@link AbstractSimplex#AbstractSimplex(double[][])}.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,112,* @param khi Expansion coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,113,* @param gamma Contraction coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,114,* @throws org.apache.commons.math.exception.NotStrictlyPositiveException
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,115,* if the reference simplex does not contain at least one point.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,116,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,117,* if there is a dimension mismatch in the reference simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,119,"public MultiDirectionalSimplex(final double[][] referenceSimplex,"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,120,"final double khi, final double gamma) {"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,121,super(referenceSimplex);
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,123,this.khi   = khi;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,124,this.gamma = gamma;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,127,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,128,@Override
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,129,"public void iterate(final MultivariateRealFunction evaluationFunction,"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,130,final Comparator<RealPointValuePair> comparator)
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,131,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,132,// Save the original simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,133,final RealPointValuePair[] original = getPoints();
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,134,final RealPointValuePair best = original[0];
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,136,// Perform a reflection step.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,137,"final RealPointValuePair reflected = evaluateNewSimplex(evaluationFunction,"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,138,"original, 1, comparator);"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,139,"if (comparator.compare(reflected, best) < 0) {"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,140,// Compute the expanded simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,141,final RealPointValuePair[] reflectedSimplex = getPoints();
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,142,"final RealPointValuePair expanded = evaluateNewSimplex(evaluationFunction,"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,143,"original, khi, comparator);"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,144,"if (comparator.compare(reflected, expanded) <= 0) {"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,145,// Keep the reflected simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,146,setPoints(reflectedSimplex);
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,148,// Keep the expanded simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,149,return;
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,152,// Compute the contracted simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,153,"final RealPointValuePair contracted = evaluateNewSimplex(evaluationFunction,"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,154,"original, gamma, comparator);"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,158,* Compute and evaluate a new simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,160,* @param evaluationFunction Evaluation function.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,161,* @param original Original simplex (to be preserved).
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,162,* @param coeff Linear coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,163,* @param comparator Comparator to use to sort simplex vertices from best
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,164,* to poorest.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,165,* @return the best point in the transformed simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,166,* @throws FunctionEvaluationException if the function cannot be
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,167,* evaluated at some point.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,168,* @throws org.apache.commons.math.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,169,* if the maximal number of evaluations is exceeded.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,171,"private RealPointValuePair evaluateNewSimplex(final MultivariateRealFunction evaluationFunction,"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,172,"final RealPointValuePair[] original,"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,173,"final double coeff,"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,174,final Comparator<RealPointValuePair> comparator)
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,175,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,176,final double[] xSmallest = original[0].getPointRef();
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,177,"// Perform a linear transformation on all the simplex points,"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,178,// except the first one.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,179,"setPoint(0, original[0]);"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,180,final int dim = getDimension();
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,181,for (int i = 1; i < getSize(); i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,182,final double[] xOriginal = original[i].getPointRef();
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,183,final double[] xTransformed = new double[dim];
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,184,for (int j = 0; j < dim; j++) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,185,xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,187,"setPoint(i, new RealPointValuePair(xTransformed, Double.NaN, false));"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,190,// Evaluate the simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,191,"evaluate(evaluationFunction, comparator);"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java,193,return getPoint(0);
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java,32,* @deprecated in 2.2 (to be removed in 3.0). Please use {@link NelderMeadSimplex} instead.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,18,package org.apache.commons.math.optimization.direct;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,20,import java.util.Comparator;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,22,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,23,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,24,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,27,* This class implements the Nelder-Mead simplex algorithm.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,29,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,30,* @since 3.0
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,32,public class NelderMeadSimplex extends AbstractSimplex {
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,33,/** Default value for {@link #rho}: {@value}. */
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,34,private static final double DEFAULT_RHO = 1;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,35,/** Default value for {@link #khi}: {@value}. */
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,36,private static final double DEFAULT_KHI = 2;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,37,/** Default value for {@link #gamma}: {@value}. */
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,38,private static final double DEFAULT_GAMMA = 0.5;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,39,/** Default value for {@link #sigma}: {@value}. */
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,40,private static final double DEFAULT_SIGMA = 0.5;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,41,/** Reflection coefficient. */
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,42,private final double rho;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,43,/** Expansion coefficient. */
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,44,private final double khi;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,45,/** Contraction coefficient. */
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,46,private final double gamma;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,47,/** Shrinkage coefficient. */
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,48,private final double sigma;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,51,* Build a Nelder-Mead simplex with default coefficients.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,52,"* The default coefficients are 1.0 for rho, 2.0 for khi and 0.5"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,53,* for both gamma and sigma.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,55,* @param n Dimension of the simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,57,public NelderMeadSimplex(final int n) {
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,58,"this(n, DEFAULT_RHO, DEFAULT_KHI, DEFAULT_GAMMA, DEFAULT_SIGMA);"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,62,* Build a Nelder-Mead simplex with specified coefficients.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,64,* @param n Dimension of the simplex. See
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,65,* {@link AbstractSimplex#AbstractSimplex(int)}.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,66,* @param rho Reflection coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,67,* @param khi Expansion coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,68,* @param gamma Contraction coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,69,* @param sigma Shrinkage coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,71,"public NelderMeadSimplex(final int n,"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,72,"final double rho, final double khi,"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,73,"final double gamma, final double sigma) {"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,74,super(n);
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,76,this.rho = rho;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,77,this.khi = khi;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,78,this.gamma = gamma;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,79,this.sigma = sigma;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,83,* Build a Nelder-Mead simplex with default coefficients.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,84,"* The default coefficients are 1.0 for rho, 2.0 for khi and 0.5"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,85,* for both gamma and sigma.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,87,* @param steps Steps along the canonical axes representing box edges.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,88,* They may be negative but not zero. See
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,90,public NelderMeadSimplex(final double[] steps) {
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,91,"this(steps, DEFAULT_RHO, DEFAULT_KHI, DEFAULT_GAMMA, DEFAULT_SIGMA);"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,95,* Build a Nelder-Mead simplex with specified coefficients.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,97,* @param steps Steps along the canonical axes representing box edges.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,98,* They may be negative but not zero. See
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,99,* {@link AbstractSimplex#AbstractSimplex(double[])}.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,100,* @param rho Reflection coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,101,* @param khi Expansion coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,102,* @param gamma Contraction coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,103,* @param sigma Shrinkage coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,104,* @throws IllegalArgumentException if one of the steps is zero.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,106,"public NelderMeadSimplex(final double[] steps,"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,107,"final double rho, final double khi,"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,108,"final double gamma, final double sigma) {"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,109,super(steps);
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,111,this.rho = rho;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,112,this.khi = khi;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,113,this.gamma = gamma;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,114,this.sigma = sigma;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,118,* Build a Nelder-Mead simplex with default coefficients.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,119,"* The default coefficients are 1.0 for rho, 2.0 for khi and 0.5"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,120,* for both gamma and sigma.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,122,* @param referenceSimplex Reference simplex. See
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,123,* {@link AbstractSimplex#AbstractSimplex(double[][])}.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,125,public NelderMeadSimplex(final double[][] referenceSimplex) {
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,126,"this(referenceSimplex, DEFAULT_RHO, DEFAULT_KHI, DEFAULT_GAMMA, DEFAULT_SIGMA);"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,130,* Build a Nelder-Mead simplex with specified coefficients.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,132,* @param referenceSimplex Reference simplex. See
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,133,* {@link AbstractSimplex#AbstractSimplex(double[][])}.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,134,* @param rho Reflection coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,135,* @param khi Expansion coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,136,* @param gamma Contraction coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,137,* @param sigma Shrinkage coefficient.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,138,* @throws org.apache.commons.math.exception.NotStrictlyPositiveException
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,139,* if the reference simplex does not contain at least one point.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,140,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,141,* if there is a dimension mismatch in the reference simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,143,"public NelderMeadSimplex(final double[][] referenceSimplex,"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,144,"final double rho, final double khi,"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,145,"final double gamma, final double sigma) {"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,146,super(referenceSimplex);
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,148,this.rho = rho;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,149,this.khi = khi;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,150,this.gamma = gamma;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,151,this.sigma = sigma;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,154,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,155,@Override
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,156,"public void iterate(final MultivariateRealFunction evaluationFunction,"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,157,final Comparator<RealPointValuePair> comparator)
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,158,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,160,// The simplex has n + 1 points if dimension is n.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,161,final int n = getDimension();
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,163,// Interesting values.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,164,final RealPointValuePair best = getPoint(0);
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,165,final RealPointValuePair secondBest = getPoint(n - 1);
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,166,final RealPointValuePair worst = getPoint(n);
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,167,final double[] xWorst = worst.getPointRef();
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,169,// Compute the centroid of the best vertices (dismissing the worst
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,170,// point at index n).
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,171,final double[] centroid = new double[n];
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,172,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,173,final double[] x = getPoint(i).getPointRef();
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,174,for (int j = 0; j < n; j++) {
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,175,centroid[j] += x[j];
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,178,final double scaling = 1.0 / n;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,179,for (int j = 0; j < n; j++) {
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,180,centroid[j] *= scaling;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,183,// compute the reflection point
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,184,final double[] xR = new double[n];
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,185,for (int j = 0; j < n; j++) {
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,186,xR[j] = centroid[j] + rho * (centroid[j] - xWorst[j]);
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,188,final RealPointValuePair reflected
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,189,"= new RealPointValuePair(xR, evaluationFunction.value(xR), false);"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,191,"if (comparator.compare(best, reflected) <= 0 &&"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,192,"comparator.compare(reflected, secondBest) < 0) {"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,193,// Accept the reflected point.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,194,"replaceWorstPoint(reflected, comparator);"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,195,"} else if (comparator.compare(reflected, best) < 0) {"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,196,// Compute the expansion point.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,197,final double[] xE = new double[n];
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,198,for (int j = 0; j < n; j++) {
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,199,xE[j] = centroid[j] + khi * (xR[j] - centroid[j]);
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,201,final RealPointValuePair expanded
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,202,"= new RealPointValuePair(xE, evaluationFunction.value(xE), false);"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,204,"if (comparator.compare(expanded, reflected) < 0) {"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,205,// Accept the expansion point.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,206,"replaceWorstPoint(expanded, comparator);"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,207,} else {
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,208,// Accept the reflected point.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,209,"replaceWorstPoint(reflected, comparator);"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,211,} else {
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,212,"if (comparator.compare(reflected, worst) < 0) {"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,213,// Perform an outside contraction.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,214,final double[] xC = new double[n];
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,215,for (int j = 0; j < n; j++) {
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,216,xC[j] = centroid[j] + gamma * (xR[j] - centroid[j]);
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,218,final RealPointValuePair outContracted
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,219,"= new RealPointValuePair(xC, evaluationFunction.value(xC), false);"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,220,"if (comparator.compare(outContracted, reflected) <= 0) {"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,221,// Accept the contraction point.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,222,"replaceWorstPoint(outContracted, comparator);"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,223,return;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,225,} else {
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,226,// Perform an inside contraction.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,227,final double[] xC = new double[n];
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,228,for (int j = 0; j < n; j++) {
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,229,xC[j] = centroid[j] - gamma * (centroid[j] - xWorst[j]);
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,231,final RealPointValuePair inContracted
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,232,"= new RealPointValuePair(xC, evaluationFunction.value(xC), false);"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,234,"if (comparator.compare(inContracted, worst) < 0) {"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,235,// Accept the contraction point.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,236,"replaceWorstPoint(inContracted, comparator);"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,237,return;
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,241,// Perform a shrink.
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,242,final double[] xSmallest = getPoint(0).getPointRef();
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,243,for (int i = 1; i <= n; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,244,final double[] x = getPoint(i).getPoint();
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,245,for (int j = 0; j < n; j++) {
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,246,x[j] = xSmallest[j] + sigma * (x[j] - xSmallest[j]);
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,248,"setPoint(i, new RealPointValuePair(x, Double.NaN, false));"
True,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java,250,"evaluate(evaluationFunction, comparator);"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,18,package org.apache.commons.math.optimization.direct;
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,20,import java.util.Comparator;
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,22,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,23,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,24,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,25,import org.apache.commons.math.optimization.GoalType;
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,26,import org.apache.commons.math.optimization.ConvergenceChecker;
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,27,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,28,import org.apache.commons.math.optimization.SimpleScalarValueChecker;
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,31,* This class implements simplex-based direct search optimization.
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,33,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,34,"*  Direct search methods only use objective function values, they do"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,35,*  not need derivatives and don't either try to compute approximation
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,36,*  of the derivatives. According to a 1996 paper by Margaret H. Wright
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,37,"*  (<a href=""http://cm.bell-labs.com/cm/cs/doc/96/4-02.ps.gz"">Direct"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,38,"*  Search Methods: Once Scorned, Now Respectable</a>), they are used"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,39,*  when either the computation of the derivative is impossible (noisy
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,40,"*  functions, unpredictable discontinuities) or difficult (complexity,"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,41,"*  computation cost). In the first cases, rather than an optimum, a"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,42,"*  <em>not too bad</em> point is desired. In the latter cases, an"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,43,*  optimum is desired but cannot be reasonably found. In all cases
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,44,*  direct search methods can be useful.
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,45,* </p>
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,46,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,47,*  Simplex-based direct search methods are based on comparison of
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,48,*  the objective function values at the vertices of a simplex (which is a
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,49,*  set of n+1 points in dimension n) that is updated by the algorithms
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,50,*  steps.
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,51,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,52,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,53,*  The {@link #setSimplex(AbstractSimplex) setSimplex} method <em>must</em>
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,54,*  be called prior to calling the {@code optimize} method.
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,55,* </p>
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,56,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,57,"*  Each call to {@link #optimize(MultivariateRealFunction,GoalType,double[])"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,58,*  optimize} will re-use the start configuration of the current simplex and
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,59,*  move it such that its first vertex is at the provided start point of the
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,60,*  optimization. If the {@code optimize} method is called to solve a different
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,61,"*  problem and the number of parameters change, the simplex must be"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,62,*  re-initialized to one with the appropriate dimensions.
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,63,* </p>
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,64,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,65,"*  If {@link #setConvergenceChecker(ConvergenceChecker)} is not called,"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,66,*  a default {@link SimpleScalarValueChecker} is used.
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,67,* </p>
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,68,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,69,*  Convergence is checked by providing the <em>worst</em> points of
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,70,"*  previous and current simplex to the convergence checker, not the best"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,71,*  ones.
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,72,* </p>
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,74,* @see AbstractSimplex
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,75,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,76,* @since 3.0
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,78,public class SimplexOptimizer
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,79,extends BaseAbstractScalarOptimizer<MultivariateRealFunction> {
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,80,/** Simplex. */
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,81,private AbstractSimplex simplex;
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,84,* Default constructor.
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,86,public SimplexOptimizer() {
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,87,setConvergenceChecker(new SimpleScalarValueChecker());
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,91,* @param rel Relative threshold.
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,92,* @param abs Absolute threshold.
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,94,"public SimplexOptimizer(double rel, double abs) {"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,95,"setConvergenceChecker(new SimpleScalarValueChecker(rel, abs));"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,99,* Set the simplex algorithm.
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,101,* @param simplex Simplex.
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,103,public void setSimplex(AbstractSimplex simplex) {
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,104,this.simplex = simplex;
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,107,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,108,@Override
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,109,protected RealPointValuePair doOptimize()
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,110,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,111,if (simplex == null) {
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,112,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,115,"// Indirect call to ""computeObjectiveValue"" in order to update the"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,116,// evaluations counter.
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,117,final MultivariateRealFunction evalFunc
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,118,= new MultivariateRealFunction() {
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,119,public double value(double[] point)
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,120,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,121,return computeObjectiveValue(point);
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,125,final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,126,final Comparator<RealPointValuePair> comparator
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,127,= new Comparator<RealPointValuePair>() {
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,128,"public int compare(final RealPointValuePair o1,"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,129,final RealPointValuePair o2) {
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,130,final double v1 = o1.getValue();
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,131,final double v2 = o2.getValue();
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,132,"return isMinim ? Double.compare(v1, v2) : Double.compare(v2, v1);"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,136,// Initialize search.
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,137,simplex.build(getStartPoint());
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,138,"simplex.evaluate(evalFunc, comparator);"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,140,RealPointValuePair[] previous = null;
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,141,int iteration = 0;
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,142,final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,143,while (true) {
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,144,if (iteration > 0) {
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,145,boolean converged = true;
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,146,for (int i = 0; i < simplex.getSize(); i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,147,"converged &= checker.converged(iteration, previous[i], simplex.getPoint(i));"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,149,if (converged) {
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,150,// We have found an optimum.
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,151,return simplex.getPoint(0);
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,155,// We still need to search.
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,156,previous = simplex.getPoints();
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,157,"simplex.iterate(evalFunc, comparator);"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,158,++iteration;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,18,package org.apache.commons.math.optimization.direct;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,21,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,22,import org.apache.commons.math.optimization.GoalType;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,23,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,24,import org.apache.commons.math.optimization.SimpleScalarValueChecker;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,25,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,26,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,27,import org.junit.Test;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,29,public class SimplexOptimizerMultiDirectionalTest {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,30,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,31,public void testMinimizeMaximize() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,32,// the following function has 4 local extrema:
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,33,final double xM        = -3.841947088256863675365;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,34,final double yM        = -1.391745200270734924416;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,35,final double xP        =  0.2286682237349059125691;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,36,final double yP        = -yM;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,37,final double valueXmYm =  0.2373295333134216789769; // local  maximum
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,38,final double valueXmYp = -valueXmYm;                // local  minimum
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,39,final double valueXpYm = -0.7290400707055187115322; // global minimum
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,40,final double valueXpYp = -valueXpYm;                // global maximum
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,41,MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,42,private static final long serialVersionUID = -7039124064449091152L;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,43,public double value(double[] variables) throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,44,final double x = variables[0];
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,45,final double y = variables[1];
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,46,return ((x == 0) || (y == 0)) ? 0 :
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,47,(FastMath.atan(x) * FastMath.atan(x + 2) * FastMath.atan(y) * FastMath.atan(y) / (x * y));
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,51,"SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,52,optimizer.setMaxEvaluations(200);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,53,"optimizer.setSimplex(new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,54,RealPointValuePair optimum;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,56,// minimization
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,57,"optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { -3, 0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,58,"Assert.assertEquals(xM,        optimum.getPoint()[0], 4e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,59,"Assert.assertEquals(yP,        optimum.getPoint()[1], 3e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,60,"Assert.assertEquals(valueXmYp, optimum.getValue(),    8e-13);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,61,Assert.assertTrue(optimizer.getEvaluations() > 120);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,62,Assert.assertTrue(optimizer.getEvaluations() < 150);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,64,"optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { 1, 0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,65,"Assert.assertEquals(xP,        optimum.getPoint()[0], 2e-8);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,66,"Assert.assertEquals(yM,        optimum.getPoint()[1], 3e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,67,"Assert.assertEquals(valueXpYm, optimum.getValue(),    2e-12);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,68,Assert.assertTrue(optimizer.getEvaluations() > 120);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,69,Assert.assertTrue(optimizer.getEvaluations() < 150);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,71,// maximization
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,72,"optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { -3.0, 0.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,73,"Assert.assertEquals(xM,        optimum.getPoint()[0], 7e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,74,"Assert.assertEquals(yM,        optimum.getPoint()[1], 3e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,75,"Assert.assertEquals(valueXmYm, optimum.getValue(),    2e-14);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,76,Assert.assertTrue(optimizer.getEvaluations() > 120);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,77,Assert.assertTrue(optimizer.getEvaluations() < 150);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,79,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1e-15, 1e-30));"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,80,"optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { 1, 0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,81,"Assert.assertEquals(xP,        optimum.getPoint()[0], 2e-8);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,82,"Assert.assertEquals(yP,        optimum.getPoint()[1], 3e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,83,"Assert.assertEquals(valueXpYp, optimum.getValue(),    2e-12);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,84,Assert.assertTrue(optimizer.getEvaluations() > 180);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,85,Assert.assertTrue(optimizer.getEvaluations() < 220);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,88,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,89,public void testRosenbrock() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,90,MultivariateRealFunction rosenbrock =
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,91,new MultivariateRealFunction() {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,92,private static final long serialVersionUID = -9044950469615237490L;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,93,public double value(double[] x) throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,94,++count;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,95,double a = x[1] - x[0] * x[0];
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,96,double b = 1.0 - x[0];
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,97,return 100 * a * a + b * b;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,101,count = 0;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,102,"SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,103,optimizer.setMaxEvaluations(100);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,104,optimizer.setSimplex(new MultiDirectionalSimplex(new double[][] {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,105,"{ -1.2,  1.0 }, { 0.9, 1.2 } , {  3.5, -2.3 }"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,107,RealPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,108,"optimizer.optimize(rosenbrock, GoalType.MINIMIZE, new double[] { -1.2, 1 });"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,110,"Assert.assertEquals(count, optimizer.getEvaluations());"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,111,Assert.assertTrue(optimizer.getEvaluations() > 50);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,112,Assert.assertTrue(optimizer.getEvaluations() < 100);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,113,Assert.assertTrue(optimum.getValue() > 1e-2);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,116,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,117,public void testPowell() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,118,MultivariateRealFunction powell =
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,119,new MultivariateRealFunction() {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,120,private static final long serialVersionUID = -832162886102041840L;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,121,public double value(double[] x) throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,122,++count;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,123,double a = x[0] + 10 * x[1];
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,124,double b = x[2] - x[3];
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,125,double c = x[1] - 2 * x[2];
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,126,double d = x[0] - x[3];
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,127,return a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,131,count = 0;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,132,"SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,133,optimizer.setMaxEvaluations(1000);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,134,optimizer.setSimplex(new MultiDirectionalSimplex(4));
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,135,RealPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,136,"optimizer.optimize(powell, GoalType.MINIMIZE, new double[] { 3, -1, 0, 1 });"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,137,"Assert.assertEquals(count, optimizer.getEvaluations());"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,138,Assert.assertTrue(optimizer.getEvaluations() > 800);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,139,Assert.assertTrue(optimizer.getEvaluations() < 900);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,140,Assert.assertTrue(optimum.getValue() > 1e-2);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,143,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,144,public void testMath283() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,145,// fails because MultiDirectional.iterateSimplex is looping forever
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,146,// the while(true) should be replaced with a convergence check
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,147,SimplexOptimizer optimizer = new SimplexOptimizer();
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,148,optimizer.setMaxEvaluations(1000);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,149,optimizer.setSimplex(new MultiDirectionalSimplex(2));
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,150,"final Gaussian2D function = new Gaussian2D(0, 0, 1);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,151,"RealPointValuePair estimate = optimizer.optimize(function,"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,152,"GoalType.MAXIMIZE, function.getMaximumPosition());"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,153,final double EPSILON = 1e-5;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,154,final double expectedMaximum = function.getMaximum();
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,155,final double actualMaximum = estimate.getValue();
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,156,"Assert.assertEquals(expectedMaximum, actualMaximum, EPSILON);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,158,final double[] expectedPosition = function.getMaximumPosition();
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,159,final double[] actualPosition = estimate.getPoint();
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,160,"Assert.assertEquals(expectedPosition[0], actualPosition[0], EPSILON );"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,161,"Assert.assertEquals(expectedPosition[1], actualPosition[1], EPSILON );"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,164,private static class Gaussian2D implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,165,private final double[] maximumPosition;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,166,private final double std;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,168,"public Gaussian2D(double xOpt, double yOpt, double std) {"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,169,"maximumPosition = new double[] { xOpt, yOpt };"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,170,this.std = std;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,173,public double getMaximum() {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,174,return value(maximumPosition);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,177,public double[] getMaximumPosition() {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,178,return maximumPosition.clone();
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,181,public double value(double[] point) {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,182,"final double x = point[0], y = point[1];"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,183,final double twoS2 = 2.0 * std * std;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,184,return 1.0 / (twoS2 * FastMath.PI) * FastMath.exp(-(x * x + y * y) / twoS2);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java,188,private int count;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,18,package org.apache.commons.math.optimization.direct;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,20,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,21,import static org.junit.Assert.assertNotNull;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,22,import static org.junit.Assert.assertNull;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,23,import static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,24,import static org.junit.Assert.fail;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,26,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,27,import org.apache.commons.math.exception.TooManyEvaluationsException;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,28,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,29,import org.apache.commons.math.analysis.MultivariateVectorialFunction;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,30,import org.apache.commons.math.linear.Array2DRowRealMatrix;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,31,import org.apache.commons.math.linear.RealMatrix;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,32,import org.apache.commons.math.optimization.GoalType;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,33,import org.apache.commons.math.optimization.LeastSquaresConverter;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,34,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,35,import org.apache.commons.math.optimization.SimpleScalarValueChecker;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,36,import org.junit.Test;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,37,import org.junit.Ignore;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,39,public class SimplexOptimizerNelderMeadTest {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,40,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,41,public void testMinimizeMaximize()
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,42,throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,44,// the following function has 4 local extrema:
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,45,final double xM        = -3.841947088256863675365;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,46,final double yM        = -1.391745200270734924416;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,47,final double xP        =  0.2286682237349059125691;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,48,final double yP        = -yM;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,49,final double valueXmYm =  0.2373295333134216789769; // local  maximum
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,50,final double valueXmYp = -valueXmYm;                // local  minimum
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,51,final double valueXpYm = -0.7290400707055187115322; // global minimum
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,52,final double valueXpYp = -valueXpYm;                // global maximum
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,53,MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,54,private static final long serialVersionUID = -7039124064449091152L;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,55,public double value(double[] variables) throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,56,final double x = variables[0];
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,57,final double y = variables[1];
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,58,return (x == 0 || y == 0) ? 0 :
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,59,(Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,63,"SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,64,optimizer.setMaxEvaluations(100);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,65,"optimizer.setSimplex(new NelderMeadSimplex(new double[] { 0.2, 0.2 }));"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,66,RealPointValuePair optimum;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,68,// minimization
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,69,"optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { -3, 0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,70,"assertEquals(xM,        optimum.getPoint()[0], 2e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,71,"assertEquals(yP,        optimum.getPoint()[1], 2e-5);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,72,"assertEquals(valueXmYp, optimum.getValue(),    6e-12);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,73,assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,74,assertTrue(optimizer.getEvaluations() < 90);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,76,"optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { 1, 0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,77,"assertEquals(xP,        optimum.getPoint()[0], 5e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,78,"assertEquals(yM,        optimum.getPoint()[1], 6e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,79,"assertEquals(valueXpYm, optimum.getValue(),    1e-11);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,80,assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,81,assertTrue(optimizer.getEvaluations() < 90);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,83,// maximization
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,84,"optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { -3, 0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,85,"assertEquals(xM,        optimum.getPoint()[0], 1e-5);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,86,"assertEquals(yM,        optimum.getPoint()[1], 3e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,87,"assertEquals(valueXmYm, optimum.getValue(),    3e-12);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,88,assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,89,assertTrue(optimizer.getEvaluations() < 90);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,91,"optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { 1, 0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,92,"assertEquals(xP,        optimum.getPoint()[0], 4e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,93,"assertEquals(yP,        optimum.getPoint()[1], 5e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,94,"assertEquals(valueXpYp, optimum.getValue(),    7e-12);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,95,assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,96,assertTrue(optimizer.getEvaluations() < 90);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,99,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,100,public void testRosenbrock()
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,101,throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,103,Rosenbrock rosenbrock = new Rosenbrock();
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,104,"SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,105,optimizer.setMaxEvaluations(100);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,106,optimizer.setSimplex(new NelderMeadSimplex(new double[][] {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,107,"{ -1.2,  1 }, { 0.9, 1.2 } , {  3.5, -2.3 }"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,109,RealPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,110,"optimizer.optimize(rosenbrock, GoalType.MINIMIZE, new double[] { -1.2, 1 });"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,112,"assertEquals(rosenbrock.getCount(), optimizer.getEvaluations());"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,113,assertTrue(optimizer.getEvaluations() > 40);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,114,assertTrue(optimizer.getEvaluations() < 50);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,115,assertTrue(optimum.getValue() < 8e-4);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,118,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,119,public void testPowell()
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,120,throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,122,Powell powell = new Powell();
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,123,"SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,124,optimizer.setMaxEvaluations(200);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,125,optimizer.setSimplex(new NelderMeadSimplex(4));
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,126,RealPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,127,"optimizer.optimize(powell, GoalType.MINIMIZE, new double[] { 3, -1, 0, 1 });"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,128,"assertEquals(powell.getCount(), optimizer.getEvaluations());"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,129,assertTrue(optimizer.getEvaluations() > 110);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,130,assertTrue(optimizer.getEvaluations() < 130);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,131,assertTrue(optimum.getValue() < 2e-3);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,134,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,135,public void testLeastSquares1()
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,136,throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,138,final RealMatrix factors =
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,139,new Array2DRowRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,140,"{ 1, 0 },"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,141,"{ 0, 1 }"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,142,"}, false);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,143,LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorialFunction() {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,144,public double[] value(double[] variables) {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,145,return factors.operate(variables);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,147,"}, new double[] { 2.0, -3.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,148,"SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,149,optimizer.setMaxEvaluations(200);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,150,optimizer.setSimplex(new NelderMeadSimplex(2));
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,151,RealPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,152,"optimizer.optimize(ls, GoalType.MINIMIZE, new double[] { 10, 10 });"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,153,"assertEquals( 2, optimum.getPointRef()[0], 3e-5);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,154,"assertEquals(-3, optimum.getPointRef()[1], 4e-4);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,155,assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,156,assertTrue(optimizer.getEvaluations() < 80);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,157,assertTrue(optimum.getValue() < 1.0e-6);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,160,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,161,public void testLeastSquares2()
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,162,throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,164,final RealMatrix factors =
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,165,new Array2DRowRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,166,"{ 1, 0 },"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,167,"{ 0, 1 }"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,168,"}, false);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,169,LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorialFunction() {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,170,public double[] value(double[] variables) {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,171,return factors.operate(variables);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,173,"}, new double[] { 2, -3 }, new double[] { 10, 0.1 });"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,174,"SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,175,optimizer.setMaxEvaluations(200);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,176,optimizer.setSimplex(new NelderMeadSimplex(2));
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,177,RealPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,178,"optimizer.optimize(ls, GoalType.MINIMIZE, new double[] { 10, 10 });"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,179,"assertEquals( 2, optimum.getPointRef()[0], 5e-5);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,180,"assertEquals(-3, optimum.getPointRef()[1], 8e-4);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,181,assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,182,assertTrue(optimizer.getEvaluations() < 80);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,183,assertTrue(optimum.getValue() < 1e-6);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,186,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,187,public void testLeastSquares3()
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,188,throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,190,final RealMatrix factors =
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,191,new Array2DRowRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,192,"{ 1, 0 },"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,193,"{ 0, 1 }"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,194,"}, false);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,195,LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorialFunction() {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,196,public double[] value(double[] variables) {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,197,return factors.operate(variables);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,199,"}, new double[] { 2, -3 }, new Array2DRowRealMatrix(new double [][] {"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,200,"{ 1, 1.2 }, { 1.2, 2 }"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,202,"SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,203,optimizer.setMaxEvaluations(200);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,204,optimizer.setSimplex(new NelderMeadSimplex(2));
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,205,RealPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,206,"optimizer.optimize(ls, GoalType.MINIMIZE, new double[] { 10, 10 });"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,207,"assertEquals( 2, optimum.getPointRef()[0], 2e-3);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,208,"assertEquals(-3, optimum.getPointRef()[1], 8e-4);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,209,assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,210,assertTrue(optimizer.getEvaluations() < 80);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,211,assertTrue(optimum.getValue() < 1e-6);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,214,@Test(expected = TooManyEvaluationsException.class)
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,215,public void testMaxIterations() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,216,Powell powell = new Powell();
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,217,"SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,218,optimizer.setMaxEvaluations(20);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,219,optimizer.setSimplex(new NelderMeadSimplex(4));
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,220,"optimizer.optimize(powell, GoalType.MINIMIZE, new double[] { 3, -1, 0, 1 });"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,223,private static class Rosenbrock implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,224,private int count;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,226,public Rosenbrock() {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,227,count = 0;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,230,public double value(double[] x) throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,231,++count;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,232,double a = x[1] - x[0] * x[0];
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,233,double b = 1.0 - x[0];
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,234,return 100 * a * a + b * b;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,237,public int getCount() {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,238,return count;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,242,private static class Powell implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,243,private int count;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,245,public Powell() {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,246,count = 0;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,249,public double value(double[] x) throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,250,++count;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,251,double a = x[0] + 10 * x[1];
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,252,double b = x[2] - x[3];
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,253,double c = x[1] - 2 * x[2];
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,254,double d = x[0] - x[3];
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,255,return a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,258,public int getCount() {
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,259,return count;

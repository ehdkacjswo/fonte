is_addition,old_file_path,new_file_path,line_num,content
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,176,"hrow MathRuntimeException.createIllegalArgumentException(""wrong array size (got {0}, expected {1})"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,177,ew Object[] {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,178,"ata.length,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,179,xpectedLength
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,176,throw MathRuntimeException.createIllegalArgumentException(
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,177,"""wrong array size (got {0}, expected {1})"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,178,"data.length, expectedLength);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,225,"ew Object[] { columns, length });"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,223,"columns, length);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1031,"hrow MathRuntimeException.createIllegalArgumentException(""some rows have length {0} while others have length {1}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1032,ew Object[] {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1033,"efLength, subRow.length"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1029,throw MathRuntimeException.createIllegalArgumentException(
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1030,"""some rows have length {0} while others have length {1}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1031,"refLength, subRow.length);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1121,"hrow new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1122,ew Object[] {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1123,"atrix.getRowDimension(),"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1124,"atrix.getColumnDimension(),"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1125,", nCols"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1118,throw new InvalidMatrixException(
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1119,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1120,"matrix.getRowDimension(), matrix.getColumnDimension(),"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1121,"1, nCols);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1199,"hrow new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1200,ew Object[] {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1201,"atrix.getRowDimension(),"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1202,"atrix.getColumnDimension(),"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1203,"Rows, 1"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1194,throw new InvalidMatrixException(
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1195,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1196,"matrix.getRowDimension(), matrix.getColumnDimension(),"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1197,"nRows, 1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1232,"hrow new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1233,ew Object[] {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1234,", vector.getDimension(),"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1235,", columns"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1225,throw new InvalidMatrixException(
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1226,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1227,"1, vector.getDimension(), 1, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1263,"hrow new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1264,ew Object[] {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1265,"ector.getDimension(), 1,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1266,"ows, 1"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1254,throw new InvalidMatrixException(
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1255,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1256,"vector.getDimension(), 1, rows, 1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1314,"hrow new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1315,ew Object[] {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1316,", array.length,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1317,", columns"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1303,throw new InvalidMatrixException(
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1304,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1305,"1, array.length, 1, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1365,"hrow new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1366,ew Object[] {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1367,"rray.length, 1,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1368,"ows, 1"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1352,throw new InvalidMatrixException(
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1353,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1354,"array.length, 1, rows, 1);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1391,"hrow new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1392,ew Object[] {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1393,"ow, column,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1394,"etRowDimension(), getColumnDimension()"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1376,throw new MatrixIndexException(
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1377,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1378,"row, column, getRowDimension(), getColumnDimension());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1404,"hrow new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1405,ew Object[] {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1406,"ow, column,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1407,"etRowDimension(), getColumnDimension()"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1387,throw new MatrixIndexException(
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1388,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1389,"row, column, getRowDimension(), getColumnDimension());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1417,"hrow new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1418,ew Object[] {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1419,"ow, column,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1420,"etRowDimension(), getColumnDimension()"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1398,throw new MatrixIndexException(
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1399,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1400,"row, column, getRowDimension(), getColumnDimension());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1430,"hrow new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1431,ew Object[] {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1432,"ow, column,"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1433,"etRowDimension(), getColumnDimension()"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1409,throw new MatrixIndexException(
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1410,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1411,"row, column, getRowDimension(), getColumnDimension());"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1489,"hrow MathRuntimeException.createIllegalArgumentException(""vector length mismatch:"" +"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1490," got {0} but expected {1}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1491,ew Object[] {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1492,".length, columns"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1466,throw MathRuntimeException.createIllegalArgumentException(
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1467,"""vector length mismatch: got {0} but expected {1}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1468,"v.length, columns);"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1534,"hrow MathRuntimeException.createIllegalArgumentException(""vector length mismatch:"" +"
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1535," got {0} but expected {1}"","
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1536,ew Object[] {
False,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1537,".length, rows"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1509,throw MathRuntimeException.createIllegalArgumentException(
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1510,"""vector length mismatch: got {0} but expected {1}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1511,"v.length, rows);"
False,src/java/org/apache/commons/math/ArgumentOutsideDomainException.java,src/java/org/apache/commons/math/ArgumentOutsideDomainException.java,40,"Argument {0} outside domain [{1} ; {2}]"","
False,src/java/org/apache/commons/math/ArgumentOutsideDomainException.java,src/java/org/apache/commons/math/ArgumentOutsideDomainException.java,41,"ew Object[] { Double.valueOf(argument), Double.valueOf(lower), Double.valueOf(upper) });"
True,src/java/org/apache/commons/math/ArgumentOutsideDomainException.java,src/java/org/apache/commons/math/ArgumentOutsideDomainException.java,40,"""Argument {0} outside domain [{1} ; {2}]"", argument, lower, upper);"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,28,rivate static final long serialVersionUID = 4380655778005469702L;
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,28,private static final long serialVersionUID = 4883703247677159141L;
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,34,"uper(""Convergence failed"", null);"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,34,"super(""Convergence failed"");"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,44,"ublic ConvergenceException(String pattern, Object[] arguments) {"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,44,"public ConvergenceException(String pattern, Object ... arguments) {"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,59,* @param cause  the exception or error that caused this exception to be thrown
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,61, @param cause  the exception or error that caused this exception to be thrown
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,64,"ublic ConvergenceException(String pattern, Object[] arguments, Throwable cause) {"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,65,"uper(pattern, arguments, cause);"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,64,"public ConvergenceException(Throwable cause, String pattern, Object ... arguments) {"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,65,"super(cause, pattern, arguments);"
False,src/java/org/apache/commons/math/DimensionMismatchException.java,src/java/org/apache/commons/math/DimensionMismatchException.java,36,"uper(""dimension mismatch {0} != {1}"","
False,src/java/org/apache/commons/math/DimensionMismatchException.java,src/java/org/apache/commons/math/DimensionMismatchException.java,37,ew Object[] {
False,src/java/org/apache/commons/math/DimensionMismatchException.java,src/java/org/apache/commons/math/DimensionMismatchException.java,38,"nteger.valueOf(dimension1), Integer.valueOf(dimension2)"
True,src/java/org/apache/commons/math/DimensionMismatchException.java,src/java/org/apache/commons/math/DimensionMismatchException.java,36,"super(""dimension mismatch {0} != {1}"", dimension1, dimension2);"
False,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,38,"ew Object[] { Double.valueOf(abscissa), Integer.valueOf(i1), Integer.valueOf(i2) });"
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,38,"abscissa, i1, i2);"
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,30,rivate static final long serialVersionUID = -2193260774031645876L;
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,30,private static final long serialVersionUID = -7267500407292949362L;
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,42,"uper(""Evaluation failed for argument = {0}"","
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,43,ew Object[] { Double.valueOf(argument) });
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,42,"super(""Evaluation failed for argument = {0}"", Double.valueOf(argument));"
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,56,"tring pattern, Object[] arguments) {"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,55,"String pattern, Object ... arguments) {"
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,64, @param argument  the failing function argument
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,64,* @param argument  the failing function argument
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,68,"ublic FunctionEvaluationException(double argument, Throwable cause) {"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,67,"public FunctionEvaluationException(Throwable cause, double argument) {"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,75,* @param cause  the exception or error that caused this exception to be thrown
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,79, @param cause  the exception or error that caused this exception to be thrown
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,82,"ublic FunctionEvaluationException(double argument,"
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,83,"tring pattern, Object[] arguments,"
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,84,hrowable cause) {
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,85,"uper(pattern, arguments, cause);"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,81,"public FunctionEvaluationException(Throwable cause,"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,82,"double argument, String pattern,"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,83,Object ... arguments) {
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,84,"super(cause, pattern, arguments);"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,44,"ublic MathConfigurationException(String pattern, Object[] arguments) {"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,44,"public MathConfigurationException(String pattern, Object ... arguments) {"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,59,* @param cause  the exception or error that caused this exception to be thrown
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,61, @param cause  the exception or error that caused this exception to be thrown
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,64,"ublic MathConfigurationException(String pattern, Object[] arguments, Throwable cause) {"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,65,"uper(pattern, arguments, cause);"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,64,"public MathConfigurationException(Throwable cause, String pattern, Object ... arguments) {"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,65,"super(cause, pattern, arguments);"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,39,rivate static final long serialVersionUID = 5924076008552401454L;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,39,private static final long serialVersionUID = -2803873247432645339L;
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,86,* @param locale Locale in which the message should be translated
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,88, @param locale Locale in which the message should be translated
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,91,"rivate static String buildMessage(String pattern, Object[] arguments, Locale locale) {"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,91,"private static String buildMessage(Locale locale, String pattern, Object ... arguments) {"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,112,"ublic MathException(String pattern, Object[] arguments) {"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,113,"uper(buildMessage(pattern, arguments, Locale.US));"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,112,"public MathException(String pattern, Object ... arguments) {"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,113,"super(buildMessage(Locale.US, pattern, arguments));"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,135, @param pattern format specifier
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,136, @param arguments format arguments
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,137,* @param pattern format specifier
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,138,* @param arguments format arguments
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,141,"ublic MathException(String pattern, Object[] arguments, Throwable rootCause) {"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,142,"uper(buildMessage(pattern, arguments, Locale.US), rootCause);"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,141,"public MathException(Throwable rootCause, String pattern, Object ... arguments) {"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,142,"super(buildMessage(Locale.US, pattern, arguments), rootCause);"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,173,"eturn buildMessage(pattern, arguments, locale);"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,173,"return buildMessage(locale, pattern, arguments);"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,40,rivate static final long serialVersionUID = -143052521750625264L;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,40,private static final long serialVersionUID = 4184290229453587356L;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,87,* @param locale Locale in which the message should be translated
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,89, @param locale Locale in which the message should be translated
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,92,"rivate static String buildMessage(final String pattern, final Object[] arguments,"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,93,inal Locale locale) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,92,"private static String buildMessage(final Locale locale, final String pattern,"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,93,final Object ... arguments) {
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,104,"ublic MathRuntimeException(final String pattern, final Object[] arguments) {"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,105,"uper(buildMessage(pattern, arguments, Locale.US));"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,104,"public MathRuntimeException(final String pattern, final Object ... arguments) {"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,105,"super(buildMessage(Locale.US, pattern, arguments));"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,127, @param pattern format specifier
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,128, @param arguments format arguments
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,129,* @param pattern format specifier
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,130,* @param arguments format arguments
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,132,"ublic MathRuntimeException(final String pattern, final Object[] arguments,"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,133,inal Throwable rootCause) {
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,134,"uper(buildMessage(pattern, arguments, Locale.US), rootCause);"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,132,"public MathRuntimeException(final Throwable rootCause,"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,133,"final String pattern, final Object ... arguments) {"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,134,"super(buildMessage(Locale.US, pattern, arguments), rootCause);"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,162,"eturn buildMessage(pattern, arguments, locale);"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,162,"return buildMessage(locale, pattern, arguments);"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,199,inal Object[] arguments) {
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,200,"eturn new ArithmeticException(buildMessage(pattern, arguments, Locale.US)) {"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,199,final Object ... arguments) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,200,"return new ArithmeticException(buildMessage(Locale.US, pattern, arguments)) {"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,207,"eturn buildMessage(pattern, arguments, Locale.getDefault());"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,207,"return buildMessage(Locale.getDefault(), pattern, arguments);"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,221,inal Object[] arguments) {
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,222,"eturn new ArrayIndexOutOfBoundsException(buildMessage(pattern, arguments, Locale.US)) {"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,221,final Object ... arguments) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,222,"return new ArrayIndexOutOfBoundsException(buildMessage(Locale.US, pattern, arguments)) {"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,225,rivate static final long serialVersionUID = 8077627622976962141L;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,225,private static final long serialVersionUID = -3394748305449283486L;
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,229,"eturn buildMessage(pattern, arguments, Locale.getDefault());"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,229,"return buildMessage(Locale.getDefault(), pattern, arguments);"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,243,inal Object[] arguments) {
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,244,"eturn new EOFException(buildMessage(pattern, arguments, Locale.US)) {"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,243,final Object ... arguments) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,244,"return new EOFException(buildMessage(Locale.US, pattern, arguments)) {"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,251,"eturn buildMessage(pattern, arguments, Locale.getDefault());"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,251,"return buildMessage(Locale.getDefault(), pattern, arguments);"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,282,inal Object[] arguments) {
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,283,"eturn new IllegalArgumentException(buildMessage(pattern, arguments, Locale.US)) {"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,282,final Object ... arguments) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,283,"return new IllegalArgumentException(buildMessage(Locale.US, pattern, arguments)) {"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,286,rivate static final long serialVersionUID = -7537852425838457684L;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,286,private static final long serialVersionUID = -6555453980658317913L;
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,290,"eturn buildMessage(pattern, arguments, Locale.getDefault());"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,290,"return buildMessage(Locale.getDefault(), pattern, arguments);"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,304,inal Object[] arguments) {
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,305,"eturn new IllegalStateException(buildMessage(pattern, arguments, Locale.US)) {"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,304,final Object ... arguments) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,305,"return new IllegalStateException(buildMessage(Locale.US, pattern, arguments)) {"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,308,rivate static final long serialVersionUID = 5173599768297434381L;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,308,private static final long serialVersionUID = -95247648156277208L;
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,312,"eturn buildMessage(pattern, arguments, Locale.getDefault());"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,312,"return buildMessage(Locale.getDefault(), pattern, arguments);"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,326,inal Object[] arguments) {
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,327,"eturn new ConcurrentModificationException(buildMessage(pattern, arguments, Locale.US)) {"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,326,final Object ... arguments) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,327,"return new ConcurrentModificationException(buildMessage(Locale.US, pattern, arguments)) {"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,334,"eturn buildMessage(pattern, arguments, Locale.getDefault());"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,334,"return buildMessage(Locale.getDefault(), pattern, arguments);"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,348,inal Object[] arguments) {
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,349,"eturn new NoSuchElementException(buildMessage(pattern, arguments, Locale.US)) {"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,348,final Object ... arguments) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,349,"return new NoSuchElementException(buildMessage(Locale.US, pattern, arguments)) {"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,356,"eturn buildMessage(pattern, arguments, Locale.getDefault());"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,356,"return buildMessage(Locale.getDefault(), pattern, arguments);"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,366,* @param offset offset at which error occurred
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,368, @param offset offset at which error occurred
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,371,"ublic static ParseException createParseException(final String pattern,"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,372,"inal Object[] arguments,"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,373,inal int offset) {
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,374,"eturn new ParseException(buildMessage(pattern, arguments, Locale.US), offset) {"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,371,"public static ParseException createParseException(final int offset,"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,372,"final String pattern,"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,373,final Object ... arguments) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,374,"return new ParseException(buildMessage(Locale.US, pattern, arguments), offset) {"
False,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,381,"eturn buildMessage(pattern, arguments, Locale.getDefault());"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,381,"return buildMessage(Locale.getDefault(), pattern, arguments);"
False,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,32,rivate static final long serialVersionUID = -2154780004193976271L;
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,32,private static final long serialVersionUID = -7821226672760574694L;
False,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,35,rivate int maxIterations;
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,35,private final int maxIterations;
False,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,42,ublic MaxIterationsExceededException(int maxIterations) {
False,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,43,"uper(""Maximal number of iterations ({0}) exceeded"","
False,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,44,ew Object[] { Integer.valueOf(maxIterations) });
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,42,public MaxIterationsExceededException(final int maxIterations) {
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,43,"super(""Maximal number of iterations ({0}) exceeded"", maxIterations);"
False,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,55,"ublic MaxIterationsExceededException(int maxIterations,"
False,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,56,"tring pattern, Object[] arguments) {"
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,54,"public MaxIterationsExceededException(final int maxIterations,"
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,55,"final String pattern, final Object ... arguments) {"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,287,"{ ""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,288,"""lead to a never ending loop of expansion and contraction as a newly expanded "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,289,"""internal storage array would immediately satisfy the criteria for contraction."","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,290,"""crit\u00e8re de contraction ({0}) inf\u00e9rieur au facteur d''extension. Ceci "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,291,"""induit une boucle infinie d''extensions/contractions car tout tableau de stockage "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,292,"""fra\u00eechement \u00e9tendu respecte imm\u00e9diatement le crit\u00e8re de contraction.""},"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,293,"{ ""contraction criteria smaller than one ({0}).  This would lead to a never ending "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,294,"""loop of expansion and contraction as an internal storage array length equal "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,295,"""to the number of elements would satisfy the contraction criteria."","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,296,"""crit\u00e8re de contraction inf\u00e9rieur \u00e0 un ({0}). Ceci induit une boucle "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,297,"""infinie d''extensions/contractions car tout tableau de stockage de longueur \u00e9gale "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,298,"""au nombre d''\u00e9l\u00e9ments respecte le crit\u00e8re de contraction."" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,299,"{ ""expansion factor smaller than one ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,300,"""facteur d''extension inf\u00e9rieur \u00e0 un ({0})""},"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,301,"{ ""cannot discard {0} elements from a {1} elements array"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,302,"""impossible d''enlever {0} \u00e9l\u00e9ments d''un tableau en contenant {1}""},"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,303,"{ ""cannot discard a negative number of elements ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,304,"""impossible d''enlever un nombre d''\u00e9l\u00e9ments{0} n\u00e9gatif""},"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,305,"{ ""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,306,"""mode d''extension {0} no support\u00e9, les modes support\u00e9s sont {1} ({2}) et {3} ({4})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,307,"{ ""initial capacity ({0}) is not positive"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,308,"""la capacit\u00e9 initiale ({0}) n''est pas positive"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,309,"{ ""index ({0}) is not positive"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,310,"""l''indice ({0}) n''est pas positif"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,392,// org.apache.commons.math.stat.correlation.Covariance
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,393,"{ ""arrays must have the same length and both must have at "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,394,"""least two elements. xArray has size {0}, yArray has {1} elements"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,395,"""les tableaux doivent avoir la m\u00eame taille et comporter au moins deux \u00e9l\u00e9ments. "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,396,"""xArray a une taille de {0}, yArray a {1} \u00e9l\u00e9ments""},"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,397,"{ ""insufficient data: only {0} rows and {1} columns."","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,398,"""donn\u00e9es insuffisantes : seulement {0} lignes et {1} colonnes."" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,400,// org.apache.commons.math.stat.correlation.PearsonsCorrelation
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,401,"{ ""covariance matrix is null"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,402,"""la matrice de covariance est nulle"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,403,"{ ""invalid array dimensions. xArray has size {0}; yArray has {1} elements"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,404,"""dimensions de tableaux invalides. xArray a une taille de {0}, yArray a {1} \u00e9l\u00e9ments"" },"
False,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,153,"ew Object[] { n, 2, 5 });"
True,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,153,"n, 2, 5);"
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,115,"ew Object[] { 0, 32 });"
True,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,115,"0, 32);"
False,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,114,"ew Object[] { 0, 64 });"
True,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,114,"0, 64);"
False,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,147,"ew Object[] { 0, 64 });"
True,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,147,"0, 64);"
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,111,"hrow MathRuntimeException.createIllegalStateException(""no result available"", null);"
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,111,"throw MathRuntimeException.createIllegalStateException(""no result available"");"
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,162,"ew Object[] { lower, upper });"
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,162,"lower, upper);"
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,175,"ew Object[] { minimalIterationCount, maximalIterationCount });"
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,175,"minimalIterationCount, maximalIterationCount);"
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,63,"hrow MathRuntimeException.createIllegalStateException(""no result available"", null);"
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,63,"throw MathRuntimeException.createIllegalStateException(""no result available"");"
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,94,"hrow new FunctionEvaluationException(z, e.getPattern(), e.getArguments(), e);"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,94,"throw new FunctionEvaluationException(e, z, e.getPattern(), e.getArguments());"
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,261,ew Object[] {
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,262,", k, x[i]"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,261,"i, k, x[i]);"
False,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,181,"ew Object[] { min, max, yMin, yMax });"
True,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,181,"min, max, yMin, yMax);"
False,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,67,"hrow MathRuntimeException.createIllegalArgumentException(""function is not polynomial"", null);"
True,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,67,"throw MathRuntimeException.createIllegalArgumentException(""function is not polynomial"");"
False,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,163,"hrow MathRuntimeException.createIllegalArgumentException(""function is not polynomial"", null);"
True,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,163,"throw MathRuntimeException.createIllegalArgumentException(""function is not polynomial"");"
False,src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,135,"hrow MathRuntimeException.createIllegalArgumentException(""function is not differentiable"","
False,src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,136,ull);
True,src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,135,"throw MathRuntimeException.createIllegalArgumentException(""function is not differentiable"");"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,79,"hrow MathRuntimeException.createIllegalArgumentException(""function to solve cannot be null"","
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,80,ull);
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,79,"throw MathRuntimeException.createIllegalArgumentException(""function to solve cannot be null"");"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,107,"hrow MathRuntimeException.createIllegalStateException(""no result available"", null);"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,106,"throw MathRuntimeException.createIllegalStateException(""no result available"");"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,215,"ew Object[] { lower, upper });"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,214,"lower, upper);"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,232,"ew Object[] { lower, initial, upper });"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,231,"lower, initial, upper);"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,256,"ew Object[] { lower, upper, f.value(lower), f.value(upper) });"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,255,"lower, upper, f.value(lower), f.value(upper));"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,203,"ew Object[] { Integer.valueOf(numIterations), Integer.valueOf(maximumIterations),"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,204,"ouble.valueOf(initial), Double.valueOf(lowerBound), Double.valueOf(upperBound),"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,205,"ouble.valueOf(a), Double.valueOf(b), Double.valueOf(fa), Double.valueOf(fb) });"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,203,"numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb);"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,908,"hrow MathRuntimeException.createIllegalArgumentException(""cannot compute nth root for null or negative n: {0}"","
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,909,ew Object[] { n });
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,908,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,909,"""cannot compute nth root for null or negative n: {0}"","
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,910,n);
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,254,"hrow MathRuntimeException.createParseException(""unparseable complex number: \""{0}\"""","
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,255,"ew Object[] { source },"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,256,arsePosition.getErrorIndex());
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,254,throw MathRuntimeException.createParseException(
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,255,"parsePosition.getErrorIndex(),"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,256,"""unparseable complex number: \""{0}\"""", source);"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,74,"hrow new FunctionEvaluationException(x, ex.getPattern(), ex.getArguments(), ex);"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,74,"throw new FunctionEvaluationException(ex, x, ex.getPattern(), ex.getArguments());"
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,101,"hrow new MathException(""Cannot compute beta density at 0 when alpha = {0,number}"", new Double[]{alpha});"
True,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,101,"throw new MathException(""Cannot compute beta density at 0 when alpha = {0,number}"", alpha);"
False,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,106,"hrow new MathException(""Cannot compute beta density at 1 when beta = %.3g"", new Double[]{beta});"
True,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,106,"throw new MathException(""Cannot compute beta density at 1 when beta = %.3g"", beta);"
False,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,76,"hrow MathRuntimeException.createIllegalArgumentException(""invalid number of elements {0}"" +"
False,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,77," (must be positive)"","
False,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,78,ew Object[] { n });
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,76,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,77,"""invalid number of elements {0} (must be positive)"","
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,78,n);
False,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,103,"hrow MathRuntimeException.createIllegalArgumentException(""invalid exponent {0} (must be positive)"","
False,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,104,ew Object[] { s });
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,103,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,104,"""invalid exponent {0} (must be positive)"","
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,105,s);
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,109,ew Object[] { Integer.valueOf(maxCostEval) });
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,109,maxCostEval);
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,194,"hrow new EstimationException(""unable to compute covariances: singular problem"","
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,195,ull);
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,194,"throw new EstimationException(""unable to compute covariances: singular problem"");"
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,214,"hrow new EstimationException(""no degrees of freedom ({0} measurements, {1} parameters)"","
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,215,"ew Object[] { Integer.valueOf(m), Integer.valueOf(p)});"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,213,throw new EstimationException(
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,214,"""no degrees of freedom ({0} measurements, {1} parameters)"","
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,215,"m, p);"
False,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,42,"ublic EstimationException(String specifier, Object[] parts) {"
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,42,"public EstimationException(String specifier, Object ... parts) {"
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,213,"hrow new EstimationException(""unable to solve: singular problem"", null);"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,213,"throw new EstimationException(""unable to solve: singular problem"");"
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,403,ew Object[] { Double.valueOf(costRelativeTolerance) });
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,403,costRelativeTolerance);
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,408,ew Object[] { Double.valueOf(parRelativeTolerance) });
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,408,parRelativeTolerance);
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,412,ew Object[] { Double.valueOf(orthoTolerance) });
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,412,orthoTolerance);
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,764,"hrow new EstimationException(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix"","
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,765,"ew Object[] { Integer.valueOf(rows), Integer.valueOf(cols) });"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,764,throw new EstimationException(
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,765,"""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix"","
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,766,"rows, cols);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,212,"ew Object[] { num, den});"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,212,"num, den);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,217,"ew Object[] { num, den});"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,217,"num, den);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,374,"ew Object[] { numerator, denominator});"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,374,"numerator, denominator);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,465,ew Object[] { w });
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,465,w);
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,513,"hrow MathRuntimeException.createArithmeticException(""the fraction to divide by must not be zero: {0}/{1}"","
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,514,"ew Object[] { fraction.numerator, fraction.denominator });"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,513,throw MathRuntimeException.createArithmeticException(
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,514,"""the fraction to divide by must not be zero: {0}/{1}"","
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,515,"fraction.numerator, fraction.denominator);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,532,"hrow MathRuntimeException.createArithmeticException(""zero denominator in fraction {0}/{1}"","
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,533,"ew Object[] { numerator, denominator});"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,533,throw MathRuntimeException.createArithmeticException(
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,534,"""zero denominator in fraction {0}/{1}"","
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,535,"numerator, denominator);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,545,"hrow MathRuntimeException.createArithmeticException(""overflow in fraction {0}/{1}, cannot negate"","
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,546,"ew Object[] { numerator, denominator});"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,547,throw MathRuntimeException.createArithmeticException(
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,548,"""overflow in fraction {0}/{1}, cannot negate"","
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,549,"numerator, denominator);"
False,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,41,"uper(""Unable to convert {0} to fraction after {1} iterations"","
False,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,42,"ew Object[] { Double.valueOf(value), Integer.valueOf(maxIterations) });"
True,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,41,"super(""Unable to convert {0} to fraction after {1} iterations"", value, maxIterations);"
False,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,53,"uper(""Overflow trying to convert {0} to fraction ({1}/{2})"","
False,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,54,"ew Object[] { Double.valueOf(value), Long.valueOf(p), Long.valueOf(q) });"
True,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,52,"super(""Overflow trying to convert {0} to fraction ({1}/{2})"", value, p, q);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,247,"hrow MathRuntimeException.createParseException(""unparseable fraction number: \""{0}\"""","
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,248,"ew Object[] { source },"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,249,arsePosition.getErrorIndex());
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,247,throw MathRuntimeException.createParseException(
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,248,"parsePosition.getErrorIndex(),"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,249,"""unparseable fraction number: \""{0}\"""", source);"
False,src/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java,src/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java,38,"uper(isCardan ? ""Cardan angles singularity"" : ""Euler angles singularity"", null);"
True,src/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java,src/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java,38,"super(isCardan ? ""Cardan angles singularity"" : ""Euler angles singularity"");"
False,src/java/org/apache/commons/math/geometry/NotARotationMatrixException.java,src/java/org/apache/commons/math/geometry/NotARotationMatrixException.java,39,"ublic NotARotationMatrixException(String specifier, Object[] parts) {"
True,src/java/org/apache/commons/math/geometry/NotARotationMatrixException.java,src/java/org/apache/commons/math/geometry/NotARotationMatrixException.java,39,"public NotARotationMatrixException(String specifier, Object ... parts) {"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,159,"hrow MathRuntimeException.createArithmeticException(""zero norm for rotation axis"","
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,160,ull);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,159,"throw MathRuntimeException.createArithmeticException(""zero norm for rotation axis"");"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,209,"hrow new NotARotationMatrixException(""a {0}x{1} matrix"" +"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,210," cannot be a rotation matrix"","
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,211,ew Object[] {
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,212,"nteger.toString(m.length),"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,213,nteger.toString(m[0].length)
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,208,throw new NotARotationMatrixException(
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,209,"""a {0}x{1} matrix cannot be a rotation matrix"","
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,210,"m.length, m[0].length);"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,225,"hrow new NotARotationMatrixException(""the closest orthogonal matrix"" +"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,226," has a negative determinant {0}"","
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,227,ew Object[] {
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,228,ouble.toString(det)
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,221,throw new NotARotationMatrixException(
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,222,"""the closest orthogonal matrix has a negative determinant {0}"","
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,223,det);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1025,"hrow new NotARotationMatrixException(""unable to orthogonalize matrix"" +"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1026," in {0} iterations"","
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1027,ew Object[] {
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1028,nteger.toString(i - 1)
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1019,throw new NotARotationMatrixException(
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1020,"""unable to orthogonalize matrix in {0} iterations"","
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1021,i - 1);
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,270,"hrow MathRuntimeException.createArithmeticException(""cannot normalize a zero norm vector"","
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,271,ull);
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,270,"throw MathRuntimeException.createArithmeticException(""cannot normalize a zero norm vector"");"
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,295,"hrow MathRuntimeException.createArithmeticException(""zero norm"", null);"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,294,"throw MathRuntimeException.createArithmeticException(""zero norm"");"
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,325,"hrow MathRuntimeException.createArithmeticException(""zero norm"", null);"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,324,"throw MathRuntimeException.createArithmeticException(""zero norm"");"
False,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,258,"hrow MathRuntimeException.createParseException(""unparseable 3D vector: \""{0}\"""","
False,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,259,"ew Object[] { source },"
False,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,260,arsePosition.getErrorIndex());
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,258,throw MathRuntimeException.createParseException(
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,259,"parsePosition.getErrorIndex(),"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,260,"""unparseable 3D vector: \""{0}\"""", source);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,64,"hrow MathRuntimeException.createIllegalArgumentException(""invalid row dimension {0}"" +"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,65," (must be positive)"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,66,ew Object[] { rowDimension });
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,64,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,65,"""invalid row dimension {0} (must be positive)"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,66,rowDimension);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,69,"hrow MathRuntimeException.createIllegalArgumentException(""invalid column dimension {0}"" +"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,70," (must be positive)"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,71,ew Object[] { columnDimension });
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,69,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,70,"""invalid column dimension {0} (must be positive)"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,71,columnDimension);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,330,ew Object[] {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,331,"estination.length, destination[0].length,"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,332,"owsCount, columnsCount"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,330,"destination.length, destination[0].length,"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,331,"rowsCount, columnsCount);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,375,ew Object[] {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,376,"estination.length, destination[0].length,"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,377,"electedRows.length, selectedColumns.length"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,373,"destination.length, destination[0].length,"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,374,"selectedRows.length, selectedColumns.length);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,397,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,398,ull);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,393,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,403,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,404,ull);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,398,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,409,"hrow MathRuntimeException.createIllegalArgumentException(""some rows have length {0} while others have length {1}"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,410,ew Object[] {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,411,"Cols, subMatrix[r].length"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,403,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,404,"""some rows have length {0} while others have length {1}"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,405,"nCols, subMatrix[r].length);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,454,"hrow new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,455,ew Object[] {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,456,"atrix.getRowDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,457,"atrix.getColumnDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,458,", nCols"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,447,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,448,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,449,"matrix.getRowDimension(), matrix.getColumnDimension(), 1, nCols);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,490,"hrow new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,491,ew Object[] {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,492,"atrix.getRowDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,493,"atrix.getColumnDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,494,"Rows, 1"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,480,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,481,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,482,"matrix.getRowDimension(), matrix.getColumnDimension(), nRows, 1);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,516,"hrow new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,517,ew Object[] {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,518,", vector.getDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,519,", nCols"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,503,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,504,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,505,"1, vector.getDimension(), 1, nCols);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,541,"hrow new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,542,ew Object[] {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,543,"ector.getDimension(), 1,"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,544,"Rows, 1"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,526,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,527,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,528,"vector.getDimension(), 1, nRows, 1);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,575,"hrow new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,576,ew Object[] {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,577,", array.length,"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,578,", nCols"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,558,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,559,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,560,"1, array.length, 1, nCols);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,609,"hrow new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,610,ew Object[] {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,611,"rray.length, 1,"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,612,"Rows, 1"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,590,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,591,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,592,"array.length, 1, nRows, 1);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,718,"hrow MathRuntimeException.createIllegalArgumentException(""vector length mismatch:"" +"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,719," got {0} but expected {1}"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,720,ew Object[] {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,721,".length, nCols"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,697,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,698,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,699,"v.length, nCols);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,747,"hrow MathRuntimeException.createIllegalArgumentException(""vector length mismatch:"" +"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,748," got {0} but expected {1}"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,749,ew Object[] {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,750,".getDimension(), nCols"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,724,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,725,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,726,"v.getDimension(), nCols);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,774,"hrow MathRuntimeException.createIllegalArgumentException(""vector length mismatch:"" +"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,775," got {0} but expected {1}"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,776,ew Object[] {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,777,".length, nRows"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,749,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,750,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,751,"v.length, nRows);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,804,"hrow MathRuntimeException.createIllegalArgumentException(""vector length mismatch:"" +"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,805," got {0} but expected {1}"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,806,ew Object[] {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,807,".getDimension(), nRows"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,777,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,778,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,779,"v.getDimension(), nRows);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1122,"ew Object[] { row, 0, getRowDimension() - 1});"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1093,"row, 0, getRowDimension() - 1);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1135,"ew Object[] { column, 0, getColumnDimension() - 1});"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1106,"column, 0, getColumnDimension() - 1);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1155,"ew Object[] { startRow, endRow });"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1126,"startRow, endRow);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1162,"ew Object[] { startColumn, endColumn });"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1133,"startColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1179,"hrow new MatrixIndexException(""empty selected row index array"", null);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1150,"throw new MatrixIndexException(""empty selected row index array"");"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1181,"hrow new MatrixIndexException(""empty selected column index array"", null);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1152,"throw new MatrixIndexException(""empty selected column index array"");"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1200,"hrow MathRuntimeException.createIllegalArgumentException(""{0}x{1} and {2}x{3} matrices are not"" +"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1201," addition compatible"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1202,ew Object[] {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1203,"etRowDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1204,"etColumnDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1205,".getRowDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1206,.getColumnDimension()
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1171,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1172,"""{0}x{1} and {2}x{3} matrices are not addition compatible"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1173,"getRowDimension(), getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1174,"m.getRowDimension(), m.getColumnDimension());"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1219,"hrow MathRuntimeException.createIllegalArgumentException(""{0}x{1} and {2}x{3} matrices are not"" +"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1220," subtraction compatible"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1221,ew Object[] {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1222,"etRowDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1223,"etColumnDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1224,".getRowDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1225,.getColumnDimension()
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1186,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1187,"""{0}x{1} and {2}x{3} matrices are not subtraction compatible"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1188,"getRowDimension(), getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1189,"m.getRowDimension(), m.getColumnDimension());"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1237,"hrow MathRuntimeException.createIllegalArgumentException(""{0}x{1} and {2}x{3} matrices are not"" +"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1238," multiplication compatible"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1239,ew Object[] {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1240,"etRowDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1241,"etColumnDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1242,".getRowDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1243,.getColumnDimension()
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1200,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1201,"""{0}x{1} and {2}x{3} matrices are not multiplication compatible"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1202,"getRowDimension(), getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1203,"m.getRowDimension(), m.getColumnDimension());"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,591,"ew Object[] { startRow, endRow });"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,591,"startRow, endRow);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,598,"ew Object[] { startColumn, endColumn });"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,598,"startColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,629,"hrow new MatrixIndexException(""empty selected row index array"", null);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,629,"throw new MatrixIndexException(""empty selected row index array"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,631,"hrow new MatrixIndexException(""empty selected column index array"", null);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,631,"throw new MatrixIndexException(""empty selected column index array"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,705,"hrow MathRuntimeException.createIllegalStateException(""first {0} rows are not initialized yet"","
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,706,ew Object[] { row });
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,705,throw MathRuntimeException.createIllegalStateException(
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,706,"""first {0} rows are not initialized yet"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,707,row);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,709,"hrow MathRuntimeException.createIllegalStateException(""first {0} columns are not initialized yet"","
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,710,ew Object[] { column });
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,710,throw MathRuntimeException.createIllegalStateException(
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,711,"""first {0} columns are not initialized yet"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,712,column);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,862,"hrow new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,863,ew Object[] {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,864,"ow, column,"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,865,"etRowDimension(), getColumnDimension()"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,864,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,865,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,866,"row, column, getRowDimension(), getColumnDimension());"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,992,"hrow new IllegalArgumentException(""matrix is not square"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,992,"throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1009,f (v.length != this.getColumnDimension()) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1010,"hrow new IllegalArgumentException(""vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1009,if (v.length != getColumnDimension()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1010,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1011,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1012,"v.length, getColumnDimension() );"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1050,"hrow new IllegalArgumentException(""vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1052,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1053,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1054,"v.length, nRows );"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1078,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1082,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1083,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1084,"b.length, nRows);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1120,f (b.getRowDimension() != this.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1121,"hrow new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1126,if (b.getRowDimension() != getRowDimension()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1127,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1128,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1129,"b.getRowDimension(), b.getColumnDimension(), getRowDimension(), ""n"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1123,f (!this.isSquare()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1131,if (!isSquare()) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1483,"hrow new MatrixIndexException(""row index {0} out of allowed range [{1}, {2}]"","
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1484,"ew Object[] { row, 0, getRowDimension() - 1});"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1491,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1492,"""row index {0} out of allowed range [{1}, {2}]"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1493,"row, 0, getRowDimension() - 1);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1496,"hrow new MatrixIndexException(""column index {0} out of allowed range [{1}, {2}]"","
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1497,"ew Object[] { column, 0, getColumnDimension() - 1});"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1505,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1506,"""column index {0} out of allowed range [{1}, {2}]"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1507,"column, 0, getColumnDimension() - 1);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,169,"hrow MathRuntimeException.createIllegalArgumentException(""wrong array shape (block length = {0}, expected {1})"","
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,170,ew Object[] {
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,171,"lockData[index].length,"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,172,Height * blockWidth(jBlock)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,169,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,170,"""wrong array shape (block length = {0}, expected {1})"","
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,171,"blockData[index].length, iHeight * blockWidth(jBlock));"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,219,"ew Object[] { columns, length });"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,217,"columns, length);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,804,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"","
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,805,ull);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,802,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,812,"hrow MathRuntimeException.createIllegalArgumentException(""some rows have length {0} while others have length {1}"","
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,813,ew Object[] {
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,814,"efLength, subRow.length"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,809,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,810,"""some rows have length {0} while others have length {1}"","
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,811,"refLength, subRow.length);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,911,"hrow new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,912,ew Object[] {
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,913,"atrix.getRowDimension(),"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,914,"atrix.getColumnDimension(),"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,915,", nCols"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,907,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,908,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,909,"matrix.getRowDimension(), matrix.getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,910,"1, nCols);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1000,"hrow new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1001,ew Object[] {
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1002,"atrix.getRowDimension(),"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1003,"atrix.getColumnDimension(),"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1004,"Rows, 1"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,994,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,995,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,996,"matrix.getRowDimension(), matrix.getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,997,"nRows, 1);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1124,"hrow new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1125,ew Object[] {
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1126,", array.length,"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1127,", nCols"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1116,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1117,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1118,"1, array.length, 1, nCols);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1175,"hrow new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1176,ew Object[] {
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1177,"rray.length, 1,"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1178,"Rows, 1"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1165,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1166,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1167,"array.length, 1, nRows, 1);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1207,"hrow new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1208,ew Object[] {
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1209,"ow, column,"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1210,"etRowDimension(), getColumnDimension()"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1195,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1196,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1197,"row, column, getRowDimension(), getColumnDimension());"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1225,"hrow new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1226,ew Object[] {
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1227,"ow, column,"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1228,"etRowDimension(), getColumnDimension()"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1211,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1212,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1213,"row, column, getRowDimension(), getColumnDimension());"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1243,"hrow new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1244,ew Object[] {
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1245,"ow, column,"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1246,"etRowDimension(), getColumnDimension()"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1227,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1228,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1229,"row, column, getRowDimension(), getColumnDimension());"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1261,"hrow new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1262,ew Object[] {
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1263,"ow, column,"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1264,"etRowDimension(), getColumnDimension()"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1243,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1244,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1245,"row, column, getRowDimension(), getColumnDimension());"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1320,"hrow MathRuntimeException.createIllegalArgumentException(""vector length mismatch:"" +"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1321," got {0} but expected {1}"","
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1322,ew Object[] {
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1323,".length, columns"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1300,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1301,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1302,"v.length, columns);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1364,"hrow MathRuntimeException.createIllegalArgumentException(""vector length mismatch:"" +"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1365," got {0} but expected {1}"","
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1366,ew Object[] {
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1367,".length, rows"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1342,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1343,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1344,"v.length, rows);"
False,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,39,"ublic InvalidMatrixException(final String pattern, final Object[] arguments) {"
True,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,src/java/org/apache/commons/math/linear/InvalidMatrixException.java,39,"public InvalidMatrixException(final String pattern, final Object ... arguments) {"
False,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,37,"ublic MatrixIndexException(final String pattern, final Object[] arguments) {"
True,src/java/org/apache/commons/math/linear/MatrixIndexException.java,src/java/org/apache/commons/math/linear/MatrixIndexException.java,37,"public MatrixIndexException(final String pattern, final Object ... arguments) {"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,123,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"","
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,124,ull);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,123,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,128,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"","
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,129,ull);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,127,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,133,"hrow MathRuntimeException.createIllegalArgumentException(""some rows have length {0} while"" +"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,134," others have length {1}"","
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,135,"ew Object[] { nCols, d[r].length });"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,131,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,132,"""some rows have length {0} while others have length {1}"","
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,133,"nCols, d[r].length);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,311,"hrow MathRuntimeException.createIllegalStateException(""first {0} rows are not initialized yet"","
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,312,ew Object[] { row });
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,309,throw MathRuntimeException.createIllegalStateException(
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,310,"""first {0} rows are not initialized yet"","
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,311,row);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,315,"hrow MathRuntimeException.createIllegalStateException(""first {0} columns are not initialized yet"","
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,316,ew Object[] { column });
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,314,throw MathRuntimeException.createIllegalStateException(
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,315,"""first {0} columns are not initialized yet"","
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,316,column);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,320,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"","
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,321,ull);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,320,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,326,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"","
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,327,ull);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,325,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,332,"hrow MathRuntimeException.createIllegalArgumentException(""some rows have length {0} while others have length {1}"","
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,333,ew Object[] {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,334,"Cols, subMatrix[i].length"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,330,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,331,"""some rows have length {0} while others have length {1}"","
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,332,"nCols, subMatrix[i].length);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,351,"hrow new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,352,ew Object[] {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,353,"ow, column,"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,354,"etRowDimension(), getColumnDimension()"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,348,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,349,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,350,"row, column, getRowDimension(), getColumnDimension());"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,365,"hrow new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,366,ew Object[] {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,367,"ow, column,"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,368,"etRowDimension(), getColumnDimension()"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,360,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,361,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,362,"row, column, getRowDimension(), getColumnDimension());"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,379,"hrow new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,380,ew Object[] {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,381,"ow, column,"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,382,"etRowDimension(), getColumnDimension()"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,372,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,373,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,374,"row, column, getRowDimension(), getColumnDimension());"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,393,"hrow new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,394,ew Object[] {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,395,"ow, column,"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,396,"etRowDimension(), getColumnDimension()"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,384,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,385,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,386,"row, column, getRowDimension(), getColumnDimension());"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,417,"hrow MathRuntimeException.createIllegalArgumentException(""vector length mismatch:"" +"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,418," got {0} but expected {1}"","
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,419,ew Object[] {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,420,".length, nCols"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,406,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,407,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,408,"v.length, nCols);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,442,"hrow MathRuntimeException.createIllegalArgumentException(""vector length mismatch:"" +"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,443," got {0} but expected {1}"","
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,444,ew Object[] {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,445,".length, nRows"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,429,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,430,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,431,"v.length, nRows);"
False,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,262,"hrow MathRuntimeException.createParseException(""unparseable real vector: \""{0}\"""","
False,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,263,"ew Object[] { source },"
False,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,264,arsePosition.getErrorIndex());
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,262,throw MathRuntimeException.createParseException(
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,263,"parsePosition.getErrorIndex(),"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,264,"""unparseable real vector: \""{0}\"""", source);"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1072,"hrow MathRuntimeException.createArithmeticException(""zero norm"", null);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1072,"throw MathRuntimeException.createArithmeticException(""zero norm"");"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1081,"hrow MathRuntimeException.createArithmeticException(""cannot normalize a zero norm vector"","
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1082,ull);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1081,"throw MathRuntimeException.createArithmeticException(""cannot normalize a zero norm vector"");"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1402,"hrow new MatrixIndexException(""index {0} out of allowed range [{1}, {2}]"","
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1403,"ew Object[] { index, 0, getDimension() - 1});"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1401,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1402,"""index {0} out of allowed range [{1}, {2}]"","
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1403,"index, 0, getDimension() - 1);"
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1171,"hrow  MathRuntimeException.createArithmeticException(""cannot normalize a zero norm vector"","
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1172,ull);
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1171,"throw  MathRuntimeException.createArithmeticException(""cannot normalize a zero norm vector"");"
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1195,"ew Object[] { index, 0, getDimension() - 1 });"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1194,"index, 0, getDimension() - 1);"
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1211,"ew Object[] { getDimension(), n });"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1210,"getDimension(), n);"
False,src/java/org/apache/commons/math/linear/decomposition/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/CholeskyDecompositionImpl.java,227,"ew Object[] { b.length, m });"
True,src/java/org/apache/commons/math/linear/decomposition/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/CholeskyDecompositionImpl.java,227,"b.length, m);"
False,src/java/org/apache/commons/math/linear/decomposition/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/CholeskyDecompositionImpl.java,266,"ew Object[] { b.getDimension(), m });"
True,src/java/org/apache/commons/math/linear/decomposition/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/CholeskyDecompositionImpl.java,266,"b.getDimension(), m);"
False,src/java/org/apache/commons/math/linear/decomposition/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/CholeskyDecompositionImpl.java,315,"ew Object[] { b.getRowDimension(), b.getColumnDimension(), m, ""n""});"
True,src/java/org/apache/commons/math/linear/decomposition/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/CholeskyDecompositionImpl.java,315,"b.getRowDimension(), b.getColumnDimension(), m, ""n"");"
False,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,180,"hrow new InvalidMatrixException(""eigen decomposition of assymetric matrices not supported yet"","
False,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,181,ull);
True,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,180,"throw new InvalidMatrixException(""eigen decomposition of assymetric matrices not supported yet"");"
False,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,415,"ew Object[] { b.length, m });"
True,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,414,"b.length, m);"
False,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,451,"ew Object[] { b.getDimension(), m });"
True,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,450,"b.getDimension(), m);"
False,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,487,ew Object[] {
False,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,488,".getRowDimension(), b.getColumnDimension(),"
False,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,489,", ""n"""
True,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,486,"b.getRowDimension(), b.getColumnDimension(), m, ""n"");"
False,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,747,"hrow new InvalidMatrixException(""cannot solve degree {0} equation"", new Object[] { 2 });"
True,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,743,"throw new InvalidMatrixException(""cannot solve degree {0} equation"", 2);"
False,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,787,"hrow new InvalidMatrixException(""cannot solve degree {0} equation"", new Object[] { 3 });"
True,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java,783,"throw new InvalidMatrixException(""cannot solve degree {0} equation"", 3);"
False,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,276,"ew Object[] { b.length, m });"
True,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,276,"b.length, m);"
False,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,319,"ew Object[] { b.getDimension(), m });"
True,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,319,"b.getDimension(), m);"
False,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,372,"ew Object[] { b.getRowDimension(), b.getColumnDimension(), m, ""n""});"
True,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,372,"b.getRowDimension(), b.getColumnDimension(), m, ""n"");"
False,src/java/org/apache/commons/math/linear/decomposition/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/decomposition/NonSquareMatrixException.java,39,"ew Object[] { rows, columns });"
True,src/java/org/apache/commons/math/linear/decomposition/NonSquareMatrixException.java,src/java/org/apache/commons/math/linear/decomposition/NonSquareMatrixException.java,39,"rows, columns);"
False,src/java/org/apache/commons/math/linear/decomposition/NotPositiveDefiniteMatrixException.java,src/java/org/apache/commons/math/linear/decomposition/NotPositiveDefiniteMatrixException.java,39,"uper(""not positive definite matrix"", null);"
True,src/java/org/apache/commons/math/linear/decomposition/NotPositiveDefiniteMatrixException.java,src/java/org/apache/commons/math/linear/decomposition/NotPositiveDefiniteMatrixException.java,39,"super(""not positive definite matrix"");"
False,src/java/org/apache/commons/math/linear/decomposition/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/decomposition/NotSymmetricMatrixException.java,39,"uper(""not symmetric matrix"", null);"
True,src/java/org/apache/commons/math/linear/decomposition/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/decomposition/NotSymmetricMatrixException.java,39,"super(""not symmetric matrix"");"
False,src/java/org/apache/commons/math/linear/decomposition/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/QRDecompositionImpl.java,306,"ew Object[] { b.length, m });"
True,src/java/org/apache/commons/math/linear/decomposition/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/QRDecompositionImpl.java,306,"b.length, m);"
False,src/java/org/apache/commons/math/linear/decomposition/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/QRDecompositionImpl.java,377,"ew Object[] { b.getRowDimension(), b.getColumnDimension(), m, ""n""});"
True,src/java/org/apache/commons/math/linear/decomposition/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/QRDecompositionImpl.java,377,"b.getRowDimension(), b.getColumnDimension(), m, ""n"");"
False,src/java/org/apache/commons/math/linear/decomposition/SingularMatrixException.java,src/java/org/apache/commons/math/linear/decomposition/SingularMatrixException.java,36,"uper(""matrix is singular"", null);"
True,src/java/org/apache/commons/math/linear/decomposition/SingularMatrixException.java,src/java/org/apache/commons/math/linear/decomposition/SingularMatrixException.java,36,"super(""matrix is singular"");"
False,src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java,346,"ew Object[] { b.length, singularValues.length });"
True,src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java,346,"b.length, singularValues.length);"
False,src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java,375,"ew Object[] { b.getDimension(), singularValues.length });"
True,src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java,375,"b.getDimension(), singularValues.length);"
False,src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java,404,ew Object[] {
False,src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java,405,".getRowDimension(), b.getColumnDimension(),"
False,src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java,406,"ingularValues.length, ""n"""
True,src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java,404,"b.getRowDimension(), b.getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java,405,"singularValues.length, ""n"");"
False,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,140,"hrow new IntegratorException(""dimensions mismatch: ODE problem has dimension {0},"" +"
False,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,141," initial state vector has dimension {1}"","
False,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,142,ew Object[] {
False,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,143,"nteger.valueOf(equations.getDimension()),"
False,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,144,nteger.valueOf(y0.length)
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,140,throw new IntegratorException(
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,141,"""dimensions mismatch: ODE problem has dimension {0},"" +"
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,142,""" initial state vector has dimension {1}"","
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,143,"equations.getDimension(), y0.length);"
False,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,149,"hrow new IntegratorException(""dimensions mismatch: ODE problem has dimension {0},"" +"
False,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,150," final state vector has dimension {1}"","
False,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,151,ew Object[] {
False,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,152,"nteger.valueOf(equations.getDimension()),"
False,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,153,nteger.valueOf(y.length)
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,147,throw new IntegratorException(
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,148,"""dimensions mismatch: ODE problem has dimension {0},"" +"
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,149,""" final state vector has dimension {1}"","
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,150,"equations.getDimension(), y.length);"
False,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,158,"hrow new IntegratorException(""too small integration interval: length = {0}"","
False,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,159,ew Object[] {
False,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,160,ouble.valueOf(Math.abs(t - t0))
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,154,throw new IntegratorException(
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,155,"""too small integration interval: length = {0}"","
True,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/java/org/apache/commons/math/ode/AbstractIntegrator.java,156,Math.abs(t - t0));
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,318,"hrow new MathRuntimeException(""unexpected exception caught"", null, de);"
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,318,"throw new MathRuntimeException(de, ""unexpected exception caught"");"
True,src/java/org/apache/commons/math/ode/DerivativeException.java,src/java/org/apache/commons/math/ode/DerivativeException.java,32,/** Serializable version identifier */
True,src/java/org/apache/commons/math/ode/DerivativeException.java,src/java/org/apache/commons/math/ode/DerivativeException.java,33,private static final long serialVersionUID = 5666710788967425123L;
False,src/java/org/apache/commons/math/ode/DerivativeException.java,src/java/org/apache/commons/math/ode/DerivativeException.java,37,"ublic DerivativeException(final String specifier, final Object[] parts) {"
True,src/java/org/apache/commons/math/ode/DerivativeException.java,src/java/org/apache/commons/math/ode/DerivativeException.java,40,"public DerivativeException(final String specifier, final Object ... parts) {"
False,src/java/org/apache/commons/math/ode/DerivativeException.java,src/java/org/apache/commons/math/ode/DerivativeException.java,48,** Serializable version identifier */
False,src/java/org/apache/commons/math/ode/DerivativeException.java,src/java/org/apache/commons/math/ode/DerivativeException.java,49,rivate static final long serialVersionUID = -4100440615830558122L;
True,src/java/org/apache/commons/math/ode/IntegratorException.java,src/java/org/apache/commons/math/ode/IntegratorException.java,31,/** Serializable version identifier */
True,src/java/org/apache/commons/math/ode/IntegratorException.java,src/java/org/apache/commons/math/ode/IntegratorException.java,32,private static final long serialVersionUID = -1607588949778036796L;
False,src/java/org/apache/commons/math/ode/IntegratorException.java,src/java/org/apache/commons/math/ode/IntegratorException.java,36,"ublic IntegratorException(final String specifier, final Object[] parts) {"
True,src/java/org/apache/commons/math/ode/IntegratorException.java,src/java/org/apache/commons/math/ode/IntegratorException.java,39,"public IntegratorException(final String specifier, final Object ... parts) {"
False,src/java/org/apache/commons/math/ode/IntegratorException.java,src/java/org/apache/commons/math/ode/IntegratorException.java,48,** Serializable version identifier */
False,src/java/org/apache/commons/math/ode/IntegratorException.java,src/java/org/apache/commons/math/ode/IntegratorException.java,49,rivate static final long serialVersionUID = -1215318282266670558L;
False,src/java/org/apache/commons/math/ode/events/EventException.java,src/java/org/apache/commons/math/ode/events/EventException.java,38,"ublic EventException(final String specifier, final Object[] parts) {"
True,src/java/org/apache/commons/math/ode/events/EventException.java,src/java/org/apache/commons/math/ode/events/EventException.java,38,"public EventException(final String specifier, final Object ... parts) {"
False,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,200,"hrow new FunctionEvaluationException(t, e);"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,200,"throw new FunctionEvaluationException(e, t);"
False,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,202,"hrow new FunctionEvaluationException(t, e);"
True,src/java/org/apache/commons/math/ode/events/EventState.java,src/java/org/apache/commons/math/ode/events/EventState.java,202,"throw new FunctionEvaluationException(e, t);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,155,"hrow new IntegratorException(""dimensions mismatch: state vector has dimension {0},"" +"
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,156," absolute tolerance vector has dimension {1}"","
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,157,ew Object[] {
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,158,"nteger.valueOf(y0.length),"
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,159,nteger.valueOf(vecAbsoluteTolerance.length)
True,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,155,throw new IntegratorException(
True,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,156,"""dimensions mismatch: state vector has dimension {0},"" +"
True,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,157,""" absolute tolerance vector has dimension {1}"","
True,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,158,"y0.length, vecAbsoluteTolerance.length);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,164,"hrow new IntegratorException(""dimensions mismatch: state vector has dimension {0},"" +"
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,165," relative tolerance vector has dimension {1}"","
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,166,ew Object[] {
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,167,"nteger.valueOf(y0.length),"
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,168,nteger.valueOf(vecRelativeTolerance.length)
True,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,162,throw new IntegratorException(
True,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,163,"""dimensions mismatch: state vector has dimension {0},"" +"
True,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,164,""" relative tolerance vector has dimension {1}"","
True,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,165,"y0.length, vecRelativeTolerance.length);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,270,"hrow new IntegratorException(""minimal step size ({0}) reached,"" +"
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,271," integration needs {1}"","
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,272,ew Object[] {
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,273,"ouble.valueOf(minStep),"
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,274,ouble.valueOf(Math.abs(h))
True,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,266,throw new IntegratorException(
True,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,267,"""minimal step size ({0}) reached, integration needs {1}"","
True,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,268,"minStep, Math.abs(h));"
False,src/java/org/apache/commons/math/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,42,"ublic CostException(String pattern, Object[] arguments) {"
True,src/java/org/apache/commons/math/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,42,"public CostException(String pattern, Object ... arguments) {"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,273,"hrow new MathRuntimeException(""unexpected exception caught"", null, dme);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,273,"throw new MathRuntimeException(dme, ""unexpected exception caught"");"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,510,"hrow new ConvergenceException(""none of the {0} start points"" +"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,511," lead to convergence"","
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,512,ew Object[] {
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,513,nteger.toString(starts)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,510,throw new ConvergenceException(
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,511,"""none of the {0} start points lead to convergence"","
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,512,starts);
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,143,ew Object[] { url });
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,143,url);
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,416,"hrow MathRuntimeException.createIllegalStateException(""distribution not loaded"","
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,417,ull);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,416,"throw MathRuntimeException.createIllegalStateException(""distribution not loaded"");"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,437,"hrow new MathRuntimeException(""no bin selected"", null);"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,436,"throw new MathRuntimeException(""no bin selected"");"
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,39,"@SuppressWarnings(""unused"")"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,109,"efault: throw MathRuntimeException.createIllegalStateException(""unknown mode {0}, known modes: "" +"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,110,"{1} ({2}), {3} ({4}), {5} ({6}), "" +"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,111,"{7} ({8}), {9} ({10}) and {11} ({12})"","
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,112,ew Object[] {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,113,"ode,"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,114,"DIGEST_MODE"",      DIGEST_MODE,"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,115,"REPLAY_MODE"",      REPLAY_MODE,"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,116,"UNIFORM_MODE"",     UNIFORM_MODE,"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,117,"EXPONENTIAL_MODE"", EXPONENTIAL_MODE,"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,118,"GAUSSIAN_MODE"",    GAUSSIAN_MODE,"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,119,"CONSTANT_MODE"",    CONSTANT_MODE"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,109,default: throw MathRuntimeException.createIllegalStateException(
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,110,"""unknown mode {0}, known modes: "" +"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,111,"""{1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})"","
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,112,"mode,"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,113,"""DIGEST_MODE"",   DIGEST_MODE,   ""REPLAY_MODE"",      REPLAY_MODE,"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,114,"""UNIFORM_MODE"",  UNIFORM_MODE,  ""EXPONENTIAL_MODE"", EXPONENTIAL_MODE,"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,115,"""GAUSSIAN_MODE"", GAUSSIAN_MODE, ""CONSTANT_MODE"",    CONSTANT_MODE);"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,309,"hrow MathRuntimeException.createIllegalStateException(""digest not initialized"", null);"
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,304,"throw MathRuntimeException.createIllegalStateException(""digest not initialized"");"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,343,ew Object[] { valuesFileURL });
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,338,valuesFileURL);
False,src/java/org/apache/commons/math/stat/correlation/Covariance.java,src/java/org/apache/commons/math/stat/correlation/Covariance.java,202,"Arrays must have the same length and both must have at "" +"
True,src/java/org/apache/commons/math/stat/correlation/Covariance.java,src/java/org/apache/commons/math/stat/correlation/Covariance.java,202,"""arrays must have the same length and both must have at "" +"
False,src/java/org/apache/commons/math/stat/correlation/Covariance.java,src/java/org/apache/commons/math/stat/correlation/Covariance.java,204,"ew Object[] {xArray.length, yArray.length});"
True,src/java/org/apache/commons/math/stat/correlation/Covariance.java,src/java/org/apache/commons/math/stat/correlation/Covariance.java,204,"xArray.length, yArray.length);"
False,src/java/org/apache/commons/math/stat/correlation/Covariance.java,src/java/org/apache/commons/math/stat/correlation/Covariance.java,219,"Insufficient data:  only {0} rows and {1} columns."","
False,src/java/org/apache/commons/math/stat/correlation/Covariance.java,src/java/org/apache/commons/math/stat/correlation/Covariance.java,220,"ew Object[]{nRows, nCols});"
True,src/java/org/apache/commons/math/stat/correlation/Covariance.java,src/java/org/apache/commons/math/stat/correlation/Covariance.java,219,"""insufficient data: only {0} rows and {1} columns."","
True,src/java/org/apache/commons/math/stat/correlation/Covariance.java,src/java/org/apache/commons/math/stat/correlation/Covariance.java,220,"nRows, nCols);"
False,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,94,hrow MathRuntimeException.createIllegalArgumentException(
False,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,95,"Covariance matrix is null"", null);"
True,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,94,"throw MathRuntimeException.createIllegalArgumentException(""covariance matrix is null"");"
False,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,223,"Invalid array dimensions. xArray has size {0}; yArray has {1} elements"","
False,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,224,"ew Object[] {xArray.length, yArray.length});"
True,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,222,"""invalid array dimensions. xArray has size {0}; yArray has {1} elements"","
True,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,223,"xArray.length, yArray.length);"
False,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,266,"Insufficient data: only {0} rows and {1} columns."","
False,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,267,"ew Object[]{nRows, nCols});"
True,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,265,"""insufficient data: only {0} rows and {1} columns."","
True,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,266,"nRows, nCols);"
False,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,613,"hrow MathRuntimeException.createIllegalStateException(""{0} values have been added before statistic is configured"","
False,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,614,ew Object[] { n });
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,613,throw MathRuntimeException.createIllegalStateException(
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,614,"""{0} values have been added before statistic is configured"","
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,615,n);
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,613,"hrow MathRuntimeException.createIllegalStateException(""{0} values have been added before statistic is configured"","
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,614,ew Object[] { n });
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,613,throw MathRuntimeException.createIllegalStateException(
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,614,"""{0} values have been added before statistic is configured"","
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,615,n);
False,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,189,"hrow MathRuntimeException.createIllegalStateException(""{0} values have been added before statistic is configured"","
False,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,190,ew Object[] { getN() });
True,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,189,throw MathRuntimeException.createIllegalStateException(
True,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,190,"""{0} values have been added before statistic is configured"","
True,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,191,getN());
False,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,94,"hrow MathRuntimeException.createIllegalStateException(""statistics constructed from external "" +"
False,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,95,"moments cannot be incremented"","
False,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,96,ull);
True,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,94,throw MathRuntimeException.createIllegalStateException(
True,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,95,"""statistics constructed from external moments cannot be incremented"");"
False,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,127,"hrow MathRuntimeException.createIllegalStateException(""statistics constructed from external "" +"
False,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,128,"moments cannot be cleared"","
False,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,129,ull);
True,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,126,throw MathRuntimeException.createIllegalStateException(
True,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,127,"""statistics constructed from external moments cannot be cleared"");"
False,src/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/java/org/apache/commons/math/transform/FastCosineTransformer.java,227,"hrow MathRuntimeException.createIllegalArgumentException(""{0} is not a power of 2 plus one"","
False,src/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/java/org/apache/commons/math/transform/FastCosineTransformer.java,228,ew Object[] { f.length });
True,src/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/java/org/apache/commons/math/transform/FastCosineTransformer.java,227,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/java/org/apache/commons/math/transform/FastCosineTransformer.java,228,"""{0} is not a power of 2 plus one"","
True,src/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/java/org/apache/commons/math/transform/FastCosineTransformer.java,229,f.length);
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,434,"hrow MathRuntimeException.createIllegalArgumentException(""number of sample is not positive: {0}"","
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,435,ew Object[] { n });
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,434,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,435,"""number of sample is not positive: {0}"","
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,436,n);
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,495,"hrow MathRuntimeException.createIllegalArgumentException(""{0} is not a power of 2, consider padding for fix"","
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,496,ew Object[] { d.length });
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,496,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,497,"""{0} is not a power of 2, consider padding for fix"","
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,498,d.length);
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,508,"hrow MathRuntimeException.createIllegalArgumentException(""{0} is not a power of 2, consider padding for fix"","
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,509,ew Object[] { o.length });
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,510,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,511,"""{0} is not a power of 2, consider padding for fix"","
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,512,o.length);
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,524,"hrow MathRuntimeException.createIllegalArgumentException(""endpoints do not specify an interval: [{0}, {1}]"","
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,525,"ew Object[] { lower, upper });"
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,527,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,528,"""endpoints do not specify an interval: [{0}, {1}]"","
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,529,"lower, upper);"
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,664,"hrow MathRuntimeException.createIllegalArgumentException(""some dimensions don't math: {0} != {1}"","
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,665,"ew Object[] { 0, dimensionSize.length });"
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,668,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,669,"""some dimensions don't math: {0} != {1}"","
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,670,"0, dimensionSize.length);"
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,668,"hrow MathRuntimeException.createIllegalArgumentException(""some dimensions don't math: {0} != {1}"","
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,669,ew Object[] {
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,670,"ector.length,"
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,671,imensionSize.length
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,673,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,674,"""some dimensions don't math: {0} != {1}"","
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,675,"vector.length, dimensionSize.length);"
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,694,"hrow MathRuntimeException.createIllegalArgumentException(""some dimensions don't math: {0} != {1}"","
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,695,"ew Object[] { 0, dimensionSize.length });"
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,697,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,698,"""some dimensions don't math: {0} != {1}"","
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,699,"0, dimensionSize.length);"
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,700,"hrow MathRuntimeException.createIllegalArgumentException(""some dimensions don't math: {0} != {1}"","
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,701,ew Object[] {
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,702,"ector.length,"
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,703,imensionSize.length
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,704,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,705,"""some dimensions don't math: {0} != {1}"","
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,706,"vector.length,dimensionSize.length);"
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,820,"roots of unity have not been computed yet"","
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,821,ull);
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,822,"""roots of unity have not been computed yet"");"
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,840,"cannot compute 0-th root of unity, indefinite result"","
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,841,ull);
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,841,"""cannot compute 0-th root of unity, indefinite result"");"
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,886,"roots of unity have not been computed yet"","
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,887,ull);
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,886,"""roots of unity have not been computed yet"");"
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,892,"ew Object[] { k, 0, omegaCount - 1 });"
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,891,"k, 0, omegaCount - 1);"
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,911,"roots of unity have not been computed yet"","
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,912,ull);
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,910,"""roots of unity have not been computed yet"");"
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,917,"ew Object[] { k, 0, omegaCount - 1 });"
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,915,"k, 0, omegaCount - 1);"
False,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,165,"hrow MathRuntimeException.createIllegalArgumentException(""{0} is not a power of 2"","
False,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,166,ew Object[] { n });
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,165,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,166,"""{0} is not a power of 2"","
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,167,n);
False,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,215,"hrow MathRuntimeException.createIllegalArgumentException(""{0} is not a power of 2"","
False,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,216,ew Object[] { n });
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,216,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,217,"""{0} is not a power of 2"","
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,218,n);
False,src/java/org/apache/commons/math/transform/FastSineTransformer.java,src/java/org/apache/commons/math/transform/FastSineTransformer.java,221,"hrow MathRuntimeException.createIllegalArgumentException(""first element is not 0: {0}"","
False,src/java/org/apache/commons/math/transform/FastSineTransformer.java,src/java/org/apache/commons/math/transform/FastSineTransformer.java,222,ew Object[] { f[0] });
True,src/java/org/apache/commons/math/transform/FastSineTransformer.java,src/java/org/apache/commons/math/transform/FastSineTransformer.java,221,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/transform/FastSineTransformer.java,src/java/org/apache/commons/math/transform/FastSineTransformer.java,222,"""first element is not 0: {0}"","
True,src/java/org/apache/commons/math/transform/FastSineTransformer.java,src/java/org/apache/commons/math/transform/FastSineTransformer.java,223,f[0]);
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,158,ew Object[] { Double.valueOf(x) });
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,158,x);
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,175,ew Object[] { Double.valueOf(x) });
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,175,x);
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,47,"hrow new MathException(""Conversion Exception in Transformation, Object is null"", null);"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,47,"throw new MathException(""Conversion Exception in Transformation, Object is null"");"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,57,"hrow new MathException(""Conversion Exception in Transformation: {0}"","
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,58,"ew Object[] { e.getMessage() }, e);"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,57,"throw new MathException(e,"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,58,"""Conversion Exception in Transformation: {0}"", e.getMessage());"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,23,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,546,"ew Object[] { p, q });"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,545,"p, q);"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,572,"ew Object[] { p, q });"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,571,"p, q);"
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,526,"hrow MathRuntimeException.createConcurrentModificationException(""map has been modified while iterating"","
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,527,ull);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,526,"throw MathRuntimeException.createConcurrentModificationException(""map has been modified while iterating"");"
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,530,"hrow MathRuntimeException.createNoSuchElementException(""iterator exhausted"", null);"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,529,"throw MathRuntimeException.createNoSuchElementException(""iterator exhausted"");"
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,544,"hrow MathRuntimeException.createConcurrentModificationException(""map has been modified while iterating"","
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,545,ull);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,543,"throw MathRuntimeException.createConcurrentModificationException(""map has been modified while iterating"");"
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,548,"hrow MathRuntimeException.createNoSuchElementException(""iterator exhausted"", null);"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,546,"throw MathRuntimeException.createNoSuchElementException(""iterator exhausted"");"
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,562,"hrow MathRuntimeException.createConcurrentModificationException(""map has been modified while iterating"","
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,563,ull);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,560,"throw MathRuntimeException.createConcurrentModificationException(""map has been modified while iterating"");"
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,577,"hrow MathRuntimeException.createNoSuchElementException(""iterator exhausted"", null);"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,574,"throw MathRuntimeException.createNoSuchElementException(""iterator exhausted"");"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,324,"cannot substitute an element from an empty array"", null);"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,324,"""cannot substitute an element from an empty array"");"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,350,tring msg =
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,351,"Contraction criteria can never be smaller than "" +"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,352,"the expansion factor.  This would lead to a never "" +"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,353,"ending loop of expansion and contraction as a newly "" +"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,354,"expanded internal storage array would immediately "" +"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,355,"satisfy the criteria for contraction"";"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,356,hrow new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,350,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,351,"""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would "" +"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,352,"""lead to a never ending loop of expansion and contraction as a newly expanded "" +"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,353,"""internal storage array would immediately satisfy the criteria for contraction"","
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,354,"contractionCritera, expansionFactor);"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,360,tring msg =
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,361,"The contraction criteria must be a number larger "" +"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,362,"than one.  If the contractionCriteria is less than or "" +"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,363,"equal to one an endless loop of contraction and "" +"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,364,"expansion would ensue as an internalArray.length "" +"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,365,"== numElements would satisfy the contraction criteria"";"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,366,hrow new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,358,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,359,"""contraction criteria smaller than one ({0}).  This would lead to a never ending "" +"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,360,"""loop of expansion and contraction as an internal storage array length equal "" +"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,361,"""to the number of elements would satisfy the contraction criteria."","
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,362,contractionCriteria);
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,370,tring msg =
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,371,"The expansion factor must be a number greater than 1.0"";"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,372,hrow new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,366,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,367,"""expansion factor smaller than one ({0})"","
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,368,contractionCriteria);
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,456,"tring msg = ""Cannot discard more elements than are"" +"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,457,"contained in this array."";"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,458,hrow new IllegalArgumentException(msg);
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,459, else if (i < 0) {
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,460,"tring msg = ""Cannot discard a negative number of elements."";"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,461,hrow new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,452,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,453,"""cannot discard {0} elements from a {1} elements array"","
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,454,"i, numElements);"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,455,} else if (i < 0) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,456,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,457,"""cannot discard a negative number of elements ({0})"","
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,458,i);
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,539,"hrow MathRuntimeException.createArrayIndexOutOfBoundsException(""the index specified: {0} is larger than the current maximal index {1}"","
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,540,"ew Object[] { index, numElements - 1 });"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,536,throw MathRuntimeException.createArrayIndexOutOfBoundsException(
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,537,"""the index specified: {0} is larger than the current maximal index {1}"","
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,538,"index, numElements - 1);"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,544,"hrow MathRuntimeException.createArrayIndexOutOfBoundsException(""elements cannot be retrieved from a negative array index {0}"","
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,545,ew Object[] { index });
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,542,throw MathRuntimeException.createArrayIndexOutOfBoundsException(
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,543,"""elements cannot be retrieved from a negative array index {0}"","
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,544,index);
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,669,"hrow MathRuntimeException.createArrayIndexOutOfBoundsException(""cannot set an element at a negative index {0}"","
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,670,ew Object[] { index });
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,668,throw MathRuntimeException.createArrayIndexOutOfBoundsException(
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,669,"""cannot set an element at a negative index {0}"","
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,670,index);
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,708,"hrow new IllegalArgumentException(""Illegal expansionMode setting."");"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,708,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,709,"""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})"","
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,710,"expansionMode, MULTIPLICATIVE_MODE, ""MULTIPLICATIVE_MODE"","
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,711,"ADDITIVE_MODE, ""ADDITIVE_MODE"");"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,725, else {
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,726,tring msg =
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,727,"The initial capacity supplied: "" + initialCapacity +"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,728,"must be a positive integer"";"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,729,hrow new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,728,} else {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,729,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,730,"""initial capacity ({0}) is not positive"","
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,731,initialCapacity);
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,745,tring msg =
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,746,"Number of elements must be zero or a positive "" + ""integer"";"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,747,hrow new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,747,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,748,"""index ({0}) is not positive"","
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,749,i);
False,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,63,"onvergenceException ex = new ConvergenceException(pattern, arguments, cause);"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,63,"ConvergenceException ex = new ConvergenceException(cause, pattern, arguments);"
False,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,56,"unctionEvaluationException ex = new FunctionEvaluationException(0.0, pattern, arguments, cause);"
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,56,"FunctionEvaluationException ex = new FunctionEvaluationException(cause, 0.0, pattern, arguments);"
False,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,70,"unctionEvaluationException ex = new FunctionEvaluationException(0.0, cause);"
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,70,"FunctionEvaluationException ex = new FunctionEvaluationException(cause, 0.0);"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,62,"athConfigurationException ex = new MathConfigurationException(pattern, arguments, cause);"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,62,"MathConfigurationException ex = new MathConfigurationException(cause, pattern, arguments);"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,65,"athException ex = new MathException(pattern, arguments, cause);"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,65,"MathException ex = new MathException(cause, pattern, arguments);"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,82,"athException cause = new MathConfigurationException(inMsg, null);"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,83,"athException ex = new MathException(outMsg, null, cause);"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,82,MathException cause = new MathConfigurationException(inMsg);
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,83,"MathException ex = new MathException(cause, outMsg);"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,107,"athException cause = new MathConfigurationException(inMsg, null);"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,108,"athException ex = new MathException(outMsg, null, cause);"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,107,MathException cause = new MathConfigurationException(inMsg);
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,108,"MathException ex = new MathException(cause, outMsg);"
False,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,42,ew Object[] { Double.valueOf(1234567) });
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,42,1234567);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,786,"hrow new InvalidMatrixException(""incorrect dimensions"", null);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,786,"throw new InvalidMatrixException(""incorrect dimensions"");"
False,src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java,src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java,32,"nvalidMatrixException ex = new InvalidMatrixException(msg, null);"
True,src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java,src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java,29,InvalidMatrixException ex = new InvalidMatrixException(msg);
False,src/test/org/apache/commons/math/linear/MatrixIndexExceptionTest.java,src/test/org/apache/commons/math/linear/MatrixIndexExceptionTest.java,32,"atrixIndexException ex = new MatrixIndexException(msg, null);"
True,src/test/org/apache/commons/math/linear/MatrixIndexExceptionTest.java,src/test/org/apache/commons/math/linear/MatrixIndexExceptionTest.java,32,MatrixIndexException ex = new MatrixIndexException(msg);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,967,"hrow new InvalidMatrixException(""incorrect dimensions"", null);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,967,"throw new InvalidMatrixException(""incorrect dimensions"");"
False,src/test/org/apache/commons/math/linear/decomposition/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/decomposition/CholeskySolverTest.java,29,mport org.apache.commons.math.linear.RealVectorImplTest.RealVectorTestImpl;
False,src/test/org/apache/commons/math/linear/decomposition/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/decomposition/CholeskySolverTest.java,30,mport org.apache.commons.math.linear.decomposition.CholeskyDecompositionImpl;
False,src/test/org/apache/commons/math/linear/decomposition/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/decomposition/CholeskySolverTest.java,31,mport org.apache.commons.math.linear.decomposition.DecompositionSolver;
False,src/test/org/apache/commons/math/linear/decomposition/EigenSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/EigenSolverTest.java,31,mport org.apache.commons.math.linear.RealVectorImplTest.RealVectorTestImpl;
False,src/test/org/apache/commons/math/linear/decomposition/EigenSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/EigenSolverTest.java,32,mport org.apache.commons.math.linear.decomposition.DecompositionSolver;
False,src/test/org/apache/commons/math/linear/decomposition/EigenSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/EigenSolverTest.java,33,mport org.apache.commons.math.linear.decomposition.EigenDecompositionImpl;
True,src/test/org/apache/commons/math/linear/decomposition/LUSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/LUSolverTest.java,20,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/decomposition/LUSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/LUSolverTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/decomposition/LUSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/LUSolverTest.java,22,import junit.framework.TestSuite;
False,src/test/org/apache/commons/math/linear/decomposition/LUSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/LUSolverTest.java,25,mport org.apache.commons.math.linear.RealVectorImplTest.RealVectorTestImpl;
False,src/test/org/apache/commons/math/linear/decomposition/LUSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/LUSolverTest.java,26,mport org.apache.commons.math.linear.decomposition.DecompositionSolver;
False,src/test/org/apache/commons/math/linear/decomposition/LUSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/LUSolverTest.java,27,mport org.apache.commons.math.linear.decomposition.LUDecompositionImpl;
False,src/test/org/apache/commons/math/linear/decomposition/LUSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/LUSolverTest.java,29,mport junit.framework.Test;
False,src/test/org/apache/commons/math/linear/decomposition/LUSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/LUSolverTest.java,30,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/linear/decomposition/LUSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/LUSolverTest.java,31,mport junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,22,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,23,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,24,import junit.framework.TestSuite;
False,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,31,mport org.apache.commons.math.linear.RealVectorImplTest.RealVectorTestImpl;
False,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,32,mport org.apache.commons.math.linear.decomposition.DecompositionSolver;
False,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,33,mport org.apache.commons.math.linear.decomposition.QRDecomposition;
False,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,34,mport org.apache.commons.math.linear.decomposition.QRDecompositionImpl;
False,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,36,mport junit.framework.Test;
False,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,37,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java,38,mport junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/decomposition/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/SingularValueSolverTest.java,20,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/decomposition/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/SingularValueSolverTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/decomposition/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/SingularValueSolverTest.java,22,import junit.framework.TestSuite;
False,src/test/org/apache/commons/math/linear/decomposition/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/SingularValueSolverTest.java,25,mport org.apache.commons.math.linear.RealVectorImplTest.RealVectorTestImpl;
False,src/test/org/apache/commons/math/linear/decomposition/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/SingularValueSolverTest.java,26,mport org.apache.commons.math.linear.decomposition.DecompositionSolver;
False,src/test/org/apache/commons/math/linear/decomposition/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/SingularValueSolverTest.java,27,mport org.apache.commons.math.linear.decomposition.SingularValueDecompositionImpl;
False,src/test/org/apache/commons/math/linear/decomposition/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/SingularValueSolverTest.java,29,mport junit.framework.Test;
False,src/test/org/apache/commons/math/linear/decomposition/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/SingularValueSolverTest.java,30,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/linear/decomposition/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/decomposition/SingularValueSolverTest.java,31,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/org/apache/commons/math/ode/FirstOrderConverterTest.java,81,rivate int n;
True,src/test/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/org/apache/commons/math/ode/FirstOrderConverterTest.java,81,private static final long serialVersionUID = -7926271579508637558L;
True,src/test/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/org/apache/commons/math/ode/FirstOrderConverterTest.java,83,private int n;
False,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,52,"hrow new DerivativeException(""{0}"", new String[] { ""oops"" });"
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,52,"throw new DerivativeException(""{0}"", ""oops"");"
False,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,219,"hrow new EventException(""Evaluation failed for argument = {0}"","
False,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,220,ew Object[] { Double.valueOf(t) });
True,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,219,"throw new EventException(""Evaluation failed for argument = {0}"", t);"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,41,"hrow new CostException(""{0}"", new Object[] { ""oops""});"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,41,"throw new CostException(""{0}"", ""oops"");"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,47,"hrow new CostException(""{0}"", new Object[] { ""oops""});"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,47,"throw new CostException(""{0}"", ""oops"");"
True,src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,19,import static org.junit.Assert.assertEquals;
False,src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,22,mport org.apache.commons.math.linear.RealMatrixImpl;
False,src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,25,mport static org.junit.Assert.assertEquals;
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,62,"hrow new MathRuntimeException(""?"", null);"
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,62,"throw new MathRuntimeException(""?"");"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,21,import java.util.Arrays;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,23,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,26,* Implementation of RealMatrix using a flat arrays to store square blocks of the matrix.
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,27,* <p>
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,28,* This implementation is cache-friendly. Square blocks are stored as small arrays and allow
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,29,* efficient traversal of data both in row major direction and columns major direction. This
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,30,* greatly increases performances for algorithms that use crossed directions loops like
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,31,* multiplication or transposition.
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,32,* </p>
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,33,* <p>
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,34,* The layout complexity overhead versus simple mapping of matrices to java
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,35,* arrays is negligible for small matrices (about 1%). The gain from cache efficiency leads
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,36,* to up to 3-fold improvements for matrices of moderate to large size.
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,37,* </p>
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,38,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,39,* @since 2.0
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,41,public class DenseRealMatrix extends AbstractRealMatrix implements Serializable {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,43,/** Serializable version identifier */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,44,private static final long serialVersionUID = 5536250491728216579L;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,46,/** Block size. */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,47,private static final int BLOCK_SIZE = 32;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,49,/** Blocks of matrix entries. */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,50,private final double blocks[][];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,52,/** Number of rows of the matrix. */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,53,private final int rows;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,55,/** Number of columns of the matrix. */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,56,private final int columns;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,58,/** Number of block rows of the matrix. */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,59,private final int blockRows;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,61,/** Number of block columns of the matrix. */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,62,private final int blockColumns;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,65,* Create a new matrix with the supplied row and column dimensions.
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,67,* @param rows  the number of rows in the new matrix
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,68,* @param columns  the number of columns in the new matrix
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,69,* @throws IllegalArgumentException if row or column dimension is not
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,70,*  positive
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,72,"public DenseRealMatrix(final int rows, final int columns)"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,73,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,75,"super(rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,76,this.rows    = rows;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,77,this.columns = columns;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,79,// number of blocks
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,80,blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,81,blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,83,// number of lines in smaller blocks at the bottom side of the matrix
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,84,final int lastLines = rows - (blockRows - 1) * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,86,// number of columns in smaller blocks at the right side of the matrix
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,87,final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,89,"// allocate storage blocks, taking care of smaller ones at right and bottom"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,90,blocks       = new double[blockRows * blockColumns][];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,91,int blockIndex = 0;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,92,for (int iBlock = 0; iBlock < (blockRows - 1); ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,93,for (int jBlock = 0; jBlock < (blockColumns - 1); ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,94,blocks[blockIndex++] = new double[BLOCK_SIZE * BLOCK_SIZE];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,96,blocks[blockIndex++] = new double[BLOCK_SIZE * lastColumns];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,98,for (int jBlock = 0; jBlock < (blockColumns - 1); ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,99,blocks[blockIndex++] = new double[lastLines * BLOCK_SIZE];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,101,blocks[blockIndex++] = new double[lastLines * lastColumns];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,106,* Create a new RealMatrix using the input array as the underlying
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,107,* data array.
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,108,"* <p>The input array is copied (and data rearranged), it is not referenced.</p>"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,110,* @param d data for new matrix
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,111,* @throws IllegalArgumentException if <code>d</code> is not rectangular
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,112,*  (not all rows have the same length)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,114,public DenseRealMatrix(final double[][] d)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,115,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,117,// build empty instance
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,118,"this(d.length, d[0].length);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,120,// fill in instance
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,121,for (int i = 0; i < d.length; ++i) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,122,final double[] rowI = d[i];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,123,if (rowI.length != columns) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,124,"throw MathRuntimeException.createIllegalArgumentException(""some rows have length {0} while others have length {1}"","
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,125,new Object[] {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,126,"columns, rowI.length"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,129,for (int j = 0; j < rowI.length; ++j) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,130,"setEntry(i, j, rowI[j]);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,136,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,137,"public RealMatrix createMatrix(final int rowDimension, final int columnDimension)"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,138,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,139,"return new DenseRealMatrix(rowDimension, columnDimension);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,142,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,143,public RealMatrix copy() {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,145,// create an empty matrix
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,146,"DenseRealMatrix copied = new DenseRealMatrix(rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,148,// copy the blocks
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,149,for (int i = 0; i < blocks.length; ++i) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,150,"System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,153,return copied;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,157,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,158,public RealMatrix add(final RealMatrix m)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,159,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,160,try {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,161,return add((DenseRealMatrix) m);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,162,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,164,// safety check
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,165,checkAdditionCompatible(m);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,167,"final DenseRealMatrix out = new DenseRealMatrix(rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,169,"// perform addition block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,170,int blockIndex = 0;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,171,for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,172,for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,174,// perform addition on the current block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,175,final double[] outBlock = out.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,176,final double[] tBlock   = blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,177,final int      pStart   = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,178,"final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,179,final int      qStart   = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,180,"final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,181,"for (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,182,"for (int q = qStart; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,183,"outBlock[k] = tBlock[k] + m.getEntry(p, q);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,187,// go to next block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,188,++blockIndex;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,193,return out;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,199,* Compute the sum of this and <code>m</code>.
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,201,* @param m    matrix to be added
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,202,* @return     this + m
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,203,* @throws  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,205,public DenseRealMatrix add(final DenseRealMatrix m)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,206,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,208,// safety check
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,209,checkAdditionCompatible(m);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,211,"final DenseRealMatrix out = new DenseRealMatrix(rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,213,"// perform addition block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,214,for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,215,final double[] outBlock = out.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,216,final double[] tBlock   = blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,217,final double[] mBlock   = m.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,218,for (int k = 0; k < outBlock.length; ++k) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,219,outBlock[k] = tBlock[k] + mBlock[k];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,223,return out;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,227,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,228,public RealMatrix subtract(final RealMatrix m)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,229,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,230,try {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,231,return subtract((DenseRealMatrix) m);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,232,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,234,// safety check
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,235,checkSubtractionCompatible(m);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,237,"final DenseRealMatrix out = new DenseRealMatrix(rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,239,"// perform subtraction block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,240,int blockIndex = 0;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,241,for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,242,for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,244,// perform subtraction on the current block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,245,final double[] outBlock = out.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,246,final double[] tBlock   = blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,247,final int      pStart   = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,248,"final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,249,final int      qStart   = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,250,"final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,251,"for (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,252,"for (int q = qStart; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,253,"outBlock[k] = tBlock[k] - m.getEntry(p, q);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,257,// go to next block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,258,++blockIndex;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,263,return out;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,269,* Compute this minus <code>m</code>.
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,271,* @param m    matrix to be subtracted
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,272,* @return     this - m
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,273,* @throws  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,275,public DenseRealMatrix subtract(final DenseRealMatrix m)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,276,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,278,// safety check
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,279,checkSubtractionCompatible(m);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,281,"final DenseRealMatrix out = new DenseRealMatrix(rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,283,"// perform subtraction block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,284,for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,285,final double[] outBlock = out.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,286,final double[] tBlock   = blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,287,final double[] mBlock   = m.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,288,for (int k = 0; k < outBlock.length; ++k) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,289,outBlock[k] = tBlock[k] - mBlock[k];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,293,return out;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,297,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,298,public RealMatrix scalarAdd(final double d)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,299,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,301,"final DenseRealMatrix out = new DenseRealMatrix(rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,303,"// perform subtraction block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,304,for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,305,final double[] outBlock = out.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,306,final double[] tBlock   = blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,307,for (int k = 0; k < outBlock.length; ++k) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,308,outBlock[k] = tBlock[k] + d;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,312,return out;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,316,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,317,public RealMatrix scalarMultiply(final double d)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,318,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,320,"final DenseRealMatrix out = new DenseRealMatrix(rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,322,"// perform subtraction block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,323,for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,324,final double[] outBlock = out.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,325,final double[] tBlock   = blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,326,for (int k = 0; k < outBlock.length; ++k) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,327,outBlock[k] = tBlock[k] * d;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,331,return out;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,335,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,336,public RealMatrix multiply(final RealMatrix m)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,337,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,338,try {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,339,return multiply((DenseRealMatrix) m);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,340,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,342,// safety check
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,343,checkMultiplicationCompatible(m);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,345,"final DenseRealMatrix out = new DenseRealMatrix(rows, m.getColumnDimension());"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,347,"// perform multiplication block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,348,int blockIndex = 0;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,349,for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,351,final int pStart = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,352,"final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,354,for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,356,final int qStart = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,357,"final int qEnd   = Math.min(qStart + BLOCK_SIZE, m.getColumnDimension());"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,359,// select current block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,360,final double[] outBlock = out.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,362,// perform multiplication on current block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,363,for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,364,final int kWidth      = blockWidth(kBlock);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,365,final double[] tBlock = blocks[iBlock * blockColumns + kBlock];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,366,final int rStart      = kBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,367,"for (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,368,final int lStart = (p - pStart) * kWidth;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,369,final int lEnd   = lStart + kWidth;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,370,for (int q = qStart; q < qEnd; ++q) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,371,double sum = 0;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,372,"for (int l = lStart, r = rStart; l < lEnd; ++l, ++r) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,373,"sum += tBlock[l] * m.getEntry(r, q);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,375,outBlock[k++] += sum;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,380,// go to next block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,381,++blockIndex;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,386,return out;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,392,* Returns the result of postmultiplying this by m.
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,394,* @param m    matrix to postmultiply by
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,395,* @return     this * m
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,396,* @throws     IllegalArgumentException
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,397,*             if columnDimension(this) != rowDimension(m)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,399,DenseRealMatrix multiply(DenseRealMatrix m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,401,// safety check
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,402,checkMultiplicationCompatible(m);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,404,"final DenseRealMatrix out = new DenseRealMatrix(rows, m.columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,406,"// perform multiplication block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,407,int blockIndex = 0;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,408,for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,410,final int pStart = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,411,"final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,413,for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,414,final int jWidth = out.blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,416,// select current block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,417,final double[] outBlock = out.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,419,// perform multiplication on current block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,420,for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,421,final int kWidth = blockWidth(kBlock);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,422,final double[] tBlock = blocks[iBlock * blockColumns + kBlock];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,423,final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,424,"for (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,425,final int lStart = (p - pStart) * kWidth;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,426,final int lEnd   = lStart + kWidth;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,427,for (int nStart = 0; nStart < jWidth; ++nStart) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,428,double sum = 0;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,429,"for (int l = lStart, n = nStart; l < lEnd; ++l, n += jWidth) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,430,sum += tBlock[l] * mBlock[n];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,432,outBlock[k++] += sum;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,437,// go to next block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,438,++blockIndex;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,443,return out;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,447,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,448,public double[][] getData() {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,450,final double[][] data = new double[getRowDimension()][getColumnDimension()];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,451,final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,453,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,454,final int pStart = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,455,"final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,456,int regularPos   = 0;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,457,int lastPos      = 0;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,458,for (int p = pStart; p < pEnd; ++p) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,459,final double[] dataP = data[p];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,460,int blockIndex = iBlock * blockColumns;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,461,int dataPos    = 0;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,462,for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,463,"System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,464,dataPos += BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,466,"System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,467,regularPos += BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,468,lastPos    += lastColumns;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,472,return data;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,476,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,477,public double getNorm() {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,478,final double[] colSums = new double[BLOCK_SIZE];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,479,double maxColSum = 0;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,480,for (int jBlock = 0; jBlock < blockColumns; jBlock++) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,481,final int jWidth = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,482,"Arrays.fill(colSums, 0, jWidth, 0.0);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,483,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,484,final int iHeight = blockHeight(iBlock);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,485,final double[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,486,for (int j = 0; j < jWidth; ++j) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,487,double sum = 0;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,488,for (int i = 0; i < iHeight; ++i) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,489,sum += Math.abs(block[i * jWidth + j]);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,491,colSums[j] += sum;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,494,for (int j = 0; j < jWidth; ++j) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,495,"maxColSum = Math.max(maxColSum, colSums[j]);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,498,return maxColSum;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,501,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,502,public double getFrobeniusNorm() {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,503,double sum2 = 0;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,504,for (int blockIndex = 0; blockIndex < blocks.length; ++blockIndex) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,505,for (final double entry : blocks[blockIndex]) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,506,sum2 += entry * entry;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,509,return Math.sqrt(sum2);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,512,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,513,"public RealMatrix getSubMatrix(final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,514,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,515,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,517,// safety checks
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,518,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,520,// create the output matrix
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,521,final DenseRealMatrix out =
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,522,"new DenseRealMatrix(endRow - startRow + 1, endColumn - startColumn + 1);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,524,// compute blocks shifts
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,525,final int blockStartRow    = startRow    / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,526,final int rowsShift        = startRow    % BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,527,final int blockStartColumn = startColumn / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,528,final int columnsShift     = startColumn % BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,530,"// perform extraction block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,531,"for (int iBlock = 0, pBlock = blockStartRow; iBlock < out.blockRows; ++iBlock, ++pBlock) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,532,final int iHeight = out.blockHeight(iBlock);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,533,"for (int jBlock = 0, qBlock = blockStartColumn; jBlock < out.blockColumns; ++jBlock, ++qBlock) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,534,final int jWidth = out.blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,536,// handle one block of the output matrix
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,537,final int      outIndex = iBlock * out.blockColumns + jBlock;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,538,final double[] outBlock = out.blocks[outIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,539,final int      index    = pBlock * blockColumns + qBlock;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,540,final int      width    = blockWidth(index);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,542,final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,543,final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,544,if (heightExcess > 0) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,545,// the submatrix block spans on two blocks rows from the original matrix
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,546,if (widthExcess > 0) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,547,// the submatrix block spans on two blocks columns from the original matrix
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,548,final int width2 = blockWidth(index + 1);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,549,"copyBlockPart(blocks[index], width,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,550,"rowsShift, BLOCK_SIZE,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,551,"columnsShift, BLOCK_SIZE,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,552,"outBlock, jWidth, 0, 0);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,553,"copyBlockPart(blocks[index + 1], width2,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,554,"rowsShift, BLOCK_SIZE,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,555,"0, widthExcess,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,556,"outBlock, jWidth, 0, jWidth - widthExcess);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,557,"copyBlockPart(blocks[index + blockColumns], width,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,558,"0, heightExcess,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,559,"columnsShift, BLOCK_SIZE,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,560,"outBlock, jWidth, iHeight - heightExcess, 0);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,561,"copyBlockPart(blocks[index + blockColumns + 1], width2,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,562,"0, heightExcess,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,563,"0, widthExcess,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,564,"outBlock, jWidth, iHeight - heightExcess, jWidth - widthExcess);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,565,} else {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,566,// the submatrix block spans on one block column from the original matrix
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,567,"copyBlockPart(blocks[index], width,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,568,"rowsShift, BLOCK_SIZE,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,569,"columnsShift, jWidth + columnsShift,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,570,"outBlock, jWidth, 0, 0);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,571,"copyBlockPart(blocks[index + blockColumns], width,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,572,"0, heightExcess,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,573,"columnsShift, jWidth + columnsShift,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,574,"outBlock, jWidth, iHeight - heightExcess, 0);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,576,} else {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,577,// the submatrix block spans on one block row from the original matrix
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,578,if (widthExcess > 0) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,579,// the submatrix block spans on two blocks columns from the original matrix
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,580,final int width2 = blockWidth(index + 1);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,581,"copyBlockPart(blocks[index], width,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,582,"rowsShift, iHeight + rowsShift,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,583,"columnsShift, BLOCK_SIZE,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,584,"outBlock, jWidth, 0, 0);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,585,"copyBlockPart(blocks[index + 1], width2,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,586,"rowsShift, iHeight + rowsShift,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,587,"0, widthExcess,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,588,"outBlock, jWidth, 0, jWidth - widthExcess);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,589,} else {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,590,// the submatrix block spans on one block column from the original matrix
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,591,"copyBlockPart(blocks[index], width,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,592,"rowsShift, iHeight + rowsShift,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,593,"columnsShift, jWidth + columnsShift,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,594,"outBlock, jWidth, 0, 0);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,601,return out;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,606,* Copy a part of a block into another one
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,607,* <p>This method can be called only when the specified part fits in both
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,608,"* blocks, no verification is done here.</p>"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,609,* @param srcBlock source block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,610,* @param srcWidth source block width ({@link #BLOCK_SIZE} or smaller)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,611,* @param srcStartRow start row in the source block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,612,* @param srcEndRow end row (exclusive) in the source block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,613,* @param srcStartColumn start column in the source block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,614,* @param srcEndColumn end column (exclusive) in the source block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,615,* @param dstBlock destination block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,616,* @param dstWidth destination block width ({@link #BLOCK_SIZE} or smaller)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,617,* @param dstStartRow start row in the destination block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,618,* @param dstStartColumn start column in the destination block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,620,"private void copyBlockPart(final double[] srcBlock, final int srcWidth,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,621,"final int srcStartRow, final int srcEndRow,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,622,"final int srcStartColumn, final int srcEndColumn,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,623,"final double[] dstBlock, final int dstWidth,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,624,"final int dstStartRow, final int dstStartColumn) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,625,final int length = srcEndColumn - srcStartColumn;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,626,int srcPos = srcStartRow * srcWidth + srcStartColumn;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,627,int dstPos = dstStartRow * dstWidth + dstStartColumn;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,628,for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,629,"System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,630,srcPos += srcWidth;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,631,dstPos += dstWidth;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,635,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,636,"public double getEntry(final int row, final int column)"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,637,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,638,try {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,639,final int iBlock = row    / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,640,final int jBlock = column / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,641,final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,642,(column - jBlock * BLOCK_SIZE);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,643,return blocks[iBlock * blockColumns + jBlock][k];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,644,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,645,"throw new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,646,new Object[] {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,647,"row, column,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,648,"getRowDimension(), getColumnDimension()"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,653,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,654,"public void setEntry(final int row, final int column, final double value)"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,655,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,656,try {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,657,final int iBlock = row    / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,658,final int jBlock = column / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,659,final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,660,(column - jBlock * BLOCK_SIZE);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,661,blocks[iBlock * blockColumns + jBlock][k] = value;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,662,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,663,"throw new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,664,new Object[] {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,665,"row, column,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,666,"getRowDimension(), getColumnDimension()"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,671,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,672,"public void addToEntry(final int row, final int column, final double increment)"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,673,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,674,try {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,675,final int iBlock = row    / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,676,final int jBlock = column / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,677,final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,678,(column - jBlock * BLOCK_SIZE);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,679,blocks[iBlock * blockColumns + jBlock][k] += increment;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,680,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,681,"throw new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,682,new Object[] {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,683,"row, column,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,684,"getRowDimension(), getColumnDimension()"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,689,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,690,"public void multiplyEntry(final int row, final int column, final double factor)"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,691,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,692,try {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,693,final int iBlock = row    / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,694,final int jBlock = column / BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,695,final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,696,(column - jBlock * BLOCK_SIZE);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,697,blocks[iBlock * blockColumns + jBlock][k] *= factor;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,698,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,699,"throw new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,700,new Object[] {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,701,"row, column,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,702,"getRowDimension(), getColumnDimension()"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,707,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,708,public RealMatrix transpose() {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,710,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,711,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,712,"final DenseRealMatrix out = new DenseRealMatrix(nCols, nRows);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,714,"// perform transpose block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,715,int blockIndex = 0;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,716,for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,717,for (int jBlock = 0; jBlock < blockRows; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,719,// transpose current block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,720,final double[] outBlock = out.blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,721,final double[] tBlock   = blocks[jBlock * blockColumns + iBlock];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,722,final int      pStart   = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,723,"final int      pEnd     = Math.min(pStart + BLOCK_SIZE, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,724,final int      qStart   = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,725,"final int      qEnd     = Math.min(qStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,726,"for (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,727,final int lInc = pEnd - pStart;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,728,"for (int q = qStart, l = p - pStart; q < qEnd; ++q, l+= lInc) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,729,outBlock[k++] = tBlock[l];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,733,// go to next block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,734,++blockIndex;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,739,return out;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,743,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,744,public int getRowDimension() {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,745,return rows;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,748,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,749,public int getColumnDimension() {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,750,return columns;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,753,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,754,public double[] operate(final double[] v)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,755,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,757,final int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,758,final int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,759,if (v.length != nCols) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,760,"throw new IllegalArgumentException(""vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,762,final double[] out = new double[nRows];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,764,"// perform multiplication block-wise, to ensure good cache behavior"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,765,int blockIndex = 0;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,766,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,767,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,768,final double[] block  = blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,769,final int      pStart = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,770,"final int      pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,771,final int      qStart = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,772,"final int      qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,773,"for (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,774,double sum = 0;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,775,for (int q = qStart; q < qEnd; ++q) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,776,sum += block[k++] * v[q];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,778,out[p] += sum;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,780,++blockIndex;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,784,return out;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,788,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,789,public RealVector operate(final RealVector v)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,790,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,791,try {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,792,return operate((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,793,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,794,return super.operate(v);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,799,* Returns the result of multiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,801,* @param v the vector to operate on
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,802,* @return this*v
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,803,* @throws IllegalArgumentException if columnDimension != v.size()
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,805,public RealVectorImpl operate(final RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,806,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,807,"return new RealVectorImpl(operate(v.getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,811,* Get the height of a block.
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,812,* @param blockRow row index (in block sense) of the block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,813,* @return height (number of rows) of the block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,815,private int blockHeight(final int blockRow) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,816,return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,820,* Get the width of a block.
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,821,* @param blockColumn column index (in block sense) of the block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,822,* @return width (number of columns) of the block
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,824,private int blockWidth(final int blockColumn) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,825,return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,38, Returns a {@link RealMatrix} whose entries are the the values in the
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,39," the input array.  The input array is copied, not referenced."
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,41, @param data input array
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,42, @return  RealMatrix containing the values of the array
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,43, @throws IllegalArgumentException if <code>data</code> is not rectangular
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,44,  (not all rows have the same length) or empty
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,45, @throws NullPointerException if <code>data</code> is null
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,46," @see #createRealMatrix(double[][], boolean)"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,38,* Returns a {@link RealMatrix} with specified dimensions.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,39,* <p>The matrix elements are all set to 0.0.</p>
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,40,* @param rows number of rows of the matrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,41,* @param columns number of columns of the matrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,42,* @return  RealMatrix with specified dimensions
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,43,* @see #createRealMatrix(double[][])
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,48,ublic static RealMatrix createRealMatrix(double[][] data) {
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,49,eturn new RealMatrixImpl(data);
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,45,"public static RealMatrix createRealMatrix(final int rows, final int columns) {"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,46,"return new DenseRealMatrix(rows, columns);"
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,54, the input array.
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,55, <p>If an array is built specially in order to be embedded in a
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,56," RealMatrix and not used directly, the <code>copyArray</code> may be"
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,57, set to <code>false</code. This will prevent the copying and improve
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,58, performance as no new array will be built and no data will be copied.</p>
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,59, @param data data for new matrix
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,60," @param copyArray if true, the input array will be copied, otherwise"
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,61, it will be referenced
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,51,"* the input array.  The input array is copied, not referenced."
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,53,* @param data input array
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,66, @see #createRealMatrix(double[][])
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,58,"* @see #createRealMatrix(int, int)"
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,68,"ublic static RealMatrix createRealMatrix(double[][] data, boolean copyArray) {"
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,69,"eturn new RealMatrixImpl(data, copyArray);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,60,public static RealMatrix createRealMatrix(double[][] data) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,61,return new DenseRealMatrix(data);
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,81,ouble[][] d = new double[dimension][dimension];
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,82,or (int row = 0; row < dimension; row++) {
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,83,[row][row] = 1d;
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,73,"final RealMatrix m = createRealMatrix(dimension, dimension);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,74,for (int i = 0; i < dimension; ++i) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,75,"m.setEntry(i, i, 1.0);"
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,85,"eturn new RealMatrixImpl(d, false);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,77,return m;
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,81,* Returns a diagonal matrix with specified elements.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,83,* @param diagonal diagonal elements of the matrix (the array elements
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,84,* will be copied)
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,85,* @return diagonal matrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,86,* @since 2.0
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,88,public static RealMatrix createRealDiagonalMatrix(final double[] diagonal) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,89,"final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,90,for (int i = 0; i < diagonal.length; ++i) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,91,"m.setEntry(i, i, diagonal[i]);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,93,return m;
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,173,inal double[][] data = new double[1][nCols];
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,174,"ystem.arraycopy(rowData, 0, data[0], 0, nCols);"
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,175,"eturn new RealMatrixImpl(data, false);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,181,"final RealMatrix m = createRealMatrix(1, nCols);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,182,for (int i = 0; i < nCols; ++i) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,183,"m.setEntry(0, i, rowData[i]);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,185,return m;
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,241,inal double[][] data = new double[nRows][1];
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,242,or (int row = 0; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,243,ata[row][0] = columnData[row];
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,251,"final RealMatrix m = createRealMatrix(nRows, 1);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,252,for (int i = 0; i < nRows; ++i) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,253,"m.setEntry(i, 0, columnData[i]);"
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,245,"eturn new RealMatrixImpl(data, false);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,255,return m;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,17,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,19,import java.util.Random;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,21,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,22,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,23,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,26,* Test cases for the {@link DenseRealMatrix} class.
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,28,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,31,public final class DenseRealMatrixTest extends TestCase {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,33,// 3 x 3 identity matrix
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,34,"protected double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,36,// Test data for group operations
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,37,"protected double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,38,"protected double[][] testDataLU = {{2d, 5d, 3d}, {.5d, -2.5d, 6.5d}, {0.5d, 0.2d, .2d}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,39,"protected double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,40,"protected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,41,"{-1d,0d,-8d} };"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,42,"protected double[] testDataRow1 = {1d,2d,3d};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,43,"protected double[] testDataCol3 = {3d,3d,8d};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,44,protected double[][] testDataInv =
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,45,"{ {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,46,"protected double[] preMultTest = {8,12,33};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,47,"protected double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,48,"protected double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,49,protected double[][] testDataPlusInv =
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,50,"{ {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,52,// lu decomposition tests
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,53,"protected double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,54,"protected double[][] luDataLUDecomposition = { {6d,9d,8d}, {0d,5d,7d},"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,55,"{0.33333333333333,0d,0.33333333333333} };"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,57,// singular matrices
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,58,"protected double[][] singular = { {2d,3d}, {2d,3d} };"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,59,"protected double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,60,"{7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,61,"protected double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,62,"protected double[][] detData2 = { {1d, 3d}, {2d, 4d}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,64,// vectors
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,65,"protected double[] testVector = {1,2,3};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,66,"protected double[] testVector2 = {1,2,3,4};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,68,// submatrix accessor tests
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,69,"protected double[][] subTestData = {{1, 2, 3, 4}, {1.5, 2.5, 3.5, 4.5},"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,70,"{2, 4, 6, 8}, {4, 5, 6, 7}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,71,// array selections
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,72,"protected double[][] subRows02Cols13 = { {2, 4}, {4, 8}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,73,"protected double[][] subRows03Cols12 = { {2, 3}, {5, 6}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,74,"protected double[][] subRows03Cols123 = { {2, 3, 4} , {5, 6, 7}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,75,// effective permutations
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,76,"protected double[][] subRows20Cols123 = { {4, 6, 8} , {2, 3, 4}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,77,"protected double[][] subRows31Cols31 = {{7, 5}, {4.5, 2.5}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,78,// contiguous ranges
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,79,"protected double[][] subRows01Cols23 = {{3,4} , {3.5, 4.5}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,80,"protected double[][] subRows23Cols00 = {{2} , {4}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,81,protected double[][] subRows00Cols33 = {{4}};
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,82,// row matrices
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,83,"protected double[][] subRow0 = {{1,2,3,4}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,84,"protected double[][] subRow3 = {{4,5,6,7}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,85,// column matrices
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,86,"protected double[][] subColumn1 = {{2}, {2.5}, {4}, {5}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,87,"protected double[][] subColumn3 = {{4}, {4.5}, {8}, {7}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,89,// tolerances
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,90,protected double entryTolerance = 10E-16;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,91,protected double normTolerance = 10E-14;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,93,public DenseRealMatrixTest(String name) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,94,super(name);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,97,public void setUp() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,101,public static Test suite() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,102,TestSuite suite = new TestSuite(DenseRealMatrixTest.class);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,103,"suite.setName(""DenseRealMatrix Tests"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,104,return suite;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,107,/** test dimensions */
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,108,public void testDimensions() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,109,DenseRealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,110,DenseRealMatrix m2 = new DenseRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,111,"assertEquals(""testData row dimension"",3,m.getRowDimension());"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,112,"assertEquals(""testData column dimension"",3,m.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,113,"assertTrue(""testData is square"",m.isSquare());"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,114,"assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,115,"assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,116,"assertTrue(""testData2 is not square"",!m2.isSquare());"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,119,/** test copy functions */
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,120,public void testCopyFunctions() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,121,Random r = new Random(66636328996002l);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,122,"DenseRealMatrix m1 = createRandomMatrix(r, 47, 83);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,123,DenseRealMatrix m2 = new DenseRealMatrix(m1.getData());
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,124,"assertEquals(m1, m2);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,125,DenseRealMatrix m3 = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,126,DenseRealMatrix m4 = new DenseRealMatrix(m3.getData());
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,127,"assertEquals(m3, m4);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,130,/** test add */
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,131,public void testAdd() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,132,DenseRealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,133,DenseRealMatrix mInv = new DenseRealMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,134,RealMatrix mPlusMInv = m.add(mInv);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,135,double[][] sumEntries = mPlusMInv.getData();
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,136,for (int row = 0; row < m.getRowDimension(); row++) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,137,for (int col = 0; col < m.getColumnDimension(); col++) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,138,"assertEquals(""sum entry entry"","
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,139,"testDataPlusInv[row][col],sumEntries[row][col],"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,140,entryTolerance);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,145,/** test add failure */
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,146,public void testAddFail() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,147,DenseRealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,148,DenseRealMatrix m2 = new DenseRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,149,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,150,m.add(m2);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,151,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,152,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,157,/** test norm */
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,158,public void testNorm() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,159,DenseRealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,160,DenseRealMatrix m2 = new DenseRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,161,"assertEquals(""testData norm"",14d,m.getNorm(),entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,162,"assertEquals(""testData2 norm"",7d,m2.getNorm(),entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,165,/** test Frobenius norm */
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,166,public void testFrobeniusNorm() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,167,DenseRealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,168,DenseRealMatrix m2 = new DenseRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,169,"assertEquals(""testData Frobenius norm"", Math.sqrt(117.0), m.getFrobeniusNorm(), entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,170,"assertEquals(""testData2 Frobenius norm"", Math.sqrt(52.0), m2.getFrobeniusNorm(), entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,173,/** test m-n = m + -n */
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,174,public void testPlusMinus() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,175,DenseRealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,176,DenseRealMatrix m2 = new DenseRealMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,177,"assertClose(m.subtract(m2), m2.scalarMultiply(-1d).add(m), entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,178,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,179,m.subtract(new DenseRealMatrix(testData2));
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,180,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,181,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,186,/** test multiply */
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,187,public void testMultiply() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,188,DenseRealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,189,DenseRealMatrix mInv = new DenseRealMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,190,DenseRealMatrix identity = new DenseRealMatrix(id);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,191,DenseRealMatrix m2 = new DenseRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,192,"assertClose(m.multiply(mInv), identity, entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,193,"assertClose(mInv.multiply(m), identity, entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,194,"assertClose(m.multiply(identity), m, entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,195,"assertClose(identity.multiply(mInv), mInv, entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,196,"assertClose(m2.multiply(identity), m2, entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,197,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,198,m.multiply(new DenseRealMatrix(bigSingular));
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,199,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,200,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,201,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,205,public void testSeveralBlocks() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,207,"RealMatrix m = new DenseRealMatrix(35, 71);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,208,for (int i = 0; i < m.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,209,for (int j = 0; j < m.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,210,"m.setEntry(i, j, i + j / 1024.0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,214,RealMatrix mT = m.transpose();
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,215,"assertEquals(m.getRowDimension(), mT.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,216,"assertEquals(m.getColumnDimension(), mT.getRowDimension());"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,217,for (int i = 0; i < mT.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,218,for (int j = 0; j < mT.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,219,"assertEquals(m.getEntry(j, i), mT.getEntry(i, j), 0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,223,RealMatrix mPm = m.add(m);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,224,for (int i = 0; i < mPm.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,225,for (int j = 0; j < mPm.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,226,"assertEquals(2 * m.getEntry(i, j), mPm.getEntry(i, j), 0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,230,RealMatrix mPmMm = mPm.subtract(m);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,231,for (int i = 0; i < mPmMm.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,232,for (int j = 0; j < mPmMm.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,233,"assertEquals(m.getEntry(i, j), mPmMm.getEntry(i, j), 0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,237,RealMatrix mTm = mT.multiply(m);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,238,for (int i = 0; i < mTm.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,239,for (int j = 0; j < mTm.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,240,double sum = 0;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,241,for (int k = 0; k < mT.getColumnDimension(); ++k) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,242,sum += (k + i / 1024.0) * (k + j / 1024.0);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,244,"assertEquals(sum, mTm.getEntry(i, j), 0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,248,RealMatrix mmT = m.multiply(mT);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,249,for (int i = 0; i < mmT.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,250,for (int j = 0; j < mmT.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,251,double sum = 0;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,252,for (int k = 0; k < m.getColumnDimension(); ++k) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,253,sum += (i + k / 1024.0) * (j + k / 1024.0);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,255,"assertEquals(sum, mmT.getEntry(i, j), 0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,259,"RealMatrix sub1 = m.getSubMatrix(2, 9, 5, 20);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,260,for (int i = 0; i < sub1.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,261,for (int j = 0; j < sub1.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,262,"assertEquals((i + 2) + (j + 5) / 1024.0, sub1.getEntry(i, j), 0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,266,"RealMatrix sub2 = m.getSubMatrix(10, 12, 3, 70);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,267,for (int i = 0; i < sub2.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,268,for (int j = 0; j < sub2.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,269,"assertEquals((i + 10) + (j + 3) / 1024.0, sub2.getEntry(i, j), 0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,273,"RealMatrix sub3 = m.getSubMatrix(30, 34, 0, 5);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,274,for (int i = 0; i < sub3.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,275,for (int j = 0; j < sub3.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,276,"assertEquals((i + 30) + (j + 0) / 1024.0, sub3.getEntry(i, j), 0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,280,"RealMatrix sub4 = m.getSubMatrix(30, 32, 62, 65);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,281,for (int i = 0; i < sub4.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,282,for (int j = 0; j < sub4.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,283,"assertEquals((i + 30) + (j + 62) / 1024.0, sub4.getEntry(i, j), 0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,289,//Additional Test for DenseRealMatrixTest.testMultiply
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,291,"private double[][] d3 = new double[][] {{1,2,3,4},{5,6,7,8}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,292,"private double[][] d4 = new double[][] {{1},{2},{3},{4}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,293,"private double[][] d5 = new double[][] {{30},{70}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,295,public void testMultiply2() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,296,RealMatrix m3 = new DenseRealMatrix(d3);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,297,RealMatrix m4 = new DenseRealMatrix(d4);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,298,RealMatrix m5 = new DenseRealMatrix(d5);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,299,"assertClose(m3.multiply(m4), m5, entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,302,/** test trace */
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,303,public void testTrace() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,304,RealMatrix m = new DenseRealMatrix(id);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,305,"assertEquals(""identity trace"",3d,m.getTrace(),entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,306,m = new DenseRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,307,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,308,m.getTrace();
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,309,"fail(""Expecting NonSquareMatrixException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,310,} catch (NonSquareMatrixException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,315,/** test scalarAdd */
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,316,public void testScalarAdd() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,317,RealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,318,"assertClose(new DenseRealMatrix(testDataPlus2), m.scalarAdd(2d), entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,321,/** test operate */
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,322,public void testOperate() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,323,RealMatrix m = new DenseRealMatrix(id);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,324,"assertClose(testVector, m.operate(testVector), entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,325,"assertClose(testVector, m.operate(new RealVectorImpl(testVector)).getData(), entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,326,m = new DenseRealMatrix(bigSingular);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,327,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,328,m.operate(testVector);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,329,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,330,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,335,/** test issue MATH-209 */
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,336,public void testMath209() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,337,RealMatrix a = new DenseRealMatrix(new double[][] {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,338,"{ 1, 2 }, { 3, 4 }, { 5, 6 }"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,340,"double[] b = a.operate(new double[] { 1, 1 });"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,341,"assertEquals(a.getRowDimension(), b.length);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,342,"assertEquals( 3.0, b[0], 1.0e-12);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,343,"assertEquals( 7.0, b[1], 1.0e-12);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,344,"assertEquals(11.0, b[2], 1.0e-12);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,347,/** test transpose */
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,348,public void testTranspose() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,349,RealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,350,RealMatrix mIT = new LUSolver(new LUDecompositionImpl(m)).getInverse().transpose();
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,351,RealMatrix mTI = new LUSolver(new LUDecompositionImpl(m.transpose())).getInverse();
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,352,"assertClose(mIT, mTI, normTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,353,m = new DenseRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,354,RealMatrix mt = new DenseRealMatrix(testData2T);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,355,"assertClose(mt, m.transpose(), normTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,358,/** test preMultiply by vector */
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,359,public void testPremultiplyVector() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,360,RealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,361,"assertClose(m.preMultiply(testVector), preMultTest, normTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,362,"assertClose(m.preMultiply(new RealVectorImpl(testVector).getData()),"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,363,"preMultTest, normTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,364,m = new DenseRealMatrix(bigSingular);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,365,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,366,m.preMultiply(testVector);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,367,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,368,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,373,public void testPremultiply() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,374,RealMatrix m3 = new DenseRealMatrix(d3);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,375,RealMatrix m4 = new DenseRealMatrix(d4);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,376,RealMatrix m5 = new DenseRealMatrix(d5);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,377,"assertClose(m4.preMultiply(m3), m5, entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,379,DenseRealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,380,DenseRealMatrix mInv = new DenseRealMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,381,DenseRealMatrix identity = new DenseRealMatrix(id);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,382,"assertClose(m.preMultiply(mInv), identity, entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,383,"assertClose(mInv.preMultiply(m), identity, entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,384,"assertClose(m.preMultiply(identity), m, entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,385,"assertClose(identity.preMultiply(mInv), mInv, entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,386,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,387,m.preMultiply(new DenseRealMatrix(bigSingular));
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,388,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,389,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,394,public void testGetVectors() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,395,RealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,396,"assertClose(m.getRow(0), testDataRow1, entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,397,"assertClose(m.getColumn(2), testDataCol3, entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,398,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,399,m.getRow(10);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,400,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,401,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,404,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,405,m.getColumn(-1);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,406,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,407,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,412,public void testGetEntry() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,413,RealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,414,"assertEquals(""get entry"",m.getEntry(0,1),2d,entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,415,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,416,"m.getEntry(10, 4);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,417,"fail (""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,418,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,419,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,423,/** test examples in user guide */
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,424,public void testExamples() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,425,// Create a real matrix with two rows and three columns
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,426,"double[][] matrixData = { {1d,2d,3d}, {2d,5d,3d}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,427,RealMatrix m = new DenseRealMatrix(matrixData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,428,"// One more with three rows, two columns"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,429,"double[][] matrixData2 = { {1d,2d}, {2d,5d}, {1d, 7d}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,430,RealMatrix n = new DenseRealMatrix(matrixData2);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,431,// Now multiply m by n
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,432,RealMatrix p = m.multiply(n);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,433,"assertEquals(2, p.getRowDimension());"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,434,"assertEquals(2, p.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,435,// Invert p
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,436,RealMatrix pInverse = new LUSolver(new LUDecompositionImpl(p)).getInverse();
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,437,"assertEquals(2, pInverse.getRowDimension());"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,438,"assertEquals(2, pInverse.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,440,// Solve example
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,441,"double[][] coefficientsData = {{2, 3, -2}, {-1, 7, 6}, {4, -3, -5}};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,442,RealMatrix coefficients = new DenseRealMatrix(coefficientsData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,443,"double[] constants = {1, -2, 1};"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,444,double[] solution = new LUSolver(new LUDecompositionImpl(coefficients)).solve(constants);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,445,"assertEquals(2 * solution[0] + 3 * solution[1] -2 * solution[2], constants[0], 1E-12);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,446,"assertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2], constants[1], 1E-12);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,447,"assertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,451,// test submatrix accessors
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,452,public void testSubMatrix() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,453,RealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,454,RealMatrix mRows23Cols00 = new DenseRealMatrix(subRows23Cols00);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,455,RealMatrix mRows00Cols33 = new DenseRealMatrix(subRows00Cols33);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,456,RealMatrix mRows01Cols23 = new DenseRealMatrix(subRows01Cols23);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,457,RealMatrix mRows02Cols13 = new DenseRealMatrix(subRows02Cols13);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,458,RealMatrix mRows03Cols12 = new DenseRealMatrix(subRows03Cols12);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,459,RealMatrix mRows03Cols123 = new DenseRealMatrix(subRows03Cols123);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,460,RealMatrix mRows20Cols123 = new DenseRealMatrix(subRows20Cols123);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,461,RealMatrix mRows31Cols31 = new DenseRealMatrix(subRows31Cols31);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,462,"assertEquals(mRows23Cols00, m.getSubMatrix(2 , 3 , 0, 0));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,463,"assertEquals(mRows00Cols33, m.getSubMatrix(0 , 0 , 3, 3));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,464,"assertEquals(mRows01Cols23, m.getSubMatrix(0 , 1 , 2, 3));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,465,"assertEquals(mRows02Cols13, m.getSubMatrix(new int[] {0,2}, new int[] {1,3}));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,466,"assertEquals(mRows03Cols12, m.getSubMatrix(new int[] {0,3}, new int[] {1,2}));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,467,"assertEquals(mRows03Cols123, m.getSubMatrix(new int[] {0,3}, new int[] {1,2,3}));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,468,"assertEquals(mRows20Cols123, m.getSubMatrix(new int[] {2,0}, new int[] {1,2,3}));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,469,"assertEquals(mRows31Cols31, m.getSubMatrix(new int[] {3,1}, new int[] {3,1}));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,470,"assertEquals(mRows31Cols31, m.getSubMatrix(new int[] {3,1}, new int[] {3,1}));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,472,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,473,"m.getSubMatrix(1,0,2,4);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,474,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,475,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,476,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,478,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,479,"m.getSubMatrix(-1,1,2,2);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,480,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,481,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,482,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,484,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,485,"m.getSubMatrix(1,0,2,2);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,486,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,487,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,488,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,490,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,491,"m.getSubMatrix(1,0,2,4);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,492,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,493,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,494,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,496,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,497,"m.getSubMatrix(new int[] {}, new int[] {0});"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,498,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,499,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,500,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,502,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,503,"m.getSubMatrix(new int[] {0}, new int[] {4});"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,504,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,505,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,506,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,510,public void testGetRowMatrix() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,511,RealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,512,RealMatrix mRow0 = new DenseRealMatrix(subRow0);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,513,RealMatrix mRow3 = new DenseRealMatrix(subRow3);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,514,"assertEquals(""Row0"", mRow0,"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,515,m.getRowMatrix(0));
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,516,"assertEquals(""Row3"", mRow3,"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,517,m.getRowMatrix(3));
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,518,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,519,m.getRowMatrix(-1);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,520,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,521,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,522,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,524,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,525,m.getRowMatrix(4);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,526,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,527,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,528,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,532,public void testSetRowMatrix() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,533,RealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,534,RealMatrix mRow3 = new DenseRealMatrix(subRow3);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,535,"assertNotSame(mRow3, m.getRowMatrix(0));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,536,"m.setRowMatrix(0, mRow3);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,537,"assertEquals(mRow3, m.getRowMatrix(0));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,538,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,539,"m.setRowMatrix(-1, mRow3);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,540,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,541,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,542,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,544,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,545,"m.setRowMatrix(0, m);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,546,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,547,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,548,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,552,public void testGetColumnMatrix() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,553,RealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,554,RealMatrix mColumn1 = new DenseRealMatrix(subColumn1);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,555,RealMatrix mColumn3 = new DenseRealMatrix(subColumn3);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,556,"assertEquals(mColumn1, m.getColumnMatrix(1));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,557,"assertEquals(mColumn3, m.getColumnMatrix(3));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,558,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,559,m.getColumnMatrix(-1);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,560,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,561,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,562,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,564,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,565,m.getColumnMatrix(4);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,566,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,567,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,568,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,572,public void testSetColumnMatrix() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,573,RealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,574,RealMatrix mColumn3 = new DenseRealMatrix(subColumn3);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,575,"assertNotSame(mColumn3, m.getColumnMatrix(1));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,576,"m.setColumnMatrix(1, mColumn3);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,577,"assertEquals(mColumn3, m.getColumnMatrix(1));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,578,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,579,"m.setColumnMatrix(-1, mColumn3);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,580,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,581,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,582,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,584,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,585,"m.setColumnMatrix(0, m);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,586,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,587,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,588,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,592,public void testGetRowVector() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,593,RealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,594,RealVector mRow0 = new RealVectorImpl(subRow0[0]);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,595,RealVector mRow3 = new RealVectorImpl(subRow3[0]);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,596,"assertEquals(mRow0, m.getRowVector(0));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,597,"assertEquals(mRow3, m.getRowVector(3));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,598,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,599,m.getRowVector(-1);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,600,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,601,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,602,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,604,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,605,m.getRowVector(4);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,606,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,607,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,608,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,612,public void testSetRowVector() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,613,RealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,614,RealVector mRow3 = new RealVectorImpl(subRow3[0]);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,615,"assertNotSame(mRow3, m.getRowMatrix(0));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,616,"m.setRowVector(0, mRow3);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,617,"assertEquals(mRow3, m.getRowVector(0));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,618,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,619,"m.setRowVector(-1, mRow3);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,620,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,621,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,622,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,624,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,625,"m.setRowVector(0, new RealVectorImpl(5));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,626,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,627,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,628,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,632,public void testGetColumnVector() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,633,RealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,634,RealVector mColumn1 = columnToVector(subColumn1);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,635,RealVector mColumn3 = columnToVector(subColumn3);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,636,"assertEquals(mColumn1, m.getColumnVector(1));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,637,"assertEquals(mColumn3, m.getColumnVector(3));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,638,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,639,m.getColumnVector(-1);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,640,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,641,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,642,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,644,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,645,m.getColumnVector(4);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,646,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,647,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,648,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,652,public void testSetColumnVector() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,653,RealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,654,RealVector mColumn3 = columnToVector(subColumn3);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,655,"assertNotSame(mColumn3, m.getColumnVector(1));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,656,"m.setColumnVector(1, mColumn3);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,657,"assertEquals(mColumn3, m.getColumnVector(1));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,658,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,659,"m.setColumnVector(-1, mColumn3);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,660,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,661,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,662,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,664,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,665,"m.setColumnVector(0, new RealVectorImpl(5));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,666,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,667,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,668,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,672,private RealVector columnToVector(double[][] column) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,673,double[] data = new double[column.length];
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,674,for (int i = 0; i < data.length; ++i) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,675,data[i] = column[i][0];
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,677,"return new RealVectorImpl(data, false);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,680,public void testGetRow() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,681,RealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,682,"checkArrays(subRow0[0], m.getRow(0));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,683,"checkArrays(subRow3[0], m.getRow(3));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,684,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,685,m.getRow(-1);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,686,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,687,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,688,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,690,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,691,m.getRow(4);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,692,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,693,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,694,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,698,public void testSetRow() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,699,RealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,700,assertTrue(subRow3[0][0] != m.getRow(0)[0]);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,701,"m.setRow(0, subRow3[0]);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,702,"checkArrays(subRow3[0], m.getRow(0));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,703,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,704,"m.setRow(-1, subRow3[0]);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,705,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,706,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,707,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,709,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,710,"m.setRow(0, new double[5]);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,711,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,712,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,713,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,717,public void testGetColumn() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,718,RealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,719,double[] mColumn1 = columnToArray(subColumn1);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,720,double[] mColumn3 = columnToArray(subColumn3);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,721,"checkArrays(mColumn1, m.getColumn(1));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,722,"checkArrays(mColumn3, m.getColumn(3));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,723,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,724,m.getColumn(-1);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,725,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,726,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,727,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,729,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,730,m.getColumn(4);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,731,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,732,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,733,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,737,public void testSetColumn() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,738,RealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,739,double[] mColumn3 = columnToArray(subColumn3);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,740,assertTrue(mColumn3[0] != m.getColumn(1)[0]);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,741,"m.setColumn(1, mColumn3);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,742,"checkArrays(mColumn3, m.getColumn(1));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,743,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,744,"m.setColumn(-1, mColumn3);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,745,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,746,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,747,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,749,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,750,"m.setColumn(0, new double[5]);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,751,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,752,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,753,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,757,private double[] columnToArray(double[][] column) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,758,double[] data = new double[column.length];
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,759,for (int i = 0; i < data.length; ++i) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,760,data[i] = column[i][0];
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,762,return data;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,765,"private void checkArrays(double[] expected, double[] actual) {"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,766,"assertEquals(expected.length, actual.length);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,767,for (int i = 0; i < expected.length; ++i) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,768,"assertEquals(expected[i], actual[i]);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,772,public void testEqualsAndHashCode() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,773,DenseRealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,774,DenseRealMatrix m1 = (DenseRealMatrix) m.copy();
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,775,DenseRealMatrix mt = (DenseRealMatrix) m.transpose();
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,776,assertTrue(m.hashCode() != mt.hashCode());
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,777,"assertEquals(m.hashCode(), m1.hashCode());"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,778,"assertEquals(m, m);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,779,"assertEquals(m, m1);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,780,assertFalse(m.equals(null));
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,781,assertFalse(m.equals(mt));
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,782,assertFalse(m.equals(new DenseRealMatrix(bigSingular)));
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,785,public void testToString() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,786,DenseRealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,787,"assertEquals(""DenseRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,788,m.toString());
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,791,public void testSetSubMatrix() throws Exception {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,792,DenseRealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,793,"m.setSubMatrix(detData2,1,1);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,794,RealMatrix expected = new DenseRealMatrix
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,795,"(new double[][] {{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,796,"assertEquals(expected, m);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,798,"m.setSubMatrix(detData2,0,0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,799,expected = new DenseRealMatrix
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,800,"(new double[][] {{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,801,"assertEquals(expected, m);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,803,"m.setSubMatrix(testDataPlus2,0,0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,804,expected = new DenseRealMatrix
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,805,"(new double[][] {{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,806,"assertEquals(expected, m);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,808,// javadoc example
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,809,DenseRealMatrix matrix = new DenseRealMatrix
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,810,"(new double[][] {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 0, 1 , 2}});"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,811,"matrix.setSubMatrix(new double[][] {{3, 4}, {5, 6}}, 1, 1);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,812,expected = new DenseRealMatrix
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,813,"(new double[][] {{1, 2, 3, 4}, {5, 3, 4, 8}, {9, 5 ,6, 2}});"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,814,"assertEquals(expected, matrix);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,816,// dimension overflow
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,817,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,818,"m.setSubMatrix(testData,1,1);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,819,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,820,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,821,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,823,// dimension underflow
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,824,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,825,"m.setSubMatrix(testData,-1,1);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,826,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,827,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,828,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,830,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,831,"m.setSubMatrix(testData,1,-1);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,832,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,833,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,834,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,837,// null
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,838,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,839,"m.setSubMatrix(null,1,1);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,840,"fail(""expecting NullPointerException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,841,} catch (NullPointerException e) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,842,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,845,// ragged
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,846,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,847,"m.setSubMatrix(new double[][] {{1}, {2, 3}}, 0, 0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,848,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,849,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,850,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,853,// empty
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,854,try {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,855,"m.setSubMatrix(new double[][] {{}}, 0, 0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,856,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,857,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,858,// expected
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,863,//--------------- -----------------Protected methods
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,865,/** verifies that two matrices are close (1-norm) */
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,866,"protected void assertClose(RealMatrix m, RealMatrix n, double tolerance) {"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,867,assertTrue(m.subtract(n).getNorm() < tolerance);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,870,/** verifies that two vectors are close (sup norm) */
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,871,"protected void assertClose(double[] m, double[] n, double tolerance) {"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,872,if (m.length != n.length) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,873,"fail(""vectors not same length"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,875,for (int i = 0; i < m.length; i++) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,876,"assertEquals(m[i], n[i], tolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,880,"private DenseRealMatrix createRandomMatrix(Random r, int rows, int columns) {"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,881,"DenseRealMatrix m = new DenseRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,882,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,883,for (int j = 0; j < columns; ++j) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,884,"m.setEntry(i, j, 200 * r.nextDouble() - 100);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,887,return m;
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,66,"ssertEquals(new RealMatrixImpl(testData),"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,66,"assertEquals(new DenseRealMatrix(testData),"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,68,"ssertEquals(new RealMatrixImpl(testData, false),"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,69,"atrixUtils.createRealMatrix(testData, true));"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,70,"ssertEquals(new RealMatrixImpl(testData, true),"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,71,"atrixUtils.createRealMatrix(testData, false));"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,124,"ssertEquals((RealMatrixImpl) MatrixUtils.createRowRealMatrix(row),"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,125,ew RealMatrixImpl(rowMatrix));
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,120,"assertEquals(MatrixUtils.createRowRealMatrix(row),"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,121,new DenseRealMatrix(rowMatrix));
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,162,"ssertEquals((RealMatrixImpl) MatrixUtils.createColumnRealMatrix(col),"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,163,ew RealMatrixImpl(colMatrix));
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,158,"assertEquals(MatrixUtils.createColumnRealMatrix(col),"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,159,new DenseRealMatrix(colMatrix));

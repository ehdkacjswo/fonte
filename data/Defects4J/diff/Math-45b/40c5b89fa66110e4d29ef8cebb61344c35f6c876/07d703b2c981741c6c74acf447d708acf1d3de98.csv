is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,22,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,22,import org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,61, @throws IllegalArgumentException if c is empty
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,61,* @throws NotStrictlyPositiveException if c is empty
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,66,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,66,"throw new NotStrictlyPositiveException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY,"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,67,c.length);
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,120, @throws IllegalArgumentException if coefficients is empty
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,121,* @throws NotStrictlyPositiveException if coefficients is empty
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,126,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,127,"throw new NotStrictlyPositiveException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY,"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,128,n);
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,229, @throws IllegalArgumentException if coefficients is empty
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,231,* @throws NotStrictlyPositiveException if coefficients is empty
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,235,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,237,"throw new NotStrictlyPositiveException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY,"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,238,n);
False,src/main/java/org/apache/commons/math/exception/NotPositiveException.java,src/main/java/org/apache/commons/math/exception/NotPositiveException.java,19,mport org.apache.commons.math.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/exception/NotPositiveException.java,src/main/java/org/apache/commons/math/exception/NotPositiveException.java,19,import org.apache.commons.math.util.Localizable;
True,src/main/java/org/apache/commons/math/exception/NotPositiveException.java,src/main/java/org/apache/commons/math/exception/NotPositiveException.java,37,* Construct the exception with a specific context.
True,src/main/java/org/apache/commons/math/exception/NotPositiveException.java,src/main/java/org/apache/commons/math/exception/NotPositiveException.java,39,* @param specific Specific context where the error occurred.
True,src/main/java/org/apache/commons/math/exception/NotPositiveException.java,src/main/java/org/apache/commons/math/exception/NotPositiveException.java,40,* @param value Argument.
True,src/main/java/org/apache/commons/math/exception/NotPositiveException.java,src/main/java/org/apache/commons/math/exception/NotPositiveException.java,42,"public NotPositiveException(Localizable specific,"
True,src/main/java/org/apache/commons/math/exception/NotPositiveException.java,src/main/java/org/apache/commons/math/exception/NotPositiveException.java,43,Number value) {
True,src/main/java/org/apache/commons/math/exception/NotPositiveException.java,src/main/java/org/apache/commons/math/exception/NotPositiveException.java,44,"super(specific, value, 0, true);"
False,src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java,src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java,19,mport org.apache.commons.math.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java,src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java,19,import org.apache.commons.math.util.Localizable;
True,src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java,src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java,37,* Construct the exception with a specific context.
True,src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java,src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java,39,* @param specific Specific context where the error occurred.
True,src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java,src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java,40,* @param value Argument.
True,src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java,src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java,42,"public NotStrictlyPositiveException(Localizable specific,"
True,src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java,src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java,43,Number value) {
True,src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java,src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java,44,"super(specific, value, 0, false);"
True,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,19,import org.apache.commons.math.util.Localizable;
False,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,46,uper((boundIsAllowed ?
True,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,47,"this(null, wrong, max, boundIsAllowed);"
True,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,50,* Construct the exception with a specific context.
True,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,52,* @param specific Specific contexte pattern .
True,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,53,* @param wrong Value that is larger than the maximum.
True,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,54,* @param max maximum.
True,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,56,"public NumberIsTooLargeException(Localizable specific,"
True,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,57,"Number wrong,"
True,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,58,"Number max,"
True,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,59,boolean boundIsAllowed) {
True,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,60,"super(specific,"
True,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java,61,(boundIsAllowed ?
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,19,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,20,mport org.apache.commons.math.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,19,import org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,27, All data generation methods are based on <code>nextDouble().</code>
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,26,* All data generation methods are based on {@code code nextDouble()}.
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,42, activation.  The value <code>Double.NaN</code> signals that there is
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,41,* activation.  The value {@code Double.NaN} signals that there is
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,58, default implementation of <code>nextGaussian</code> should call this
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,57,* default implementation of {@code nextGaussian} should call this
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,84, <code>long</code> seed.  Sequences of values generated starting with the
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,83,* {@code long} seed.  Sequences of values generated starting with the
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,88, <code>nextGaussian</code> should include a call to {@link #clear} in the
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,87,* {@code nextGaussian} should include a call to {@link #clear} in the
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,123," Returns the next pseudorandom, uniformly distributed <code>int</code>"
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,122,"* Returns the next pseudorandom, uniformly distributed {@code int}"
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,125," All 2<font size=""-1""><sup>32</sup></font> possible <tt>int</tt> values"
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,124,"* All 2<font size=""-1""><sup>32</sup></font> possible {@code int} values"
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,133," @return the next pseudorandom, uniformly distributed <code>int</code>"
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,132,"* @return the next pseudorandom, uniformly distributed {@code int}"
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,141," Returns a pseudorandom, uniformly distributed <tt>int</tt> value"
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,140,"* Returns a pseudorandom, uniformly distributed {@code int} value"
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,152," @return  a pseudorandom, uniformly distributed <tt>int</tt>"
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,151,"* @return  a pseudorandom, uniformly distributed {@code int}"
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,154, @throws IllegalArgumentException if n is not positive.
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,153,* @throws NotStrictlyPositiveException if {@code n <= 0}.
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,158,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,159,"ocalizedFormats.NOT_POSITIVE_UPPER_BOUND, n);"
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,157,throw new NotStrictlyPositiveException(n);
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,166," Returns the next pseudorandom, uniformly distributed <code>long</code>"
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,164,"* Returns the next pseudorandom, uniformly distributed {@code long}"
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,168," 2<font size=""-1""><sup>64</sup></font> possible <tt>long</tt> values"
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,166,"* 2<font size=""-1""><sup>64</sup></font> possible {@code long} values"
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,176," @return  the next pseudorandom, uniformly distributed <code>long</code>"
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,174,"* @return  the next pseudorandom, uniformly distributed {@code long}"
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,185, <code>boolean</code> value from this random number generator's
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,183,* {@code boolean} value from this random number generator's
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,194, <code>boolean</code> value from this random number generator's
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,192,* {@code boolean} value from this random number generator's
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,202," Returns the next pseudorandom, uniformly distributed <code>float</code>"
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,203, value between <code>0.0</code> and <code>1.0</code> from this random
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,200,"* Returns the next pseudorandom, uniformly distributed {@code float}"
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,201,* value between {@code 0.0} and {@code 1.0} from this random
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,211," @return  the next pseudorandom, uniformly distributed <code>float</code>"
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,212, value between <code>0.0</code> and <code>1.0</code> from this
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,209,"* @return  the next pseudorandom, uniformly distributed {@code float}"
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,210,* value between {@code 0.0} and {@code 1.0} from this
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,221, <code>double</code> value between <code>0.0</code> and
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,222, <code>1.0</code> from this random number generator's sequence.
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,219,* {@code double} value between {@code 0.0} and
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,220,* {@code 1.0} from this random number generator's sequence.
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,228,  <code>double</code> value between <code>0.0</code> and
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,229,  <code>1.0</code> from this random number generator's sequence
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,226,*  {@code double} value between {@code 0.0} and
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,227,*  {@code 1.0} from this random number generator's sequence
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,235, <code>double</code> value with mean <code>0.0</code> and standard
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,236, deviation <code>1.0</code> from this random number generator's sequence.
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,233,* {@code double} value with mean {@code 0.0} and standard
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,234,* deviation {@code 1.0} from this random number generator's sequence.
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,249, <code>double</code> value with mean <code>0.0</code> and
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,250, standard deviation <code>1.0</code> from this random number
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,247,* {@code double} value with mean {@code 0.0} and
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,248,* standard deviation {@code 1.0} from this random number
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,19,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,20,mport org.apache.commons.math.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,19,import org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,126,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,127,"ocalizedFormats.NOT_POSITIVE_UPPER_BOUND, n);"
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,125,throw new NotStrictlyPositiveException(n);
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,29,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,30,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,150,* @throws NotStrictlyPositiveException if {@code len <= 0}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,151,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,152,"ocalizedFormats.NOT_POSITIVE_LENGTH, len);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,154,"throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,196,* @throws NumberIsTooLargeException if {@code lower >= upper}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,197,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,198,"ocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,199,"pper, lower);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,200,"throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,201,"lower, upper, false);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,216,* @throws NumberIsTooLargeException if {@code lower >= upper}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,217,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,218,"ocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,219,"pper, lower);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,220,"throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,221,"lower, upper, false);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,246,* @throws NotStrictlyPositiveException if {@code len <= 0}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,247,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,248,"ocalizedFormats.NOT_POSITIVE_LENGTH, len);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,250,"throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,307,* @throws NumberIsTooLargeException if {@code lower >= upper}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,308,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,309,"ocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,310,"pper, lower);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,311,"throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,312,"lower, upper, false);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,328,* @throws NumberIsTooLargeException if {@code lower >= upper}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,329,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,330,"ocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,331,"pper, lower);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,332,"throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,333,"lower, upper, false);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,354,* @throws NotStrictlyPositiveException if {@code mean <= 0}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,355,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,356,"ocalizedFormats.NOT_POSITIVE_POISSON_MEAN, mean);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,358,"throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,458,* @throws NotStrictlyPositiveException if {@code sigma <= 0}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,459,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,460,"ocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION, sigma);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,462,"throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,479,* @throws NotStrictlyPositiveException if {@code mean <= 0}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,480,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,481,"ocalizedFormats.NOT_POSITIVE_MEAN, mean);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,483,"throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,508,* @throws NumberIsTooLargeException if {@code lower >= upper}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,509,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,510,"ocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,511,"pper, lower);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,512,"throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,513,"lower, upper, false);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,832,* @throws NumberIsTooLargException if {@code k > n}.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,833,* @throws NotStrictlyPositiveException if {@code k <= 0}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,833,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,834,"ocalizedFormats.PERMUTATION_EXCEEDS_N, k, n);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,837,"throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,838,"k, n, true);"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,837,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,838,"ocalizedFormats.NOT_POSITIVE_PERMUTATION, k);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,841,"throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,842,k);
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,870,* @throws NumberIsTooLargeException if {@code k > c.size()}.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,871,* @throws NotStrictlyPositiveException if {@code k <= 0}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,870,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,871,ocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE);
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,876,"throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,877,"k, len, true);"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,874,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,875,"ocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE, k);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,880,"throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);"
False,src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,22,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,23,mport org.apache.commons.math.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,22,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,58,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,59,"ocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,"
False,src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,60,"ean.length, standardDeviation.length);"
True,src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,57,"throw new DimensionMismatchException(mean.length, standardDeviation.length);"
False,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,87,"MPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""),"
True,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,87,"EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */"
False,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,134,"OWER_BOUND_NOT_BELOW_UPPER_BOUND(""upper bound ({0}) must be greater than lower bound ({1})""),"
True,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,134,"LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */"
True,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,177,"LENGTH(""length ({0})""), /* keep */"
True,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,179,"MEAN(""mean ({0})""), /* keep */"
True,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,181,"NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */"
True,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,183,"PERMUTATION_SIZE(""permutation size ({0}""), /* keep */"
True,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,191,"STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */"
False,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,237,"ERMUTATION_EXCEEDS_N(""permutation k ({0}) exceeds n ({1})""),"
True,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,242,"PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */"
False,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,247,"AMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""),"
True,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,252,"SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,26,"* <p>In addition to transformation of real vectors, the Hadamard transform can"
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,27,"* transform integer vectors into integer vectors. However, this integer transform"
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,28,* cannot be inverted directly. Due to a scaling factor it may lead to rational results.
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,29,"* As an example, the inverse transform of integer vector (0, 1, 0, 1) is rational"
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,30,"* vector (1/2, -1/2, 0, 0).</p>"
False,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,32,rivate static final long serialVersionUID = -710169279109099264L;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,37,private static final long serialVersionUID = -720498949613305350L;
False,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,35,ublic double[] transform(double f[]) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,40,public double[] transform(double f[])
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,41,throws IllegalArgumentException {
False,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,49,eturn fht(f);
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,55,"return FastFourierTransformer.scaleArray(fht(f), 1.0 / f.length);"
False,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,56,"eturn fht(FastFourierTransformer.sample(f, min, max, n));"
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,62,final double[] unscaled =
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,63,"fht(FastFourierTransformer.sample(f, min, max, n));"
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,64,"return FastFourierTransformer.scaleArray(unscaled, 1.0 / n);"
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,68,* Transform the given real data set.
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,69,"* <p>The integer transform cannot be inverted directly, due to a scaling"
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,70,* factor it may lead to double results.</p>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,71,* @param f the integer data array to be transformed (signal)
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,72,* @return the integer transformed array (spectrum)
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,73,* @throws IllegalArgumentException if any parameters are invalid
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,75,public int[] transform(int f[])
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,76,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,77,return fht(f);
False,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,134, @throws IllegalArgumentException
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,155,* @exception IllegalArgumentException if input array is not a poer of 2
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,202,* The FHT (Fast Hadamard Transformation) which uses only subtraction and addition.
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,203,* @param x input vector
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,204,* @return y output vector
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,205,* @exception IllegalArgumentException if input array is not a poer of 2
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,207,protected int[] fht(int x[]) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,209,// n is the row count of the input vector x
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,210,final int n     = x.length;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,211,final int halfN = n / 2;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,213,// n has to be of the form n = 2^p !!
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,214,if (!FastFourierTransformer.isPowerOf2(n)) {
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,215,"throw MathRuntimeException.createIllegalArgumentException(""{0} is not a power of 2"","
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,216,new Object[] { n });
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,219,// Instead of creating a matrix with p+1 columns and n rows
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,220,// we will use two single dimension arrays which we will use in an alternating way.
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,221,int[] yPrevious = new int[n];
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,222,int[] yCurrent  = x.clone();
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,224,// iterate from left to right (column)
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,225,for (int j = 1; j < n; j <<= 1) {
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,227,// switch columns
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,228,final int[] yTmp = yCurrent;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,229,yCurrent  = yPrevious;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,230,yPrevious = yTmp;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,232,// iterate from top to bottom (row)
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,233,for (int i = 0; i < halfN; ++i) {
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,234,// D<sub>top</sub>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,235,// The top part works with addition
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,236,final int twoI = 2 * i;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,237,yCurrent[i] = yPrevious[twoI] + yPrevious[twoI + 1];
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,239,for (int i = halfN; i < n; ++i) {
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,240,// D<sub>bottom</sub>
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,241,// The bottom part works with subtraction
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,242,final int twoI = 2 * i;
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,243,yCurrent[i] = yPrevious[twoI - n] - yPrevious[twoI - n + 1];
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,247,// return the last computed output vector y
True,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,248,return yCurrent;
False,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,31,"heckTransform(new double[] { 1.0, 4.0, -2.0, 3.0, 0.0, 1.0, 4.0, -1.0 },"
False,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,32,"ew double[] { 10.0, -4.0, 2.0, -4.0, 2.0, -12.0, 6.0, 8.0 });"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,31,"checkAllTransforms(new int[] { 1, 4, -2, 3, 0, 1, 4, -1 },"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,32,"new int[] { 10, -4, 2, -4, 2, -12, 6, 8 });"
False,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,39,"heckTransform(new double[] { 1.0, 2.0, 3.0, 4.0 },"
False,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,40,"ew double[] { 10.0, -2.0, -4.0, 0.0 });"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,39,"checkAllTransforms(new int[] { 1, 2, 3, 4 },"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,40,"new int[] { 10, -2, -4, 0 });"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,44,* Test the inverse transform of an integer vector is not always an integer vector
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,46,public void testNoIntInverse() {
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,47,FastHadamardTransformer transformer = new FastHadamardTransformer();
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,48,"double[] x = transformer.inversetransform(new double[] { 0, 1, 0, 1});"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,49,"assertEquals( 0.5, x[0], 0);"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,50,"assertEquals(-0.5, x[1], 0);"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,51,"assertEquals( 0.0, x[2], 0);"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,52,"assertEquals( 0.0, x[3], 0);"
False,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,55,"rivate void checkTransform(double[]x, double[] y) {"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,67,"private void checkAllTransforms(int[]x, int[] y) {"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,68,"checkDoubleTransform(x, y);"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,69,"checkInverseDoubleTransform(x, y);"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,70,"checkIntTransform(x, y);"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,73,"private void checkDoubleTransform(int[]x, int[] y) {"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,74,// Initiate the transformer
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,75,FastHadamardTransformer transformer = new FastHadamardTransformer();
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,77,// check double transform
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,78,double[] dX = new double[x.length];
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,79,for (int i = 0; i < dX.length; ++i) {
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,80,dX[i] = (double) x[i];
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,82,double dResult[] = transformer.transform(dX);
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,83,for (int i = 0; i < dResult.length; i++) {
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,84,// compare computed results to precomputed results
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,85,"assertEquals((double) y[i], dResult[i]);"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,89,"private void checkIntTransform(int[]x, int[] y) {"
False,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,59,/ transform input vector x to output vector
False,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,60,ouble result[] = transformer.transform(x);
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,93,// check integer transform
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,94,int iResult[] = transformer.transform(x);
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,95,for (int i = 0; i < iResult.length; i++) {
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,96,// compare computed results to precomputed results
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,97,"assertEquals(y[i], iResult[i]);"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,102,"private void checkInverseDoubleTransform(int[]x, int[] y) {"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,103,// Initiate the transformer
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,104,FastHadamardTransformer transformer = new FastHadamardTransformer();
False,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,62,or (int i=0;i<result.length;i++) {
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,106,// check double transform
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,107,double[] dY = new double[y.length];
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,108,for (int i = 0; i < dY.length; ++i) {
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,109,dY[i] = (double) y[i];
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,111,double dResult[] = transformer.inversetransform(dY);
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,112,for (int i = 0; i < dResult.length; i++) {
False,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,64,"ssertEquals(y[i], result[i]);"
True,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/org/apache/commons/math/transform/FastHadamardTransformerTest.java,114,"assertEquals((double) x[i], dResult[i]);"

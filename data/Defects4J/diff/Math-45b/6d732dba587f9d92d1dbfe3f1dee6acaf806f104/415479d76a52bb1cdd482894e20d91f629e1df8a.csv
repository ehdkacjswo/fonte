is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,25,import org.apache.commons.math.linear.MatrixUtils;
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,26,mport org.apache.commons.math.linear.RealMatrixImpl;
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,186,"ew LUSolver(new LUDecompositionImpl(new RealMatrixImpl(jTj, false))).getInverse();"
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,187,eturn ((RealMatrixImpl) inverse).getDataRef();
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,186,new LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj))).getInverse();
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,187,return inverse.getData();
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,25,import org.apache.commons.math.linear.MatrixUtils;
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,26,mport org.apache.commons.math.linear.RealMatrixImpl;
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,115,"ealMatrixImpl wGradGradT = new RealMatrixImpl(parameters.length, parameters.length);"
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,116,ouble[][] wggData        = wGradGradT.getDataRef();
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,115,"RealMatrix wGradGradT     = MatrixUtils.createRealMatrix(parameters.length, parameters.length);"
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,125,"ealMatrix a = new RealMatrixImpl(parameters.length, parameters.length);"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,124,"RealMatrix a = MatrixUtils.createRealMatrix(parameters.length, parameters.length);"
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,140,ouble[] wggRow = wggData[k];
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,143,ggRow[l] =  weight * gk * grad[l];
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,141,"wGradGradT.setEntry(k, l, weight * gk * grad[l]);"
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,99,inal double[][] uData  = new double[m][m];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,99,"cachedU = MatrixUtils.createRealMatrix(m, m);"
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,103,Data[k][k] = 1;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,103,"cachedU.setEntry(k, k, 1);"
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,109,Data[k][k] = 1;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,109,"cachedU.setEntry(k, k, 1);"
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,114,lpha -= uData[i][j] * householderVectors[i][k - diagOffset];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,114,"alpha -= cachedU.getEntry(i, j) * householderVectors[i][k - diagOffset];"
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,119,Data[i][j] -= alpha * householderVectors[i][k - diagOffset];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,119,"cachedU.addToEntry(i, j, -alpha * householderVectors[i][k - diagOffset]);"
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,125,Data[0][0] = 1;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,125,"cachedU.setEntry(0, 0, 1);"
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,128,/ cache the matrix for subsequent calls
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,129,"achedU = new RealMatrixImpl(uData, false);"
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,148,ouble[][] bData = new double[m][n];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,145,"cachedB = MatrixUtils.createRealMatrix(m, n);"
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,150,ouble[] bDataI = bData[i];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,151,DataI[i] = main[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,147,"cachedB.setEntry(i, i, main[i]);"
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,154,DataI[i - 1] = secondary[i - 1];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,150,"cachedB.setEntry(i, i - 1, secondary[i - 1]);"
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,158,DataI[i + 1] = secondary[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,154,"cachedB.setEntry(i, i + 1, secondary[i]);"
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,163,/ cache the matrix for subsequent calls
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,164,"achedB = new RealMatrixImpl(bData, false);"
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,187,inal double[][] vData  = new double[n][n];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,180,"cachedV = MatrixUtils.createRealMatrix(n, n);"
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,191,Data[k][k] = 1;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,184,"cachedV.setEntry(k, k, 1);"
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,197,Data[k][k] = 1;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,190,"cachedV.setEntry(k, k, 1);"
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,202,eta -= vData[i][j] * hK[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,195,"beta -= cachedV.getEntry(i, j) * hK[i];"
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,207,Data[i][j] -= beta * hK[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,200,"cachedV.addToEntry(i, j, -beta * hK[i]);"
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,213,Data[0][0] = 1;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,206,"cachedV.setEntry(0, 0, 1);"
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,216,/ cache the matrix for subsequent calls
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,217,"achedV = new RealMatrixImpl(vData, false);"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,231,achedV = getVT().transpose();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,232,if (eigenvectors == null) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,233,findEigenVectors();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,236,final int m = eigenvectors.length;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,237,"cachedV = MatrixUtils.createRealMatrix(m, m);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,238,for (int k = 0; k < m; ++k) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,239,"cachedV.setColumnVector(k, eigenvectors[k]);"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,245,inal int m = eigenvalues.length;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,246,inal double[][] sData = new double[m][m];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,247,or (int i = 0; i < m; ++i) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,248,Data[i][i] = eigenvalues[i];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,252,"achedD = new RealMatrixImpl(sData, false);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,254,cachedD = MatrixUtils.createRealDiagonalMatrix(eigenvalues);
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,268,inal double[][] vtData = new double[eigenvectors.length][];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,269,or (int k = 0; k < eigenvectors.length; ++k) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,270,tData[k] = eigenvectors[k].getData();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,269,final int m = eigenvectors.length;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,270,"cachedVt = MatrixUtils.createRealMatrix(m, m);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,271,for (int k = 0; k < m; ++k) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,272,"cachedVt.setRowVector(k, eigenvectors[k]);"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,273,/ cache the matrix for subsequent calls
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,274,"achedVt = new RealMatrixImpl(vtData, false);"
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,150,"eturn new RealMatrixImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,150,return MatrixUtils.createRealMatrix(bp);
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,206,"eturn new RealMatrixImpl(invData, false);"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,206,return MatrixUtils.createRealMatrix(invData);
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,181,inal double[][] lData = new double[m][m];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,181,"cachedL = MatrixUtils.createRealMatrix(m, m);"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,183,"ystem.arraycopy(lu[i], 0, lData[i], 0, i);"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,184,Data[i][i] = 1.0;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,183,final double[] luI = lu[i];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,184,for (int j = 0; j < i; ++j) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,185,"cachedL.setEntry(i, j, luI[j]);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,187,"cachedL.setEntry(i, i, 1.0);"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,186,"achedL = new RealMatrixImpl(lData, false);"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,196,inal double[][] uData = new double[m][m];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,198,"cachedU = MatrixUtils.createRealMatrix(m, m);"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,198,"ystem.arraycopy(lu[i], i, uData[i], i, m - i);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,200,final double[] luI = lu[i];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,201,for (int j = i; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,202,"cachedU.setEntry(i, j, luI[j]);"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,200,"achedU = new RealMatrixImpl(uData, false);"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,210,inal double[][] pData = new double[m][m];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,214,"cachedP = MatrixUtils.createRealMatrix(m, m);"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,212,Data[i][pivot[i]] = 1.0;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,216,"cachedP.setEntry(i, pivot[i], 1.0);"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,214,"achedP = new RealMatrixImpl(pData, false);"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,204,"eturn new RealMatrixImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,204,return MatrixUtils.createRealMatrix(bp);
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,156,ouble[][] r = new double[m][n];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,156,"cachedR = MatrixUtils.createRealMatrix(m, n);"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,160,ouble[] rRow = r[row];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,161,Row[row] = rDiag[row];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,160,"cachedR.setEntry(row, row, rDiag[row]);"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,163,Row[col] = qrt[col][row];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,162,"cachedR.setEntry(row, col, qrt[col][row]);"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,167,/ cache the matrix for subsequent calls
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,168,"achedR = new RealMatrixImpl(r, false);"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,195,ouble[][] qT = new double[m][m];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,191,"cachedQT = MatrixUtils.createRealMatrix(m, m);"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,203,T[minor][minor]=1;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,199,"cachedQT.setEntry(minor, minor, 1.0);"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,206,"or (int minor = Math.min(m,n)-1; minor >= 0; minor--){"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,202,"for (int minor = Math.min(m, n)-1; minor >= 0; minor--){"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,208,T[minor][minor] = 1;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,204,"cachedQT.setEntry(minor, minor, 1.0);"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,211,inal double[] qTCol = qT[col];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,214,lpha -= qTCol[row] * qrtMinor[row];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,209,"alpha -= cachedQT.getEntry(col, row) * qrtMinor[row];"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,219,TCol[row] -= alpha * qrtMinor[row];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,214,"cachedQT.addToEntry(col, row, -alpha * qrtMinor[row]);"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,225,/ cache the matrix for subsequent calls
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,226,"achedQT = new RealMatrixImpl(qT, false);"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,243,ouble[][] hData = new double[m][n];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,235,"cachedH = MatrixUtils.createRealMatrix(m, n);"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,245,inal double[] hDataI = hData[i];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,247,DataI[j] = qrt[j][i] / -rDiag[j];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,238,"cachedH.setEntry(i, j, qrt[j][i] / -rDiag[j]);"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,251,/ cache the matrix for subsequent calls
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,252,"achedH = new RealMatrixImpl(hData, false);"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,139,"eturn new RealMatrixImpl(xData, false);"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,139,return MatrixUtils.createRealMatrix(xData);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1115,ouble[][] out = new double[data.length][data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1115,final int m = data.length;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1116,"final RealMatrix out = MatrixUtils.createRealMatrix(m, m);"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1118,ut[i][j] = data[i] * v.getEntry(j);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1119,"out.setEntry(i, j, data[i] * v.getEntry(j));"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1121,eturn new RealMatrixImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1122,return out;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1127,* Compute the outer product.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1128,* @param v vector with which outer product should be computed
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1129,* @return the square matrix outer product between instance and v
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1130,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1132,public RealMatrix outerProduct(RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1133,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1134,return outerProduct(v.data);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1129,ouble[][] out = new double[data.length][data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1141,final int m = data.length;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1142,"final RealMatrix out = MatrixUtils.createRealMatrix(m, m);"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1132,ut[i][j] = data[i] * v[j];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1145,"out.setEntry(i, j, data[i] * v[j]);"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1135,eturn new RealMatrixImpl(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1139, Compute the outer product.
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1140, @param v vector with which outer product should be computed
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1141, @return the square matrix outer product between instance and v
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1142, @exception IllegalArgumentException if v is not the same size as this
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1144,ublic RealMatrixImpl outerProduct(RealVectorImpl v)
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1145,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1146,eturn (RealMatrixImpl) outerProduct(v.data);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1148,return out;
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,160,"ransformer.getU().multiply(new RealMatrixImpl(iData, false));"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,160,transformer.getU().multiply(MatrixUtils.createRealMatrix(iData));
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,192,inal int p = singularValues.length;
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,193,inal double[][] sData = new double[p][p];
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,194,or (int i = 0; i < p; ++i) {
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,195,Data[i][i] = singularValues[i];
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,199,"achedS = new RealMatrixImpl(sData, false);"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,193,cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,246,"ransformer.getV().multiply(new RealMatrixImpl(iData, false));"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,240,transformer.getV().multiply(MatrixUtils.createRealMatrix(iData));
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,118,inal RealMatrixImpl w = (RealMatrixImpl) decomposition.getUT().multiply(b);
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,119,inal double[][] wData = w.getDataRef();
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,118,final RealMatrix w = decomposition.getUT().multiply(b);
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,126,inal double[] wi = wData[i];
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,128,i[j] *= inv;
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,126,"w.multiplyEntry(i, j, inv);"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,178,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,179,@Override
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,180,"public void addToEntry(int row, int column, double increment)"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,181,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,182,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,183,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,184,"final int key = computeKey(row, column);"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,185,final double value = entries.get(key) + increment;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,186,if (value == 0.0) {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,187,entries.remove(key);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,188,} else {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,189,"entries.put(key, value);"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,193,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,194,@Override
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,195,"public void multiplyEntry(int row, int column, double factor)"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,196,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,197,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,198,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,199,"final int key = computeKey(row, column);"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,200,final double value = entries.get(key) * factor;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,201,if (value == 0.0) {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,202,entries.remove(key);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,203,} else {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,204,"entries.put(key, value);"
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,109,inal double[][] qtData  = new double[m][m];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,109,"cachedQt = MatrixUtils.createRealMatrix(m, m);"
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,115,tData[k][k] = 1;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,115,"cachedQt.setEntry(k, k, 1);"
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,117,inal double[] qtK = qtData[k];
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,119,tK[k] = 1 + beta * hK[k];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,118,"cachedQt.setEntry(k, k, 1 + beta * hK[k]);"
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,121,tK[i] = beta * hK[i];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,120,"cachedQt.setEntry(k, i, beta * hK[i]);"
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,124,inal double[] qtJ = qtData[j];
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,127,eta += qtJ[i] * hK[i];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,125,"beta += cachedQt.getEntry(j, i) * hK[i];"
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,130,tJ[k] = beta * hK[k];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,128,"cachedQt.setEntry(j, k, beta * hK[k]);"
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,132,tJ[i] += beta * hK[i];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,130,"cachedQt.addToEntry(j, i, beta * hK[i]);"
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,137,tData[0][0] = 1;
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,139,/ cache the matrix for subsequent calls
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,140,"achedQt = new RealMatrixImpl(qtData, false);"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,135,"cachedQt.setEntry(0, 0, 1);"
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,158,ouble[][] tData = new double[m][m];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,153,"cachedT = MatrixUtils.createRealMatrix(m, m);"
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,160,ouble[] tDataI = tData[i];
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,161,DataI[i] = main[i];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,155,"cachedT.setEntry(i, i, main[i]);"
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,163,DataI[i - 1] = secondary[i - 1];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,157,"cachedT.setEntry(i, i - 1, secondary[i - 1]);"
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,166,DataI[i + 1] = secondary[i];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,160,"cachedT.setEntry(i, i + 1, secondary[i]);"
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,170,/ cache the matrix for subsequent calls
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,171,"achedT = new RealMatrixImpl(tData, false);"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,21,import org.apache.commons.math.linear.MatrixUtils;
False,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,22,mport org.apache.commons.math.linear.RealMatrixImpl;
False,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,254,"oot = new RealMatrixImpl(order, rank);"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,254,"root = MatrixUtils.createRealMatrix(order, rank);"
False,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,256,"ystem.arraycopy(b[i], 0, root.getDataRef()[index[i]], 0, rank);"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,256,for (int j = 0; j < rank; ++j) {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,257,"root.setEntry(index[i], j, b[i][j]);"
False,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,289,rivate RealMatrixImpl root;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,291,private RealMatrix root;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,23,import org.apache.commons.math.linear.MatrixUtils;
False,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,24,mport org.apache.commons.math.linear.RealMatrixImpl;
False,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,86,"ealMatrixImpl result = new RealMatrixImpl(dimension, dimension);"
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,86,"RealMatrix result = MatrixUtils.createRealMatrix(dimension, dimension);"
False,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,89,ouble[][] resultData = result.getDataRef();
False,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,95,esultData[i][j] = e;
False,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,96,esultData[j][i] = e;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,94,"result.setEntry(i, j, e);"
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,95,"result.setEntry(j, i, e);"
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,19,import org.apache.commons.math.linear.MatrixUtils;
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,20,mport org.apache.commons.math.linear.RealMatrixImpl;
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,21,import org.apache.commons.math.linear.RealVector;
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,22,import org.apache.commons.math.linear.RealVectorImpl;
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,34,rotected RealMatrix Y;
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,36,protected RealVector Y;
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,55,his.X = new RealMatrixImpl(x);
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,56,his.Y = new RealMatrixImpl(y);
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,57,this.X = MatrixUtils.createRealMatrix(x);
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,58,this.Y = new RealVectorImpl(y);
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,65,his.Y = new RealMatrixImpl(y);
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,67,this.Y = new RealVectorImpl(y);
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,74,his.X = new RealMatrixImpl(x);
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,76,this.X = MatrixUtils.createRealMatrix(x);
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,123,ealMatrix b = calculateBeta();
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,124,eturn b.getColumn(0);
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,125,return calculateBeta().getData();
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,131,ealMatrix b = calculateBeta();
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,132,ealMatrix e = Y.subtract(X.multiply(b));
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,133,eturn e.getColumn(0);
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,132,return Y.subtract(X.operate(calculateBeta())).getData();
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,155,rotected abstract RealMatrix calculateBeta();
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,154,protected abstract RealVector calculateBeta();
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,182,rotected RealMatrix calculateResiduals() {
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,183,ealMatrix b = calculateBeta();
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,184,eturn Y.subtract(X.multiply(b));
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,181,protected RealVector calculateResiduals() {
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,182,return Y.subtract(X.operate(calculateBeta()));
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,21,import org.apache.commons.math.linear.MatrixUtils;
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,22,mport org.apache.commons.math.linear.RealMatrixImpl;
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,23,import org.apache.commons.math.linear.RealVector;
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,71,his.Omega = new RealMatrixImpl(omega);
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,72,this.Omega = MatrixUtils.createRealMatrix(omega);
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,94,rotected RealMatrix calculateBeta() {
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,95,protected RealVector calculateBeta() {
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,99,eturn inverse.multiply(XT).multiply(OI).multiply(Y);
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,100,return inverse.multiply(XT).multiply(OI).operate(Y);
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,123,ealMatrix u = calculateResiduals();
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,124,ealMatrix sse =  u.transpose().multiply(getOmegaInverse()).multiply(u);
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,125,eturn sse.getTrace()/(X.getRowDimension()-X.getColumnDimension());
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,124,final RealVector u = calculateResiduals();
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,125,final double sse =  u.dotProduct(getOmegaInverse().operate(u));
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,126,return sse / (X.getRowDimension() - X.getColumnDimension());
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,19,import org.apache.commons.math.linear.DenseRealMatrix;
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,24,mport org.apache.commons.math.linear.RealMatrixImpl;
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,25,import org.apache.commons.math.linear.RealVector;
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,26,import org.apache.commons.math.linear.RealVectorImpl;
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,89,his.X = new RealMatrixImpl(x);
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,91,this.X = new DenseRealMatrix(x);
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,98,rotected RealMatrix calculateBeta() {
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,99,"eturn solveUpperTriangular((RealMatrixImpl) qr.getR(),"
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,100,RealMatrixImpl) qr.getQ().transpose().multiply(Y));
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,100,protected RealVector calculateBeta() {
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,101,"return solveUpperTriangular(qr.getR(), qr.getQ().transpose().operate(Y));"
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,124,ealMatrix u = calculateResiduals();
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,125,ealMatrix sse = u.transpose().multiply(u);
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,126,eturn sse.getTrace()/(X.getRowDimension()-X.getColumnDimension());
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,125,final RealVector u = calculateResiduals();
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,126,final double sse = u.dotProduct(u);
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,127,return sse / (X.getRowDimension() - X.getColumnDimension());
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,146, @return solution matrix as a column matrix
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,147,* @return solution matrix as a vector
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,149,"rivate static RealMatrix solveUpperTriangular(RealMatrixImpl coefficients,"
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,150,ealMatrixImpl constants) {
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,150,"private static RealVector solveUpperTriangular(RealMatrix coefficients, RealVector constants) {"
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,155,f (constants.getColumnDimension() != 1) {
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,156,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,157,"Constants not a column matrix."");"
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,160,ouble[][] cons = constants.getDataRef();
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,161,ouble[][] coef = coefficients.getDataRef();
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,167,um += coef[index][j] * x[j];
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,161,"sum += coefficients.getEntry(index, j) * x[j];"
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,169,[index] = (cons[index][0] - sum) / coef[index][index];
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,163,"x[index] = (constants.getEntry(index) - sum) / coefficients.getEntry(index, index);"
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,171,eturn new RealMatrixImpl(x);
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,165,return new RealVectorImpl(x);
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,186,"rivate static boolean isUpperTriangular(RealMatrixImpl m, double epsilon) {"
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,187,ouble[][] data = m.getDataRef();
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,180,"private static boolean isUpperTriangular(RealMatrix m, double epsilon) {"
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,193,f (Math.abs(data[r][c]) > epsilon) {
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,186,"if (Math.abs(m.getEntry(r, c)) > epsilon) {"
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,43,"heckdimensions(new RealMatrixImpl(testSquare, false));"
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,44,"heckdimensions(new RealMatrixImpl(testNonSquare, false));"
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,45,"heckdimensions(new RealMatrixImpl(testNonSquare, false).transpose());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,43,checkdimensions(MatrixUtils.createRealMatrix(testSquare));
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,44,checkdimensions(MatrixUtils.createRealMatrix(testNonSquare));
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,45,checkdimensions(MatrixUtils.createRealMatrix(testNonSquare).transpose());
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,62,"heckAEqualUSVt(new RealMatrixImpl(testSquare, false));"
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,63,"heckAEqualUSVt(new RealMatrixImpl(testNonSquare, false));"
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,64,"heckAEqualUSVt(new RealMatrixImpl(testNonSquare, false).transpose());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,62,checkAEqualUSVt(MatrixUtils.createRealMatrix(testSquare));
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,63,checkAEqualUSVt(MatrixUtils.createRealMatrix(testNonSquare));
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,64,checkAEqualUSVt(MatrixUtils.createRealMatrix(testNonSquare).transpose());
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,77,"heckOrthogonal(new BiDiagonalTransformer(new RealMatrixImpl(testSquare, false)).getU());"
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,78,"heckOrthogonal(new BiDiagonalTransformer(new RealMatrixImpl(testNonSquare, false)).getU());"
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,79,"heckOrthogonal(new BiDiagonalTransformer(new RealMatrixImpl(testNonSquare, false).transpose()).getU());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,77,checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).getU());
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,78,checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).getU());
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,79,checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getU());
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,83,"heckOrthogonal(new BiDiagonalTransformer(new RealMatrixImpl(testSquare, false)).getV());"
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,84,"heckOrthogonal(new BiDiagonalTransformer(new RealMatrixImpl(testNonSquare, false)).getV());"
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,85,"heckOrthogonal(new BiDiagonalTransformer(new RealMatrixImpl(testNonSquare, false).transpose()).getV());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,83,checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).getV());
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,84,checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).getV());
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,85,checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getV());
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,95,"heckBiDiagonal(new BiDiagonalTransformer(new RealMatrixImpl(testSquare, false)).getB());"
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,96,"heckBiDiagonal(new BiDiagonalTransformer(new RealMatrixImpl(testNonSquare, false)).getB());"
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,97,"heckBiDiagonal(new BiDiagonalTransformer(new RealMatrixImpl(testNonSquare, false).transpose()).getB());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,95,checkBiDiagonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).getB());
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,96,checkBiDiagonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).getB());
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,97,checkBiDiagonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getB());
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,120,"ew BiDiagonalTransformer(new RealMatrixImpl(testSquare, false));"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,120,new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare));
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,122,ealMatrix uRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,122,RealMatrix uRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,126,ealMatrix bRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,126,RealMatrix bRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,130,ealMatrix vRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,130,RealMatrix vRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,151,"ssertTrue(new BiDiagonalTransformer(new RealMatrixImpl(testSquare, false)).isUpperBiDiagonal());"
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,152,"ssertTrue(new BiDiagonalTransformer(new RealMatrixImpl(testNonSquare, false)).isUpperBiDiagonal());"
False,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,153,"ssertFalse(new BiDiagonalTransformer(new RealMatrixImpl(testNonSquare, false).transpose()).isUpperBiDiagonal());"
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,151,assertTrue(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).isUpperBiDiagonal());
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,152,assertTrue(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).isUpperBiDiagonal());
True,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,153,assertFalse(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare).transpose()).isUpperBiDiagonal());
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,46,ew RealMatrixImpl(new double[][] {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,47, 1.5 }
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,48,", false);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,46,MatrixUtils.createRealMatrix(new double[][] { { 1.5 } });
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,55,ew RealMatrixImpl(new double[][] {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,56,"       59.0, 12.0 },"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,57," Double.NaN, 66.0 }"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,58,", false);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,53,MatrixUtils.createRealMatrix(new double[][] {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,54,"{       59.0, 12.0 },"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,55,"{ Double.NaN, 66.0 }"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,66,ew RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,64,MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,70,", false);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,79,ew RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,77,MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,84,", false);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,94,ew RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,92,MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,99,", false);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,216,ealMatrix repeated = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,214,RealMatrix repeated = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,230,ealMatrix distinct = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,228,RealMatrix distinct = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,371,"eturn new RealMatrixImpl(data, false);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,369,return MatrixUtils.createRealMatrix(data);
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,381,"eturn new RealMatrixImpl(dData, false);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,379,return MatrixUtils.createRealMatrix(dData);
False,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,76,ealMatrix b = new RealMatrixImpl(new double[2][2]);
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,76,RealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]);
False,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,105,ealMatrix m = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,105,RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,115,ealMatrix b = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,115,RealMatrix b = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,123,ealMatrix xRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,123,RealMatrix xRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,69,"ealMatrixImpl matrix = new RealMatrixImpl(testData, false);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,69,RealMatrix matrix = MatrixUtils.createRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,83,"ew LUDecompositionImpl(new RealMatrixImpl(new double[3][2], false));"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,83,new LUDecompositionImpl(MatrixUtils.createRealMatrix(new double[3][2]));
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,93,"ealMatrix matrix = new RealMatrixImpl(testData, false);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,93,RealMatrix matrix = MatrixUtils.createRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,101,"atrix = new RealMatrixImpl(testDataMinus, false);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,101,matrix = MatrixUtils.createRealMatrix(testDataMinus);
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,117,"atrix = new RealMatrixImpl(singular, false);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,117,matrix = MatrixUtils.createRealMatrix(singular);
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,124,"atrix = new RealMatrixImpl(bigSingular, false);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,124,matrix = MatrixUtils.createRealMatrix(bigSingular);
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,135,"ealMatrixImpl matrix = new RealMatrixImpl(testData, false);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,135,RealMatrix matrix = MatrixUtils.createRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,147,"ealMatrixImpl matrix = new RealMatrixImpl(testData, false);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,147,RealMatrix matrix = MatrixUtils.createRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,158,"ealMatrixImpl matrix = new RealMatrixImpl(testData, false);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,158,RealMatrix matrix = MatrixUtils.createRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,209,"ew LUDecompositionImpl(new RealMatrixImpl(testData, false));"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,209,new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData));
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,211,"u = new LUDecompositionImpl(new RealMatrixImpl(singular, false));"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,211,lu = new LUDecompositionImpl(MatrixUtils.createRealMatrix(singular));
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,213,"u = new LUDecompositionImpl(new RealMatrixImpl(bigSingular, false));"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,213,lu = new LUDecompositionImpl(MatrixUtils.createRealMatrix(bigSingular));
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,220,"ew LUDecompositionImpl(new RealMatrixImpl(testData, false));"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,221,ealMatrix lRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,220,new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData));
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,221,RealMatrix lRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,226,ealMatrix uRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,226,RealMatrix uRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,231,ealMatrix pRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,231,RealMatrix pRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,260,"ew LUDecompositionImpl(new RealMatrixImpl(luData, false));"
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,261,ealMatrix lRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,260,new LUDecompositionImpl(MatrixUtils.createRealMatrix(luData));
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,261,RealMatrix lRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,266,ealMatrix uRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,266,RealMatrix uRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,271,ealMatrix pRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,271,RealMatrix pRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,60,inal RealMatrix matrix = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,60,final RealMatrix matrix = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,64,", false);"
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,72,"ew LUSolver(new LUDecompositionImpl(new RealMatrixImpl(testData, false)));"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,72,new LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)));
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,74,"u = new LUSolver(new LUDecompositionImpl(new RealMatrixImpl(singular, false)));"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,74,lu = new LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(singular)));
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,76,"u = new LUSolver(new LUDecompositionImpl(new RealMatrixImpl(bigSingular, false)));"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,76,lu = new LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(bigSingular)));
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,83,"ew LUSolver(new LUDecompositionImpl(new RealMatrixImpl(testData, false)));"
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,84,ealMatrix b = new RealMatrixImpl(new double[2][2]);
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,83,new LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)));
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,84,RealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]);
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,114,"ew LUSolver(new LUDecompositionImpl(new RealMatrixImpl(singular, false)));"
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,115,ealMatrix b = new RealMatrixImpl(new double[2][2]);
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,114,new LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(singular)));
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,115,RealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]);
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,153,"ew LUSolver(new LUDecompositionImpl(new RealMatrixImpl(testData, false)));"
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,154,ealMatrix b = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,153,new LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)));
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,154,RealMatrix b = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,157,ealMatrix xRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,157,RealMatrix xRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,191,"ssertEquals( -1, getDeterminant(new RealMatrixImpl(testData, false)), 1.0e-15);"
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,192,"ssertEquals(-10, getDeterminant(new RealMatrixImpl(luData, false)), 1.0e-14);"
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,193,"ssertEquals(  0, getDeterminant(new RealMatrixImpl(singular, false)), 1.0e-17);"
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,194,"ssertEquals(  0, getDeterminant(new RealMatrixImpl(bigSingular, false)), 1.0e-10);"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,191,"assertEquals( -1, getDeterminant(MatrixUtils.createRealMatrix(testData)), 1.0e-15);"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,192,"assertEquals(-10, getDeterminant(MatrixUtils.createRealMatrix(luData)), 1.0e-14);"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,193,"assertEquals(  0, getDeterminant(MatrixUtils.createRealMatrix(singular)), 1.0e-17);"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,194,"assertEquals(  0, getDeterminant(MatrixUtils.createRealMatrix(bigSingular)), 1.0e-10);"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,62,"ealMatrixImpl matrix = new RealMatrixImpl(testData3x3NonSingular, false);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,62,RealMatrix matrix = MatrixUtils.createRealMatrix(testData3x3NonSingular);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,69,"atrix = new RealMatrixImpl(testData4x3, false);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,69,matrix = MatrixUtils.createRealMatrix(testData4x3);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,76,"atrix = new RealMatrixImpl(testData3x4, false);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,76,matrix = MatrixUtils.createRealMatrix(testData3x4);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,86,"ealMatrix A = new RealMatrixImpl(testData3x3NonSingular, false);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,86,RealMatrix A = MatrixUtils.createRealMatrix(testData3x3NonSingular);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,93,"ealMatrix matrix = new RealMatrixImpl(testData3x3Singular, false);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,93,RealMatrix matrix = MatrixUtils.createRealMatrix(testData3x3Singular);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,98,"atrix = new RealMatrixImpl(testData3x4, false);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,98,matrix = MatrixUtils.createRealMatrix(testData3x4);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,103,"atrix = new RealMatrixImpl(testData4x3, false);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,103,matrix = MatrixUtils.createRealMatrix(testData4x3);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,111,"ealMatrix matrix = new RealMatrixImpl(testData3x3NonSingular, false);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,111,RealMatrix matrix = MatrixUtils.createRealMatrix(testData3x3NonSingular);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,118,"atrix = new RealMatrixImpl(testData3x3Singular, false);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,118,matrix = MatrixUtils.createRealMatrix(testData3x3Singular);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,125,"atrix = new RealMatrixImpl(testData3x4, false);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,125,matrix = MatrixUtils.createRealMatrix(testData3x4);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,132,"atrix = new RealMatrixImpl(testData4x3, false);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,132,matrix = MatrixUtils.createRealMatrix(testData4x3);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,142,"ealMatrixImpl matrix = new RealMatrixImpl(testData3x3NonSingular, false);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,142,RealMatrix matrix = MatrixUtils.createRealMatrix(testData3x3NonSingular);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,149,"atrix = new RealMatrixImpl(testData3x3Singular, false);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,149,matrix = MatrixUtils.createRealMatrix(testData3x3Singular);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,156,"atrix = new RealMatrixImpl(testData3x4, false);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,156,matrix = MatrixUtils.createRealMatrix(testData3x4);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,163,"atrix = new RealMatrixImpl(testData4x3, false);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,163,matrix = MatrixUtils.createRealMatrix(testData4x3);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,173,"ealMatrixImpl matrix = new RealMatrixImpl(testData3x3NonSingular, false);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,173,RealMatrix matrix = MatrixUtils.createRealMatrix(testData3x3NonSingular);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,179,"atrix = new RealMatrixImpl(testData3x3Singular, false);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,179,matrix = MatrixUtils.createRealMatrix(testData3x3Singular);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,185,"atrix = new RealMatrixImpl(testData3x4, false);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,185,matrix = MatrixUtils.createRealMatrix(testData3x4);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,191,"atrix = new RealMatrixImpl(testData4x3, false);"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,191,matrix = MatrixUtils.createRealMatrix(testData4x3);
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,202,"ew QRDecompositionImpl(new RealMatrixImpl(testData3x3NonSingular, false));"
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,203,ealMatrix qRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,202,new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3NonSingular));
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,203,RealMatrix qRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,208,ealMatrix rRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,208,RealMatrix rRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,213,ealMatrix hRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,213,RealMatrix hRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,59,"ew QRSolver(new QRDecompositionImpl(new RealMatrixImpl(testData3x3NonSingular, false)));"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,59,new QRSolver(new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3NonSingular)));
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,62,"olver = new QRSolver(new QRDecompositionImpl(new RealMatrixImpl(testData3x3Singular, false)));"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,62,solver = new QRSolver(new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3Singular)));
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,65,"olver = new QRSolver(new QRDecompositionImpl(new RealMatrixImpl(testData3x4, false)));"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,65,solver = new QRSolver(new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x4)));
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,68,"olver = new QRSolver(new QRDecompositionImpl(new RealMatrixImpl(testData4x3, false)));"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,68,solver = new QRSolver(new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData4x3)));
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,76,"ew QRSolver(new QRDecompositionImpl(new RealMatrixImpl(testData3x3NonSingular, false)));"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,77,ealMatrix b = new RealMatrixImpl(new double[2][2]);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,76,new QRSolver(new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3NonSingular)));
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,77,RealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]);
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,107,"ew QRSolver(new QRDecompositionImpl(new RealMatrixImpl(testData3x3Singular, false)));"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,108,ealMatrix b = new RealMatrixImpl(new double[3][2]);
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,107,new QRSolver(new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3Singular)));
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,108,RealMatrix b = MatrixUtils.createRealMatrix(new double[3][2]);
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,138,"ew QRSolver(new QRDecompositionImpl(new RealMatrixImpl(testData3x3NonSingular, false)));"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,139,ealMatrix b = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,138,new QRSolver(new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3NonSingular)));
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,139,RealMatrix b = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,142,ealMatrix xRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,142,RealMatrix xRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1063,ealMatrixImpl m_outerProduct = v1.outerProduct(v2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,1063,RealMatrix m_outerProduct = v1.outerProduct(v2);
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,82,"ealMatrixImpl matrix = new RealMatrixImpl(testSquare, false);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,82,RealMatrix matrix = MatrixUtils.createRealMatrix(testSquare);
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,97,"heckAEqualUSVt(new RealMatrixImpl(testSquare, false));"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,98,"heckAEqualUSVt(new RealMatrixImpl(testNonSquare, false));"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,99,"heckAEqualUSVt(new RealMatrixImpl(testNonSquare, false).transpose());"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,97,checkAEqualUSVt(MatrixUtils.createRealMatrix(testSquare));
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,98,checkAEqualUSVt(MatrixUtils.createRealMatrix(testNonSquare));
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,99,checkAEqualUSVt(MatrixUtils.createRealMatrix(testNonSquare).transpose());
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,114,"heckOrthogonal(new SingularValueDecompositionImpl(new RealMatrixImpl(testSquare, false)).getU());"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,115,"heckOrthogonal(new SingularValueDecompositionImpl(new RealMatrixImpl(testNonSquare, false)).getU());"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,116,"heckOrthogonal(new SingularValueDecompositionImpl(new RealMatrixImpl(testNonSquare, false).transpose()).getU());"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,114,checkOrthogonal(new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare)).getU());
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,115,checkOrthogonal(new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testNonSquare)).getU());
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,116,checkOrthogonal(new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getU());
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,121,"heckOrthogonal(new SingularValueDecompositionImpl(new RealMatrixImpl(testSquare, false)).getV());"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,122,"heckOrthogonal(new SingularValueDecompositionImpl(new RealMatrixImpl(testNonSquare, false)).getV());"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,123,"heckOrthogonal(new SingularValueDecompositionImpl(new RealMatrixImpl(testNonSquare, false).transpose()).getV());"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,121,checkOrthogonal(new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare)).getV());
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,122,checkOrthogonal(new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testNonSquare)).getV());
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,123,checkOrthogonal(new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getV());
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,135,"ew SingularValueDecompositionImpl(new RealMatrixImpl(testSquare, false));"
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,136,ealMatrix uRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,135,new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare));
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,136,RealMatrix uRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,140,ealMatrix sRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,140,RealMatrix sRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,144,ealMatrix vRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,144,RealMatrix vRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,167,ealMatrix uRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,167,RealMatrix uRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,173,ealMatrix sRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,173,RealMatrix sRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,178,ealMatrix vRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,178,RealMatrix vRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,186,"ew SingularValueDecompositionImpl(new RealMatrixImpl(testNonSquare, false));"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,186,new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testNonSquare));
False,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,204,"ew SingularValueDecompositionImpl(new RealMatrixImpl(testSquare, false));"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,204,new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare));
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,46,"ew SingularValueSolver(new SingularValueDecompositionImpl(new RealMatrixImpl(testSquare, false)));"
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,47,ealMatrix b = new RealMatrixImpl(new double[3][2]);
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,46,new SingularValueSolver(new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare)));
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,47,RealMatrix b = MatrixUtils.createRealMatrix(new double[3][2]);
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,77,ew RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,77,MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,80,", false);"
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,82,ealMatrix b = new RealMatrixImpl(new double[2][2]);
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,82,RealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]);
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,120,"ew SingularValueSolver(new SingularValueDecompositionImpl(new RealMatrixImpl(testSquare, false)));"
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,121,ealMatrix b = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,120,new SingularValueSolver(new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare)));
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,121,RealMatrix b = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,124,ealMatrix xRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,124,RealMatrix xRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,160,"ew SingularValueDecompositionImpl(new RealMatrixImpl(testSquare, false));"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,160,new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare));
False,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,48,"ew TriDiagonalTransformer(new RealMatrixImpl(new double[3][2], false));"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,48,new TriDiagonalTransformer(MatrixUtils.createRealMatrix(new double[3][2]));
False,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,58,"heckAEqualQTQt(new RealMatrixImpl(testSquare5, false));"
False,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,59,"heckAEqualQTQt(new RealMatrixImpl(testSquare3, false));"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,58,checkAEqualQTQt(MatrixUtils.createRealMatrix(testSquare5));
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,59,checkAEqualQTQt(MatrixUtils.createRealMatrix(testSquare3));
False,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,82,"ealMatrix matrix = new RealMatrixImpl(modifiedData, false);"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,82,RealMatrix matrix = MatrixUtils.createRealMatrix(modifiedData);
False,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,87,"ouble norm = q.multiply(t).multiply(qT).subtract(new RealMatrixImpl(data, false)).getNorm();"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,87,double norm = q.multiply(t).multiply(qT).subtract(MatrixUtils.createRealMatrix(data)).getNorm();
False,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,92,"heckOrthogonal(new TriDiagonalTransformer(new RealMatrixImpl(testSquare5, false)).getQ());"
False,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,93,"heckOrthogonal(new TriDiagonalTransformer(new RealMatrixImpl(testSquare3, false)).getQ());"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,92,checkOrthogonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare5)).getQ());
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,93,checkOrthogonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare3)).getQ());
False,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,97,"heckOrthogonal(new TriDiagonalTransformer(new RealMatrixImpl(testSquare5, false)).getQT());"
False,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,98,"heckOrthogonal(new TriDiagonalTransformer(new RealMatrixImpl(testSquare3, false)).getQT());"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,97,checkOrthogonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare5)).getQT());
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,98,checkOrthogonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare3)).getQT());
False,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,108,"heckTriDiagonal(new TriDiagonalTransformer(new RealMatrixImpl(testSquare5, false)).getT());"
False,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,109,"heckTriDiagonal(new TriDiagonalTransformer(new RealMatrixImpl(testSquare3, false)).getT());"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,108,checkTriDiagonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare5)).getT());
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,109,checkTriDiagonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare3)).getT());
False,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,152,"ew TriDiagonalTransformer(new RealMatrixImpl(matrix, false));"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,152,new TriDiagonalTransformer(MatrixUtils.createRealMatrix(matrix));
False,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,156,"ssertEquals(0, q.subtract(new RealMatrixImpl(qRef, false)).getNorm(), 1.0e-14);"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,156,"assertEquals(0, q.subtract(MatrixUtils.createRealMatrix(qRef)).getNorm(), 1.0e-14);"
False,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,169,"ssertEquals(0, t.subtract(new RealMatrixImpl(tData, false)).getNorm(), 1.0e-14);"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,169,"assertEquals(0, t.subtract(MatrixUtils.createRealMatrix(tData)).getNorm(), 1.0e-14);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,101,e.printStackTrace(System.err);
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,20,import junit.framework.Test;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,22,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,25,import org.apache.commons.math.linear.MatrixUtils;
False,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,22,mport org.apache.commons.math.linear.RealMatrixImpl;
False,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,26,mport junit.framework.*;
False,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,51,"ealMatrix covRM = new RealMatrixImpl(cov, false);"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,53,RealMatrix covRM = MatrixUtils.createRealMatrix(cov);
False,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,102,"ealMatrixImpl b = new RealMatrixImpl(4, 3);"
False,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,103,ouble[][] bData = b.getDataRef();
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,104,"RealMatrix b = MatrixUtils.createRealMatrix(4, 3);"
False,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,105,or (int i = 0; i < bData.length; ++i) {
False,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,106,ouble[] bi = bData[i];
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,106,for (int i = 0; i < b.getRowDimension(); ++i) {
False,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,108,i[j] = 1.0 + 0.1 * ++counter;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,108,"b.setEntry(i, j, 1.0 + 0.1 * ++counter);"
False,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,112,"ovariance = new RealMatrixImpl(mean.length, mean.length);"
False,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,113,ouble[][] covData = covariance.getDataRef();
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,112,"covariance = MatrixUtils.createRealMatrix(mean.length, mean.length);"
False,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,115,"ovData[i][i] = bbt.getEntry(i, i);"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,114,"covariance.setEntry(i, i, bbt.getEntry(i, i));"
False,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,118,ovData[i][j] = s;
False,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,119,ovData[j][i] = s;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,117,"covariance.setEntry(i, j, s);"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,118,"covariance.setEntry(j, i, s);"
False,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,148,rivate RealMatrixImpl covariance;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,147,private RealMatrix covariance;
False,src/test/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,src/test/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,66,Test(expected=IllegalArgumentException.class)
True,src/test/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,src/test/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,66,@Test(expected=ArrayIndexOutOfBoundsException.class)

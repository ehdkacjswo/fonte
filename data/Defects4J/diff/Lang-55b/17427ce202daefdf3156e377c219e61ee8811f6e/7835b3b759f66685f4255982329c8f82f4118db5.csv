is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,69," @version $Id: NumberUtilsTest.java,v 1.1 2002/07/19 03:35:55 bayard Exp $"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,69,"* @version $Id: NumberUtilsTest.java,v 1.2 2002/09/15 10:27:56 scolebourne Exp $"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,157,ublic void testMinimum() {
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,157,public void testMinimumLong() {
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,158,"assertEquals(""minimum(long,long,long) 1 failed"", 12345L, NumberUtils.minimum(12345L, 12345L + 1L, 12345L + 2L));"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,159,"assertEquals(""minimum(long,long,long) 2 failed"", 12345L, NumberUtils.minimum(12345L + 1L, 12345L, 12345 + 2L));"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,160,"assertEquals(""minimum(long,long,long) 3 failed"", 12345L, NumberUtils.minimum(12345L + 1L, 12345L + 2L, 12345L));"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,161,"assertEquals(""minimum(long,long,long) 4 failed"", 12345L, NumberUtils.minimum(12345L + 1L, 12345L, 12345L));"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,162,"assertEquals(""minimum(long,long,long) 5 failed"", 12345L, NumberUtils.minimum(12345L, 12345L, 12345L));"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,166,public void testMinimumInt() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,166,ublic void testMaximum() {
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,175,public void testMaximumLong() {
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,176,"assertEquals(""maximum(long,long,long) 1 failed"", 12345L, NumberUtils.maximum(12345L, 12345L - 1L, 12345L - 2L));"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,177,"assertEquals(""maximum(long,long,long) 2 failed"", 12345L, NumberUtils.maximum(12345L - 1L, 12345L, 12345L - 2L));"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,178,"assertEquals(""maximum(long,long,long) 3 failed"", 12345L, NumberUtils.maximum(12345L - 1L, 12345L - 2L, 12345L));"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,179,"assertEquals(""maximum(long,long,long) 4 failed"", 12345L, NumberUtils.maximum(12345L - 1L, 12345L, 12345L));"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,180,"assertEquals(""maximum(long,long,long) 5 failed"", 12345L, NumberUtils.maximum(12345L, 12345L, 12345L));"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,184,public void testMaximumInt() {
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,193,public void testCompareDouble() {
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,194,"assertTrue(NumberUtils.compare(Double.NaN, Double.NaN) == 0);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,195,"assertTrue(NumberUtils.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,196,"assertTrue(NumberUtils.compare(Double.NaN, Double.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,197,"assertTrue(NumberUtils.compare(Double.NaN, 1.2d) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,198,"assertTrue(NumberUtils.compare(Double.NaN, 0.0d) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,199,"assertTrue(NumberUtils.compare(Double.NaN, -0.0d) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,200,"assertTrue(NumberUtils.compare(Double.NaN, -1.2d) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,201,"assertTrue(NumberUtils.compare(Double.NaN, -Double.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,202,"assertTrue(NumberUtils.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,204,"assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,205,"assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,206,"assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,207,"assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,208,"assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,209,"assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,210,"assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,211,"assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,212,"assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,214,"assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NaN) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,215,"assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,216,"assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,217,"assertTrue(NumberUtils.compare(Double.MAX_VALUE, 1.2d) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,218,"assertTrue(NumberUtils.compare(Double.MAX_VALUE, 0.0d) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,219,"assertTrue(NumberUtils.compare(Double.MAX_VALUE, -0.0d) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,220,"assertTrue(NumberUtils.compare(Double.MAX_VALUE, -1.2d) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,221,"assertTrue(NumberUtils.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,222,"assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,224,"assertTrue(NumberUtils.compare(1.2d, Double.NaN) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,225,"assertTrue(NumberUtils.compare(1.2d, Double.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,226,"assertTrue(NumberUtils.compare(1.2d, Double.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,227,"assertTrue(NumberUtils.compare(1.2d, 1.2d) == 0);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,228,"assertTrue(NumberUtils.compare(1.2d, 0.0d) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,229,"assertTrue(NumberUtils.compare(1.2d, -0.0d) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,230,"assertTrue(NumberUtils.compare(1.2d, -1.2d) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,231,"assertTrue(NumberUtils.compare(1.2d, -Double.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,232,"assertTrue(NumberUtils.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,234,"assertTrue(NumberUtils.compare(0.0d, Double.NaN) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,235,"assertTrue(NumberUtils.compare(0.0d, Double.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,236,"assertTrue(NumberUtils.compare(0.0d, Double.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,237,"assertTrue(NumberUtils.compare(0.0d, 1.2d) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,238,"assertTrue(NumberUtils.compare(0.0d, 0.0d) == 0);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,239,"assertTrue(NumberUtils.compare(0.0d, -0.0d) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,240,"assertTrue(NumberUtils.compare(0.0d, -1.2d) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,241,"assertTrue(NumberUtils.compare(0.0d, -Double.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,242,"assertTrue(NumberUtils.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,244,"assertTrue(NumberUtils.compare(-0.0d, Double.NaN) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,245,"assertTrue(NumberUtils.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,246,"assertTrue(NumberUtils.compare(-0.0d, Double.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,247,"assertTrue(NumberUtils.compare(-0.0d, 1.2d) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,248,"assertTrue(NumberUtils.compare(-0.0d, 0.0d) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,249,"assertTrue(NumberUtils.compare(-0.0d, -0.0d) == 0);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,250,"assertTrue(NumberUtils.compare(-0.0d, -1.2d) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,251,"assertTrue(NumberUtils.compare(-0.0d, -Double.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,252,"assertTrue(NumberUtils.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,254,"assertTrue(NumberUtils.compare(-1.2d, Double.NaN) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,255,"assertTrue(NumberUtils.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,256,"assertTrue(NumberUtils.compare(-1.2d, Double.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,257,"assertTrue(NumberUtils.compare(-1.2d, 1.2d) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,258,"assertTrue(NumberUtils.compare(-1.2d, 0.0d) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,259,"assertTrue(NumberUtils.compare(-1.2d, -0.0d) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,260,"assertTrue(NumberUtils.compare(-1.2d, -1.2d) == 0);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,261,"assertTrue(NumberUtils.compare(-1.2d, -Double.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,262,"assertTrue(NumberUtils.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,264,"assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NaN) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,265,"assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,266,"assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,267,"assertTrue(NumberUtils.compare(-Double.MAX_VALUE, 1.2d) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,268,"assertTrue(NumberUtils.compare(-Double.MAX_VALUE, 0.0d) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,269,"assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -0.0d) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,270,"assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -1.2d) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,271,"assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,272,"assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,274,"assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,275,"assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,276,"assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,277,"assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,278,"assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,279,"assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,280,"assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,281,"assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,282,"assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,285,public void testCompareFloat() {
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,286,"assertTrue(NumberUtils.compare(Float.NaN, Float.NaN) == 0);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,287,"assertTrue(NumberUtils.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,288,"assertTrue(NumberUtils.compare(Float.NaN, Float.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,289,"assertTrue(NumberUtils.compare(Float.NaN, 1.2f) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,290,"assertTrue(NumberUtils.compare(Float.NaN, 0.0f) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,291,"assertTrue(NumberUtils.compare(Float.NaN, -0.0f) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,292,"assertTrue(NumberUtils.compare(Float.NaN, -1.2f) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,293,"assertTrue(NumberUtils.compare(Float.NaN, -Float.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,294,"assertTrue(NumberUtils.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,296,"assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,297,"assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,298,"assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,299,"assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 1.2f) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,300,"assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 0.0f) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,301,"assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -0.0f) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,302,"assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,303,"assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,304,"assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,306,"assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NaN) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,307,"assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,308,"assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,309,"assertTrue(NumberUtils.compare(Float.MAX_VALUE, 1.2f) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,310,"assertTrue(NumberUtils.compare(Float.MAX_VALUE, 0.0f) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,311,"assertTrue(NumberUtils.compare(Float.MAX_VALUE, -0.0f) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,312,"assertTrue(NumberUtils.compare(Float.MAX_VALUE, -1.2f) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,313,"assertTrue(NumberUtils.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,314,"assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,316,"assertTrue(NumberUtils.compare(1.2f, Float.NaN) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,317,"assertTrue(NumberUtils.compare(1.2f, Float.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,318,"assertTrue(NumberUtils.compare(1.2f, Float.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,319,"assertTrue(NumberUtils.compare(1.2f, 1.2f) == 0);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,320,"assertTrue(NumberUtils.compare(1.2f, 0.0f) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,321,"assertTrue(NumberUtils.compare(1.2f, -0.0f) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,322,"assertTrue(NumberUtils.compare(1.2f, -1.2f) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,323,"assertTrue(NumberUtils.compare(1.2f, -Float.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,324,"assertTrue(NumberUtils.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,326,"assertTrue(NumberUtils.compare(0.0f, Float.NaN) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,327,"assertTrue(NumberUtils.compare(0.0f, Float.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,328,"assertTrue(NumberUtils.compare(0.0f, Float.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,329,"assertTrue(NumberUtils.compare(0.0f, 1.2f) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,330,"assertTrue(NumberUtils.compare(0.0f, 0.0f) == 0);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,331,"assertTrue(NumberUtils.compare(0.0f, -0.0f) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,332,"assertTrue(NumberUtils.compare(0.0f, -1.2f) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,333,"assertTrue(NumberUtils.compare(0.0f, -Float.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,334,"assertTrue(NumberUtils.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,336,"assertTrue(NumberUtils.compare(-0.0f, Float.NaN) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,337,"assertTrue(NumberUtils.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,338,"assertTrue(NumberUtils.compare(-0.0f, Float.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,339,"assertTrue(NumberUtils.compare(-0.0f, 1.2f) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,340,"assertTrue(NumberUtils.compare(-0.0f, 0.0f) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,341,"assertTrue(NumberUtils.compare(-0.0f, -0.0f) == 0);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,342,"assertTrue(NumberUtils.compare(-0.0f, -1.2f) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,343,"assertTrue(NumberUtils.compare(-0.0f, -Float.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,344,"assertTrue(NumberUtils.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,346,"assertTrue(NumberUtils.compare(-1.2f, Float.NaN) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,347,"assertTrue(NumberUtils.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,348,"assertTrue(NumberUtils.compare(-1.2f, Float.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,349,"assertTrue(NumberUtils.compare(-1.2f, 1.2f) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,350,"assertTrue(NumberUtils.compare(-1.2f, 0.0f) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,351,"assertTrue(NumberUtils.compare(-1.2f, -0.0f) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,352,"assertTrue(NumberUtils.compare(-1.2f, -1.2f) == 0);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,353,"assertTrue(NumberUtils.compare(-1.2f, -Float.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,354,"assertTrue(NumberUtils.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,356,"assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NaN) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,357,"assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,358,"assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,359,"assertTrue(NumberUtils.compare(-Float.MAX_VALUE, 1.2f) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,360,"assertTrue(NumberUtils.compare(-Float.MAX_VALUE, 0.0f) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,361,"assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -0.0f) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,362,"assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -1.2f) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,363,"assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,364,"assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,366,"assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,367,"assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,368,"assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,369,"assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,370,"assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,371,"assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,372,"assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,373,"assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,374,"assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);"

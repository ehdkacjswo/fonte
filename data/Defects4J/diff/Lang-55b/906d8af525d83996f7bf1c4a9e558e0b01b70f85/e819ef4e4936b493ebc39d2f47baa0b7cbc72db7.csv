is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,69,rotected InnerNumber nonComparable = new InnerNumber();
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,68,protected InnerNumber nonComparableNumber = new InnerNumber();
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,77,ive        = new Integer(5);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,78,en         = new Integer(10);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,79,welve      = new Integer(12);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,80,ifteen     = new Integer(15);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,81,wenty      = new Integer(20);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,82,wentyFive  = new Integer(25);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,83,ong8       = new Long(8);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,84,ong10      = new Long(10);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,85,ong12      = new Long(12);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,86,ong20      = new Long(20);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,87,ong21      = new Long(21);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,88,ouble8     = new Double(8);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,89,ouble10    = new Double(10);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,90,ouble12    = new Double(12);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,91,ouble20    = new Double(20);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,92,ouble21    = new Double(21);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,93,loat8      = new Float(8);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,94,loat10     = new Float(10);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,95,loat12     = new Float(12);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,96,loat20     = new Float(20);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,97,loat21     = new Float(21);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,76,five = new Integer(5);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,77,ten = new Integer(10);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,78,twelve = new Integer(12);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,79,fifteen = new Integer(15);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,80,twenty = new Integer(20);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,81,twentyFive = new Integer(25);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,82,long8 = new Long(8);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,83,long10 = new Long(10);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,84,long12 = new Long(12);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,85,long20 = new Long(20);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,86,long21 = new Long(21);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,87,double8 = new Double(8);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,88,double10 = new Double(10);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,89,double12 = new Double(12);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,90,double20 = new Double(20);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,91,double21 = new Double(21);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,92,float8 = new Float(8);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,93,float10 = new Float(10);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,94,float12 = new Float(12);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,95,float20 = new Float(20);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,96,float21 = new Float(21);
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,120,"ssertEquals(true, tenToTwenty.containsLong(nonComparable));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,119,"assertEquals(true, tenToTwenty.containsLong(nonComparableNumber));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,155,"ssertEquals(true, tenToTwenty.containsInteger(nonComparable));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,154,"assertEquals(true, tenToTwenty.containsInteger(nonComparableNumber));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,190,"ssertEquals(true, tenToTwenty.containsDouble(nonComparable));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,189,"assertEquals(true, tenToTwenty.containsDouble(nonComparableNumber));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,225,"ssertEquals(true, tenToTwenty.containsFloat(nonComparable));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,224,"assertEquals(true, tenToTwenty.containsFloat(nonComparableNumber));"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,70,ange r = new DoubleRange(nonComparable);
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,70,Range r = new DoubleRange(nonComparableNumber);
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,134,"ssertEquals(true, tenToTwenty.containsNumber(nonComparable));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,134,"assertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,70,ange r = new FloatRange(nonComparable);
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,70,Range r = new FloatRange(nonComparableNumber);
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,134,"ssertEquals(true, tenToTwenty.containsNumber(nonComparable));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,134,"assertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,67,ange r = new IntRange(nonComparable);
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,67,Range r = new IntRange(nonComparableNumber);
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,127,"ssertEquals(true, tenToTwenty.containsNumber(nonComparable));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,127,"assertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));"
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,65,ange r = new LongRange(nonComparable);
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,65,Range r = new LongRange(nonComparableNumber);
False,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,115,"ssertEquals(true, tenToTwenty.containsNumber(nonComparable));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,115,"assertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,31,ublic NumberRangeTest(String name) {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,32,uper(name);
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,41,ublic void setUp() {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,42,uper.setUp();
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,43,"enToTwenty = new NumberRange(ten, twenty);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,44,"therRange = new IntRange(ten, twenty);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,47,"rotected Range createRange(Integer integer1, Integer integer2) {"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,48,"eturn new NumberRange(integer1, integer2);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,50,rotected Range createRange(Integer integer) {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,51,eturn new NumberRange(integer);
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,38,public NumberRangeTest(String name) {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,39,super(name);
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,56,ublic void testConstructorExceptions() {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,57,ry {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,58,ew NumberRange (new Double (Double.NaN));
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,59,"ail(""no illegal argument exception"");"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,60, catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,42,void checkConstructorException(Number num) {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,64,"ew NumberRange (new Double (Double.NaN), new Double (12.2));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,65,"ail(""no illegal argument exception"");"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,44,new NumberRange(num);
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,45,"fail(""Expected an IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,47,// Expected.
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,69,ry {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,70,"ew NumberRange (new Double (12.2), new Double (Double.NaN));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,71,"ail(""no illegal argument exception"");"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,72, catch (IllegalArgumentException e) {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,75,ry {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,76,ew NumberRange (new Float (Float.NaN));
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,77,"ail(""no illegal argument exception"");"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,78, catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,51,"void checkConstructorException(Number num1, Number num2) {"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,82,"ew NumberRange (new Float (Float.NaN), new Float(12.2));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,83,"ail(""no illegal argument exception"");"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,53,"new NumberRange(num1, num2);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,54,"fail(""Expected an IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,56,// Expected.
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,87,ry {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,88,"ew NumberRange (new Float(12.2), new Float (Float.NaN));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,89,"ail(""no illegal argument exception"");"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,90, catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,60,protected Range createRange(Integer integer) {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,61,return new NumberRange(integer);
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,66,"protected Range createRange(Integer integer1, Integer integer2) {"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,67,"return new NumberRange(integer1, integer2);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,70,public void setUp() {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,71,super.setUp();
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,72,"tenToTwenty = new NumberRange(ten, twenty);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,73,"otherRange = new IntRange(ten, twenty);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,77,* Tests non-exceptional conditions for the one argument constructor.
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,99,ry {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,100,ew NumberRange(null);
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,101,ail();
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,102, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,103,ry {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,104,ew NumberRange(nonComparable);
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,105,ail();
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,106, catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,86,* Tests exceptional conditions for the one argument constructor.
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,88,public void testConstructor1Exceptions() {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,89,this.checkConstructorException(null);
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,90,this.checkConstructorException(nonComparableNumber);
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,91,this.checkConstructorException(new Float(Float.NaN));
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,92,this.checkConstructorException(new Double(Double.NaN));
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,96,* Tests non-exceptional conditions for the two argument constructor.
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,118,/ not null
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,119,ry {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,120,"ew NumberRange(five, null);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,121,ail();
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,122, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,123,ry {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,124,"ew NumberRange(null, five);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,125,ail();
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,126, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,127,ry {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,128,"ew NumberRange(null, null);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,129,ail();
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,130, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,132,/ no mixed types
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,133,ry {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,134,"ew NumberRange(five, long21);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,135,ail();
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,136, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,138,/ must be comparable
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,139,ry {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,140,"ew NumberRange(nonComparable, nonComparable);"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,141,ail();
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,142, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,144,/ no double NaN
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,145,ry {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,146,"ew NumberRange(new Double(0), new Double(Double.NaN));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,147,ail();
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,148, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,150,ry {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,151,"ew NumberRange(new Double(Double.NaN), new Double(0));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,152,ail();
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,153, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,155,/ no float NaN
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,156,ry {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,157,"ew NumberRange(new Float(0), new Float(Float.NaN));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,158,ail();
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,159, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,161,ry {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,162,"ew NumberRange(new Float(Float.NaN), new Float(0));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,163,ail();
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,164, catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,109,* Tests exceptional conditions for the two argument constructor.
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,111,public void testConstructor2Exceptions() {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,112,"this.checkConstructorException(null, null);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,114,"this.checkConstructorException(new Float(12.2f), new Double(12.2));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,115,"this.checkConstructorException(new Float(Float.NaN), new Double(12.2));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,116,"this.checkConstructorException(new Double(Double.NaN), new Double(12.2));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,117,"this.checkConstructorException(new Double(12.2), new Double(Double.NaN));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,118,"this.checkConstructorException(new Double(Double.NaN), new Double(Double.NaN));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,119,"this.checkConstructorException(null, new Double(12.2));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,120,"this.checkConstructorException(new Double(12.2), null);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,122,"this.checkConstructorException(new Double(12.2f), new Float(12.2));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,123,"this.checkConstructorException(new Double(Double.NaN), new Float(12.2));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,124,"this.checkConstructorException(new Float(Float.NaN), new Float(12.2));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,125,"this.checkConstructorException(new Float(12.2), new Float(Float.NaN));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,126,"this.checkConstructorException(new Float(Float.NaN), new Float(Float.NaN));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,127,"this.checkConstructorException(null, new Float(12.2));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,128,"this.checkConstructorException(new Float(12.2), null);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,130,"this.checkConstructorException(nonComparableNumber, nonComparableNumber);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,131,"this.checkConstructorException(null, nonComparableNumber);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,132,"this.checkConstructorException(nonComparableNumber, null);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,133,"this.checkConstructorException(new Float(12.2), nonComparableNumber);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,134,"this.checkConstructorException(nonComparableNumber, new Float(12.2));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,139,public void testContainsLongBig() {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,140,// original NumberRange class failed this test
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,141,"NumberRange big = new NumberRange(new Long(Long.MAX_VALUE), new Long(Long.MAX_VALUE - 2));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,142,"assertEquals(true, big.containsLong(Long.MAX_VALUE - 1));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,143,"assertEquals(false, big.containsLong(Long.MAX_VALUE - 3));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,180, catch (IllegalArgumentException ex) {}
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,183,ublic void testContainsLongBig() {
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,184,/ original NumberRange class failed this test
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,185,"umberRange big = new NumberRange(new Long(Long.MAX_VALUE), new Long(Long.MAX_VALUE- 2));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,186,"ssertEquals(true, big.containsLong(Long.MAX_VALUE - 1));"
False,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,187,"ssertEquals(false, big.containsLong(Long.MAX_VALUE - 3));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,157,} catch (IllegalArgumentException ex) {

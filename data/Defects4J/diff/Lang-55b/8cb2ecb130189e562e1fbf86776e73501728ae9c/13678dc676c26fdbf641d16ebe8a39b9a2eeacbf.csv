is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,45," @version $Id: ExceptionUtils.java,v 1.41 2004/09/30 07:03:25 bayard Exp $"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,45,"* @version $Id: ExceptionUtils.java,v 1.42 2004/10/09 10:04:04 scolebourne Exp $"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,394, that matches the specified type in the exception chain.</p>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,394,* that matches the specified class (exactly) in the exception chain.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,395,* Subclasses of the specified class do not match - see
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,396,"* {@link #indexOfType(Throwable, Class)} for the opposite.</p>"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,401, @param type  the type to search for
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,403,"* @param clazz  the class to search for, subclasses do not match, null returns -1"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,404,"ublic static int indexOfThrowable(Throwable throwable, Class type) {"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,405,"eturn indexOfThrowable(throwable, type, 0);"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,406,"public static int indexOfThrowable(Throwable throwable, Class clazz) {"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,407,"return indexOf(throwable, clazz, 0, false);"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,411, a specified index.</p>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,413,* a specified index.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,414,* Subclasses of the specified class do not match - see
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,415,"* {@link #indexOfType(Throwable, Class, int)} for the opposite.</p>"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,420, @param type  the type to search for
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,424,"* @param clazz  the class to search for, subclasses do not match, null returns -1"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,425,"ublic static int indexOfThrowable(Throwable throwable, Class type, int fromIndex) {"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,426,f (throwable == null) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,429,"public static int indexOfThrowable(Throwable throwable, Class clazz, int fromIndex) {"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,430,"return indexOf(throwable, clazz, fromIndex, false);"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,435,* <p>Returns the (zero based) index of the first <code>Throwable</code>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,436,* that matches the specified class or subclass in the exception chain.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,437,* Subclasses of the specified class do match - see
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,438,"* {@link #indexOfThrowable(Throwable, Class)} for the opposite.</p>"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,440,* <p>A <code>null</code> throwable returns <code>-1</code>.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,441,* A <code>null</code> type returns <code>-1</code>.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,442,* No match in the chain returns <code>-1</code>.</p>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,444,"* @param throwable  the throwable to inspect, may be null"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,445,"* @param type  the type to search for, subclasses match, null returns -1"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,446,"* @return the index into the throwable chain, -1 if no match or null input"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,447,* @since 2.1
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,449,"public static int indexOfType(Throwable throwable, Class type) {"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,450,"return indexOf(throwable, type, 0, true);"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,454,* <p>Returns the (zero based) index of the first <code>Throwable</code>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,455,* that matches the specified type in the exception chain from
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,456,* a specified index.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,457,* Subclasses of the specified class do match - see
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,458,"* {@link #indexOfThrowable(Throwable, Class)} for the opposite.</p>"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,460,* <p>A <code>null</code> throwable returns <code>-1</code>.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,461,* A <code>null</code> type returns <code>-1</code>.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,462,* No match in the chain returns <code>-1</code>.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,463,* A negative start index is treated as zero.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,464,* A start index greater than the number of throwables returns <code>-1</code>.</p>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,466,"* @param throwable  the throwable to inspect, may be null"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,467,"* @param type  the type to search for, subclasses match, null returns -1"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,468,"* @param fromIndex  the (zero based) index of the starting position,"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,469,"*  negative treated as zero, larger than chain size returns -1"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,470,"* @return the index into the throwable chain, -1 if no match or null input"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,471,* @since 2.1
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,473,"public static int indexOfType(Throwable throwable, Class type, int fromIndex) {"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,474,"return indexOf(throwable, type, fromIndex, true);"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,477,"private static int indexOf(Throwable throwable, Class type, int fromIndex, boolean subclass) {"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,478,if (throwable == null || type == null) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,436,or (int i = fromIndex; i < throwables.length; i++) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,437,/ TODO: decide on whether to include this
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,438,/            if (type.isAssignableFrom(throwables[i].getClass())) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,439,f (throwables[i].getClass().equals(type)) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,440,eturn i;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,488,if (subclass) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,489,for (int i = fromIndex; i < throwables.length; i++) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,490,if (type.isAssignableFrom(throwables[i].getClass())) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,491,return i;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,494,} else {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,495,for (int i = fromIndex; i < throwables.length; i++) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,496,if (type.equals(throwables[i].getClass())) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,497,return i;
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,183,"assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,210,"assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,214,public void testIndexOfType_ThrowableClass() {
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,215,"assertEquals(-1, ExceptionUtils.indexOfType(null, null));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,216,"assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,218,"assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,219,"assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,220,"assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,221,"assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,223,"assertEquals(-1, ExceptionUtils.indexOfType(nested, null));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,224,"assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,225,"assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,226,"assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,228,"assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,229,"assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,230,"assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,231,"assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,233,"assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,236,public void testIndexOfType_ThrowableClassInt() {
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,237,"assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,238,"assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,240,"assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,241,"assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,242,"assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,243,"assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,245,"assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,246,"assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,247,"assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,248,"assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,250,"assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,251,"assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,252,"assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,253,"assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,255,"assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,256,"assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,257,"assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,258,"assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9));"
True,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java,260,"assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0));"

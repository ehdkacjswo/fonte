is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,4, Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,5, reserved.
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,9, are met:
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,17,    distribution.
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,20,"    any, must include the following acknowlegement:"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,23,"    Alternately, this acknowlegement may appear in the software itself,"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,24,    if and wherever such third-party acknowlegements normally appear.
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,32,"    nor may ""Apache"" appear in their names without prior written"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,54,ackage org.apache.commons.lang.time;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,56,mport java.text.*;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,57,mport java.util.*;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,60, A suite of utilities surrounding the use of the Calendar and Date object.
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,62," @author <a href=""mailto:sergek@lokitech.com"">Serge Knystautas</a>"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,63, @since 2.1
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,64," @version $Id: CalendarUtils.java,v 1.3 2003/04/09 01:04:48 ggregory Exp $"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,66,ublic class CalendarUtils {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,69," This is half a month, so this represents whether a date is in the top"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,70, or bottom half of the month.
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,72,ublic final static int SEMI_MONTH = 1001;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,74,rivate static final int[][] fields = {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,75,"Calendar.MILLISECOND},"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,76,"Calendar.SECOND},"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,77,"Calendar.MINUTE},"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,78,"Calendar.HOUR_OF_DAY, Calendar.HOUR},"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,79,"Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM /* Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, Calendar.DAY_OF_WEEK_IN_MONTH */},"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,80,"Calendar.MONTH, CalendarUtils.SEMI_MONTH},"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,81,"Calendar.YEAR},"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,82,Calendar.ERA}};
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,84,rivate static DateFormat[] dateFormats = {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,85,/3/31/92 10:00:07 PST
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,86,"ew SimpleDateFormat(""M/dd/yy h:mm:ss z""),"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,87,"/January 23, 1987 10:05pm"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,88,"ew SimpleDateFormat(""MMM d, yyyy h:mm a""),"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,89,/22:00 GMT
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,90,"ew SimpleDateFormat(""h:mm z"")};"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,93," A week range, starting on Sunday."
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,95,ublic final static int RANGE_WEEK_SUNDAY = 1;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,98," A week range, starting on Monday."
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,100,ublic final static int RANGE_WEEK_MONDAY = 2;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,103," A week range, starting on the day focused."
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,105,ublic final static int RANGE_WEEK_RELATIVE = 3;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,108," A week range, centered around the day focused."
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,110,ublic final static int RANGE_WEEK_CENTER = 4;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,113," A month range, the week starting on Sunday."
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,115,ublic final static int RANGE_MONTH_SUNDAY = 5;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,118," A month range, the week starting on Monday."
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,120,ublic final static int RANGE_MONTH_MONDAY = 6;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,123, See the other round method.  Works with a Date object.
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,125,"ublic static Date round(Date val, int field) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,126,regorianCalendar gval = new GregorianCalendar();
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,127,val.setTime(val);
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,128,"odify(gval, field, true);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,129,eturn gval.getTime();
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,133," Round this date, leaving the field specified as the most significant"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,134," field.  For example, if you had the datetime of 28 Mar 2002"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,135," 13:45:01.231, if this was passed with HOUR, it would return 28 Mar"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,136," 2002 14:00:00.000.  If this was passed with MONTH, it would return"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,137, 1 April 2002 0:00:00.000.
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,139,"ublic static Calendar round(Calendar val, int field) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,140,alendar rounded = (Calendar) val.clone();
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,141,"odify(rounded, field, true);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,142,eturn rounded;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,146," See the other round method.  Works with an Object, trying to"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,147, use it as either a Date or Calendar.
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,149,"ublic static Date round(Object val, int field) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,150,f (val instanceof Date) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,151,"eturn round((Date) val, field);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,152, else if (val instanceof Calendar) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,153,"eturn round((Calendar) val, field).getTime();"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,154, else {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,155,"hrow new ClassCastException(""Could not round "" + val);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,160, See the other trunc method.  Works with a Date.
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,162,"ublic static Date trunc(Date val, int field) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,163,regorianCalendar gval = new GregorianCalendar();
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,164,val.setTime(val);
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,165,"odify(gval, field, false);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,166,eturn gval.getTime();
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,170," Truncate this date, leaving the field specified as the most significant"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,171," field.  For example, if you had the datetime of 28 Mar 2002"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,172," 13:45:01.231, if you passed with HOUR, it would return 28 Mar"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,173," 2002 13:00:00.000.  If this was passed with MONTH, it would return"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,174, 1 Mar 2002 0:00:00.000.
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,176,"ublic static Calendar trunc(Calendar val, int field) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,177,alendar truncated = (Calendar) val.clone();
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,178,"odify(truncated, field, false);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,179,eturn truncated;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,183," See the other trunc method.  Works with an Object, trying to"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,184, use it as either a Date or Calendar.
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,186,"ublic static Date trunc(Object val, int field) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,187,f (val instanceof Date) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,188,"eturn trunc((Date) val, field);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,189, else if (val instanceof Calendar) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,190,"eturn trunc((Calendar) val, field).getTime();"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,191, else {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,192,"hrow new ClassCastException(""Could not trunc "" + val);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,196,"rivate static void modify(Calendar val, int field, boolean round) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,197,oolean roundUp = false;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,198,or (int i = 0; i < fields.length; i++) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,199,or (int j = 0; j < fields[i].length; j++) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,200,f (fields[i][j] == field) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,201,/This is our field... we stop looping
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,202,f (round && roundUp) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,203,f (field == CalendarUtils.SEMI_MONTH) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,204,/This is a special case that's hard to generalize
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,205,"/If the date is 1, we round up to 16, otherwise"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,206,/  we subtract 15 days and add 1 month
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,207,f (val.get(Calendar.DATE) == 1) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,208,"al.add(Calendar.DATE, 15);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,209, else {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,210,"al.add(Calendar.DATE, -15);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,211,"al.add(Calendar.MONTH, 1);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,213, else {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,214,/We need at add one to this field since the
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,215,/  last number causes us to round up
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,216,"al.add(fields[i][0], 1);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,219,eturn;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,222,/We have various fields that are not easy roundings
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,223,nt offset = 0;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,224,oolean offsetSet = false;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,225,/These are special types of fields that require different rounding rules
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,226,witch (field) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,227,ase CalendarUtils.SEMI_MONTH:
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,228,f (fields[i][0] == Calendar.DATE) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,229,"/If we're going to drop the DATE field's value,"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,230,/  we want to do this our own way.
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,231,/We need to subtrace 1 since the date has a minimum of 1
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,232,ffset = val.get(Calendar.DATE) - 1;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,233,"/If we're above 15 days adjustment, that means we're in the"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,234,/  bottom half of the month and should stay accordingly.
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,235,f (offset >= 15) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,236,ffset -= 15;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,238,/Record whether we're in the top or bottom half of that range
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,239,oundUp = offset > 7;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,240,ffsetSet = true;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,242,reak;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,243,ase Calendar.AM_PM:
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,244,f (fields[i][0] == Calendar.HOUR) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,245,"/If we're going to drop the HOUR field's value,"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,246,/  we want to do this our own way.
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,247,ffset = val.get(Calendar.HOUR);
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,248,f (offset >= 12) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,249,ffset -= 12;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,251,oundUp = offset > 6;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,252,ffsetSet = true;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,254,reak;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,256,f (!offsetSet) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,257,nt min = val.getActualMinimum(fields[i][0]);
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,258,nt max = val.getActualMaximum(fields[i][0]);
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,259,/Calculate the offset from the minimum allowed value
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,260,ffset = val.get(fields[i][0]) - min;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,261,/Set roundUp if this is more than half way between the minimum and maximum
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,262,oundUp = offset > ((max - min) / 2);
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,264,/We need to remove this field
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,265,"al.add(fields[i][0], -offset);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,267,"hrow new RuntimeException(""We do not support that field."");"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,272, Parses strings the way that CVS supports it (very human readable).
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,274,ublic static Calendar parse(String original) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,275,"eturn parse(original, Locale.getDefault());"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,279, Parses strings the way that CVS supports it (very human readable).
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,281,"ublic static Calendar parse(String original, Locale locale) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,282,/Get the symbol names
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,283,ateFormatSymbols symbols = new DateFormatSymbols(locale);
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,285,/Prep the string to parse
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,286,tring value = original.toLowerCase().trim();
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,288,/Get the current date/time
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,289,alendar now = Calendar.getInstance();
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,290,"f (value.endsWith("" ago"")) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,291,"/If this was a date that was ""ago"" the current time..."
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,292,/Strip out the ' ago' part
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,293,"alue = value.substring(0, value.length() - 4);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,295,/Split the value and unit
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,296,"nt start = value.indexOf("" "");"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,297,f (start < 0) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,298,"hrow new RuntimeException(""Could not find space in between value and unit"");"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,300,tring unit = value.substring(start + 1);
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,301,"alue = value.substring(0, start);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,302,"/We support ""a week"", so we need to parse the value as ""a"""
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,303,nt val = 0;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,304,"f (value.equals(""a"") || value.equals(""an"")) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,305,al = 1;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,306, else {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,307,al = Integer.parseInt(value);
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,310,/Determine the unit
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,311,"f (unit.equals(""milliseconds"") || unit.equals(""millisecond"")) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,312,"ow.add(Calendar.MILLISECOND, -val);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,313," else if (unit.equals(""seconds"") || unit.equals(""second"")) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,314,"ow.add(Calendar.SECOND, -val);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,315," else if (unit.equals(""minutes"") || unit.equals(""minute"")) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,316,"ow.add(Calendar.MINUTE, -val);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,317," else if (unit.equals(""hours"") || unit.equals(""hour"")) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,318,"ow.add(Calendar.HOUR, -val);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,319," else if (unit.equals(""days"") || unit.equals(""day"")) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,320,"ow.add(Calendar.DATE, -val);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,321," else if (unit.equals(""weeks"") || unit.equals(""week"")) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,322,"ow.add(Calendar.DATE, -val * 7);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,323," else if (unit.equals(""fortnights"") || unit.equals(""fortnight"")) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,324,"ow.add(Calendar.DATE, -val * 14);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,325," else if (unit.equals(""months"") || unit.equals(""month"")) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,326,"ow.add(Calendar.MONTH, -val);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,327," else if (unit.equals(""years"") || unit.equals(""year"")) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,328,"ow.add(Calendar.YEAR, -val);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,329, else {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,330,"hrow new RuntimeException(""We do not understand that many units ago"");"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,332,eturn now;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,333," else if (value.startsWith(""last "")) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,334,/If this was the last time a certain field was met
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,335,/Strip out the 'last ' part
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,336,alue = value.substring(5);
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,337,/Get the current date/time
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,338,tring[] strings = symbols.getWeekdays();
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,339,or (int i = 0; i < strings.length; i++) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,340,f (value.equalsIgnoreCase(strings[i])) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,341,/How many days after Sunday
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,342,nt daysAgo = now.get(Calendar.DAY_OF_WEEK) - i;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,343,f (daysAgo <= 0) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,344,aysAgo += 7;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,346,"ow.add(Calendar.DATE, -daysAgo);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,347,eturn now;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,350,trings = symbols.getMonths();
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,351,or (int i = 0; i < strings.length; i++) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,352,f (value.equalsIgnoreCase(strings[i])) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,353,/How many days after January
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,354,nt monthsAgo = now.get(Calendar.MONTH) - i;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,355,f (monthsAgo <= 0) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,356,onthsAgo += 12;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,358,"ow.add(Calendar.MONTH, -monthsAgo);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,359,eturn now;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,362,"f (value.equals(""week"")) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,363,"ow.add(Calendar.DATE, -7);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,364,eturn now;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,366," else if (value.equals(""yesterday"")) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,367,"ow.add(Calendar.DATE, -1);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,368,eturn now;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,369," else if (value.equals(""tomorrow"")) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,370,"ow.add(Calendar.DATE, 1);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,371,eturn now;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,373,/Try to parse the date a number of different ways
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,374,or (int i = 0; i < dateFormats.length; i++) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,375,ry {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,376,ate datetime = dateFormats[i].parse(original);
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,377,alendar cal = Calendar.getInstance();
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,378,al.setTime(datetime);
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,379,eturn cal;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,380, catch (ParseException pe) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,381,/we ignore this and just keep trying
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,385,"hrow new RuntimeException(""Unable to parse '"" + original + ""'."");"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,389, This constructs an Iterator that will start and stop over a date
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,390," range based on the focused date and the range style.  For instance,"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,391," passing Thursday, July 4, 2002 and a RANGE_MONTH_SUNDAY will return"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,392," an Iterator that starts with Sunday, June 30, 2002 and ends with"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,393," Saturday, August 3, 2002."
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,395,"ublic static Iterator getCalendarIterator(Calendar focus, int rangeStyle) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,396,alendar start = null;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,397,alendar end = null;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,398,nt startCutoff = Calendar.SUNDAY;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,399,nt endCutoff = Calendar.SATURDAY;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,400,witch (rangeStyle) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,401,ase RANGE_MONTH_SUNDAY:
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,402,ase RANGE_MONTH_MONDAY:
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,403,/Set start to the first of the month
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,404,"tart = trunc(focus, Calendar.MONTH);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,405,/Set end to the last of the month
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,406,nd = (Calendar) start.clone();
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,407,"nd.add(Calendar.MONTH, 1);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,408,"nd.add(Calendar.DATE, -1);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,409,/Loop start back to the previous sunday or monday
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,410,f (rangeStyle == RANGE_MONTH_MONDAY) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,411,tartCutoff = Calendar.MONDAY;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,412,ndCutoff = Calendar.SUNDAY;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,414,reak;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,415,ase RANGE_WEEK_SUNDAY:
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,416,ase RANGE_WEEK_MONDAY:
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,417,ase RANGE_WEEK_RELATIVE:
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,418,ase RANGE_WEEK_CENTER:
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,419,/Set start and end to the current date
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,420,"tart = trunc(focus, Calendar.DATE);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,421,"nd = trunc(focus, Calendar.DATE);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,422,witch (rangeStyle) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,423,ase RANGE_WEEK_SUNDAY:
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,424,/already set by default
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,425,reak;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,426,ase RANGE_WEEK_MONDAY:
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,427,tartCutoff = Calendar.MONDAY;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,428,ndCutoff = Calendar.SUNDAY;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,429,reak;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,430,ase RANGE_WEEK_RELATIVE:
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,431,tartCutoff = focus.get(Calendar.DAY_OF_WEEK);
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,432,ndCutoff = startCutoff - 1;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,433,reak;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,434,ase RANGE_WEEK_CENTER:
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,435,tartCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,436,ndCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,437,reak;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,439,reak;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,440,efault:
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,441,"hrow new RuntimeException(""The range style "" + rangeStyle + "" is not valid."");"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,443,f (startCutoff < Calendar.SUNDAY) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,444,tartCutoff += 7;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,446,f (endCutoff > Calendar.SATURDAY) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,447,ndCutoff -= 7;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,449,hile (start.get(Calendar.DAY_OF_WEEK) != startCutoff) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,450,"tart.add(Calendar.DATE, -1);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,452,hile (end.get(Calendar.DAY_OF_WEEK) != endCutoff) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,453,"nd.add(Calendar.DATE, 1);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,455,inal Calendar startFinal = start;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,456,inal Calendar endFinal = end;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,457,terator it = new Iterator() {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,458,alendar spot = null;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,460,pot = startFinal;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,461,"pot.add(Calendar.DATE, -1);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,464,ublic boolean hasNext() {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,465,eturn spot.before(endFinal);
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,468,ublic Object next() {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,469,f (spot.equals(endFinal)) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,470,hrow new NoSuchElementException();
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,472,"pot.add(Calendar.DATE, 1);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,473,eturn spot.clone();
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,476,ublic void remove() {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,477,hrow new UnsupportedOperationException();
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,480,eturn it;
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,484, See the other getCalendarIterator.  Works with a Date.
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,486,"ublic static Iterator getCalendarIterator(Date focus, int rangeStyle) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,487,regorianCalendar gval = new GregorianCalendar();
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,488,val.setTime(focus);
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,489,"eturn getCalendarIterator(gval, rangeStyle);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,493," See the other getCalendarIterator.  Works with an Object, trying"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,494, to use it as a Date or Calendar.
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,496,"ublic static Iterator getCalendarIterator(Object focus, int rangeStyle) {"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,497,f (focus instanceof Date) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,498,"eturn getCalendarIterator((Date) focus, rangeStyle);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,499, else if (focus instanceof Calendar) {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,500,"eturn getCalendarIterator((Calendar) focus, rangeStyle);"
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,501, else {
False,src/java/org/apache/commons/lang/time/CalendarUtils.java,src/java/org/apache/commons/lang/time/CalendarUtils.java,502,"hrow new ClassCastException(""Could not iterate based on "" + focus);"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,4,* Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,5,* reserved.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,9,* are met:
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,17,*    distribution.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,54,package org.apache.commons.lang.time;
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,56,import java.util.Date;
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,57,import java.util.Locale;
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,58,import java.util.TimeZone;
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,61,* Date and time formatting utilites and constants.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,62,* <p>
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,63,* Formatting is performed using the
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,64,* {@link org.apache.commons.lang.time.FastDateFormat} class.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,66,* @author Apache Ant - DateUtils
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,67,"* @author <a href=""mailto:sbailliez@apache.org"">Stephane Bailliez</a>"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,68,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,69,* @author Stephen Colebourne
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,70,* @since 2.0
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,71,"* @version $Id: DateFormatUtils.java,v 1.1 2003/06/08 23:14:23 scolebourne Exp $"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,73,public final class DateFormatUtils {
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,76,* ISO8601 formatter for date-time witout timezone.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,77,* The format used is <tt>yyyy-MM-dd'T'HH:mm:ss</tt>.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,79,public static final FastDateFormat ISO_DATETIME_FORMAT
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,80,"= FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss"");"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,83,* ISO8601 formatter for date-time with timezone.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,84,* The format used is <tt>yyyy-MM-dd'T'HH:mm:ssZZ</tt>.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,86,public static final FastDateFormat ISO_DATETIME_TIMEZONE_FORMAT
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,87,"= FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ssZZ"");"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,90,* ISO8601 formatter for date without timezone.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,91,* The format used is <tt>yyyy-MM-dd</tt>.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,93,public static final FastDateFormat ISO_DATE_FORMAT
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,94,"= FastDateFormat.getInstance(""yyyy-MM-dd"");"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,97,* ISO8601-like formatter for date with timezone.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,98,* The format used is <tt>yyyy-MM-ddZZ</tt>.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,99,* This pattern does not comply with the formal ISO8601 specification
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,100,* as the standard does not allow a timezone without a time.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,102,public static final FastDateFormat ISO_DATE_TIMEZONE_FORMAT
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,103,"= FastDateFormat.getInstance(""yyyy-MM-ddZZ"");"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,106,* ISO8601 formatter for time without timezone.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,107,* The format used is <tt>'T'HH:mm:ss</tt>.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,109,public static final FastDateFormat ISO_TIME_FORMAT
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,110,"= FastDateFormat.getInstance(""'T'HH:mm:ss"");"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,113,* ISO8601 formatter for time with timezone.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,114,* The format used is <tt>'T'HH:mm:ssZZ</tt>.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,116,public static final FastDateFormat ISO_TIME_TIMEZONE_FORMAT
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,117,"= FastDateFormat.getInstance(""'T'HH:mm:ssZZ"");"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,120,* ISO8601-like formatter for time without timezone.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,121,* The format used is <tt>HH:mm:ss</tt>.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,122,* This pattern does not comply with the formal ISO8601 specification
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,123,* as the standard requires the 'T' prefix for times.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,125,public static final FastDateFormat ISO_TIME_NO_T_FORMAT
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,126,"= FastDateFormat.getInstance(""HH:mm:ss"");"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,129,* ISO8601-like formatter for time with timezone.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,130,* The format used is <tt>HH:mm:ssZZ</tt>.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,131,* This pattern does not comply with the formal ISO8601 specification
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,132,* as the standard requires the 'T' prefix for times.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,134,public static final FastDateFormat ISO_TIME_NO_T_TIMEZONE_FORMAT
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,135,"= FastDateFormat.getInstance(""HH:mm:ssZZ"");"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,138,* SMTP (and probably other) date headers.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,139,"* The format used is <tt>EEE, dd MMM yyyy HH:mm:ss Z</tt> in US locale."
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,141,public static final FastDateFormat SMTP_DATETIME_FORMAT
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,142,"= FastDateFormat.getInstance(""EEE, dd MMM yyyy HH:mm:ss Z"", Locale.US);"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,146,* DateFormatUtils instances should NOT be constructed in standard programming.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,147,* <p>
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,148,* This constructor is public to permit tools that require a JavaBean instance
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,149,* to operate.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,151,public DateFormatUtils() {
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,155,* Format a date/time into a specific pattern using the UTC timezone.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,157,* @param millis  the date to format expressed in milliseconds
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,158,* @param pattern  the pattern to use to format the date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,159,* @return the formatted date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,161,"public static String formatUTC(long millis, String pattern) {"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,162,"return format(new Date(millis), pattern, DateUtils.UTC_TIMEZONE, null);"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,166,* Format a date/time into a specific pattern using the UTC timezone.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,168,* @param date  the date to format
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,169,* @param pattern  the pattern to use to format the date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,170,* @return the formatted date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,172,"public static String formatUTC(Date date, String pattern) {"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,173,"return format(date, pattern, DateUtils.UTC_TIMEZONE, null);"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,177,* Format a date/time into a specific pattern using the UTC timezone.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,179,* @param millis  the date to format expressed in milliseconds
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,180,* @param pattern  the pattern to use to format the date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,181,"* @param locale  the locale to use, may be null"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,182,* @return the formatted date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,184,"public static String formatUTC(long millis, String pattern, Locale locale) {"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,185,"return format(new Date(millis), pattern, DateUtils.UTC_TIMEZONE, locale);"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,189,* Format a date/time into a specific pattern using the UTC timezone.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,191,* @param date  the date to format
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,192,* @param pattern  the pattern to use to format the date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,193,"* @param locale  the locale to use, may be null"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,194,* @return the formatted date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,196,"public static String formatUTC(Date date, String pattern, Locale locale) {"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,197,"return format(date, pattern, DateUtils.UTC_TIMEZONE, locale);"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,201,* Format a date/time into a specific pattern.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,203,* @param millis  the date to format expressed in milliseconds
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,204,* @param pattern  the pattern to use to format the date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,205,* @return the formatted date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,207,"public static String format(long millis, String pattern) {"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,208,"return format(new Date(millis), pattern, null, null);"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,212,* Format a date/time into a specific pattern.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,214,* @param date  the date to format
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,215,* @param pattern  the pattern to use to format the date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,216,* @return the formatted date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,218,"public static String format(Date date, String pattern) {"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,219,"return format(date, pattern, null, null);"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,223,* Format a date/time into a specific pattern in a timezone.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,225,* @param millis  the time expressed in milliseconds
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,226,* @param pattern  the pattern to use to format the date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,227,"* @param timeZone  the timezone to use, may be null"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,228,* @return the formatted date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,230,"public static String format(long millis, String pattern, TimeZone timeZone) {"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,231,"return format(new Date(millis), pattern, timeZone, null);"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,235,* Format a date/time into a specific pattern in a timezone.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,237,* @param date  the date to format
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,238,* @param pattern  the pattern to use to format the date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,239,"* @param timeZone  the timezone to use, may be null"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,240,* @return the formatted date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,242,"public static String format(Date date, String pattern, TimeZone timeZone) {"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,243,"return format(date, pattern, timeZone, null);"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,247,* Format a date/time into a specific pattern in a locale.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,249,* @param millis  the date to format expressed in milliseconds
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,250,* @param pattern  the pattern to use to format the date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,251,"* @param locale  the locale to use, may be null"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,252,* @return the formatted date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,254,"public static String format(long millis, String pattern, Locale locale) {"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,255,"return format(new Date(millis), pattern, null, locale);"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,259,* Format a date/time into a specific pattern in a locale.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,261,* @param date  the date to format
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,262,* @param pattern  the pattern to use to format the date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,263,"* @param locale  the locale to use, may be null"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,264,* @return the formatted date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,266,"public static String format(Date date, String pattern, Locale locale) {"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,267,"return format(date, pattern, null, locale);"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,271,* Format a date/time into a specific pattern in a timezone and locale.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,273,* @param millis  the date to format expressed in milliseconds
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,274,* @param pattern  the pattern to use to format the date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,275,"* @param timeZone  the timezone to use, may be null"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,276,"* @param locale  the locale to use, may be null"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,277,* @return the formatted date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,279,"public static String format(long millis, String pattern, TimeZone timeZone, Locale locale) {"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,280,"return format(new Date(millis), pattern, timeZone, locale);"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,284,* Format a date/time into a specific pattern in a timezone and locale.
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,286,* @param date  the date to format
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,287,* @param pattern  the pattern to use to format the date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,288,"* @param timeZone  the timezone to use, may be null"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,289,"* @param locale  the locale to use, may be null"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,290,* @return the formatted date
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,292,"public static String format(Date date, String pattern, TimeZone timeZone, Locale locale) {"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,293,"FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);"
True,src/java/org/apache/commons/lang/time/DateFormatUtils.java,src/java/org/apache/commons/lang/time/DateFormatUtils.java,294,return df.format(date);
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,56,mport java.text.ChoiceFormat;
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,58,mport java.text.MessageFormat;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,57,import java.text.DateFormatSymbols;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,58,import java.text.ParseException;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,62,import java.util.GregorianCalendar;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,63,import java.util.Iterator;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,65,import java.util.NoSuchElementException;
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,66, Helper methods to deal with date/time formatting. [Relies heavily on
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,67, code taken from the DateUtils class of the jakarata-ant project.]
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,69,* A suite of utilities surrounding the use of the Calendar and Date object.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,69," @author <a href=""mailto:sbailliez@apache.org"">Stephane Bailliez</a>"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,70," @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,71, @since 2.1
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,72," @version $Id: DateUtils.java,v 1.2 2003/02/04 22:19:33 scolebourne Exp $"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,71,"* @author <a href=""mailto:sergek@lokitech.com"">Serge Knystautas</a>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,72,* @author Stephen Colebourne
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,73,* @since 2.0
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,74,"* @version $Id: DateUtils.java,v 1.3 2003/06/08 23:14:23 scolebourne Exp $"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,74,ublic final class DateUtils {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,76,public class DateUtils {
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,77, ISO8601-like pattern for date-time. It does not support timezone.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,78,  <tt>yyyy-MM-ddTHH:mm:ss</tt>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,79,* The UTC timezone (often referred to as GMT).
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,80,ublic static final String ISO8601_DATETIME_PATTERN
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,81," ""yyyy-MM-dd'T'HH:mm:ss"";"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,81,"public static final TimeZone UTC_TIMEZONE = TimeZone.getTimeZone(""GMT"");"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,84, ISO8601-like pattern for date. <tt>yyyy-MM-dd</tt>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,83,* Number of milliseconds in a standard second.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,86,ublic static final String ISO8601_DATE_PATTERN
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,87," ""yyyy-MM-dd"";"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,85,public static final int MILLIS_IN_SECOND = 1000;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,87,* Number of milliseconds in a standard minute.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,89,public static final int MILLIS_IN_MINUTE = 60 * 1000;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,91,* Number of milliseconds in a standard hour.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,93,public static final int MILLIS_IN_HOUR = 60 * 60 * 1000;
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,90, ISO8601-like pattern for time.  <tt>HH:mm:ss</tt>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,95,* Number of milliseconds in a standard day.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,92,ublic static final String ISO8601_TIME_PATTERN
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,93," ""HH:mm:ss"";"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,97,public static final int MILLIS_IN_DAY = 24 * 60 * 60 * 1000;
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,96, Format used for SMTP (and probably other) Date headers.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,100,"* This is half a month, so this represents whether a date is in the top"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,101,* or bottom half of the month.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,98,ublic static final DateFormat DATE_HEADER_FORMAT
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,99," new SimpleDateFormat(""EEE, dd MMM yyyy HH:mm:ss "", Locale.US);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,103,public final static int SEMI_MONTH = 1001;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,105,private static final int[][] fields = {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,106,"{Calendar.MILLISECOND},"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,107,"{Calendar.SECOND},"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,108,"{Calendar.MINUTE},"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,109,"{Calendar.HOUR_OF_DAY, Calendar.HOUR},"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,110,"{Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM /* Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, Calendar.DAY_OF_WEEK_IN_MONTH */},"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,111,"{Calendar.MONTH, DateUtils.SEMI_MONTH},"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,112,"{Calendar.YEAR},"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,113,{Calendar.ERA}};
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,102,/ code from Magesh moved from DefaultLogger and slightly modified
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,103,rivate static final MessageFormat MINUTE_SECONDS
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,104," new MessageFormat(""{0}{1}"");"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,115,private static DateFormat[] dateFormats = {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,116,//3/31/92 10:00:07 PST
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,117,"new SimpleDateFormat(""M/dd/yy h:mm:ss z""),"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,118,"//January 23, 1987 10:05pm"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,119,"new SimpleDateFormat(""MMM d, yyyy h:mm a""),"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,120,//22:00 GMT
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,121,"new SimpleDateFormat(""h:mm z"")};"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,106,"rivate static final double[] LIMITS = {0, 1, 2};"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,124,"* A week range, starting on Sunday."
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,126,public final static int RANGE_WEEK_SUNDAY = 1;
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,108,rivate static final String[] MINUTES_PART =
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,109,""""", ""1 minute "", ""{0,number} minutes ""};"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,129,"* A week range, starting on Monday."
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,131,public final static int RANGE_WEEK_MONDAY = 2;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,134,"* A week range, starting on the day focused."
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,136,public final static int RANGE_WEEK_RELATIVE = 3;
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,111,rivate static final String[] SECONDS_PART =
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,112,"""0 seconds"", ""1 second"", ""{1,number} seconds""};"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,139,"* A week range, centered around the day focused."
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,141,public final static int RANGE_WEEK_CENTER = 4;
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,114,rivate static final ChoiceFormat MINUTES_FORMAT =
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,115,"ew ChoiceFormat(LIMITS, MINUTES_PART);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,144,"* A month range, the week starting on Sunday."
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,146,public final static int RANGE_MONTH_SUNDAY = 5;
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,117,rivate static final ChoiceFormat SECONDS_FORMAT =
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,118,"ew ChoiceFormat(LIMITS, SECONDS_PART);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,149,"* A month range, the week starting on Monday."
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,151,public final static int RANGE_MONTH_MONDAY = 6;
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,120,tatic {
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,121,"INUTE_SECONDS.setFormat(0, MINUTES_FORMAT);"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,122,"INUTE_SECONDS.setFormat(1, SECONDS_FORMAT);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,154,* See the other round method.  Works with a Date object.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,156,"public static Date round(Date val, int field) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,157,GregorianCalendar gval = new GregorianCalendar();
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,158,gval.setTime(val);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,159,"modify(gval, field, true);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,160,return gval.getTime();
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,126, <p>DateUtils instances should NOT be constructed in standard programming.</p>
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,128, <p>This constructor is public to permit tools that require a JavaBean instance
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,129, to operate.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,164,"* Round this date, leaving the field specified as the most significant"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,165,"* field.  For example, if you had the datetime of 28 Mar 2002"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,166,"* 13:45:01.231, if this was passed with HOUR, it would return 28 Mar"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,167,"* 2002 14:00:00.000.  If this was passed with MONTH, it would return"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,168,* 1 April 2002 0:00:00.000.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,131,ublic DateUtils() {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,170,"public static Calendar round(Calendar val, int field) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,171,Calendar rounded = (Calendar) val.clone();
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,172,"modify(rounded, field, true);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,173,return rounded;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,177,"* See the other round method.  Works with an Object, trying to"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,178,* use it as either a Date or Calendar.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,180,"public static Date round(Object val, int field) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,181,if (val instanceof Date) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,182,"return round((Date) val, field);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,183,} else if (val instanceof Calendar) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,184,"return round((Calendar) val, field).getTime();"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,185,} else {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,186,"throw new ClassCastException(""Could not round "" + val);"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,136, Format a date/time into a specific pattern.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,137, @param date the date to format expressed in milliseconds.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,138, @param pattern the pattern to use to format the date.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,139, @return the formatted date.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,191,* See the other trunc method.  Works with a Date.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,141,"ublic static String format(long date, String pattern) {"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,142,"eturn format(new Date(date), pattern);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,193,"public static Date trunc(Date val, int field) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,194,GregorianCalendar gval = new GregorianCalendar();
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,195,gval.setTime(val);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,196,"modify(gval, field, false);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,197,return gval.getTime();
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,201,"* Truncate this date, leaving the field specified as the most significant"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,202,"* field.  For example, if you had the datetime of 28 Mar 2002"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,203,"* 13:45:01.231, if you passed with HOUR, it would return 28 Mar"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,204,"* 2002 13:00:00.000.  If this was passed with MONTH, it would return"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,205,* 1 Mar 2002 0:00:00.000.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,207,"public static Calendar trunc(Calendar val, int field) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,208,Calendar truncated = (Calendar) val.clone();
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,209,"modify(truncated, field, false);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,210,return truncated;
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,147, Format a date/time into a specific pattern.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,148, @param date the date to format expressed in milliseconds.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,149, @param pattern the pattern to use to format the date.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,150, @return the formatted date.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,214,"* See the other trunc method.  Works with an Object, trying to"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,215,* use it as either a Date or Calendar.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,152,"ublic static String format(Date date, String pattern) {"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,153,ateFormat df = createDateFormat(pattern);
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,154,eturn df.format(date);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,217,"public static Date trunc(Object val, int field) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,218,if (val instanceof Date) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,219,"return trunc((Date) val, field);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,220,} else if (val instanceof Calendar) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,221,"return trunc((Calendar) val, field).getTime();"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,222,} else {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,223,"throw new ClassCastException(""Could not trunc "" + val);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,227,"private static void modify(Calendar val, int field, boolean round) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,228,boolean roundUp = false;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,229,for (int i = 0; i < fields.length; i++) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,230,for (int j = 0; j < fields[i].length; j++) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,231,if (fields[i][j] == field) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,232,//This is our field... we stop looping
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,233,if (round && roundUp) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,234,if (field == DateUtils.SEMI_MONTH) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,235,//This is a special case that's hard to generalize
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,236,"//If the date is 1, we round up to 16, otherwise"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,237,//  we subtract 15 days and add 1 month
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,238,if (val.get(Calendar.DATE) == 1) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,239,"val.add(Calendar.DATE, 15);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,240,} else {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,241,"val.add(Calendar.DATE, -15);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,242,"val.add(Calendar.MONTH, 1);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,244,} else {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,245,//We need at add one to this field since the
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,246,//  last number causes us to round up
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,247,"val.add(fields[i][0], 1);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,250,return;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,253,//We have various fields that are not easy roundings
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,254,int offset = 0;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,255,boolean offsetSet = false;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,256,//These are special types of fields that require different rounding rules
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,257,switch (field) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,258,case DateUtils.SEMI_MONTH:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,259,if (fields[i][0] == Calendar.DATE) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,260,"//If we're going to drop the DATE field's value,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,261,//  we want to do this our own way.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,262,//We need to subtrace 1 since the date has a minimum of 1
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,263,offset = val.get(Calendar.DATE) - 1;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,264,"//If we're above 15 days adjustment, that means we're in the"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,265,//  bottom half of the month and should stay accordingly.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,266,if (offset >= 15) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,267,offset -= 15;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,269,//Record whether we're in the top or bottom half of that range
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,270,roundUp = offset > 7;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,271,offsetSet = true;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,273,break;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,274,case Calendar.AM_PM:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,275,if (fields[i][0] == Calendar.HOUR) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,276,"//If we're going to drop the HOUR field's value,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,277,//  we want to do this our own way.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,278,offset = val.get(Calendar.HOUR);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,279,if (offset >= 12) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,280,offset -= 12;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,282,roundUp = offset > 6;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,283,offsetSet = true;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,285,break;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,287,if (!offsetSet) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,288,int min = val.getActualMinimum(fields[i][0]);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,289,int max = val.getActualMaximum(fields[i][0]);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,290,//Calculate the offset from the minimum allowed value
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,291,offset = val.get(fields[i][0]) - min;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,292,//Set roundUp if this is more than half way between the minimum and maximum
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,293,roundUp = offset > ((max - min) / 2);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,295,//We need to remove this field
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,296,"val.add(fields[i][0], -offset);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,298,"throw new RuntimeException(""We do not support that field."");"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,159, Format an elapsed time into a plurialization correct string.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,160, It is limited only to report elapsed time in minutes and
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,161, seconds and has the following behavior.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,162, <ul>
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,163," <li>minutes are not displayed when 0. (ie: ""45 seconds"")</li>"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,164," <li>seconds are always displayed in plural form (ie ""0 seconds"" or"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,165," ""10 seconds"") except for 1 (ie ""1 second"")</li>"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,166, </ul>
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,167, @param time the elapsed time to report in milliseconds.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,168, @return the formatted text in minutes/seconds.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,303,* Parses strings the way that CVS supports it (very human readable).
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,170,ublic static String formatElapsedTime(long millis) {
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,171,ong seconds = millis / 1000;
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,172,ong minutes = seconds / 60;
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,173,"bject[] args = {new Long(minutes), new Long(seconds % 60)};"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,174,eturn MINUTE_SECONDS.format(args);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,305,public static Calendar parse(String original) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,306,"return parse(original, Locale.getDefault());"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,178, return a lenient date format set to GMT time zone.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,179, @param pattern the pattern used for date/time formatting.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,180, @return the configured format for this pattern.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,310,* Parses strings the way that CVS supports it (very human readable).
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,182,rivate static DateFormat createDateFormat(String pattern) {
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,183,impleDateFormat sdf = new SimpleDateFormat(pattern);
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,184,"imeZone gmt = TimeZone.getTimeZone(""GMT"");"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,185,df.setTimeZone(gmt);
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,186,df.setLenient(true);
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,187,eturn sdf;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,312,"public static Calendar parse(String original, Locale locale) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,313,//Get the symbol names
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,314,DateFormatSymbols symbols = new DateFormatSymbols(locale);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,316,//Prep the string to parse
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,317,String value = original.toLowerCase().trim();
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,319,//Get the current date/time
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,320,Calendar now = Calendar.getInstance();
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,321,"if (value.endsWith("" ago"")) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,322,"//If this was a date that was ""ago"" the current time..."
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,323,//Strip out the ' ago' part
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,324,"value = value.substring(0, value.length() - 4);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,326,//Split the value and unit
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,327,"int start = value.indexOf("" "");"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,328,if (start < 0) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,329,"throw new RuntimeException(""Could not find space in between value and unit"");"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,331,String unit = value.substring(start + 1);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,332,"value = value.substring(0, start);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,333,"//We support ""a week"", so we need to parse the value as ""a"""
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,334,int val = 0;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,335,"if (value.equals(""a"") || value.equals(""an"")) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,336,val = 1;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,337,} else {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,338,val = Integer.parseInt(value);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,341,//Determine the unit
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,342,"if (unit.equals(""milliseconds"") || unit.equals(""millisecond"")) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,343,"now.add(Calendar.MILLISECOND, -val);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,344,"} else if (unit.equals(""seconds"") || unit.equals(""second"")) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,345,"now.add(Calendar.SECOND, -val);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,346,"} else if (unit.equals(""minutes"") || unit.equals(""minute"")) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,347,"now.add(Calendar.MINUTE, -val);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,348,"} else if (unit.equals(""hours"") || unit.equals(""hour"")) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,349,"now.add(Calendar.HOUR, -val);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,350,"} else if (unit.equals(""days"") || unit.equals(""day"")) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,351,"now.add(Calendar.DATE, -val);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,352,"} else if (unit.equals(""weeks"") || unit.equals(""week"")) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,353,"now.add(Calendar.DATE, -val * 7);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,354,"} else if (unit.equals(""fortnights"") || unit.equals(""fortnight"")) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,355,"now.add(Calendar.DATE, -val * 14);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,356,"} else if (unit.equals(""months"") || unit.equals(""month"")) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,357,"now.add(Calendar.MONTH, -val);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,358,"} else if (unit.equals(""years"") || unit.equals(""year"")) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,359,"now.add(Calendar.YEAR, -val);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,360,} else {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,361,"throw new RuntimeException(""We do not understand that many units ago"");"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,363,return now;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,364,"} else if (value.startsWith(""last "")) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,365,//If this was the last time a certain field was met
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,366,//Strip out the 'last ' part
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,367,value = value.substring(5);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,368,//Get the current date/time
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,369,String[] strings = symbols.getWeekdays();
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,370,for (int i = 0; i < strings.length; i++) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,371,if (value.equalsIgnoreCase(strings[i])) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,372,//How many days after Sunday
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,373,int daysAgo = now.get(Calendar.DAY_OF_WEEK) - i;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,374,if (daysAgo <= 0) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,375,daysAgo += 7;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,377,"now.add(Calendar.DATE, -daysAgo);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,378,return now;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,381,strings = symbols.getMonths();
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,382,for (int i = 0; i < strings.length; i++) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,383,if (value.equalsIgnoreCase(strings[i])) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,384,//How many days after January
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,385,int monthsAgo = now.get(Calendar.MONTH) - i;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,386,if (monthsAgo <= 0) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,387,monthsAgo += 12;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,389,"now.add(Calendar.MONTH, -monthsAgo);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,390,return now;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,393,"if (value.equals(""week"")) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,394,"now.add(Calendar.DATE, -7);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,395,return now;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,397,"} else if (value.equals(""yesterday"")) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,398,"now.add(Calendar.DATE, -1);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,399,return now;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,400,"} else if (value.equals(""tomorrow"")) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,401,"now.add(Calendar.DATE, 1);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,402,return now;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,404,//Try to parse the date a number of different ways
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,405,for (int i = 0; i < dateFormats.length; i++) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,406,try {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,407,Date datetime = dateFormats[i].parse(original);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,408,Calendar cal = Calendar.getInstance();
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,409,cal.setTime(datetime);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,410,return cal;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,411,} catch (ParseException pe) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,412,//we ignore this and just keep trying
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,416,"throw new RuntimeException(""Unable to parse '"" + original + ""'."");"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,191, Calculate the phase of the moon for a given date.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,193, <p>Code heavily influenced by hacklib.c in <a
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,194," href=""http://www.nethack.org/"">Nethack</a></p>"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,196, <p>The Algorithm:
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,198, <pre>
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,199," moon period = 29.53058 days ~= 30, year = 365.2422 days"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,201, days moon phase advances on first day of year compared to preceding year
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,202,  = 365.2422 - 12*29.53058 ~= 11
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,204, years in Metonic cycle (time until same phases fall on the same days of
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,205,  the month) = 18.6 ~= 19
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,207, moon phase on first day of year (epact) ~= (11*(year%19) + 18) % 30
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,208,  (18 as initial condition for 1900)
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,210, current phase in days = first day phase + days elapsed in year
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,212, 6 moons ~= 177 days
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,213, 177 ~= 8 reported phases * 22
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,214, + 11/22 for rounding
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,215, </pre>
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,217, @return The phase of the moon as a number between 0 and 7 with
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,218,         0 meaning new moon and 4 meaning full moon.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,220," @since 1.2, Ant 1.5"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,420,* This constructs an Iterator that will start and stop over a date
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,421,"* range based on the focused date and the range style.  For instance,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,422,"* passing Thursday, July 4, 2002 and a RANGE_MONTH_SUNDAY will return"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,423,"* an Iterator that starts with Sunday, June 30, 2002 and ends with"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,424,"* Saturday, August 3, 2002."
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,222,ublic static int getPhaseOfMoon(Calendar cal) {
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,223,nt dayOfTheYear = cal.get(Calendar.DAY_OF_YEAR);
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,224,nt yearInMetonicCycle = ((cal.get(Calendar.YEAR) - 1900) % 19) + 1;
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,225,nt epact = (11 * yearInMetonicCycle + 18) % 30;
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,226,f ((epact == 25 && yearInMetonicCycle > 11) || epact == 24) {
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,227,pact++;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,426,"public static Iterator getCalendarIterator(Calendar focus, int rangeStyle) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,427,Calendar start = null;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,428,Calendar end = null;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,429,int startCutoff = Calendar.SUNDAY;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,430,int endCutoff = Calendar.SATURDAY;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,431,switch (rangeStyle) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,432,case RANGE_MONTH_SUNDAY:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,433,case RANGE_MONTH_MONDAY:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,434,//Set start to the first of the month
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,435,"start = trunc(focus, Calendar.MONTH);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,436,//Set end to the last of the month
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,437,end = (Calendar) start.clone();
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,438,"end.add(Calendar.MONTH, 1);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,439,"end.add(Calendar.DATE, -1);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,440,//Loop start back to the previous sunday or monday
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,441,if (rangeStyle == RANGE_MONTH_MONDAY) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,442,startCutoff = Calendar.MONDAY;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,443,endCutoff = Calendar.SUNDAY;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,445,break;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,446,case RANGE_WEEK_SUNDAY:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,447,case RANGE_WEEK_MONDAY:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,448,case RANGE_WEEK_RELATIVE:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,449,case RANGE_WEEK_CENTER:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,450,//Set start and end to the current date
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,451,"start = trunc(focus, Calendar.DATE);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,452,"end = trunc(focus, Calendar.DATE);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,453,switch (rangeStyle) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,454,case RANGE_WEEK_SUNDAY:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,455,//already set by default
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,456,break;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,457,case RANGE_WEEK_MONDAY:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,458,startCutoff = Calendar.MONDAY;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,459,endCutoff = Calendar.SUNDAY;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,460,break;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,461,case RANGE_WEEK_RELATIVE:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,462,startCutoff = focus.get(Calendar.DAY_OF_WEEK);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,463,endCutoff = startCutoff - 1;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,464,break;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,465,case RANGE_WEEK_CENTER:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,466,startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,467,endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,468,break;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,470,break;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,471,default:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,472,"throw new RuntimeException(""The range style "" + rangeStyle + "" is not valid."");"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,474,if (startCutoff < Calendar.SUNDAY) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,475,startCutoff += 7;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,477,if (startCutoff > Calendar.SATURDAY) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,478,startCutoff -= 7;
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,229,eturn (((((dayOfTheYear + epact) * 6) + 11) % 177) / 22) & 7;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,480,if (endCutoff < Calendar.SUNDAY) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,481,endCutoff += 7;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,483,if (endCutoff > Calendar.SATURDAY) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,484,endCutoff -= 7;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,486,while (start.get(Calendar.DAY_OF_WEEK) != startCutoff) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,487,"start.add(Calendar.DATE, -1);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,489,while (end.get(Calendar.DAY_OF_WEEK) != endCutoff) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,490,"end.add(Calendar.DATE, 1);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,492,final Calendar startFinal = start;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,493,final Calendar endFinal = end;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,494,Iterator it = new Iterator() {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,495,Calendar spot = null;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,497,spot = startFinal;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,498,"spot.add(Calendar.DATE, -1);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,501,public boolean hasNext() {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,502,return spot.before(endFinal);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,505,public Object next() {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,506,if (spot.equals(endFinal)) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,507,throw new NoSuchElementException();
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,509,"spot.add(Calendar.DATE, 1);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,510,return spot.clone();
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,513,public void remove() {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,514,throw new UnsupportedOperationException();
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,517,return it;
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,233, Returns the current Date in a format suitable for a SMTP date
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,234, header.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,236, @since Ant 1.5.2
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,521,* See the other getCalendarIterator.  Works with a Date.
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,238,ublic static String getDateForHeader() {
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,239,alendar cal = Calendar.getInstance();
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,240,imeZone tz = cal.getTimeZone();
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,241,"nt offset = tz.getOffset(cal.get(Calendar.ERA),"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,242,"al.get(Calendar.YEAR),"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,243,"al.get(Calendar.MONTH),"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,244,"al.get(Calendar.DAY_OF_MONTH),"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,245,"al.get(Calendar.DAY_OF_WEEK),"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,246,al.get(Calendar.MILLISECOND));
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,247,"tringBuffer tzMarker = new StringBuffer(offset < 0 ? ""-"" : ""+"");"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,248,ffset = Math.abs(offset);
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,249,nt hours = offset / (60 * 60 * 1000);
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,250,nt minutes = offset / (60 * 1000) - 60 * hours;
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,251,f (hours < 10) {
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,252,"zMarker.append(""0"");"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,254,zMarker.append(hours);
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,255,f (minutes < 10) {
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,256,"zMarker.append(""0"");"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,523,"public static Iterator getCalendarIterator(Date focus, int rangeStyle) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,524,GregorianCalendar gval = new GregorianCalendar();
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,525,gval.setTime(focus);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,526,"return getCalendarIterator(gval, rangeStyle);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,530,"* See the other getCalendarIterator.  Works with an Object, trying"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,531,* to use it as a Date or Calendar.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,533,"public static Iterator getCalendarIterator(Object focus, int rangeStyle) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,534,if (focus instanceof Date) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,535,"return getCalendarIterator((Date) focus, rangeStyle);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,536,} else if (focus instanceof Calendar) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,537,"return getCalendarIterator((Calendar) focus, rangeStyle);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,538,} else {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,539,"throw new ClassCastException(""Could not iterate based on "" + focus);"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,258,zMarker.append(minutes);
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,259,eturn DATE_HEADER_FORMAT.format(cal.getTime()) + tzMarker.toString();
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,4,* Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,5,* reserved.
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,9,* are met:
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,17,*    distribution.
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,54,package org.apache.commons.lang.time;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,57,* Duration formatting utilites and constants.
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,59,* @author Apache Ant - DateUtils
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,60,"* @author <a href=""mailto:sbailliez@apache.org"">Stephane Bailliez</a>"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,61,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,62,* @author Stephen Colebourne
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,63,* @since 2.0
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,64,"* @version $Id: DurationFormatUtils.java,v 1.1 2003/06/08 23:14:23 scolebourne Exp $"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,66,public final class DurationFormatUtils {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,70,* DurationFormatUtils instances should NOT be constructed in standard programming.
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,71,* <p>
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,72,* This constructor is public to permit tools that require a JavaBean instance
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,73,* to operate.
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,75,public DurationFormatUtils() {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,79,* Format an elapsed time into a plurialization correct string.
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,80,* It is limited only to report elapsed time in minutes and
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,81,* seconds and has the following behavior.
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,82,* <ul>
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,83,"* <li>minutes are not displayed when 0. (ie: ""45 seconds"")</li>"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,84,"* <li>seconds are always displayed in plural form (ie ""0 seconds"" or"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,85,"* ""10 seconds"") except for 1 (ie ""1 second"")</li>"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,86,* </ul>
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,88,* @param millis  the elapsed time to report in milliseconds
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,89,* @return the formatted text in minutes/seconds
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,91,"public static String formatWords(long millis, boolean supressLeadingZeroElements, boolean supressTrailingZeroElements) {"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,92,long[] values = new long[4];
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,93,values[0] = millis / DateUtils.MILLIS_IN_DAY;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,94,values[1] = (millis / DateUtils.MILLIS_IN_HOUR) % 24;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,95,values[2] = (millis / DateUtils.MILLIS_IN_MINUTE) % 60;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,96,values[3] = (millis / DateUtils.MILLIS_IN_SECOND) % 60;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,97,"String[] fieldsOne = {"" day "", "" hour "", "" minute "", "" second""};"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,98,"String[] fieldsPlural = {"" days "", "" hours "", "" minutes "", "" seconds""};"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,100,StringBuffer buf = new StringBuffer(64);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,101,boolean valueOutput = false;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,103,for (int i = 0; i < 4; i++) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,104,long value = values[i];
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,105,if (value == 0) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,106,// handle zero
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,107,if (valueOutput) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,108,if (supressTrailingZeroElements == false) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,109,buf.append('0').append(fieldsPlural[i]);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,111,} else {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,112,if (supressLeadingZeroElements == false) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,113,buf.append('0').append(fieldsPlural[i]);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,116,} else if (value == 1) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,117,// one
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,118,valueOutput = true;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,119,buf.append('1').append(fieldsOne[i]);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,120,} else {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,121,// other
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,122,valueOutput = true;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,123,buf.append(value).append(fieldsPlural[i]);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,127,return buf.toString().trim();
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,131,* <p>Get the time gap as a string.</p>
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,133,* <p>The format used is ISO8601-like.
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,134,* <i>hours</i>:<i>minutes</i>:<i>seconds</i>.<i>milliseconds</i>.</p>
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,136,* @param millis  the duration to format
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,137,* @return the time as a String
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,139,public static String formatISO(long millis) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,140,"int hours, minutes, seconds, milliseconds;"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,141,hours = (int) (millis / DateUtils.MILLIS_IN_HOUR);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,142,millis = millis - (hours * DateUtils.MILLIS_IN_HOUR);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,143,minutes = (int) (millis / DateUtils.MILLIS_IN_MINUTE);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,144,millis = millis - (minutes * DateUtils.MILLIS_IN_MINUTE);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,145,seconds = (int) (millis / DateUtils.MILLIS_IN_SECOND);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,146,millis = millis - (seconds * DateUtils.MILLIS_IN_SECOND);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,147,milliseconds = (int) millis;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,149,StringBuffer buf = new StringBuffer(32);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,150,buf.append(hours);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,151,buf.append(':');
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,152,buf.append((char)(minutes / 10 + '0'));
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,153,buf.append((char)(minutes % 10 + '0'));
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,154,buf.append(':');
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,155,buf.append((char)(seconds / 10 + '0'));
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,156,buf.append((char)(seconds % 10 + '0'));
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,157,buf.append('.');
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,158,if (milliseconds < 10) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,159,buf.append('0').append('0');
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,160,} else if (milliseconds < 100) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,161,buf.append('0');
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,163,buf.append(milliseconds);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,164,return buf.toString();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,56,mport java.io.Serializable;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,74," FastDateFormat is similar to {@link java.text.SimpleDateFormat}, but"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,75, faster and thread-safe.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,73,* FastDateFormat is a fast and thread-safe version of {@link java.text.SimpleDateFormat}.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,78, SimpleDateFormat.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,76,* SimpleDateFormat (except timezones - see below).
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,77,* <p>
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,78,"* Java 1.4 introduced a new pattern letter, 'Z', to represent time zones in"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,79,* RFC822 format (eg. +0800 or -1100). This pattern letter can be used here (on
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,80,* all JDK versions).
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,81,* <p>
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,82,"* In addition, the pattern 'ZZ' has been made to represent ISO8601 full format"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,83,* time zones (eg. +08:00 or -11:00). This introduces a minor incompatability with
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,84,"* Java 1.4, but at a gain of useful functionality."
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,87," @version $Id: FastDateFormat.java,v 1.5 2003/05/21 23:39:53 scolebourne Exp $"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,93,"* @version $Id: FastDateFormat.java,v 1.6 2003/06/08 23:14:23 scolebourne Exp $"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,96,"// A lot of the speed in this class comes from caching, but some comes"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,97,// from the special int to StringBuffer conversion.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,99,// The following produces a padded 2 digit number:
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,100,//   buffer.append((char)(value / 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,101,//   buffer.append((char)(value % 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,103,// Note that the fastest append to StringBuffer is a single char (used here).
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,104,"// Note that Integer.toString() is not called, the conversion is simply"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,105,// taking the value and adding (mathematically) the ASCII value for '0'.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,106,"// So, don't change this code! It works and is vary fast."
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,91,** FULL date or time style */
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,108,/** FULL locale dependent date or time style */
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,93,** LONG date or time style */
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,110,/** LONG locale dependent date or time style */
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,95,** MEDIUM date or time style */
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,112,/** MEDIUM locale dependent date or time style */
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,97,** SHORT date or time style */
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,114,/** SHORT locale dependent date or time style */
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,104,rivate static TimeZone cDefaultTimeZone = TimeZone.getDefault();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,132,/** Whether the time zone overrides any on Calendars */
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,133,private final boolean mTimeZoneForced;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,136,/** Whether the locale overrides the default */
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,137,private final boolean mLocaleForced;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,119,rivate final Rule[] mRules;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,139,private Rule[] mRules;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,121,rivate final int mMaxLengthEstimate;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,141,private int mMaxLengthEstimate;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,175, @throws IllegalArgumentException if pattern is invalid
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,195,* @throws IllegalArgumentException if pattern is invalid or null
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,178,bject key = pattern;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,179,f (timeZone != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,180,"ey = new Pair(key, timeZone);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,182,f (locale != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,183,"ey = new Pair(key, locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,186,astDateFormat format = (FastDateFormat) cInstanceCache.get(key);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,198,"FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,199,FastDateFormat format = (FastDateFormat) cInstanceCache.get(emptyFormat);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,188,f (locale == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,189,ocale = Locale.getDefault();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,192,"ormat = new FastDateFormat(pattern, timeZone, locale, new DateFormatSymbols(locale));"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,193,"InstanceCache.put(key, format);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,201,format = emptyFormat;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,202,format.init();  // convert shell format into usable one
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,203,"cInstanceCache.put(format, format);  // this is OK!"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,355,// Constructor
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,358,* Constructs a new FastDateFormat.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,360,* @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,361,"* @param timeZone  time zone to use, null means use default for Date and"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,362,*                  value within for Calendar
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,363,"* @param locale  locale, null means use system default"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,364,* @throws IllegalArgumentException if pattern is invalid or null
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,366,"protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,367,super();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,368,if (pattern == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,369,"throw new IllegalArgumentException(""The pattern must not be null"");"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,371,mPattern = pattern;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,373,mTimeZoneForced = (timeZone != null);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,374,if (timeZone == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,375,timeZone = TimeZone.getDefault();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,377,mTimeZone = timeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,379,mLocaleForced = (locale != null);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,380,if (locale == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,381,locale = Locale.getDefault();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,383,mLocale = locale;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,387,* Initialise the instance for first use.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,389,protected void init() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,390,List rulesList = parsePattern();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,391,mRules = (Rule[]) rulesList.toArray(new Rule[rulesList.size()]);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,393,int len = 0;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,394,for (int i=mRules.length; --i >= 0; ) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,395,len += mRules[i].estimateLength();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,398,mMaxLengthEstimate = len;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,401,// Parse the pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,348, @param pattern  the pattern to parse
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,349, @param timeZone  the time zone to use
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,350, @param locale  the locale to use
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,351, @param symbols  the symbols to use
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,355,"rivate static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,409,protected List parsePattern() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,410,DateFormatSymbols symbols = new DateFormatSymbols(mLocale);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,365,nt length = pattern.length();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,420,int length = mPattern.length();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,370,"tring token = parseToken(pattern, indexRef);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,425,"String token = parseToken(mPattern, indexRef);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,387,ule = new UnpaddedNumberField(Calendar.YEAR);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,442,rule = UnpaddedNumberField.INSTANCE_YEAR;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,389,ule = new TwoDigitYearField();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,444,rule = TwoDigitYearField.INSTANCE;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,398,ule = new TwoDigitMonthField();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,453,rule = TwoDigitMonthField.INSTANCE;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,400,ule = new UnpaddedMonthField();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,455,rule = UnpaddedMonthField.INSTANCE;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,447,"ule = new TimeZoneRule(timeZone, locale, TimeZone.LONG);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,502,"rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,449,"ule = new TimeZoneRule(timeZone, locale, TimeZone.SHORT);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,504,"rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,506,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,507,case 'Z': // time zone (value)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,508,if (tokenLen == 1) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,509,rule = TimeZoneNumberRule.INSTANCE_NO_COLON;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,510,} else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,511,rule = TimeZoneNumberRule.INSTANCE_COLON;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,477,"rivate static String parseToken(String pattern, int[] indexRef) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,539,"protected String parseToken(String pattern, int[] indexRef) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,536,"rivate static NumberRule selectNumberRule(int field, int padding) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,598,"protected NumberRule selectNumberRule(int field, int padding) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,549, Constructs a new FastDateFormat.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,551, @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,552," @param timeZone  optional time zone, overrides time zone of formatted date"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,553," @param locale  optional locale, overrides system locale"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,554," @param symbols  optional date format symbols, overrides symbols for provided locale"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,555, @throws IllegalArgumentException if pattern is invalid
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,557,"rivate FastDateFormat(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,558,f (locale == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,559,ocale = Locale.getDefault();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,562,Pattern = pattern;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,563,TimeZone = timeZone;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,564,Locale = locale;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,566,f (symbols == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,567,ymbols = new DateFormatSymbols(locale);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,570,"ist rulesList = parse(pattern, timeZone, locale, symbols);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,571,Rules = (Rule[]) rulesList.toArray(new Rule[rulesList.size()]);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,573,nt len = 0;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,574,or (int i=mRules.length; --i >= 0; ) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,575,en += mRules[i].estimateLength();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,578,MaxLengthEstimate = len;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,609,// Format methods
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,608,alendar c = new GregorianCalendar(cDefaultTimeZone);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,637,Calendar c = new GregorianCalendar(mTimeZone);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,610,f (mTimeZone != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,611,.setTimeZone(mTimeZone);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,634,alendar c = new GregorianCalendar(cDefaultTimeZone);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,660,Calendar c = new GregorianCalendar(mTimeZone);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,636,f (mTimeZone != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,637,.setTimeZone(mTimeZone);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,650,f (mTimeZone != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,651,alendar = (Calendar)calendar.clone();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,673,if (mTimeZoneForced) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,674,calendar = (Calendar) calendar.clone();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,664,"rivate StringBuffer applyRules(Calendar calendar, StringBuffer buf) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,687,"protected StringBuffer applyRules(Calendar calendar, StringBuffer buf) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,696,// Parsing
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,711,// Accessors
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,698," Gets the time zone used by this formatter, or null if time zone of"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,699, formatted dates is used instead.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,723,* Gets the time zone used by this formatter.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,724,* <p>
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,725,* This zone is always used for Date formatting.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,726,"* If a Calendar is passed in to be formatted, the time zone on that may"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,727,* be used depending on {@link #getTimeZoneOverridesCalendar()}.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,736,* Returns true if the time zone of the calendar overrides the time zone
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,737,* of the formatter
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,739,* @return true if time zone of formatter overridden for calendars
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,741,public boolean getTimeZoneOverridesCalendar() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,742,return mTimeZoneForced;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,764,// Basics
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,767,* Compare two objects for equality.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,769,* @param obj  the object to compare to
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,770,* @return true if equal
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,772,public boolean equals(Object obj) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,773,if (obj instanceof FastDateFormat == false) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,774,return false;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,776,FastDateFormat other = (FastDateFormat) obj;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,777,if (
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,778,(mPattern == other.mPattern || mPattern.equals(other.mPattern)) &&
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,779,(mTimeZone == other.mTimeZone || mTimeZone.equals(other.mTimeZone)) &&
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,780,(mLocale == other.mLocale || mLocale.equals(other.mLocale)) &&
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,781,(mTimeZoneForced == other.mTimeZoneForced) &&
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,782,(mLocaleForced == other.mLocaleForced)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,784,return true;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,786,return false;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,790,* A suitable hashcode.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,792,* @return a hashcode compatable with equals
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,794,public int hashCode() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,795,int total = 0;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,796,total += mPattern.hashCode();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,797,total += mTimeZone.hashCode();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,798,total += (mTimeZoneForced ? 1 : 0);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,799,total += mLocale.hashCode();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,800,total += (mLocaleForced ? 1 : 0);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,801,return total;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,805,* Gets a debugging string version of this formatter.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,807,* @return a debugging string
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,809,public String toString() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,810,"return ""FastDateFormat["" + mPattern + ""]"";"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,813,// Rules
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,900,static final UnpaddedNumberField INSTANCE_YEAR = new UnpaddedNumberField(Calendar.YEAR);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,830,lse if (value < 100) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,919,} else if (value < 100) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,834,lse {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,922,} else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,932,static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,859,lse {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,948,} else {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,898,lse {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,986,} else {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,903,lse {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,990,} else {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,937,lse {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1023,} else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1033,static final TwoDigitYearField INSTANCE = new TwoDigitYearField();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1056,static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1040, Inner class to output a time zone.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1130,* Inner class to output a time zone name.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1042,rivate static class TimeZoneRule implements Rule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1132,private static class TimeZoneNameRule implements Rule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1134,private final boolean mTimeZoneForced;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1049,"imeZoneRule(TimeZone timeZone, Locale locale, int style) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1140,"TimeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1142,mTimeZoneForced = timeZoneForced;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1054,f (timeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1146,if (timeZoneForced) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1058,lse {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1149,} else {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1065,f (mTimeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1156,if (mTimeZoneForced) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1068,lse if (mStyle == TimeZone.SHORT) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1158,} else if (mStyle == TimeZone.SHORT) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1071,lse {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1160,} else {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1077,imeZone timeZone;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1078,f ((timeZone = mTimeZone) != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1079,f (timeZone.useDaylightTime() &&
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1080,alendar.get(Calendar.DST_OFFSET) != 0) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1166,if (mTimeZoneForced) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1167,if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1084,lse {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1169,} else {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1088,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1089,imeZone = calendar.getTimeZone();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1090,f (timeZone.useDaylightTime() &&
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1091,alendar.get(Calendar.DST_OFFSET) != 0) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1093,uffer.append(getTimeZoneDisplay
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1094,"timeZone, true, mStyle, mLocale));"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1096,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1097,uffer.append(getTimeZoneDisplay
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1098,"timeZone, false, mStyle, mLocale));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1172,} else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1173,TimeZone timeZone = calendar.getTimeZone();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1174,if (timeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1175,"buffer.append(getTimeZoneDisplay(timeZone, true, mStyle, mLocale));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1176,} else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1177,"buffer.append(getTimeZoneDisplay(timeZone, false, mStyle, mLocale));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1184,* Inner class to output a time zone as a number +/-HHMM or +/-HH:MM.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1186,private static class TimeZoneNumberRule implements Rule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1187,static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1188,static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1190,final boolean mColon;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1192,TimeZoneNumberRule(boolean colon) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1193,mColon = colon;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1196,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1197,return 5;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1200,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1201,int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1203,if (offset < 0) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1204,buffer.append('-');
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1205,offset = -offset;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1206,} else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1207,buffer.append('+');
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1210,int hours = offset / (60 * 60 * 1000);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1211,buffer.append((char)(hours / 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1212,buffer.append((char)(hours % 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1214,if (mColon) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1215,buffer.append(':');
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1218,int minutes = offset / (60 * 1000) - 60 * hours;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1219,buffer.append((char)(minutes / 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1220,buffer.append((char)(minutes % 10 + '0'));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1147,"rivate static class Pair implements Comparable, Serializable {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1267,private static class Pair {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1156,ublic int compareTo(Object obj) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1157,f (this == obj) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1158,eturn 0;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1161,air other = (Pair)obj;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1163,bject a = mObj1;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1164,bject b = other.mObj1;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1166,irstTest: {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1167,f (a == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1168,f (b != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1169,eturn 1;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1171,/ Both a and b are null.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1172,reak firstTest;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1174,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1175,f (b == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1176,eturn -1;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1180,nt result = ((Comparable)a).compareTo(b);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1182,f (result != 0) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1183,eturn result;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1187, = mObj2;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1188, = other.mObj2;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1190,f (a == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1191,f (b != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1192,eturn 1;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1194,/ Both a and b are null.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1195,eturn 0;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1197,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1198,f (b == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1199,eturn -1;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1203,eturn ((Comparable)a).compareTo(b);
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,4, Copyright (c) 1999-2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,4,* Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,80," @version $Id: StopWatch.java,v 1.3 2003/05/21 23:37:20 scolebourne Exp $"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,80,"* @version $Id: StopWatch.java,v 1.4 2003/06/08 23:14:23 scolebourne Exp $"
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,84,rivate static final int MILLIS_IN_HOUR = 60 * 60 * 1000;
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,85,rivate static final int MILLIS_IN_MINUTE = 60 * 1000;
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,190," <p>The format used is ISO8601,"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,187,"* <p>The format used is ISO8601-like,"
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,196,eturn StopWatch.toString(getTime());
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,200, <p>Get the time gap as a string.</p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,202," <p>The format used is ISO8601,"
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,203, <i>hours</i>:<i>minutes</i>:<i>seconds</i>.<i>milliseconds</i>.</p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,205, @return the time as a String
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,207,ublic static String toString(long time) {
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,208,"nt hours, minutes, seconds, milliseconds;"
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,209,ours = (int) (time / MILLIS_IN_HOUR);
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,210,ime = time - (hours * MILLIS_IN_HOUR);
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,211,inutes = (int) (time / MILLIS_IN_MINUTE);
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,212,ime = time - (minutes * MILLIS_IN_MINUTE);
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,213,econds = (int) (time / 1000);
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,214,ime = time - (seconds * 1000);
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,215,illiseconds = (int) time;
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,217,tringBuffer buf = new StringBuffer(32);
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,218,uf.append(hours);
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,219,uf.append(':');
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,220,f (minutes < 10) {
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,221,uf.append('0');
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,223,uf.append(minutes);
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,224,uf.append(':');
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,225,f (seconds < 10) {
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,226,uf.append('0');
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,228,uf.append(seconds);
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,229,uf.append('.');
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,230,f (milliseconds < 10) {
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,231,"uf.append(""00"");"
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,232, else if (milliseconds < 100) {
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,233,uf.append('0');
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,235,uf.append(milliseconds);
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,236,eturn buf.toString();
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,193,return DurationFormatUtils.formatISO(getTime());
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,4, Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,5, reserved.
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,9, are met:
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,17,    distribution.
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,20,"    any, must include the following acknowlegement:"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,23,"    Alternately, this acknowlegement may appear in the software itself,"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,24,    if and wherever such third-party acknowlegements normally appear.
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,32,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,54,ackage org.apache.commons.lang.time;
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,56,mport java.text.DateFormat;
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,57,mport java.util.Calendar;
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,58,mport java.util.Date;
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,59,mport java.util.Iterator;
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,61,mport junit.framework.AssertionFailedError;
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,62,mport junit.framework.Test;
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,63,mport junit.framework.TestCase;
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,64,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,65,mport junit.textui.TestRunner;
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,68, Unit tests {@link org.apache.commons.lang.CalendarUtils}.
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,70," @author <a href=""mailto:sergek@lokitech.com"">Serge Knystautas</a>"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,72,ublic class CalendarUtilsTest extends TestCase {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,73,ateFormat parser = null;
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,74,ate date1 = null;
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,75,ate date2 = null;
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,77,ublic CalendarUtilsTest(String name) {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,78,uper(name);
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,81,ublic static void main(String[] args) {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,82,estRunner.run(suite());
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,85,ublic static Test suite() {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,86,estSuite suite = new TestSuite(CalendarUtilsTest.class);
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,87,"uite.setName(""CalendarUtilsTest Tests"");"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,88,eturn suite;
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,91,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,92,uper.setUp();
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,94,"arser = new java.text.SimpleDateFormat(""MMM dd, yyyy H:mm:ss.SSS"");"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,96,"ate1 = parser.parse(""February 12, 2002 12:34:56.789"");"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,97,"ate2 = parser.parse(""November 18, 2001 1:23:11.321"");"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,100,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,101,uper.tearDown();
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,108, Tests various values with the round method
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,110,ublic void testRound() throws Exception {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,111,"ssertEquals(""round year-1 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,112,"ew Date(""2002 January 1""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,113,"alendarUtils.round(date1, Calendar.YEAR));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,114,"ssertEquals(""round year-2 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,115,"ew Date(""2002 January 1""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,116,"alendarUtils.round(date2, Calendar.YEAR));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,117,"ssertEquals(""round month-1 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,118,"ew Date(""2002 February 1""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,119,"alendarUtils.round(date1, Calendar.MONTH));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,120,"ssertEquals(""round month-2 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,121,"ew Date(""2001 December 1""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,122,"alendarUtils.round(date2, Calendar.MONTH));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,123,"ssertEquals(""round semimonth-1 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,124,"ew Date(""2002 February 16""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,125,"alendarUtils.round(date1, CalendarUtils.SEMI_MONTH));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,126,"ssertEquals(""round semimonth-2 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,127,"ew Date(""2001 November 16""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,128,"alendarUtils.round(date2, CalendarUtils.SEMI_MONTH));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,129,"ssertEquals(""round date-1 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,130,"ew Date(""2002 February 13""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,131,"alendarUtils.round(date1, Calendar.DATE));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,132,"ssertEquals(""round date-2 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,133,"ew Date(""2001 November 18""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,134,"alendarUtils.round(date2, Calendar.DATE));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,135,"ssertEquals(""round hour-1 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,136,"arser.parse(""February 12, 2002 13:00:00.000""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,137,"alendarUtils.round(date1, Calendar.HOUR));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,138,"ssertEquals(""round hour-2 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,139,"arser.parse(""November 18, 2001 1:00:00.000""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,140,"alendarUtils.round(date2, Calendar.HOUR));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,141,"ssertEquals(""round minute-1 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,142,"arser.parse(""February 12, 2002 12:35:00.000""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,143,"alendarUtils.round(date1, Calendar.MINUTE));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,144,"ssertEquals(""round minute-2 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,145,"arser.parse(""November 18, 2001 1:23:00.000""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,146,"alendarUtils.round(date2, Calendar.MINUTE));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,147,"ssertEquals(""round second-1 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,148,"arser.parse(""February 12, 2002 12:34:57.000""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,149,"alendarUtils.round(date1, Calendar.SECOND));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,150,"ssertEquals(""round second-2 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,151,"arser.parse(""November 18, 2001 1:23:11.000""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,152,"alendarUtils.round(date2, Calendar.SECOND));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,156, Tests various values with the trunc method
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,158,ublic void testTrunc() throws Exception {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,159,"ssertEquals(""trunc year-1 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,160,"ew Date(""2002 January 1""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,161,"alendarUtils.trunc(date1, Calendar.YEAR));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,162,"ssertEquals(""trunc year-2 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,163,"ew Date(""2001 January 1""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,164,"alendarUtils.trunc(date2, Calendar.YEAR));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,165,"ssertEquals(""trunc month-1 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,166,"ew Date(""2002 February 1""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,167,"alendarUtils.trunc(date1, Calendar.MONTH));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,168,"ssertEquals(""trunc month-2 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,169,"ew Date(""2001 November 1""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,170,"alendarUtils.trunc(date2, Calendar.MONTH));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,171,"ssertEquals(""trunc semimonth-1 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,172,"ew Date(""2002 February 1""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,173,"alendarUtils.trunc(date1, CalendarUtils.SEMI_MONTH));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,174,"ssertEquals(""trunc semimonth-2 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,175,"ew Date(""2001 November 16""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,176,"alendarUtils.trunc(date2, CalendarUtils.SEMI_MONTH));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,177,"ssertEquals(""trunc date-1 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,178,"ew Date(""2002 February 12""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,179,"alendarUtils.trunc(date1, Calendar.DATE));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,180,"ssertEquals(""trunc date-2 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,181,"ew Date(""2001 November 18""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,182,"alendarUtils.trunc(date2, Calendar.DATE));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,183,"ssertEquals(""trunc hour-1 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,184,"arser.parse(""February 12, 2002 12:00:00.000""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,185,"alendarUtils.trunc(date1, Calendar.HOUR));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,186,"ssertEquals(""trunc hour-2 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,187,"arser.parse(""November 18, 2001 1:00:00.000""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,188,"alendarUtils.trunc(date2, Calendar.HOUR));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,189,"ssertEquals(""trunc minute-1 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,190,"arser.parse(""February 12, 2002 12:34:00.000""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,191,"alendarUtils.trunc(date1, Calendar.MINUTE));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,192,"ssertEquals(""trunc minute-2 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,193,"arser.parse(""November 18, 2001 1:23:00.000""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,194,"alendarUtils.trunc(date2, Calendar.MINUTE));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,195,"ssertEquals(""trunc second-1 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,196,"arser.parse(""February 12, 2002 12:34:56.000""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,197,"alendarUtils.trunc(date1, Calendar.SECOND));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,198,"ssertEquals(""trunc second-2 failed"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,199,"arser.parse(""November 18, 2001 1:23:11.000""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,200,"alendarUtils.trunc(date2, Calendar.SECOND));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,205," Tests the parse method, which is supposed to handle various strings"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,206, as flexibly as CVS supports.
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,208,ublic void testParse() throws Exception {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,209,"/This is difficult to test since the ""now"" used in the"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,210,/  parse function cannot be controlled.  We could possibly control
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,211,/  it by trying before and after and making sure the value we expect
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,212,/  is between the two values calculated.
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,213,/For now we're just using the custom assertEquals that takes a delta
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,215,alendar now = null;
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,217,ow = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,218,"ow.add(Calendar.MINUTE, -1);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,219,"ssertEquals(""parse 1 minute ago"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,220,"ow, CalendarUtils.parse(""1 minute ago""), 50);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,221,ow = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,222,"ow.add(Calendar.MINUTE, -8);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,223,"ssertEquals(""parse 8 minutes ago"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,224,"ow, CalendarUtils.parse(""8 minutes ago""), 50);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,226,ow = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,227,"ow.add(Calendar.DATE, -1);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,228,"ssertEquals(""parse yesterday"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,229,"ow, CalendarUtils.parse(""yesterday""), 50);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,231,ow = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,232,"ow.add(Calendar.DATE, 1);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,233,"ssertEquals(""parse tomorrow"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,234,"ow, CalendarUtils.parse(""tomorrow""), 50);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,236,ow = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,237,"/Sunday would be 1, Saturday would be 7, so we walk back up to 6 days."
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,238,f (now.get(Calendar.DATE) == 1) {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,239,"/If Sunday already, we go back a full week"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,240,"ow.add(Calendar.DATE, -7);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,241, else {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,242,"ow.add(Calendar.DATE, 1 - now.get(Calendar.DAY_OF_WEEK));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,244,"ssertEquals(""parse last Sunday"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,245,"ow, CalendarUtils.parse(""last Sunday""), 50);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,247,ow = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,248,"ow.add(Calendar.DATE, -7);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,249,"ssertEquals(""parse last week"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,250,"ow, CalendarUtils.parse(""last week""), 50);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,252,ow = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,253,"/January would be 0, December would be 11, so we walk back up to 11 months"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,254,f (now.get(Calendar.MONTH) == 0) {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,255,"/If January already, we go back a full year"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,256,"ow.add(Calendar.MONTH, -12);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,257, else {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,258,"ow.add(Calendar.MONTH, 0 - now.get(Calendar.MONTH));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,260,"ssertEquals(""parse last January"","
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,261,"ow, CalendarUtils.parse(""last January""), 50);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,265, Tests the calendar iterator for week ranges
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,267,ublic void testWeekIterator() throws Exception {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,268,alendar now = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,269,"alendar today = CalendarUtils.trunc(now, Calendar.DATE);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,270,"alendar sunday = CalendarUtils.trunc(now, Calendar.DATE);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,271,"unday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,272,"alendar monday = CalendarUtils.trunc(now, Calendar.DATE);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,273,f (monday.get(Calendar.DATE) == 1) {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,274,/This is sunday... roll back 6 days
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,275,"onday.add(Calendar.DATE, -6);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,276, else {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,277,"onday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,279,"alendar centered = CalendarUtils.trunc(now, Calendar.DATE);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,280,"entered.add(Calendar.DATE, -3);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,282,"terator it = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_SUNDAY);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,283,"ssertWeekIterator(it, sunday);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,284,"t = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_MONDAY);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,285,"ssertWeekIterator(it, monday);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,286,"t = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_RELATIVE);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,287,"ssertWeekIterator(it, today);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,288,"t = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_CENTER);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,289,"ssertWeekIterator(it, centered);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,293, Tests the calendar iterator for month-based ranges
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,295,ublic void testMonthIterator() throws Exception {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,296,"terator it = CalendarUtils.getCalendarIterator(date1, CalendarUtils.RANGE_MONTH_SUNDAY);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,297,"ssertWeekIterator(it,"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,298,"ew Date(""January 27, 2002""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,299,"ew Date(""March 2, 2002""));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,301,"t = CalendarUtils.getCalendarIterator(date1, CalendarUtils.RANGE_MONTH_MONDAY);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,302,"ssertWeekIterator(it,"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,303,"ew Date(""January 28, 2002""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,304,"ew Date(""March 3, 2002""));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,306,"t = CalendarUtils.getCalendarIterator(date2, CalendarUtils.RANGE_MONTH_SUNDAY);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,307,"ssertWeekIterator(it,"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,308,"ew Date(""October 28, 2001""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,309,"ew Date(""December 1, 2001""));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,311,"t = CalendarUtils.getCalendarIterator(date2, CalendarUtils.RANGE_MONTH_MONDAY);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,312,"ssertWeekIterator(it,"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,313,"ew Date(""October 29, 2001""),"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,314,"ew Date(""December 2, 2001""));"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,318, This checks that this is a 7 element iterator of Calendar objects
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,319," that are dates (no time), and exactly 1 day spaced after each other."
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,321,"rivate static void assertWeekIterator(Iterator it, Calendar start) {"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,322,alendar end = (Calendar) start.clone();
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,323,"nd.add(Calendar.DATE, 6);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,325,"ssertWeekIterator(it, start, end);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,329, Convenience method for when working with Date objects
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,331,"rivate static void assertWeekIterator(Iterator it, Date start, Date end) {"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,332,alendar calStart = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,333,alStart.setTime(start);
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,334,alendar calEnd = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,335,alEnd.setTime(end);
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,337,"ssertWeekIterator(it, calStart, calEnd);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,341, This checks that this is a 7 divisble iterator of Calendar objects
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,342," that are dates (no time), and exactly 1 day spaced after each other"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,343, (in addition to the proper start and stop dates)
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,345,"rivate static void assertWeekIterator(Iterator it, Calendar start, Calendar end) {"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,346,alendar cal = (Calendar) it.next();
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,347,"ssertEquals("""", start, cal, 0);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,348,alendar last = null;
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,349,nt count = 1;
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,350,hile (it.hasNext()) {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,351,/Check this is just a date (no time component)
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,352,"ssertEquals("""", cal, CalendarUtils.trunc(cal, Calendar.DATE), 0);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,354,ast = cal;
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,355,al = (Calendar) it.next();
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,356,ount++;
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,358,/Check that this is one day more than the last date
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,359,"ast.add(Calendar.DATE, 1);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,360,"ssertEquals("""", last, cal, 0);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,362,f (count % 7 != 0) {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,363,"hrow new AssertionFailedError(""There were "" + count + "" days in this iterator"");"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,365,"ssertEquals("""", end, cal, 0);"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,369, Used to check that Calendar objects are close enough
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,370, delta is in milliseconds
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,372,"ublic static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {"
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,373,f (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,374,hrow new AssertionFailedError(
False,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,src/test/org/apache/commons/lang/time/CalendarUtilsTest.java,375,"essage + "" expected "" + cal1.getTime() + "" but got "" + cal2.getTime());"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,4,* Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,5,* reserved.
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,9,* are met:
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,17,*    distribution.
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,54,package org.apache.commons.lang.time;
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,56,import java.util.Calendar;
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,57,import java.util.TimeZone;
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,59,import junit.framework.Test;
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,60,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,61,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,62,import junit.textui.TestRunner;
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,65,* TestCase for DateFormatUtils.
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,67,* @author Apache Ant - DateUtilsTest
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,68,"* @author <a href=""mailto:sbailliez@apache.org"">Stephane Bailliez</a>"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,69,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,70,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,72,public class DateFormatUtilsTest extends TestCase {
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,74,public static void main(String[] args) {
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,75,TestRunner.run(suite());
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,78,public static Test suite() {
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,79,TestSuite suite = new TestSuite(DateFormatUtilsTest.class);
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,80,"suite.setName(""DateFormatUtils Tests"");"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,81,return suite;
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,84,public DateFormatUtilsTest(String s) {
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,85,super(s);
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,88,public void testDateTimeISO(){
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,89,"TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,90,Calendar cal = Calendar.getInstance(timeZone);
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,91,"cal.set(2002,1,23,9,11,12);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,92,"String text = DateFormatUtils.format(cal.getTime(),"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,93,"DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,94,"assertEquals(""2002-02-23T09:11:12"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,95,"text = DateFormatUtils.format(cal.getTime().getTime(),"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,96,"DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,97,"assertEquals(""2002-02-23T09:11:12"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,98,text = DateFormatUtils.ISO_DATETIME_FORMAT.format(cal);
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,99,"assertEquals(""2002-02-23T09:11:12"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,101,"text = DateFormatUtils.format(cal.getTime(),"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,102,"DateFormatUtils.ISO_DATETIME_TIMEZONE_FORMAT.getPattern(), timeZone);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,103,"assertEquals(""2002-02-23T09:11:12-03:00"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,104,"text = DateFormatUtils.format(cal.getTime().getTime(),"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,105,"DateFormatUtils.ISO_DATETIME_TIMEZONE_FORMAT.getPattern(), timeZone);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,106,"assertEquals(""2002-02-23T09:11:12-03:00"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,107,text = DateFormatUtils.ISO_DATETIME_TIMEZONE_FORMAT.format(cal);
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,108,"assertEquals(""2002-02-23T09:11:12-03:00"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,111,public void testDateISO(){
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,112,"TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,113,Calendar cal = Calendar.getInstance(timeZone);
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,114,"cal.set(2002,1,23,10,11,12);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,115,"String text = DateFormatUtils.format(cal.getTime(),"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,116,"DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,117,"assertEquals(""2002-02-23"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,118,"text = DateFormatUtils.format(cal.getTime().getTime(),"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,119,"DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,120,"assertEquals(""2002-02-23"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,121,text = DateFormatUtils.ISO_DATE_FORMAT.format(cal);
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,122,"assertEquals(""2002-02-23"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,124,"text = DateFormatUtils.format(cal.getTime(),"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,125,"DateFormatUtils.ISO_DATE_TIMEZONE_FORMAT.getPattern(), timeZone);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,126,"assertEquals(""2002-02-23-03:00"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,127,"text = DateFormatUtils.format(cal.getTime().getTime(),"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,128,"DateFormatUtils.ISO_DATE_TIMEZONE_FORMAT.getPattern(), timeZone);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,129,"assertEquals(""2002-02-23-03:00"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,130,text = DateFormatUtils.ISO_DATE_TIMEZONE_FORMAT.format(cal);
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,131,"assertEquals(""2002-02-23-03:00"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,134,public void testTimeISO(){
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,135,"TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,136,Calendar cal = Calendar.getInstance(timeZone);
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,137,"cal.set(2002,1,23,10,11,12);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,138,"String text = DateFormatUtils.format(cal.getTime(),"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,139,"DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,140,"assertEquals(""T10:11:12"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,141,"text = DateFormatUtils.format(cal.getTime().getTime(),"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,142,"DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,143,"assertEquals(""T10:11:12"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,144,text = DateFormatUtils.ISO_TIME_FORMAT.format(cal);
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,145,"assertEquals(""T10:11:12"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,147,"text = DateFormatUtils.format(cal.getTime(),"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,148,"DateFormatUtils.ISO_TIME_TIMEZONE_FORMAT.getPattern(), timeZone);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,149,"assertEquals(""T10:11:12-03:00"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,150,"text = DateFormatUtils.format(cal.getTime().getTime(),"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,151,"DateFormatUtils.ISO_TIME_TIMEZONE_FORMAT.getPattern(), timeZone);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,152,"assertEquals(""T10:11:12-03:00"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,153,text = DateFormatUtils.ISO_TIME_TIMEZONE_FORMAT.format(cal);
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,154,"assertEquals(""T10:11:12-03:00"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,157,public void testTimeNoTISO(){
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,158,"TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,159,Calendar cal = Calendar.getInstance(timeZone);
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,160,"cal.set(2002,1,23,10,11,12);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,161,"String text = DateFormatUtils.format(cal.getTime(),"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,162,"DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,163,"assertEquals(""10:11:12"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,164,"text = DateFormatUtils.format(cal.getTime().getTime(),"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,165,"DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,166,"assertEquals(""10:11:12"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,167,text = DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(cal);
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,168,"assertEquals(""10:11:12"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,170,"text = DateFormatUtils.format(cal.getTime(),"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,171,"DateFormatUtils.ISO_TIME_NO_T_TIMEZONE_FORMAT.getPattern(), timeZone);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,172,"assertEquals(""10:11:12-03:00"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,173,"text = DateFormatUtils.format(cal.getTime().getTime(),"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,174,"DateFormatUtils.ISO_TIME_NO_T_TIMEZONE_FORMAT.getPattern(), timeZone);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,175,"assertEquals(""10:11:12-03:00"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,176,text = DateFormatUtils.ISO_TIME_NO_T_TIMEZONE_FORMAT.format(cal);
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,177,"assertEquals(""10:11:12-03:00"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,180,public void testSMTP(){
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,181,"TimeZone timeZone = TimeZone.getTimeZone(""GMT-3"");"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,182,Calendar cal = Calendar.getInstance(timeZone);
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,183,"cal.set(2003,5,8,10,11,12);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,184,"String text = DateFormatUtils.format(cal.getTime(),"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,185,"DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,186,"assertEquals(""Sun, 08 Jun 2003 10:11:12 -0300"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,187,"text = DateFormatUtils.format(cal.getTime().getTime(),"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,188,"DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,189,"assertEquals(""Sun, 08 Jun 2003 10:11:12 -0300"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,190,text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal);
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,191,"assertEquals(""Sun, 08 Jun 2003 10:11:12 -0300"", text);"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,193,// format UTC
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,194,"text = DateFormatUtils.formatUTC(cal.getTime().getTime(),"
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,195,DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern());
True,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java,196,"assertEquals(""Sun, 08 Jun 2003 13:11:12 +0000"", text);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,4, Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,4,* Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,26," 4. The names ""The Jakarta Project"", ""Ant"", and ""Apache Software"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,33,    permission of the Apache Group.
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,56,import java.text.DateFormat;
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,57,import java.text.SimpleDateFormat;
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,57,mport java.util.TimeZone;
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,59,import java.util.Date;
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,60,import java.util.Iterator;
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,62,import junit.framework.AssertionFailedError;
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,65, TestCase for DateUtils.  [Relies heavily on code taken from the
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,66, DateUtilsTest class of the jakarata-ant project.]
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,69,* Unit tests {@link org.apache.commons.lang.CalendarUtils}.
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,68," @author <a href=""mailto:sbailliez@apache.org"">Stephane Bailliez</a>"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,69," @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,71,"* @author <a href=""mailto:sergek@lokitech.com"">Serge Knystautas</a>"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,74,DateFormat dateParser = null;
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,75,DateFormat dateTimeParser = null;
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,76,Date date1 = null;
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,77,Date date2 = null;
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,79,public DateUtilsTest(String name) {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,80,super(name);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,79,"uite.setName(""DateUtils Tests"");"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,89,"suite.setName(""CalendarUtilsTest Tests"");"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,83,ublic DateUtilsTest(String s) {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,84,uper(s);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,93,protected void setUp() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,94,super.setUp();
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,96,"dateParser = new SimpleDateFormat(""MMM dd, yyyy"");"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,97,"dateTimeParser = new SimpleDateFormat(""MMM dd, yyyy H:mm:ss.SSS"");"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,99,"date1 = dateTimeParser.parse(""February 12, 2002 12:34:56.789"");"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,100,"date2 = dateTimeParser.parse(""November 18, 2001 1:23:11.321"");"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,103,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,104,super.tearDown();
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,111,* Tests various values with the round method
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,113,public void testRound() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,114,"assertEquals(""round year-1 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,115,"dateParser.parse(""January 1, 2002""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,116,"DateUtils.round(date1, Calendar.YEAR));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,117,"assertEquals(""round year-2 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,118,"dateParser.parse(""January 1, 2002""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,119,"DateUtils.round(date2, Calendar.YEAR));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,120,"assertEquals(""round month-1 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,121,"dateParser.parse(""February 1, 2002""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,122,"DateUtils.round(date1, Calendar.MONTH));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,123,"assertEquals(""round month-2 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,124,"dateParser.parse(""December 1, 2001""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,125,"DateUtils.round(date2, Calendar.MONTH));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,126,"assertEquals(""round semimonth-1 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,127,"dateParser.parse(""February 16, 2002""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,128,"DateUtils.round(date1, DateUtils.SEMI_MONTH));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,129,"assertEquals(""round semimonth-2 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,130,"dateParser.parse(""November 16, 2001""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,131,"DateUtils.round(date2, DateUtils.SEMI_MONTH));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,132,"assertEquals(""round date-1 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,133,"dateParser.parse(""February 13, 2002""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,134,"DateUtils.round(date1, Calendar.DATE));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,135,"assertEquals(""round date-2 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,136,"dateParser.parse(""November 18, 2001""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,137,"DateUtils.round(date2, Calendar.DATE));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,138,"assertEquals(""round hour-1 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,139,"dateTimeParser.parse(""February 12, 2002 13:00:00.000""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,140,"DateUtils.round(date1, Calendar.HOUR));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,141,"assertEquals(""round hour-2 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,142,"dateTimeParser.parse(""November 18, 2001 1:00:00.000""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,143,"DateUtils.round(date2, Calendar.HOUR));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,144,"assertEquals(""round minute-1 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,145,"dateTimeParser.parse(""February 12, 2002 12:35:00.000""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,146,"DateUtils.round(date1, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,147,"assertEquals(""round minute-2 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,148,"dateTimeParser.parse(""November 18, 2001 1:23:00.000""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,149,"DateUtils.round(date2, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,150,"assertEquals(""round second-1 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,151,"dateTimeParser.parse(""February 12, 2002 12:34:57.000""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,152,"DateUtils.round(date1, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,153,"assertEquals(""round second-2 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,154,"dateTimeParser.parse(""November 18, 2001 1:23:11.000""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,155,"DateUtils.round(date2, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,159,* Tests various values with the trunc method
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,161,public void testTrunc() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,162,"assertEquals(""trunc year-1 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,163,"dateParser.parse(""January 1, 2002""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,164,"DateUtils.trunc(date1, Calendar.YEAR));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,165,"assertEquals(""trunc year-2 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,166,"dateParser.parse(""January 1, 2001""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,167,"DateUtils.trunc(date2, Calendar.YEAR));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,168,"assertEquals(""trunc month-1 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,169,"dateParser.parse(""February 1, 2002""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,170,"DateUtils.trunc(date1, Calendar.MONTH));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,171,"assertEquals(""trunc month-2 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,172,"dateParser.parse(""November 1, 2001""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,173,"DateUtils.trunc(date2, Calendar.MONTH));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,174,"assertEquals(""trunc semimonth-1 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,175,"dateParser.parse(""February 1, 2002""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,176,"DateUtils.trunc(date1, DateUtils.SEMI_MONTH));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,177,"assertEquals(""trunc semimonth-2 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,178,"dateParser.parse(""November 16, 2001""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,179,"DateUtils.trunc(date2, DateUtils.SEMI_MONTH));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,180,"assertEquals(""trunc date-1 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,181,"dateParser.parse(""February 12, 2002""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,182,"DateUtils.trunc(date1, Calendar.DATE));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,183,"assertEquals(""trunc date-2 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,184,"dateParser.parse(""November 18, 2001""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,185,"DateUtils.trunc(date2, Calendar.DATE));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,186,"assertEquals(""trunc hour-1 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,187,"dateTimeParser.parse(""February 12, 2002 12:00:00.000""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,188,"DateUtils.trunc(date1, Calendar.HOUR));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,189,"assertEquals(""trunc hour-2 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,190,"dateTimeParser.parse(""November 18, 2001 1:00:00.000""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,191,"DateUtils.trunc(date2, Calendar.HOUR));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,192,"assertEquals(""trunc minute-1 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,193,"dateTimeParser.parse(""February 12, 2002 12:34:00.000""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,194,"DateUtils.trunc(date1, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,195,"assertEquals(""trunc minute-2 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,196,"dateTimeParser.parse(""November 18, 2001 1:23:00.000""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,197,"DateUtils.trunc(date2, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,198,"assertEquals(""trunc second-1 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,199,"dateTimeParser.parse(""February 12, 2002 12:34:56.000""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,200,"DateUtils.trunc(date1, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,201,"assertEquals(""trunc second-2 failed"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,202,"dateTimeParser.parse(""November 18, 2001 1:23:11.000""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,203,"DateUtils.trunc(date2, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,208,"* Tests the parse method, which is supposed to handle various strings"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,209,* as flexibly as CVS supports.
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,211,public void testParse() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,212,"//This is difficult to test since the ""now"" used in the"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,213,//  parse function cannot be controlled.  We could possibly control
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,214,//  it by trying before and after and making sure the value we expect
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,215,//  is between the two values calculated.
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,216,//For now we're just using the custom assertEquals that takes a delta
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,218,Calendar now = null;
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,220,now = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,221,"now.add(Calendar.MINUTE, -1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,222,"assertEquals(""parse 1 minute ago"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,223,"now, DateUtils.parse(""1 minute ago""), 50);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,224,now = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,225,"now.add(Calendar.MINUTE, -8);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,226,"assertEquals(""parse 8 minutes ago"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,227,"now, DateUtils.parse(""8 minutes ago""), 50);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,229,now = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,230,"now.add(Calendar.DATE, -1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,231,"assertEquals(""parse yesterday"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,232,"now, DateUtils.parse(""yesterday""), 50);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,234,now = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,235,"now.add(Calendar.DATE, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,236,"assertEquals(""parse tomorrow"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,237,"now, DateUtils.parse(""tomorrow""), 50);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,239,now = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,240,"//Sunday would be 1, Saturday would be 7, so we walk back up to 6 days."
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,241,if (now.get(Calendar.DAY_OF_WEEK) == 1) {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,242,"//If Sunday already, we go back a full week"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,243,"now.add(Calendar.DATE, -7);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,244,} else {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,245,"now.add(Calendar.DATE, 1 - now.get(Calendar.DAY_OF_WEEK));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,247,"assertEquals(""parse last Sunday"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,248,"now, DateUtils.parse(""last Sunday""), 50);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,250,now = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,251,"now.add(Calendar.DATE, -7);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,252,"assertEquals(""parse last week"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,253,"now, DateUtils.parse(""last week""), 50);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,255,now = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,256,"//January would be 0, December would be 11, so we walk back up to 11 months"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,257,if (now.get(Calendar.MONTH) == 0) {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,258,"//If January already, we go back a full year"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,259,"now.add(Calendar.MONTH, -12);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,260,} else {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,261,"now.add(Calendar.MONTH, 0 - now.get(Calendar.MONTH));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,263,"assertEquals(""parse last January"","
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,264,"now, DateUtils.parse(""last January""), 50);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,87,ublic void testElapsedTime(){
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,88,tring text = DateUtils.formatElapsedTime(50*1000);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,89,"ssertEquals(""50 seconds"", text);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,90,ext = DateUtils.formatElapsedTime(65*1000);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,91,"ssertEquals(""1 minute 5 seconds"", text);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,92,ext = DateUtils.formatElapsedTime(120*1000);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,93,"ssertEquals(""2 minutes 0 seconds"", text);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,94,ext = DateUtils.formatElapsedTime(121*1000);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,95,"ssertEquals(""2 minutes 1 second"", text);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,268,* Tests the calendar iterator for week ranges
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,270,public void testWeekIterator() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,271,Calendar now = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,272,for (int i = 0; i< 7; i++) {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,273,"Calendar today = DateUtils.trunc(now, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,274,"Calendar sunday = DateUtils.trunc(now, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,275,"sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,276,"Calendar monday = DateUtils.trunc(now, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,277,if (monday.get(Calendar.DAY_OF_WEEK) == 1) {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,278,//This is sunday... roll back 6 days
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,279,"monday.add(Calendar.DATE, -6);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,280,} else {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,281,"monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,283,"Calendar centered = DateUtils.trunc(now, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,284,"centered.add(Calendar.DATE, -3);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,286,"Iterator it = DateUtils.getCalendarIterator(now, DateUtils.RANGE_WEEK_SUNDAY);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,287,"assertWeekIterator(it, sunday);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,288,"it = DateUtils.getCalendarIterator(now, DateUtils.RANGE_WEEK_MONDAY);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,289,"assertWeekIterator(it, monday);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,290,"it = DateUtils.getCalendarIterator(now, DateUtils.RANGE_WEEK_RELATIVE);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,291,"assertWeekIterator(it, today);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,292,"it = DateUtils.getCalendarIterator(now, DateUtils.RANGE_WEEK_CENTER);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,293,"assertWeekIterator(it, centered);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,294,"now.add(Calendar.DATE,1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,98,ublic void testDateTimeISO(){
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,99,"imeZone timeZone = TimeZone.getTimeZone(""GMT+1"");"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,100,alendar cal = Calendar.getInstance(timeZone);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,101,"al.set(2002,1,23,10,11,12);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,102,"tring text = DateUtils.format(cal.getTime(),"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,103,ateUtils.ISO8601_DATETIME_PATTERN);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,104,"ssertEquals(""2002-02-23T09:11:12"", text);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,299,* Tests the calendar iterator for month-based ranges
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,301,public void testMonthIterator() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,302,"Iterator it = DateUtils.getCalendarIterator(date1, DateUtils.RANGE_MONTH_SUNDAY);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,303,"assertWeekIterator(it,"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,304,"dateParser.parse(""January 27, 2002""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,305,"dateParser.parse(""March 2, 2002""));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,307,"it = DateUtils.getCalendarIterator(date1, DateUtils.RANGE_MONTH_MONDAY);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,308,"assertWeekIterator(it,"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,309,"dateParser.parse(""January 28, 2002""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,310,"dateParser.parse(""March 3, 2002""));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,312,"it = DateUtils.getCalendarIterator(date2, DateUtils.RANGE_MONTH_SUNDAY);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,313,"assertWeekIterator(it,"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,314,"dateParser.parse(""October 28, 2001""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,315,"dateParser.parse(""December 1, 2001""));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,317,"it = DateUtils.getCalendarIterator(date2, DateUtils.RANGE_MONTH_MONDAY);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,318,"assertWeekIterator(it,"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,319,"dateParser.parse(""October 29, 2001""),"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,320,"dateParser.parse(""December 2, 2001""));"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,107,ublic void testDateISO(){
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,108,"imeZone timeZone = TimeZone.getTimeZone(""GMT"");"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,109,alendar cal = Calendar.getInstance(timeZone);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,110,"al.set(2002,1,23);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,111,"tring text = DateUtils.format(cal.getTime(),"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,112,ateUtils.ISO8601_DATE_PATTERN);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,113,"ssertEquals(""2002-02-23"", text);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,324,* This checks that this is a 7 element iterator of Calendar objects
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,325,"* that are dates (no time), and exactly 1 day spaced after each other."
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,327,"private static void assertWeekIterator(Iterator it, Calendar start) {"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,328,Calendar end = (Calendar) start.clone();
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,329,"end.add(Calendar.DATE, 6);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,331,"assertWeekIterator(it, start, end);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,116,ublic void testTimeISODate(){
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,117,/ make sure that elapsed time in set via date works
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,118,"imeZone timeZone = TimeZone.getTimeZone(""GMT+1"");"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,119,alendar cal = Calendar.getInstance(timeZone);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,120,"al.set(2002,1,23, 21, 11, 12);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,121,"tring text = DateUtils.format(cal.getTime(),"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,122,ateUtils.ISO8601_TIME_PATTERN);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,123,"ssertEquals(""20:11:12"", text);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,335,* Convenience method for when working with Date objects
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,337,"private static void assertWeekIterator(Iterator it, Date start, Date end) {"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,338,Calendar calStart = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,339,calStart.setTime(start);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,340,Calendar calEnd = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,341,calEnd.setTime(end);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,343,"assertWeekIterator(it, calStart, calEnd);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,126,ublic void testTimeISO(){
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,127,/ make sure that elapsed time in ms works
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,128,ong ms = (20*3600 + 11*60 + 12)*1000;
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,129,"tring text = DateUtils.format(ms,"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,130,ateUtils.ISO8601_TIME_PATTERN);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,131,"ssertEquals(""20:11:12"", text);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,347,* This checks that this is a 7 divisble iterator of Calendar objects
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,348,"* that are dates (no time), and exactly 1 day spaced after each other"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,349,* (in addition to the proper start and stop dates)
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,351,"private static void assertWeekIterator(Iterator it, Calendar start, Calendar end) {"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,352,Calendar cal = (Calendar) it.next();
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,353,"assertEquals("""", start, cal, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,354,Calendar last = null;
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,355,int count = 1;
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,356,while (it.hasNext()) {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,357,//Check this is just a date (no time component)
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,358,"assertEquals("""", cal, DateUtils.trunc(cal, Calendar.DATE), 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,360,last = cal;
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,361,cal = (Calendar) it.next();
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,362,count++;
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,364,//Check that this is one day more than the last date
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,365,"last.add(Calendar.DATE, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,366,"assertEquals("""", last, cal, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,368,if (count % 7 != 0) {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,369,"throw new AssertionFailedError(""There were "" + count + "" days in this iterator"");"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,371,"assertEquals("""", end, cal, 0);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,134,ublic void testPhaseOfMoon() {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,135,"imeZone timeZone = TimeZone.getTimeZone(""GMT"");"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,136,alendar cal = Calendar.getInstance(timeZone);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,137,/ should be full moon
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,138,"al.set(2002, 2, 27);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,139,"ssertEquals(4, DateUtils.getPhaseOfMoon(cal));"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,140,/ should be new moon
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,141,"al.set(2002, 2, 12);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,142,"ssertEquals(0, DateUtils.getPhaseOfMoon(cal));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,375,* Used to check that Calendar objects are close enough
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,376,* delta is in milliseconds
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,378,"public static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,379,if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,380,throw new AssertionFailedError(
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,381,"message + "" expected "" + cal1.getTime() + "" but got "" + cal2.getTime());"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,4,* Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,5,* reserved.
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,9,* are met:
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,17,*    distribution.
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,54,package org.apache.commons.lang.time;
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,59,import junit.textui.TestRunner;
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,62,* TestCase for DurationFormatUtils.
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,64,* @author Apache Ant - DateUtilsTest
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,65,"* @author <a href=""mailto:sbailliez@apache.org"">Stephane Bailliez</a>"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,66,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,67,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,69,public class DurationFormatUtilsTest extends TestCase {
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,71,public static void main(String[] args) {
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,72,TestRunner.run(suite());
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,75,public static Test suite() {
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,76,TestSuite suite = new TestSuite(DurationFormatUtilsTest.class);
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,77,"suite.setName(""DurationFormatUtils Tests"");"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,78,return suite;
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,81,public DurationFormatUtilsTest(String s) {
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,82,super(s);
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,85,public void testFormatWords(){
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,86,String text = null;
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,88,"text = DurationFormatUtils.formatWords(50*1000, true, false);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,89,"assertEquals(""50 seconds"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,90,"text = DurationFormatUtils.formatWords(65*1000, true, false);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,91,"assertEquals(""1 minute 5 seconds"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,92,"text = DurationFormatUtils.formatWords(120*1000, true, false);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,93,"assertEquals(""2 minutes 0 seconds"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,94,"text = DurationFormatUtils.formatWords(121*1000, true, false);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,95,"assertEquals(""2 minutes 1 second"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,96,"text = DurationFormatUtils.formatWords(72*60*1000, true, false);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,97,"assertEquals(""1 hour 12 minutes 0 seconds"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,99,"text = DurationFormatUtils.formatWords(50*1000, true, true);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,100,"assertEquals(""50 seconds"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,101,"text = DurationFormatUtils.formatWords(65*1000, true, true);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,102,"assertEquals(""1 minute 5 seconds"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,103,"text = DurationFormatUtils.formatWords(120*1000, true, true);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,104,"assertEquals(""2 minutes"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,105,"text = DurationFormatUtils.formatWords(121*1000, true, true);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,106,"assertEquals(""2 minutes 1 second"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,107,"text = DurationFormatUtils.formatWords(72*60*1000, true, true);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,108,"assertEquals(""1 hour 12 minutes"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,110,"text = DurationFormatUtils.formatWords(50*1000, false, true);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,111,"assertEquals(""0 days 0 hours 0 minutes 50 seconds"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,112,"text = DurationFormatUtils.formatWords(65*1000, false, true);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,113,"assertEquals(""0 days 0 hours 1 minute 5 seconds"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,114,"text = DurationFormatUtils.formatWords(120*1000, false, true);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,115,"assertEquals(""0 days 0 hours 2 minutes"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,116,"text = DurationFormatUtils.formatWords(121*1000, false, true);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,117,"assertEquals(""0 days 0 hours 2 minutes 1 second"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,118,"text = DurationFormatUtils.formatWords(72*60*1000, false, true);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,119,"assertEquals(""0 days 1 hour 12 minutes"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,121,"text = DurationFormatUtils.formatWords(50*1000, false, false);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,122,"assertEquals(""0 days 0 hours 0 minutes 50 seconds"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,123,"text = DurationFormatUtils.formatWords(65*1000, false, false);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,124,"assertEquals(""0 days 0 hours 1 minute 5 seconds"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,125,"text = DurationFormatUtils.formatWords(120*1000, false, false);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,126,"assertEquals(""0 days 0 hours 2 minutes 0 seconds"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,127,"text = DurationFormatUtils.formatWords(121*1000, false, false);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,128,"assertEquals(""0 days 0 hours 2 minutes 1 second"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,129,"text = DurationFormatUtils.formatWords(72*60*1000, false, false);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,130,"assertEquals(""0 days 1 hour 12 minutes 0 seconds"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,133,public void testFormatISOStyle(){
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,134,long time = 0;
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,135,"assertEquals(""0:00:00.000"", DurationFormatUtils.formatISO(time));"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,137,time = 1;
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,138,"assertEquals(""0:00:00.001"", DurationFormatUtils.formatISO(time));"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,140,time = 15;
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,141,"assertEquals(""0:00:00.015"", DurationFormatUtils.formatISO(time));"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,143,time = 165;
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,144,"assertEquals(""0:00:00.165"", DurationFormatUtils.formatISO(time));"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,146,time = 1675;
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,147,"assertEquals(""0:00:01.675"", DurationFormatUtils.formatISO(time));"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,149,time = 13465;
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,150,"assertEquals(""0:00:13.465"", DurationFormatUtils.formatISO(time));"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,152,time = 72789;
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,153,"assertEquals(""0:01:12.789"", DurationFormatUtils.formatISO(time));"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,155,time = 12789 + 32 * 60000;
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,156,"assertEquals(""0:32:12.789"", DurationFormatUtils.formatISO(time));"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,158,time = 12789 + 62 * 60000;
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,159,"assertEquals(""1:02:12.789"", DurationFormatUtils.formatISO(time));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,57,import java.util.Date;
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,58,import java.util.GregorianCalendar;
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,70," @version $Id: FastDateFormatTest.java,v 1.3 2003/05/21 23:41:21 scolebourne Exp $"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,72,"* @version $Id: FastDateFormatTest.java,v 1.4 2003/06/08 23:14:23 scolebourne Exp $"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,111,"FastDateFormat format3 = FastDateFormat.getInstance(""MM-DD-yyyy"");"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,110,"ssertSame(format1, FastDateFormat.getInstance(""MM/DD/yyyy""));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,114,"assertSame(format2, format3);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,116,"assertEquals(TimeZone.getDefault(), format1.getTimeZone());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,117,"assertEquals(TimeZone.getDefault(), format2.getTimeZone());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,118,"assertEquals(false, format1.getTimeZoneOverridesCalendar());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,119,"assertEquals(false, format2.getTimeZoneOverridesCalendar());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,135,"FastDateFormat format6 = FastDateFormat.getInstance(""MM-DD-yyyy"");"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,129,"ssertTrue(format1.getTimeZone().equals(TimeZone.getTimeZone(""Atlantic/Reykjavik"")));"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,130,ssertNull(format2.getTimeZone());
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,138,"assertEquals(TimeZone.getTimeZone(""Atlantic/Reykjavik""), format1.getTimeZone());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,139,"assertEquals(true, format1.getTimeZoneOverridesCalendar());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,140,"assertEquals(TimeZone.getDefault(), format2.getTimeZone());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,141,"assertEquals(false, format2.getTimeZoneOverridesCalendar());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,144,assertTrue(format4 != format6); // -- junit 3.8 version -- assertFalse(format3 == format5);
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,171,"ssertEquals(format1.getTimeZone(), TimeZone.getTimeZone(""Atlantic/Reykjavik""));"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,172,ssertNull(format2.getTimeZone());
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,173,"ssertEquals(format3.getTimeZone(), TimeZone.getDefault());"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,174,"ssertEquals(format3.getTimeZone(), TimeZone.getTimeZone(""America/New_York""));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,183,"assertEquals(TimeZone.getTimeZone(""Atlantic/Reykjavik""), format1.getTimeZone());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,184,"assertEquals(TimeZone.getDefault(), format2.getTimeZone());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,185,"assertEquals(TimeZone.getDefault(), format3.getTimeZone());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,186,"assertEquals(true, format1.getTimeZoneOverridesCalendar());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,187,"assertEquals(false, format2.getTimeZoneOverridesCalendar());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,188,"assertEquals(true, format3.getTimeZoneOverridesCalendar());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,189,"assertEquals(Locale.GERMANY, format1.getLocale());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,190,"assertEquals(Locale.GERMANY, format2.getLocale());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,191,"assertEquals(Locale.GERMANY, format3.getLocale());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,199,public void testFormat() {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,200,Locale realDefaultLocale = Locale.getDefault();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,201,TimeZone realDefaultZone = TimeZone.getDefault();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,202,try {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,203,Locale.setDefault(Locale.US);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,204,"TimeZone.setDefault(TimeZone.getTimeZone(""America/New_York""));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,205,FastDateFormat fdf = null;
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,206,SimpleDateFormat sdf = null;
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,208,"GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,209,"GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,210,Date date1 = cal1.getTime();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,211,Date date2 = cal2.getTime();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,213,"fdf = FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss"");"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,214,"sdf = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss"");"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,215,"assertEquals(sdf.format(date1), fdf.format(date1));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,216,"assertEquals(""2003-01-10T15:33:20"", fdf.format(date1));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,217,"assertEquals(""2003-01-10T15:33:20"", fdf.format(cal1));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,218,"assertEquals(""2003-07-10T09:00:00"", fdf.format(date2));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,219,"assertEquals(""2003-07-10T09:00:00"", fdf.format(cal2));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,221,"fdf = FastDateFormat.getInstance(""Z"");"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,222,"assertEquals(""-0500"", fdf.format(date1));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,223,"assertEquals(""-0500"", fdf.format(cal1));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,225,"fdf = FastDateFormat.getInstance(""Z"");"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,226,"assertEquals(""-0400"", fdf.format(date2));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,227,"assertEquals(""-0400"", fdf.format(cal2));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,229,"fdf = FastDateFormat.getInstance(""ZZ"");"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,230,"assertEquals(""-05:00"", fdf.format(date1));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,231,"assertEquals(""-05:00"", fdf.format(cal1));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,233,"fdf = FastDateFormat.getInstance(""ZZ"");"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,234,"assertEquals(""-04:00"", fdf.format(date2));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,235,"assertEquals(""-04:00"", fdf.format(cal2));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,237,"String pattern = ""GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M"" +"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,238,""" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"";"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,239,fdf = FastDateFormat.getInstance(pattern);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,240,sdf = new SimpleDateFormat(pattern);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,241,"assertEquals(sdf.format(date1), fdf.format(date1));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,242,"assertEquals(sdf.format(date2), fdf.format(date2));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,244,} finally {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,245,Locale.setDefault(realDefaultLocale);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,246,TimeZone.setDefault(realDefaultZone);
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,65," @version $Id: StopWatchTest.java,v 1.2 2003/05/21 23:40:24 scolebourne Exp $"
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,65,"* @version $Id: StopWatchTest.java,v 1.3 2003/06/08 23:14:23 scolebourne Exp $"
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,83,ublic void testToString(){
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,84,ong time = 0;
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,85,"ssertEquals(""0:00:00.000"", StopWatch.toString(time));"
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,87,ime = 1;
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,88,"ssertEquals(""0:00:00.001"", StopWatch.toString(time));"
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,90,ime = 15;
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,91,"ssertEquals(""0:00:00.015"", StopWatch.toString(time));"
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,93,ime = 165;
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,94,"ssertEquals(""0:00:00.165"", StopWatch.toString(time));"
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,96,ime = 1675;
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,97,"ssertEquals(""0:00:01.675"", StopWatch.toString(time));"
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,99,ime = 13465;
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,100,"ssertEquals(""0:00:13.465"", StopWatch.toString(time));"
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,102,ime = 72789;
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,103,"ssertEquals(""0:01:12.789"", StopWatch.toString(time));"
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,105,ime = 12789 + 32 * 60000;
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,106,"ssertEquals(""0:32:12.789"", StopWatch.toString(time));"
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,108,ime = 12789 + 62 * 60000;
False,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,109,"ssertEquals(""1:02:12.789"", StopWatch.toString(time));"
False,src/test/org/apache/commons/lang/time/TimeTestSuite.java,src/test/org/apache/commons/lang/time/TimeTestSuite.java,4, Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/lang/time/TimeTestSuite.java,src/test/org/apache/commons/lang/time/TimeTestSuite.java,4,* Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/time/TimeTestSuite.java,src/test/org/apache/commons/lang/time/TimeTestSuite.java,64," @version $Id: TimeTestSuite.java,v 1.3 2003/01/10 03:55:01 bayard Exp $"
True,src/test/org/apache/commons/lang/time/TimeTestSuite.java,src/test/org/apache/commons/lang/time/TimeTestSuite.java,65,"* @version $Id: TimeTestSuite.java,v 1.4 2003/06/08 23:14:23 scolebourne Exp $"
False,src/test/org/apache/commons/lang/time/TimeTestSuite.java,src/test/org/apache/commons/lang/time/TimeTestSuite.java,88,uite.addTest(CalendarUtilsTest.suite());
True,src/test/org/apache/commons/lang/time/TimeTestSuite.java,src/test/org/apache/commons/lang/time/TimeTestSuite.java,90,suite.addTest(DateFormatUtilsTest.suite());
True,src/test/org/apache/commons/lang/time/TimeTestSuite.java,src/test/org/apache/commons/lang/time/TimeTestSuite.java,91,suite.addTest(DurationFormatUtilsTest.suite());

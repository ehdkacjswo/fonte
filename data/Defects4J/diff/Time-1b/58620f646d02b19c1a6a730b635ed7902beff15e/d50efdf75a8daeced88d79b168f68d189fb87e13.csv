is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,2,  Copyright 2001-2010 Stephen Colebourne
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,2,*  Copyright 2001-2011 Stephen Colebourne
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,604,* Returns a copy of this ZonedDateTime changing the zone offset to the earlier
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,605,* of the two valid offsets at a local time-line overlap.
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,606,* <p>
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,607,"* This method only has any effect when the local time-line overlaps, such as at"
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,608,"* an autumn daylight savings cutover. In this scenario, there are two valid offsets"
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,609,* for the local date-time. Calling this method will return a date-time with the
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,610,* earlier of the two selected.
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,611,* <p>
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,612,"* If this method is called when it is not an overlap, this is returned."
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,613,* <p>
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,614,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,616,* @return a copy of this datetime with the earliest valid offset for the local datetime
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,618,public DateTime withEarlierOffsetAtOverlap() {
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,619,"long newMillis = getZone().adjustOffset(getMillis(), false);"
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,620,return withMillis(newMillis);
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,624,* Returns a copy of this ZonedDateTime changing the zone offset to the later
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,625,* of the two valid offsets at a local time-line overlap.
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,626,* <p>
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,627,"* This method only has any effect when the local time-line overlaps, such as at"
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,628,"* an autumn daylight savings cutover. In this scenario, there are two valid offsets"
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,629,* for the local date-time. Calling this method will return a date-time with the
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,630,* later of the two selected.
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,631,* <p>
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,632,"* If this method is called when it is not an overlap, this is returned."
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,633,* <p>
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,634,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,636,* @return a copy of this datetime with the latest valid offset for the local datetime
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,638,public DateTime withLaterOffsetAtOverlap() {
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,639,"long newMillis = getZone().adjustOffset(getMillis(), true);"
True,JodaTime/src/main/java/org/joda/time/DateTime.java,JodaTime/src/main/java/org/joda/time/DateTime.java,640,return withMillis(newMillis);
False,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,2,  Copyright 2001-2009 Stephen Colebourne
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,2,*  Copyright 2001-2011 Stephen Colebourne
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,1156,* Adjusts the offset to be the earlier or later one during an overlap.
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,1158,* @param instant  the instant to adjust
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,1159,"* @param earlierOrLater  false for earlier, true for later"
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,1160,* @return the adjusted instant millis
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,1162,"public long adjustOffset(long instant, boolean earlierOrLater) {"
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,1163,long before = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,1164,long after = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,1165,if (before == after) {
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,1166,return instant;
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,1168,long local = convertUTCToLocal(instant);
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,1169,"return convertLocalToUTC(local, false, earlierOrLater ? after : before);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1232,public void testBug3192457_adjustOffset() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1233,"final DateTimeZone zone = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1234,"DateTime base = new DateTime(2007, 10, 28, 3, 15, zone);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1235,DateTime baseBefore = base.minusHours(2);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1236,DateTime baseAfter = base.minusHours(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1238,"assertSame(base, base.withEarlierOffsetAtOverlap());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1239,"assertSame(base, base.withLaterOffsetAtOverlap());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1240,"assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1241,"assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1243,"assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1244,"assertEquals(baseAfter, baseAfter.withLaterOffsetAtOverlap());"

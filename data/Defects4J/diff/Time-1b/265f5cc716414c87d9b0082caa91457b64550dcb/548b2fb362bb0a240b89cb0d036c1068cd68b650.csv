is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,499,"eturn instant.toCopy(addTo(instant.getMillis(), scalar));"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,499,"return instant.withMillis(addTo(instant.getMillis(), scalar));"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,174," @param chronology  the chronology, must not be null"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,175, @throws IllegalArgumentException if the date or chronology is null
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,174,"* @param chronology  the chronology, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,175,* @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,232,ublic ReadableInstant toCopy(long newMillis) {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,232,public ReadableInstant withMillis(long newMillis) {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,246, @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,248,ublic ReadableInstant toCopy(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,249,f (newChronology == null) {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,250,"hrow new IllegalArgumentException(""The Chronology must not be null"");"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,252,ewChronology = newChronology.withUTC();
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,247,public ReadableInstant withChronology(Chronology newChronology) {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,248,newChronology = newChronology == null ? ISOChronology.getInstanceUTC()
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,249,: newChronology.withUTC();
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,322,ublic ReadableInstant toCopy(long newMillis) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,322,public ReadableInstant withMillis(long newMillis) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,335, @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,337,ublic ReadableInstant toCopy(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,338,f (newChronology == null) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,339,"hrow new IllegalArgumentException(""The Chronology must not be null"");"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,336,public ReadableInstant withChronology(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,138,ublic ReadableInstant toCopy(long newMillis) {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,138,public ReadableInstant withMillis(long newMillis) {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,149,ublic ReadableInstant toCopy(Chronology newChronology) {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,149,public ReadableInstant withChronology(Chronology newChronology) {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,154,"* Since Instant does not support time zones, this method always returns"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,155,* <code>this</code>.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,157,* @param newDateTimeZone  ignored
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,158,* @return this
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,160,public ReadableInstant withDateTimeZone(DateTimeZone newDateTimeZone) {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,161,return this;
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,234,ublic ReadableInstant toCopy(long newMillis) {
True,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,234,public ReadableInstant withMillis(long newMillis) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,246, @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,248,ublic ReadableInstant toCopy(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,249,f (newChronology == null) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,250,"hrow new IllegalArgumentException(""The Chronology must not be null"");"
True,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,247,public ReadableInstant withChronology(Chronology newChronology) {
True,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,248,newChronology = newChronology == null ? ISOChronology.getInstanceUTC()
True,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,249,: newChronology.withUTC();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,324,ublic ReadableInstant toCopy(long newMillis) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,324,public ReadableInstant withMillis(long newMillis) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,336, @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,338,ublic ReadableInstant toCopy(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,339,f (newChronology == null) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,340,"hrow new IllegalArgumentException(""The Chronology must not be null"");"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,337,public ReadableInstant withChronology(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,239,ublic ReadableInstant toCopy(long newMillis) {
True,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,239,public ReadableInstant withMillis(long newMillis) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,252, @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,254,ublic ReadableInstant toCopy(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,255,f (newChronology == null) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,256,"hrow new IllegalArgumentException(""The Chronology must not be null"");"
True,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,253,public ReadableInstant withChronology(Chronology newChronology) {
True,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,254,newChronology = newChronology == null ? ISOChronology.getInstanceUTC()
True,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,255,: newChronology.withUTC();
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,153,eadableInstant toCopy(long newMillis);
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,153,ReadableInstant withMillis(long newMillis);
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,164, @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,166,eadableInstant toCopy(Chronology newChronology);
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,165,ReadableInstant withChronology(Chronology newChronology);
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,168,* Gets a copy of this instant with a different time zone.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,169,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,170,* The returned object will be a new instance of the same implementation
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,171,"* type. Only the time zone of the chronology will change, the millis are"
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,172,* kept. Immutable subclasses may return <code>this</code> if appropriate.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,174,* @param newDateTimeZone  the new time zone
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,175,* @return a copy of this instant with a different time zone
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,177,ReadableInstant withDateTimeZone(DateTimeZone newDateTimeZone);
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,174," @param chronology  the chronology, must not be null"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,175, @throws IllegalArgumentException if the date or chronology is null
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,174,"* @param chronology  the chronology, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,175,* @throws IllegalArgumentException if the date is null
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,236,ublic ReadableInstant toCopy(long newMillis) {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,236,public ReadableInstant withMillis(long newMillis) {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,250, @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,252,ublic ReadableInstant toCopy(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,253,f (newChronology == null) {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,254,"hrow new IllegalArgumentException(""The Chronology must not be null"");"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,256,ewChronology = newChronology.withUTC();
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,251,public ReadableInstant withChronology(Chronology newChronology) {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,252,newChronology = newChronology == null ? ISOChronology.getInstanceUTC()
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,253,: newChronology.withUTC();
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,154,"eturn (DateOnly)instant.toCopy(iField.add(instant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,154,"return (DateOnly)instant.withMillis(iField.add(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,171,"eturn (DateOnly)instant.toCopy(iField.add(instant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,171,"return (DateOnly)instant.withMillis(iField.add(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,190,"eturn (DateOnly)instant.toCopy(iField.addWrapped(instant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,190,"return (DateOnly)instant.withMillis(iField.addWrapped(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,208,"eturn (DateOnly)instant.toCopy(iField.set(instant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,208,"return (DateOnly)instant.withMillis(iField.set(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,226,"eturn (DateOnly)instant.toCopy(iField.set(instant.getMillis(), text, locale));"
True,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,226,"return (DateOnly)instant.withMillis(iField.set(instant.getMillis(), text, locale));"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,253,eturn (DateOnly)instant.toCopy(iField.roundFloor(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,253,return (DateOnly)instant.withMillis(iField.roundFloor(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,263,eturn (DateOnly)instant.toCopy(iField.roundCeiling(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,263,return (DateOnly)instant.withMillis(iField.roundCeiling(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,274,eturn (DateOnly)instant.toCopy(iField.roundHalfFloor(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,274,return (DateOnly)instant.withMillis(iField.roundHalfFloor(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,285,eturn (DateOnly)instant.toCopy(iField.roundHalfCeiling(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,285,return (DateOnly)instant.withMillis(iField.roundHalfCeiling(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,296,eturn (DateOnly)instant.toCopy(iField.roundHalfEven(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,296,return (DateOnly)instant.withMillis(iField.roundHalfEven(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,147,"eturn (DateTime)instant.toCopy(iField.add(instant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,147,"return (DateTime)instant.withMillis(iField.add(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,164,"eturn (DateTime)instant.toCopy(iField.add(instant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,164,"return (DateTime)instant.withMillis(iField.add(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,183,"eturn (DateTime)instant.toCopy(iField.addWrapped(instant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,183,"return (DateTime)instant.withMillis(iField.addWrapped(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,201,"eturn (DateTime)instant.toCopy(iField.set(instant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,201,"return (DateTime)instant.withMillis(iField.set(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,219,"eturn (DateTime)instant.toCopy(iField.set(instant.getMillis(), text, locale));"
True,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,219,"return (DateTime)instant.withMillis(iField.set(instant.getMillis(), text, locale));"
False,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,246,eturn (DateTime)instant.toCopy(iField.roundFloor(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,246,return (DateTime)instant.withMillis(iField.roundFloor(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,256,eturn (DateTime)instant.toCopy(iField.roundCeiling(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,256,return (DateTime)instant.withMillis(iField.roundCeiling(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,267,eturn (DateTime)instant.toCopy(iField.roundHalfFloor(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,267,return (DateTime)instant.withMillis(iField.roundHalfFloor(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,278,eturn (DateTime)instant.toCopy(iField.roundHalfCeiling(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,278,return (DateTime)instant.withMillis(iField.roundHalfCeiling(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,289,eturn (DateTime)instant.toCopy(iField.roundHalfEven(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java,289,return (DateTime)instant.withMillis(iField.roundHalfEven(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,154,"eturn (TimeOnly)instant.toCopy(iField.add(instant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,154,"return (TimeOnly)instant.withMillis(iField.add(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,171,"eturn (TimeOnly)instant.toCopy(iField.add(instant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,171,"return (TimeOnly)instant.withMillis(iField.add(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,190,"eturn (TimeOnly)instant.toCopy(iField.addWrapped(instant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,190,"return (TimeOnly)instant.withMillis(iField.addWrapped(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,208,"eturn (TimeOnly)instant.toCopy(iField.set(instant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,208,"return (TimeOnly)instant.withMillis(iField.set(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,226,"eturn (TimeOnly)instant.toCopy(iField.set(instant.getMillis(), text, locale));"
True,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,226,"return (TimeOnly)instant.withMillis(iField.set(instant.getMillis(), text, locale));"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,253,eturn (TimeOnly)instant.toCopy(iField.roundFloor(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,253,return (TimeOnly)instant.withMillis(iField.roundFloor(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,263,eturn (TimeOnly)instant.toCopy(iField.roundCeiling(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,263,return (TimeOnly)instant.withMillis(iField.roundCeiling(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,274,eturn (TimeOnly)instant.toCopy(iField.roundHalfFloor(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,274,return (TimeOnly)instant.withMillis(iField.roundHalfFloor(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,285,eturn (TimeOnly)instant.toCopy(iField.roundHalfCeiling(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,285,return (TimeOnly)instant.withMillis(iField.roundHalfCeiling(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,296,eturn (TimeOnly)instant.toCopy(iField.roundHalfEven(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,296,return (TimeOnly)instant.withMillis(iField.roundHalfEven(instant.getMillis()));

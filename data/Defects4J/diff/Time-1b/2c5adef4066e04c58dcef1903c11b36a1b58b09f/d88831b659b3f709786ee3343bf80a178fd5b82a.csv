is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,80,* Obtains a {@code DateMidnight} set to the current system millisecond time
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,81,* using <code>ISOChronology</code> in the default time zone.
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,82,* The constructed object will have a local time of midnight.
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,84,"* @return the current date, not null"
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,85,* @since 2.0
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,87,public static DateMidnight now() {
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,88,return new DateMidnight();
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,92,* Obtains a {@code DateMidnight} set to the current system millisecond time
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,93,* using <code>ISOChronology</code> in the specified time zone.
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,94,* The constructed object will have a local time of midnight.
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,96,"* @param zone  the time zone, not null"
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,97,"* @return the current date, not null"
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,98,* @since 2.0
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,100,public static DateMidnight now(DateTimeZone zone) {
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,101,if (zone == null) {
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,102,"throw new NullPointerException(""Zone must not be null"");"
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,104,return new DateMidnight(zone);
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,108,* Obtains a {@code DateMidnight} set to the current system millisecond time
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,109,* using the specified chronology.
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,110,* The constructed object will have a local time of midnight.
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,112,"* @param chronology  the chronology, not null"
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,113,"* @return the current date, not null"
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,114,* @since 2.0
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,116,public static DateMidnight now(Chronology chronology) {
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,117,if (chronology == null) {
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,118,"throw new NullPointerException(""Chronology must not be null"");"
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,120,return new DateMidnight(chronology);
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,154,* @see #now()
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,168,* @see #now(DateTimeZone)
True,src/main/java/org/joda/time/DateMidnight.java,src/main/java/org/joda/time/DateMidnight.java,183,* @see #now(Chronology)
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,82,* Obtains a {@code DateTime} set to the current system millisecond time
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,83,* using <code>ISOChronology</code> in the default time zone.
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,85,"* @return the current date-time, not null"
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,86,* @since 2.0
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,88,public static DateTime now() {
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,89,return new DateTime();
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,93,* Obtains a {@code DateTime} set to the current system millisecond time
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,94,* using <code>ISOChronology</code> in the specified time zone.
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,96,"* @param zone  the time zone, not null"
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,97,"* @return the current date-time, not null"
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,98,* @since 2.0
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,100,public static DateTime now(DateTimeZone zone) {
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,101,if (zone == null) {
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,102,"throw new NullPointerException(""Zone must not be null"");"
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,104,return new DateTime(zone);
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,108,* Obtains a {@code DateTime} set to the current system millisecond time
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,109,* using the specified chronology.
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,111,"* @param chronology  the chronology, not null"
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,112,"* @return the current date-time, not null"
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,113,* @since 2.0
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,115,public static DateTime now(Chronology chronology) {
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,116,if (chronology == null) {
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,117,"throw new NullPointerException(""Chronology must not be null"");"
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,119,return new DateTime(chronology);
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,152,* @see #now()
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,165,* @see #now(DateTimeZone)
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,179,* @see #now(Chronology)
True,src/main/java/org/joda/time/Instant.java,src/main/java/org/joda/time/Instant.java,67,* Obtains an {@code Instant} set to the current system millisecond time.
True,src/main/java/org/joda/time/Instant.java,src/main/java/org/joda/time/Instant.java,69,"* @return the current instant, not null"
True,src/main/java/org/joda/time/Instant.java,src/main/java/org/joda/time/Instant.java,70,* @since 2.0
True,src/main/java/org/joda/time/Instant.java,src/main/java/org/joda/time/Instant.java,72,public static Instant now() {
True,src/main/java/org/joda/time/Instant.java,src/main/java/org/joda/time/Instant.java,73,return new Instant();
True,src/main/java/org/joda/time/Instant.java,src/main/java/org/joda/time/Instant.java,105,* @see #now()
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,116,* Obtains a {@code LocalDate} set to the current system millisecond time
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,117,* using <code>ISOChronology</code> in the default time zone.
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,119,"* @return the current date-time, not null"
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,120,* @since 2.0
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,122,public static LocalDate now() {
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,123,return new LocalDate();
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,127,* Obtains a {@code LocalDate} set to the current system millisecond time
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,128,* using <code>ISOChronology</code> in the specified time zone.
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,130,"* @param zone  the time zone, not null"
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,131,"* @return the current date-time, not null"
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,132,* @since 2.0
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,134,public static LocalDate now(DateTimeZone zone) {
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,135,if (zone == null) {
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,136,"throw new NullPointerException(""Zone must not be null"");"
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,138,return new LocalDate(zone);
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,142,* Obtains a {@code LocalDate} set to the current system millisecond time
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,143,* using the specified chronology.
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,145,"* @param chronology  the chronology, not null"
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,146,"* @return the current date-time, not null"
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,147,* @since 2.0
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,149,public static LocalDate now(Chronology chronology) {
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,150,if (chronology == null) {
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,151,"throw new NullPointerException(""Chronology must not be null"");"
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,153,return new LocalDate(chronology);
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,255,* @see #now()
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,269,* @see #now(DateTimeZone)
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,283,* @see #now(Chronology)
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,102,* Obtains a {@code LocalDateTime} set to the current system millisecond time
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,103,* using <code>ISOChronology</code> in the default time zone.
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,104,* The resulting object does not use the zone.
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,106,"* @return the current date, not null"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,107,* @since 2.0
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,109,public static LocalDateTime now() {
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,110,return new LocalDateTime();
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,114,* Obtains a {@code LocalDateTime} set to the current system millisecond time
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,115,* using <code>ISOChronology</code> in the specified time zone.
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,116,* The resulting object does not use the zone.
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,118,"* @param zone  the time zone, not null"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,119,"* @return the current date, not null"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,120,* @since 2.0
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,122,public static LocalDateTime now(DateTimeZone zone) {
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,123,if (zone == null) {
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,124,"throw new NullPointerException(""Zone must not be null"");"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,126,return new LocalDateTime(zone);
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,130,* Obtains a {@code LocalDateTime} set to the current system millisecond time
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,131,* using the specified chronology.
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,132,* The resulting object does not use the zone.
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,134,"* @param chronology  the chronology, not null"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,135,"* @return the current date, not null"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,136,* @since 2.0
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,138,public static LocalDateTime now(Chronology chronology) {
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,139,if (chronology == null) {
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,140,"throw new NullPointerException(""Chronology must not be null"");"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,142,return new LocalDateTime(chronology);
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,252,* @see #now()
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,266,* @see #now(DateTimeZone)
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,280,* @see #now(Chronology)
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,110,* Obtains a {@code LocalTime} set to the current system millisecond time
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,111,* using <code>ISOChronology</code> in the default time zone.
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,112,* The resulting object does not use the zone.
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,114,"* @return the current time, not null"
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,115,* @since 2.0
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,117,public static LocalTime now() {
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,118,return new LocalTime();
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,122,* Obtains a {@code LocalTime} set to the current system millisecond time
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,123,* using <code>ISOChronology</code> in the specified time zone.
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,124,* The resulting object does not use the zone.
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,126,"* @param zone  the time zone, not null"
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,127,"* @return the current time, not null"
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,128,* @since 2.0
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,130,public static LocalTime now(DateTimeZone zone) {
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,131,if (zone == null) {
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,132,"throw new NullPointerException(""Zone must not be null"");"
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,134,return new LocalTime(zone);
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,138,* Obtains a {@code LocalTime} set to the current system millisecond time
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,139,* using the specified chronology.
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,140,* The resulting object does not use the zone.
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,142,"* @param chronology  the chronology, not null"
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,143,"* @return the current time, not null"
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,144,* @since 2.0
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,146,public static LocalTime now(Chronology chronology) {
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,147,if (chronology == null) {
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,148,"throw new NullPointerException(""Chronology must not be null"");"
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,150,return new LocalTime(chronology);
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,285,* @see #now()
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,299,* @see #now(DateTimeZone)
True,src/main/java/org/joda/time/LocalTime.java,src/main/java/org/joda/time/LocalTime.java,313,* @see #now(Chronology)
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,95,* Obtains a {@code MonthDay} set to the current system millisecond time
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,96,* using <code>ISOChronology</code> in the default time zone.
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,97,* The resulting object does not use the zone.
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,99,"* @return the current month-day, not null"
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,100,* @since 2.0
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,102,public static MonthDay now() {
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,103,return new MonthDay();
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,107,* Obtains a {@code MonthDay} set to the current system millisecond time
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,108,* using <code>ISOChronology</code> in the specified time zone.
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,109,* The resulting object does not use the zone.
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,111,"* @param zone  the time zone, not null"
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,112,"* @return the current month-day, not null"
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,113,* @since 2.0
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,115,public static MonthDay now(DateTimeZone zone) {
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,116,if (zone == null) {
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,117,"throw new NullPointerException(""Zone must not be null"");"
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,119,return new MonthDay(zone);
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,123,* Obtains a {@code MonthDay} set to the current system millisecond time
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,124,* using the specified chronology.
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,125,* The resulting object does not use the zone.
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,127,"* @param chronology  the chronology, not null"
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,128,"* @return the current month-day, not null"
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,129,* @since 2.0
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,131,public static MonthDay now(Chronology chronology) {
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,132,if (chronology == null) {
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,133,"throw new NullPointerException(""Chronology must not be null"");"
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,135,return new MonthDay(chronology);
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,218,* @see #now()
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,233,* @see #now(DateTimeZone)
True,src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,248,* @see #now(Chronology)
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,99,* Obtains a {@code MutableDateTime} set to the current system millisecond time
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,100,* using <code>ISOChronology</code> in the default time zone.
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,102,"* @return the current date-time, not null"
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,103,* @since 2.0
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,105,public static MutableDateTime now() {
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,106,return new MutableDateTime();
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,110,* Obtains a {@code MutableDateTime} set to the current system millisecond time
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,111,* using <code>ISOChronology</code> in the specified time zone.
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,113,"* @param zone  the time zone, not null"
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,114,"* @return the current date-time, not null"
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,115,* @since 2.0
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,117,public static MutableDateTime now(DateTimeZone zone) {
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,118,if (zone == null) {
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,119,"throw new NullPointerException(""Zone must not be null"");"
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,121,return new MutableDateTime(zone);
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,125,* Obtains a {@code MutableDateTime} set to the current system millisecond time
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,126,* using the specified chronology.
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,128,"* @param chronology  the chronology, not null"
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,129,"* @return the current date-time, not null"
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,130,* @since 2.0
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,132,public static MutableDateTime now(Chronology chronology) {
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,133,if (chronology == null) {
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,134,"throw new NullPointerException(""Chronology must not be null"");"
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,136,return new MutableDateTime(chronology);
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,169,* @see #now()
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,182,* @see #now(DateTimeZone)
True,src/main/java/org/joda/time/MutableDateTime.java,src/main/java/org/joda/time/MutableDateTime.java,196,* @see #now(Chronology)
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,87,* Obtains a {@code YearMonth} set to the current system millisecond time
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,88,* using <code>ISOChronology</code> in the default time zone.
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,89,* The resulting object does not use the zone.
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,91,"* @return the current year-month, not null"
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,92,* @since 2.0
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,94,public static YearMonth now() {
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,95,return new YearMonth();
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,99,* Obtains a {@code YearMonth} set to the current system millisecond time
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,100,* using <code>ISOChronology</code> in the specified time zone.
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,101,* The resulting object does not use the zone.
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,103,"* @param zone  the time zone, not null"
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,104,"* @return the current year-month, not null"
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,105,* @since 2.0
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,107,public static YearMonth now(DateTimeZone zone) {
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,108,if (zone == null) {
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,109,"throw new NullPointerException(""Zone must not be null"");"
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,111,return new YearMonth(zone);
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,115,* Obtains a {@code YearMonth} set to the current system millisecond time
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,116,* using the specified chronology.
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,117,* The resulting object does not use the zone.
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,119,"* @param chronology  the chronology, not null"
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,120,"* @return the current year-month, not null"
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,121,* @since 2.0
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,123,public static YearMonth now(Chronology chronology) {
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,124,if (chronology == null) {
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,125,"throw new NullPointerException(""Chronology must not be null"");"
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,127,return new YearMonth(chronology);
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,210,* @see #now()
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,225,* @see #now(DateTimeZone)
True,src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,240,* @see #now(Chronology)
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,122,* Test now ()
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,124,public void test_now() throws Throwable {
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,125,DateMidnight test = DateMidnight.now();
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,126,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,127,"assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());"
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,128,"assertEquals(2002, test.getYear());"
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,129,"assertEquals(6, test.getMonthOfYear());"
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,130,"assertEquals(9, test.getDayOfMonth());"
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,134,* Test now (DateTimeZone)
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,136,public void test_now_DateTimeZone() throws Throwable {
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,137,DateMidnight test = DateMidnight.now(PARIS);
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,138,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,139,"assertEquals(TEST_TIME_NOW_PARIS, test.getMillis());"
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,143,* Test now (DateTimeZone=null)
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,145,public void test_now_nullDateTimeZone() throws Throwable {
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,146,try {
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,147,DateMidnight.now((DateTimeZone) null);
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,148,fail();
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,149,} catch (NullPointerException ex) {}
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,153,* Test now (Chronology)
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,155,public void test_now_Chronology() throws Throwable {
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,156,DateMidnight test = DateMidnight.now(GregorianChronology.getInstance());
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,157,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,158,"assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());"
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,162,* Test now (Chronology=null)
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,164,public void test_now_nullChronology() throws Throwable {
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,165,try {
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,166,DateMidnight.now((Chronology) null);
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,167,fail();
True,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,src/test/java/org/joda/time/TestDateMidnight_Constructors.java,168,} catch (NullPointerException ex) {}
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,109,* Test now ()
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,111,public void test_now() throws Throwable {
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,112,DateTime test = DateTime.now();
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,113,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,114,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,118,* Test now (DateTimeZone)
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,120,public void test_now_DateTimeZone() throws Throwable {
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,121,DateTime test = DateTime.now(PARIS);
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,122,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,123,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,127,* Test now (DateTimeZone=null)
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,129,public void test_now_nullDateTimeZone() throws Throwable {
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,130,try {
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,131,DateTime.now((DateTimeZone) null);
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,132,fail();
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,133,} catch (NullPointerException ex) {}
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,137,* Test now (Chronology)
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,139,public void test_now_Chronology() throws Throwable {
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,140,DateTime test = DateTime.now(GregorianChronology.getInstance());
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,141,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,142,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,146,* Test now (Chronology=null)
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,148,public void test_now_nullChronology() throws Throwable {
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,149,try {
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,150,DateTime.now((Chronology) null);
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,151,fail();
True,src/test/java/org/joda/time/TestDateTime_Constructors.java,src/test/java/org/joda/time/TestDateTime_Constructors.java,152,} catch (NullPointerException ex) {}
True,src/test/java/org/joda/time/TestInstant_Constructors.java,src/test/java/org/joda/time/TestInstant_Constructors.java,90,* Test now ()
True,src/test/java/org/joda/time/TestInstant_Constructors.java,src/test/java/org/joda/time/TestInstant_Constructors.java,92,public void test_now() throws Throwable {
True,src/test/java/org/joda/time/TestInstant_Constructors.java,src/test/java/org/joda/time/TestInstant_Constructors.java,93,Instant test = Instant.now();
True,src/test/java/org/joda/time/TestInstant_Constructors.java,src/test/java/org/joda/time/TestInstant_Constructors.java,94,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,src/test/java/org/joda/time/TestInstant_Constructors.java,src/test/java/org/joda/time/TestInstant_Constructors.java,95,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,139,"assertEquals(test, LocalDateTime.now());"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,157,"assertEquals(test, LocalDateTime.now(LONDON));"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,168,"assertEquals(test, LocalDateTime.now(PARIS));"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,194,"assertEquals(test, LocalDateTime.now(GREGORIAN_PARIS));"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,127,"assertEquals(test, LocalDate.now());"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,140,"assertEquals(test, LocalDate.now(LONDON));"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,147,"assertEquals(test, LocalDate.now(PARIS));"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,168,"assertEquals(test, LocalDate.now(GREGORIAN_PARIS));"
True,src/test/java/org/joda/time/TestLocalTime_Constructors.java,src/test/java/org/joda/time/TestLocalTime_Constructors.java,193,"assertEquals(test, LocalTime.now());"
True,src/test/java/org/joda/time/TestLocalTime_Constructors.java,src/test/java/org/joda/time/TestLocalTime_Constructors.java,208,"assertEquals(test, LocalTime.now(LONDON));"
True,src/test/java/org/joda/time/TestLocalTime_Constructors.java,src/test/java/org/joda/time/TestLocalTime_Constructors.java,216,"assertEquals(test, LocalTime.now(PARIS));"
True,src/test/java/org/joda/time/TestLocalTime_Constructors.java,src/test/java/org/joda/time/TestLocalTime_Constructors.java,240,"assertEquals(test, LocalTime.now(JULIAN_LONDON));"
True,src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,126,"assertEquals(test, MonthDay.now());"
True,src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,141,"assertEquals(test, MonthDay.now(LONDON));"
True,src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,147,"assertEquals(test, MonthDay.now(PARIS));"
True,src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,172,"assertEquals(test, MonthDay.now(GREGORIAN_PARIS));"
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,109,* Test now ()
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,111,public void test_now() throws Throwable {
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,112,MutableDateTime test = MutableDateTime.now();
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,113,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,114,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,118,* Test now (DateTimeZone)
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,120,public void test_now_DateTimeZone() throws Throwable {
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,121,MutableDateTime test = MutableDateTime.now(PARIS);
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,122,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,123,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,127,* Test now (DateTimeZone=null)
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,129,public void test_now_nullDateTimeZone() throws Throwable {
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,130,try {
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,131,MutableDateTime.now((DateTimeZone) null);
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,132,fail();
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,133,} catch (NullPointerException ex) {}
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,137,* Test now (Chronology)
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,139,public void test_now_Chronology() throws Throwable {
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,140,MutableDateTime test = MutableDateTime.now(GregorianChronology.getInstance());
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,141,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,142,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,146,* Test now (Chronology=null)
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,148,public void test_now_nullChronology() throws Throwable {
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,149,try {
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,150,MutableDateTime.now((Chronology) null);
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,151,fail();
True,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,src/test/java/org/joda/time/TestMutableDateTime_Constructors.java,152,} catch (NullPointerException ex) {}
True,src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,126,"assertEquals(test, YearMonth.now());"
True,src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,141,"assertEquals(test, YearMonth.now(LONDON));"
True,src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,147,"assertEquals(test, YearMonth.now(PARIS));"
True,src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,172,"assertEquals(test, YearMonth.now(GREGORIAN_PARIS));"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,473,ublic Duration multipliedBy(long factor)
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,473,public Duration multipliedBy(long multiplicant)
False,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,475,f(factor == 1)
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,475,if(multiplicant == 1)
False,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,477,"eturn new Duration(FieldUtils.safeMultiply(getMillis(), factor));"
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,477,"return new Duration(FieldUtils.safeMultiply(getMillis(), multiplicant));"
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,480,public Duration dividedBy(long divisor)
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,482,if(divisor == 1)
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,483,return this;
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,484,"return new Duration(FieldUtils.safeDivide(getMillis(), divisor));"
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,330,"public static long safeDivide(long dividend, long divisor)"
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,332,if(dividend == Long.MIN_VALUE && divisor == -1L)
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,333,"throw new ArithmeticException(""Multiplication overflows a long: "" + dividend + "" / "" + divisor);"
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,334,return dividend / divisor;
False,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,682,ublic void testMul_long1() {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,682,public void testMultipliedBy_long1() {
False,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,688,ublic void testMul_long2() {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,688,public void testMultipliedBy_long2() {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,695,public void testDividedBy_long1() {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,696,Duration test = new Duration(246L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,697,Duration result = test.dividedBy(2L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,698,"assertEquals(123L, result.getMillis());"
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,701,public void testDividedBy_long2() {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,702,Duration test = new Duration(123L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,703,Duration result = test.dividedBy(1L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,704,"assertSame(test, result);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,285,public void testSafeDivideLongLong() {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,286,"assertEquals(1L, FieldUtils.safeDivide(1L, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,288,"assertEquals(1L, FieldUtils.safeDivide(3L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,289,"assertEquals(0L, FieldUtils.safeDivide(1L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,290,"assertEquals(3L, FieldUtils.safeDivide(3L, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,292,"assertEquals(2L, FieldUtils.safeDivide(6L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,293,"assertEquals(-2L, FieldUtils.safeDivide(6L, -3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,294,"assertEquals(-2L, FieldUtils.safeDivide(-6L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,295,"assertEquals(2L, FieldUtils.safeDivide(-6L, -3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,297,"assertEquals(Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,298,"assertEquals(Long.MIN_VALUE, FieldUtils.safeDivide(Long.MIN_VALUE, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,299,"assertEquals(-Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, -1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,301,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,302,"FieldUtils.safeDivide(Long.MIN_VALUE, -1L);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,303,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,304,} catch (ArithmeticException e) {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,307,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,308,"FieldUtils.safeDivide(1L, 0L);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,309,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,310,} catch (ArithmeticException e) {

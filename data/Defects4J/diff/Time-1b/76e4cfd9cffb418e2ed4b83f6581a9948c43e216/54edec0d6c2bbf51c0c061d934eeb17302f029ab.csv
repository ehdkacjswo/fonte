is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,35,mport org.joda.time.format.DateTimeFormat;
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,95,/** Maximum offset. */
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,96,private static final int MAX_MILLIS = (86400 * 1000) - 1;
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,232, @param hoursOffset  the offset in hours from UTC
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,233,"* @param hoursOffset  the offset in hours from UTC, from -23 to +23"
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,245, The minutes value is always positive and in the range 0 to 59.
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,246," If constructed with the values (-2, 30), the resulting zone is '-02:30'."
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,246,* The hours value must be in the range -23 to +23.
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,247,* The minutes value must be in the range -59 to +59.
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,248,* The following combinations of sign for the hour and minute are possible:
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,249,* <pre>
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,250,*  Hour    Minute    Example    Result
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,252,"*  +ve     +ve       (2, 15)    +02:15"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,253,"*  +ve     zero      (2, 0)     +02:00"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,254,"*  +ve     -ve       (2, -15)   IllegalArgumentException"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,256,"*  zero    +ve       (0, 15)    +00:15"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,257,"*  zero    zero      (0, 0)     +00:00"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,258,"*  zero    -ve       (0, -15)   -00:15"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,260,"*  -ve     +ve       (-2, 15)   -02:15"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,261,"*  -ve     zero      (-2, 0)    -02:00"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,262,"*  -ve     -ve       (-2, -15)  -02:15"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,263,* </pre>
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,264,"* Note that in versions before 2.3, the minutes had to be zero or positive."
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,248, @param hoursOffset  the offset in hours from UTC
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,249," @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,266,"* @param hoursOffset  the offset in hours from UTC, from -23 to +23"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,267,"* @param minutesOffset  the offset in minutes from UTC, from -59 to +59"
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,251, @throws IllegalArgumentException if the offset or minute is too large or too small
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,269,"* @throws IllegalArgumentException if any value is out of range, the minutes are negative"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,270,"*  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000"
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,257,f (minutesOffset < 0 || minutesOffset > 59) {
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,276,if (hoursOffset < -23 || hoursOffset > 23) {
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,277,"throw new IllegalArgumentException(""Hours out of range: "" + hoursOffset);"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,279,if (minutesOffset < -59 || minutesOffset > 59) {
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,282,if (hoursOffset > 0 && minutesOffset < 0) {
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,283,"throw new IllegalArgumentException(""Positive hours must not have negative minutes: "" + minutesOffset);"
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,262,"nt hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,287,int hoursInMinutes = hoursOffset * 60;
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,264,"inutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,289,minutesOffset = hoursInMinutes - Math.abs(minutesOffset);
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,266,"inutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,291,minutesOffset = hoursInMinutes + minutesOffset;
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,278, @param millisOffset  the offset in millis from UTC
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,303,"* @param millisOffset  the offset in millis from UTC, from -23:59:59.999 to +23:59:59.999"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,307,if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,308,"throw new IllegalArgumentException(""Millis out of range: "" + millisOffset);"
False,src/test/java/org/joda/time/TestBaseSingleFieldPeriod.java,src/test/java/org/joda/time/TestBaseSingleFieldPeriod.java,2,  Copyright 2001-2009 Stephen Colebourne
True,src/test/java/org/joda/time/TestBaseSingleFieldPeriod.java,src/test/java/org/joda/time/TestBaseSingleFieldPeriod.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestBaseSingleFieldPeriod.java,src/test/java/org/joda/time/TestBaseSingleFieldPeriod.java,83,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,2,  Copyright 2001-2012 Stephen Colebourne
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,63,"rivate static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,148,lass cls = DateTimeUtils.class;
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,147,Class<?> cls = DateTimeUtils.class;
False,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,155,ateTimeUtils utils = new DateTimeUtils() {};
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,154,new DateTimeUtils() {};
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,370,private static final long serialVersionUID = 1L;
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,428,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,452,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,2,  Copyright 2001-2011 Stephen Colebourne
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,23,mport java.lang.reflect.Method;
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,306,"ssertEquals(DateTimeZone.forID(""+03:15""), DateTimeZone.forOffsetHoursMinutes(3, 15));"
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,307,"ssertEquals(DateTimeZone.forID(""-02:00""), DateTimeZone.forOffsetHoursMinutes(-2, 0));"
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,308,"ssertEquals(DateTimeZone.forID(""-02:30""), DateTimeZone.forOffsetHoursMinutes(-2, 30));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,305,"assertEquals(DateTimeZone.forID(""+23:59""), DateTimeZone.forOffsetHoursMinutes(23, 59));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,307,"assertEquals(DateTimeZone.forID(""+02:15""), DateTimeZone.forOffsetHoursMinutes(2, 15));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,308,"assertEquals(DateTimeZone.forID(""+02:00""), DateTimeZone.forOffsetHoursMinutes(2, 0));"
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,310,"ateTimeZone.forOffsetHoursMinutes(2, 60);"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,310,"DateTimeZone.forOffsetHoursMinutes(2, -15);"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,314,"assertEquals(DateTimeZone.forID(""+00:15""), DateTimeZone.forOffsetHoursMinutes(0, 15));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,315,"assertEquals(DateTimeZone.forID(""+00:00""), DateTimeZone.forOffsetHoursMinutes(0, 0));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,316,"assertEquals(DateTimeZone.forID(""-00:15""), DateTimeZone.forOffsetHoursMinutes(0, -15));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,318,"assertEquals(DateTimeZone.forID(""-02:00""), DateTimeZone.forOffsetHoursMinutes(-2, 0));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,319,"assertEquals(DateTimeZone.forID(""-02:15""), DateTimeZone.forOffsetHoursMinutes(-2, -15));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,320,"assertEquals(DateTimeZone.forID(""-02:15""), DateTimeZone.forOffsetHoursMinutes(-2, 15));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,322,"assertEquals(DateTimeZone.forID(""-23:59""), DateTimeZone.forOffsetHoursMinutes(-23, 59));"
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,314,"ateTimeZone.forOffsetHoursMinutes(-2, 60);"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,324,"DateTimeZone.forOffsetHoursMinutes(2, 60);"
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,318,"ateTimeZone.forOffsetHoursMinutes(2, -1);"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,328,"DateTimeZone.forOffsetHoursMinutes(-2, 60);"
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,322,"ateTimeZone.forOffsetHoursMinutes(-2, -1);"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,332,"DateTimeZone.forOffsetHoursMinutes(24, 0);"
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,326,"ateTimeZone.forOffsetHoursMinutes(999999, 0);"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,336,"DateTimeZone.forOffsetHoursMinutes(-24, 0);"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,344,"assertEquals(DateTimeZone.forID(""+23:59:59.999""), DateTimeZone.forOffsetMillis((24 * 60 * 60 * 1000) - 1));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,347,"assertEquals(DateTimeZone.forID(""-23:59:59.999""), DateTimeZone.forOffsetMillis((-24 * 60 * 60 * 1000) + 1));"
False,src/test/java/org/joda/time/TestDateTime_Basics.java,src/test/java/org/joda/time/TestDateTime_Basics.java,2,  Copyright 2001-2009 Stephen Colebourne
True,src/test/java/org/joda/time/TestDateTime_Basics.java,src/test/java/org/joda/time/TestDateTime_Basics.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestDateTime_Basics.java,src/test/java/org/joda/time/TestDateTime_Basics.java,321,private static final long serialVersionUID = 1L;
True,src/test/java/org/joda/time/TestDateTime_Basics.java,src/test/java/org/joda/time/TestDateTime_Basics.java,710,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestDateTime_Basics.java,src/test/java/org/joda/time/TestDateTime_Basics.java,717,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestDateTime_Basics.java,src/test/java/org/joda/time/TestDateTime_Basics.java,724,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestDateTime_Basics.java,src/test/java/org/joda/time/TestDateTime_Basics.java,854,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestDateTime_Basics.java,src/test/java/org/joda/time/TestDateTime_Basics.java,1201,private static final long serialVersionUID = 1L;
True,src/test/java/org/joda/time/TestDateTime_Properties.java,src/test/java/org/joda/time/TestDateTime_Properties.java,311,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestDays.java,src/test/java/org/joda/time/TestDays.java,98,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestHours.java,src/test/java/org/joda/time/TestHours.java,2,  Copyright 2001-2006 Stephen Colebourne
True,src/test/java/org/joda/time/TestHours.java,src/test/java/org/joda/time/TestHours.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestHours.java,src/test/java/org/joda/time/TestHours.java,102,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestIllegalFieldValueException.java,src/test/java/org/joda/time/TestIllegalFieldValueException.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/TestIllegalFieldValueException.java,src/test/java/org/joda/time/TestIllegalFieldValueException.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestIllegalFieldValueException.java,src/test/java/org/joda/time/TestIllegalFieldValueException.java,260,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,2,  Copyright 2001-2010 Stephen Colebourne
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,51,rivate static final int OFFSET = 1;
False,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,57,rivate static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
False,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,59,rivate static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
False,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,62,rivate static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
False,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,65,rivate static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
False,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,369,est1.compareTo(new YearMonthDay());
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,364,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,365,YearMonthDay ymd = new YearMonthDay();
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,366,test1.compareTo(ymd);
False,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,373,est1.compareTo(new TimeOfDay());
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,370,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,371,TimeOfDay tod = new TimeOfDay();
True,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,src/test/java/org/joda/time/TestLocalDateTime_Basics.java,372,test1.compareTo(tod);
False,src/test/java/org/joda/time/TestLocalDate_Basics.java,src/test/java/org/joda/time/TestLocalDate_Basics.java,2,  Copyright 2001-2010 Stephen Colebourne
True,src/test/java/org/joda/time/TestLocalDate_Basics.java,src/test/java/org/joda/time/TestLocalDate_Basics.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestLocalDate_Basics.java,src/test/java/org/joda/time/TestLocalDate_Basics.java,241,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestLocalDate_Basics.java,src/test/java/org/joda/time/TestLocalDate_Basics.java,322,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestLocalTime_Basics.java,src/test/java/org/joda/time/TestLocalTime_Basics.java,2,  Copyright 2001-2009 Stephen Colebourne
True,src/test/java/org/joda/time/TestLocalTime_Basics.java,src/test/java/org/joda/time/TestLocalTime_Basics.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestLocalTime_Basics.java,src/test/java/org/joda/time/TestLocalTime_Basics.java,228,private static final long serialVersionUID = 1L;
True,src/test/java/org/joda/time/TestLocalTime_Basics.java,src/test/java/org/joda/time/TestLocalTime_Basics.java,242,private static final long serialVersionUID = 1L;
True,src/test/java/org/joda/time/TestLocalTime_Basics.java,src/test/java/org/joda/time/TestLocalTime_Basics.java,268,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestLocalTime_Basics.java,src/test/java/org/joda/time/TestLocalTime_Basics.java,313,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestLocalTime_Constructors.java,src/test/java/org/joda/time/TestLocalTime_Constructors.java,2,  Copyright 2001-2006 Stephen Colebourne
True,src/test/java/org/joda/time/TestLocalTime_Constructors.java,src/test/java/org/joda/time/TestLocalTime_Constructors.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestLocalTime_Constructors.java,src/test/java/org/joda/time/TestLocalTime_Constructors.java,488,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestMinutes.java,src/test/java/org/joda/time/TestMinutes.java,2,  Copyright 2001-2006 Stephen Colebourne
True,src/test/java/org/joda/time/TestMinutes.java,src/test/java/org/joda/time/TestMinutes.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestMinutes.java,src/test/java/org/joda/time/TestMinutes.java,92,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestMonths.java,src/test/java/org/joda/time/TestMonths.java,108,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,2,  Copyright 2001-2009 Stephen Colebourne
True,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,264,private static final long serialVersionUID = 1L;
False,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,429,ateMidnight test = new DateMidnight(TEST_TIME_NOW);
False,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,430,"ssertEquals(""2002 00"", test.toString(DateTimeFormat.forPattern(""yyyy HH"")));"
False,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,431,"ssertEquals(""2002-06-09T00:00:00.000+01:00"", test.toString((DateTimeFormatter) null));"
True,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,430,MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);
True,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,431,"assertEquals(""2002 01"", test.toString(DateTimeFormat.forPattern(""yyyy HH"")));"
True,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,432,"assertEquals(""2002-06-09T01:00:00.000+01:00"", test.toString((DateTimeFormatter) null));"
True,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,src/test/java/org/joda/time/TestMutableDateTime_Basics.java,734,private static final long serialVersionUID = 1L;
False,src/test/java/org/joda/time/TestPartial_Basics.java,src/test/java/org/joda/time/TestPartial_Basics.java,2,  Copyright 2001-2009 Stephen Colebourne
True,src/test/java/org/joda/time/TestPartial_Basics.java,src/test/java/org/joda/time/TestPartial_Basics.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/test/java/org/joda/time/TestPartial_Basics.java,src/test/java/org/joda/time/TestPartial_Basics.java,44,rivate static final int OFFSET = 1;
False,src/test/java/org/joda/time/TestPartial_Basics.java,src/test/java/org/joda/time/TestPartial_Basics.java,46,rivate static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
False,src/test/java/org/joda/time/TestPartial_Basics.java,src/test/java/org/joda/time/TestPartial_Basics.java,49,rivate static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
False,src/test/java/org/joda/time/TestPartial_Basics.java,src/test/java/org/joda/time/TestPartial_Basics.java,50,rivate static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
False,src/test/java/org/joda/time/TestPartial_Basics.java,src/test/java/org/joda/time/TestPartial_Basics.java,51,rivate static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
False,src/test/java/org/joda/time/TestPartial_Basics.java,src/test/java/org/joda/time/TestPartial_Basics.java,53,rivate static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
False,src/test/java/org/joda/time/TestPartial_Basics.java,src/test/java/org/joda/time/TestPartial_Basics.java,64,rivate long TEST_TIME1 =
False,src/test/java/org/joda/time/TestPartial_Basics.java,src/test/java/org/joda/time/TestPartial_Basics.java,65,L * DateTimeConstants.MILLIS_PER_HOUR
False,src/test/java/org/joda/time/TestPartial_Basics.java,src/test/java/org/joda/time/TestPartial_Basics.java,66, 2L * DateTimeConstants.MILLIS_PER_MINUTE
False,src/test/java/org/joda/time/TestPartial_Basics.java,src/test/java/org/joda/time/TestPartial_Basics.java,67, 3L * DateTimeConstants.MILLIS_PER_SECOND
False,src/test/java/org/joda/time/TestPartial_Basics.java,src/test/java/org/joda/time/TestPartial_Basics.java,68, 4L;
True,src/test/java/org/joda/time/TestPartial_Basics.java,src/test/java/org/joda/time/TestPartial_Basics.java,182,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestPartial_Basics.java,src/test/java/org/joda/time/TestPartial_Basics.java,208,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestPartial_Constructors.java,src/test/java/org/joda/time/TestPartial_Constructors.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/TestPartial_Constructors.java,src/test/java/org/joda/time/TestPartial_Constructors.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/test/java/org/joda/time/TestPartial_Constructors.java,src/test/java/org/joda/time/TestPartial_Constructors.java,38,rivate static final int OFFSET = 1;
False,src/test/java/org/joda/time/TestPartial_Constructors.java,src/test/java/org/joda/time/TestPartial_Constructors.java,46,rivate long TEST_TIME1 =
False,src/test/java/org/joda/time/TestPartial_Constructors.java,src/test/java/org/joda/time/TestPartial_Constructors.java,47,L * DateTimeConstants.MILLIS_PER_HOUR
False,src/test/java/org/joda/time/TestPartial_Constructors.java,src/test/java/org/joda/time/TestPartial_Constructors.java,48, 2L * DateTimeConstants.MILLIS_PER_MINUTE
False,src/test/java/org/joda/time/TestPartial_Constructors.java,src/test/java/org/joda/time/TestPartial_Constructors.java,49, 3L * DateTimeConstants.MILLIS_PER_SECOND
False,src/test/java/org/joda/time/TestPartial_Constructors.java,src/test/java/org/joda/time/TestPartial_Constructors.java,50, 4L;
False,src/test/java/org/joda/time/TestPartial_Constructors.java,src/test/java/org/joda/time/TestPartial_Constructors.java,52,rivate long TEST_TIME2 =
False,src/test/java/org/joda/time/TestPartial_Constructors.java,src/test/java/org/joda/time/TestPartial_Constructors.java,53,L * DateTimeConstants.MILLIS_PER_DAY
False,src/test/java/org/joda/time/TestPartial_Constructors.java,src/test/java/org/joda/time/TestPartial_Constructors.java,54, 5L * DateTimeConstants.MILLIS_PER_HOUR
False,src/test/java/org/joda/time/TestPartial_Constructors.java,src/test/java/org/joda/time/TestPartial_Constructors.java,55, 6L * DateTimeConstants.MILLIS_PER_MINUTE
False,src/test/java/org/joda/time/TestPartial_Constructors.java,src/test/java/org/joda/time/TestPartial_Constructors.java,56, 7L * DateTimeConstants.MILLIS_PER_SECOND
False,src/test/java/org/joda/time/TestPartial_Constructors.java,src/test/java/org/joda/time/TestPartial_Constructors.java,57, 8L;
True,src/test/java/org/joda/time/TestPartial_Constructors.java,src/test/java/org/joda/time/TestPartial_Constructors.java,392,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestPeriod_Constructors.java,src/test/java/org/joda/time/TestPeriod_Constructors.java,2,  Copyright 2001-2007 Stephen Colebourne
True,src/test/java/org/joda/time/TestPeriod_Constructors.java,src/test/java/org/joda/time/TestPeriod_Constructors.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestPeriod_Constructors.java,src/test/java/org/joda/time/TestPeriod_Constructors.java,768,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestPeriod_Constructors.java,src/test/java/org/joda/time/TestPeriod_Constructors.java,784,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestPeriod_Constructors.java,src/test/java/org/joda/time/TestPeriod_Constructors.java,815,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestPeriod_Constructors.java,src/test/java/org/joda/time/TestPeriod_Constructors.java,825,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestPeriod_Constructors.java,src/test/java/org/joda/time/TestPeriod_Constructors.java,835,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestPeriod_Constructors.java,src/test/java/org/joda/time/TestPeriod_Constructors.java,845,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestPeriod_Constructors.java,src/test/java/org/joda/time/TestPeriod_Constructors.java,874,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestPeriod_Constructors.java,src/test/java/org/joda/time/TestPeriod_Constructors.java,890,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestPeriod_Constructors.java,src/test/java/org/joda/time/TestPeriod_Constructors.java,921,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestPeriod_Constructors.java,src/test/java/org/joda/time/TestPeriod_Constructors.java,931,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestPeriod_Constructors.java,src/test/java/org/joda/time/TestPeriod_Constructors.java,941,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestPeriod_Constructors.java,src/test/java/org/joda/time/TestPeriod_Constructors.java,951,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestPeriod_Constructors.java,src/test/java/org/joda/time/TestPeriod_Constructors.java,1456,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestPeriod_Constructors.java,src/test/java/org/joda/time/TestPeriod_Constructors.java,1477,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestPeriod_Constructors.java,src/test/java/org/joda/time/TestPeriod_Constructors.java,1490,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestPeriod_Constructors.java,src/test/java/org/joda/time/TestPeriod_Constructors.java,1500,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestSeconds.java,src/test/java/org/joda/time/TestSeconds.java,2,  Copyright 2001-2006 Stephen Colebourne
True,src/test/java/org/joda/time/TestSeconds.java,src/test/java/org/joda/time/TestSeconds.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestSeconds.java,src/test/java/org/joda/time/TestSeconds.java,92,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestSerialization.java,src/test/java/org/joda/time/TestSerialization.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/TestSerialization.java,src/test/java/org/joda/time/TestSerialization.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestSerialization.java,src/test/java/org/joda/time/TestSerialization.java,197,"@SuppressWarnings(""deprecation"")"
True,src/test/java/org/joda/time/TestSerialization.java,src/test/java/org/joda/time/TestSerialization.java,204,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,2,  Copyright 2001-2009 Stephen Colebourne
True,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,40,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,50,rivate static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
False,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,51,rivate static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
False,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,52,rivate static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
False,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,54,rivate static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
False,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,55,rivate static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
False,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,65,rivate long TEST_TIME1 =
False,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,66,L * DateTimeConstants.MILLIS_PER_HOUR
False,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,67, 2L * DateTimeConstants.MILLIS_PER_MINUTE
False,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,68, 3L * DateTimeConstants.MILLIS_PER_SECOND
False,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,src/test/java/org/joda/time/TestTimeOfDay_Basics.java,69, 4L;
False,src/test/java/org/joda/time/TestTimeOfDay_Constructors.java,src/test/java/org/joda/time/TestTimeOfDay_Constructors.java,2,  Copyright 2001-2006 Stephen Colebourne
True,src/test/java/org/joda/time/TestTimeOfDay_Constructors.java,src/test/java/org/joda/time/TestTimeOfDay_Constructors.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestTimeOfDay_Constructors.java,src/test/java/org/joda/time/TestTimeOfDay_Constructors.java,35,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestTimeOfDay_Properties.java,src/test/java/org/joda/time/TestTimeOfDay_Properties.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/TestTimeOfDay_Properties.java,src/test/java/org/joda/time/TestTimeOfDay_Properties.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestTimeOfDay_Properties.java,src/test/java/org/joda/time/TestTimeOfDay_Properties.java,28,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestTimeOfDay_Properties.java,src/test/java/org/joda/time/TestTimeOfDay_Properties.java,31,"rivate static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,src/test/java/org/joda/time/TestWeeks.java,src/test/java/org/joda/time/TestWeeks.java,2,  Copyright 2001-2006 Stephen Colebourne
True,src/test/java/org/joda/time/TestWeeks.java,src/test/java/org/joda/time/TestWeeks.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestWeeks.java,src/test/java/org/joda/time/TestWeeks.java,89,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,2,  Copyright 2001-2009 Stephen Colebourne
True,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,40,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,45,rivate static final int OFFSET = 1;
False,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,50,rivate static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
False,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,51,rivate static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
False,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,52,rivate static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
False,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,54,rivate static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
False,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,55,rivate static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
False,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,62,rivate long TEST_TIME1 =
False,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,63,31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
False,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,64, 12L * DateTimeConstants.MILLIS_PER_HOUR
False,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,65, 24L * DateTimeConstants.MILLIS_PER_MINUTE;
False,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,67,rivate long TEST_TIME2 =
False,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,68,365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
False,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,69, 14L * DateTimeConstants.MILLIS_PER_HOUR
False,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,src/test/java/org/joda/time/TestYearMonthDay_Basics.java,70, 28L * DateTimeConstants.MILLIS_PER_MINUTE;
False,src/test/java/org/joda/time/TestYearMonthDay_Constructors.java,src/test/java/org/joda/time/TestYearMonthDay_Constructors.java,2,  Copyright 2001-2006 Stephen Colebourne
True,src/test/java/org/joda/time/TestYearMonthDay_Constructors.java,src/test/java/org/joda/time/TestYearMonthDay_Constructors.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/test/java/org/joda/time/TestYearMonthDay_Constructors.java,src/test/java/org/joda/time/TestYearMonthDay_Constructors.java,25,mport org.joda.time.chrono.BuddhistChronology;
False,src/test/java/org/joda/time/TestYearMonthDay_Constructors.java,src/test/java/org/joda/time/TestYearMonthDay_Constructors.java,26,mport org.joda.time.chrono.CopticChronology;
True,src/test/java/org/joda/time/TestYearMonthDay_Constructors.java,src/test/java/org/joda/time/TestYearMonthDay_Constructors.java,33,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestYearMonthDay_Constructors.java,src/test/java/org/joda/time/TestYearMonthDay_Constructors.java,39,rivate static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
False,src/test/java/org/joda/time/TestYearMonthDay_Constructors.java,src/test/java/org/joda/time/TestYearMonthDay_Constructors.java,41,rivate static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
False,src/test/java/org/joda/time/TestYearMonthDay_Properties.java,src/test/java/org/joda/time/TestYearMonthDay_Properties.java,2,  Copyright 2001-2010 Stephen Colebourne
True,src/test/java/org/joda/time/TestYearMonthDay_Properties.java,src/test/java/org/joda/time/TestYearMonthDay_Properties.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestYearMonthDay_Properties.java,src/test/java/org/joda/time/TestYearMonthDay_Properties.java,32,"@SuppressWarnings(""deprecation"")"
False,src/test/java/org/joda/time/TestYears.java,src/test/java/org/joda/time/TestYears.java,2,  Copyright 2001-2006 Stephen Colebourne
True,src/test/java/org/joda/time/TestYears.java,src/test/java/org/joda/time/TestYears.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestYears.java,src/test/java/org/joda/time/TestYears.java,89,"@SuppressWarnings(""deprecation"")"

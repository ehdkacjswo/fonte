is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,450,* Is this days instance greater than the specified number of days.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,452,"* @param other  the other period, null means zero"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,453,* @return true if this days instance is greater than the specified one
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,455,public boolean isGreaterThan(Days other) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,456,if (other == null) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,457,return getValue() > 0;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,459,return getValue() > other.getValue();
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,463,* Is this days instance less than the specified number of days.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,465,"* @param other  the other period, null means zero"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,466,* @return true if this days instance is less than the specified one
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,468,public boolean isLessThan(Days other) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,469,if (other == null) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,470,return getValue() < 0;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,472,return getValue() < other.getValue();
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,449,* Is this hours instance greater than the specified number of hours.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,451,"* @param other  the other period, null means zero"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,452,* @return true if this hours instance is greater than the specified one
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,454,public boolean isGreaterThan(Hours other) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,455,if (other == null) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,456,return getValue() > 0;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,458,return getValue() > other.getValue();
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,462,* Is this hours instance less than the specified number of hours.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,464,"* @param other  the other period, null means zero"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,465,* @return true if this hours instance is less than the specified one
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,467,public boolean isLessThan(Hours other) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,468,if (other == null) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,469,return getValue() < 0;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,471,return getValue() < other.getValue();
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,430,* Is this minutes instance greater than the specified number of minutes.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,432,"* @param other  the other period, null means zero"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,433,* @return true if this minutes instance is greater than the specified one
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,435,public boolean isGreaterThan(Minutes other) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,436,if (other == null) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,437,return getValue() > 0;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,439,return getValue() > other.getValue();
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,443,* Is this minutes instance less than the specified number of minutes.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,445,"* @param other  the other period, null means zero"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,446,* @return true if this minutes instance is less than the specified one
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,448,public boolean isLessThan(Minutes other) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,449,if (other == null) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,450,return getValue() < 0;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,452,return getValue() < other.getValue();
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,356,* Is this months instance greater than the specified number of months.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,358,"* @param other  the other period, null means zero"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,359,* @return true if this months instance is greater than the specified one
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,361,public boolean isGreaterThan(Months other) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,362,if (other == null) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,363,return getValue() > 0;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,365,return getValue() > other.getValue();
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,369,* Is this months instance less than the specified number of months.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,371,"* @param other  the other period, null means zero"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,372,* @return true if this months instance is less than the specified one
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,374,public boolean isLessThan(Months other) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,375,if (other == null) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,376,return getValue() < 0;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,378,return getValue() < other.getValue();
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,430,* Is this seconds instance greater than the specified number of seconds.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,432,"* @param other  the other period, null means zero"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,433,* @return true if this seconds instance is greater than the specified one
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,435,public boolean isGreaterThan(Seconds other) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,436,if (other == null) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,437,return getValue() > 0;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,439,return getValue() > other.getValue();
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,443,* Is this seconds instance less than the specified number of seconds.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,445,"* @param other  the other period, null means zero"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,446,* @return true if this seconds instance is less than the specified one
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,448,public boolean isLessThan(Seconds other) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,449,if (other == null) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,450,return getValue() < 0;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,452,return getValue() < other.getValue();
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,436,* Is this weeks instance greater than the specified number of weeks.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,438,"* @param other  the other period, null means zero"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,439,* @return true if this weeks instance is greater than the specified one
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,441,public boolean isGreaterThan(Weeks other) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,442,if (other == null) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,443,return getValue() > 0;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,445,return getValue() > other.getValue();
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,449,* Is this weeks instance less than the specified number of weeks.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,451,"* @param other  the other period, null means zero"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,452,* @return true if this weeks instance is less than the specified one
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,454,public boolean isLessThan(Weeks other) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,455,if (other == null) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,456,return getValue() < 0;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,458,return getValue() < other.getValue();
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,320,* Is this years instance greater than the specified number of years.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,322,"* @param other  the other period, null means zero"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,323,* @return true if this years instance is greater than the specified one
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,325,public boolean isGreaterThan(Years other) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,326,if (other == null) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,327,return getValue() > 0;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,329,return getValue() > other.getValue();
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,333,* Is this years instance less than the specified number of years.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,335,"* @param other  the other period, null means zero"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,336,* @return true if this years instance is less than the specified one
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,338,public boolean isLessThan(Years other) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,339,if (other == null) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,340,return getValue() < 0;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,342,return getValue() < other.getValue();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,177,public void testIsGreaterThan() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,178,"assertEquals(true, Days.THREE.isGreaterThan(Days.TWO));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,179,"assertEquals(false, Days.THREE.isGreaterThan(Days.THREE));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,180,"assertEquals(false, Days.TWO.isGreaterThan(Days.THREE));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,181,"assertEquals(true, Days.ONE.isGreaterThan(null));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,182,"assertEquals(false, Days.days(-1).isGreaterThan(null));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,185,public void testIsLessThan() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,186,"assertEquals(false, Days.THREE.isLessThan(Days.TWO));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,187,"assertEquals(false, Days.THREE.isLessThan(Days.THREE));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,188,"assertEquals(true, Days.TWO.isLessThan(Days.THREE));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,189,"assertEquals(false, Days.ONE.isLessThan(null));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,190,"assertEquals(true, Days.days(-1).isLessThan(null));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,179,public void testIsGreaterThan() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,180,"assertEquals(true, Hours.THREE.isGreaterThan(Hours.TWO));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,181,"assertEquals(false, Hours.THREE.isGreaterThan(Hours.THREE));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,182,"assertEquals(false, Hours.TWO.isGreaterThan(Hours.THREE));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,183,"assertEquals(true, Hours.ONE.isGreaterThan(null));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,184,"assertEquals(false, Hours.hours(-1).isGreaterThan(null));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,187,public void testIsLessThan() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,188,"assertEquals(false, Hours.THREE.isLessThan(Hours.TWO));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,189,"assertEquals(false, Hours.THREE.isLessThan(Hours.THREE));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,190,"assertEquals(true, Hours.TWO.isLessThan(Hours.THREE));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,191,"assertEquals(false, Hours.ONE.isLessThan(null));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,192,"assertEquals(true, Hours.hours(-1).isLessThan(null));"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,169,public void testIsGreaterThan() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,170,"assertEquals(true, Minutes.THREE.isGreaterThan(Minutes.TWO));"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,171,"assertEquals(false, Minutes.THREE.isGreaterThan(Minutes.THREE));"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,172,"assertEquals(false, Minutes.TWO.isGreaterThan(Minutes.THREE));"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,173,"assertEquals(true, Minutes.ONE.isGreaterThan(null));"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,174,"assertEquals(false, Minutes.minutes(-1).isGreaterThan(null));"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,177,public void testIsLessThan() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,178,"assertEquals(false, Minutes.THREE.isLessThan(Minutes.TWO));"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,179,"assertEquals(false, Minutes.THREE.isLessThan(Minutes.THREE));"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,180,"assertEquals(true, Minutes.TWO.isLessThan(Minutes.THREE));"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,181,"assertEquals(false, Minutes.ONE.isLessThan(null));"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,182,"assertEquals(true, Minutes.minutes(-1).isLessThan(null));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,169,public void testIsGreaterThan() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,170,"assertEquals(true, Months.THREE.isGreaterThan(Months.TWO));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,171,"assertEquals(false, Months.THREE.isGreaterThan(Months.THREE));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,172,"assertEquals(false, Months.TWO.isGreaterThan(Months.THREE));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,173,"assertEquals(true, Months.ONE.isGreaterThan(null));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,174,"assertEquals(false, Months.months(-1).isGreaterThan(null));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,177,public void testIsLessThan() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,178,"assertEquals(false, Months.THREE.isLessThan(Months.TWO));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,179,"assertEquals(false, Months.THREE.isLessThan(Months.THREE));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,180,"assertEquals(true, Months.TWO.isLessThan(Months.THREE));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,181,"assertEquals(false, Months.ONE.isLessThan(null));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,182,"assertEquals(true, Months.months(-1).isLessThan(null));"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,166,public void testIsGreaterThan() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,167,"assertEquals(true, Seconds.THREE.isGreaterThan(Seconds.TWO));"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,168,"assertEquals(false, Seconds.THREE.isGreaterThan(Seconds.THREE));"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,169,"assertEquals(false, Seconds.TWO.isGreaterThan(Seconds.THREE));"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,170,"assertEquals(true, Seconds.ONE.isGreaterThan(null));"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,171,"assertEquals(false, Seconds.seconds(-1).isGreaterThan(null));"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,174,public void testIsLessThan() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,175,"assertEquals(false, Seconds.THREE.isLessThan(Seconds.TWO));"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,176,"assertEquals(false, Seconds.THREE.isLessThan(Seconds.THREE));"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,177,"assertEquals(true, Seconds.TWO.isLessThan(Seconds.THREE));"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,178,"assertEquals(false, Seconds.ONE.isLessThan(null));"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,179,"assertEquals(true, Seconds.seconds(-1).isLessThan(null));"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,168,public void testIsGreaterThan() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,169,"assertEquals(true, Weeks.THREE.isGreaterThan(Weeks.TWO));"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,170,"assertEquals(false, Weeks.THREE.isGreaterThan(Weeks.THREE));"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,171,"assertEquals(false, Weeks.TWO.isGreaterThan(Weeks.THREE));"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,172,"assertEquals(true, Weeks.ONE.isGreaterThan(null));"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,173,"assertEquals(false, Weeks.weeks(-1).isGreaterThan(null));"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,176,public void testIsLessThan() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,177,"assertEquals(false, Weeks.THREE.isLessThan(Weeks.TWO));"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,178,"assertEquals(false, Weeks.THREE.isLessThan(Weeks.THREE));"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,179,"assertEquals(true, Weeks.TWO.isLessThan(Weeks.THREE));"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,180,"assertEquals(false, Weeks.ONE.isLessThan(null));"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,181,"assertEquals(true, Weeks.weeks(-1).isLessThan(null));"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,151,public void testIsGreaterThan() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,152,"assertEquals(true, Years.THREE.isGreaterThan(Years.TWO));"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,153,"assertEquals(false, Years.THREE.isGreaterThan(Years.THREE));"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,154,"assertEquals(false, Years.TWO.isGreaterThan(Years.THREE));"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,155,"assertEquals(true, Years.ONE.isGreaterThan(null));"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,156,"assertEquals(false, Years.years(-1).isGreaterThan(null));"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,159,public void testIsLessThan() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,160,"assertEquals(false, Years.THREE.isLessThan(Years.TWO));"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,161,"assertEquals(false, Years.THREE.isLessThan(Years.THREE));"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,162,"assertEquals(true, Years.TWO.isLessThan(Years.THREE));"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,163,"assertEquals(false, Years.ONE.isLessThan(null));"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,164,"assertEquals(true, Years.years(-1).isLessThan(null));"

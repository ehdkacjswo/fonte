is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,56,mport org.joda.time.chrono.GJChronology;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,57,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,85, Gets an instance of the ISOChronology in the default zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,86, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,87, {@link ISOChronology} defines all fields in line with the ISO8601 standard.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,88," This chronology is the default, and is suitable for all normal datetime processing."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,89," It is <i>unsuitable</i> for historical datetimes before October 15, 1582"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,90, as it applies the modern Gregorian calendar rules before that date.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,92, @return the ISO chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,94,ublic static Chronology getISO() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,95,eturn ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,99, Gets an instance of the ISOChronology in the UTC zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,100, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,101, {@link ISOChronology} defines all fields in line with the ISO8601 standard.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,102," This chronology is the default, and is suitable for all normal datetime processing."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,103," It is <i>unsuitable</i> for historical datetimes before October 15, 1582"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,104, as it applies the modern Gregorian calendar rules before that date.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,106, @return the ISO chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,108,ublic static Chronology getISOUTC() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,109,eturn ISOChronology.getInstanceUTC();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,113, Gets an instance of the ISOChronology in the specified zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,114, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,115, {@link ISOChronology} defines all fields in line with the ISO8601 standard.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,116," This chronology is the default, and is suitable for all normal datetime processing."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,117," It is <i>unsuitable</i> for historical datetimes before October 15, 1582"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,118, as it applies the modern Gregorian calendar rules before that date.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,120," @param zone  the zone to use, null means default zone"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,121, @return the ISO chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,123,ublic static Chronology getISO(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,124,eturn ISOChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,129, Gets an instance of the GJChronology in the default zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,130, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,131, {@link GJChronology} defines all fields using standard meanings.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,132, This chronology is intended to be used as a replacement for <code>GregorianCalendar</code>.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,133," The Gregorian calendar system is used after October 15, 1582, while the"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,134, Julian calendar system is used before.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,135, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,136," When dealing solely with dates in the modern era, from 1600 onwards,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,137," we recommend using ISOChronology, which is the default."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,139, @return the GJ chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,141,ublic static Chronology getGJ() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,142,eturn GJChronology.getInstance();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,146, Gets an instance of the GJChronology in the UTC zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,147, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,148, {@link GJChronology} defines all fields using standard meanings.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,149, This chronology is intended to be used as a replacement for <code>GregorianCalendar</code>.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,150," The Gregorian calendar system is used after October 15, 1582, while the"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,151, Julian calendar system is used before.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,152, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,153," When dealing solely with dates in the modern era, from 1600 onwards,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,154," we recommend using ISOChronology, which is the default."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,156, @return the GJ chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,158,ublic static Chronology getGJUTC() {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,159,eturn GJChronology.getInstanceUTC();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,163, Gets an instance of the GJChronology in the specified zone.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,164, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,165, {@link GJChronology} defines all fields using standard meanings.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,166, This chronology is intended to be used as a replacement for <code>GregorianCalendar</code>.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,167," The Gregorian calendar system is used after October 15, 1582, while the"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,168, Julian calendar system is used before.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,169, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,170," When dealing solely with dates in the modern era, from 1600 onwards,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,171," we recommend using ISOChronology, which is the default."
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,173," @param zone  the zone to use, null means default zone"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,174, @return the GJ chronology
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,176,ublic static Chronology getGJ(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,177,eturn GJChronology.getInstance(zone);
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,62,mport org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,63,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,146,ublic void testGetISO() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,147,"ssertEquals(ISOChronology.getInstance(), Chronology.getISO());"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,150,ublic void testGetISOUTC() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,151,"ssertEquals(ISOChronology.getInstanceUTC(), Chronology.getISOUTC());"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,154,ublic void testGetISO_Zone() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,155,"ssertEquals(ISOChronology.getInstance(PARIS), Chronology.getISO(PARIS));"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,156,"ssertEquals(ISOChronology.getInstance(), Chronology.getISO(null));"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,160,ublic void testGetGJ() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,161,"ssertEquals(GJChronology.getInstance(), Chronology.getGJ());"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,164,ublic void testGetGJUTC() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,165,"ssertEquals(GJChronology.getInstanceUTC(), Chronology.getGJUTC());"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,168,ublic void testGetGJ_Zone() {
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,169,"ssertEquals(GJChronology.getInstance(PARIS), Chronology.getGJ(PARIS));"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,170,"ssertEquals(GJChronology.getInstance(), Chronology.getGJ(null));"

is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,708, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,708,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,718, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,718,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,732, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,732,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,742, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,742,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,756, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,756,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,766, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,766,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,780, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,780,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,790, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,790,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,804, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,804,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,814, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,814,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,828, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,828,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,838, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,838,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,852, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,852,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,862, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,862,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,876, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,876,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,886, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,886,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,96,"eturn new Period(new int[] {years}, PeriodType.standard());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,96,"return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,107,"eturn new Period(new int[] {months}, PeriodType.standard());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,107,"return new Period(new int[] {0, months, 0, 0, 0, 0, 0, 0}, PeriodType.standard());"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,118,"eturn new Period(new int[] {weeks}, PeriodType.standard());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,118,"return new Period(new int[] {0, 0, weeks, 0, 0, 0, 0, 0}, PeriodType.standard());"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,129,"eturn new Period(new int[] {days}, PeriodType.standard());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,129,"return new Period(new int[] {0, 0, 0, days, 0, 0, 0, 0}, PeriodType.standard());"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,140,"eturn new Period(new int[] {hours}, PeriodType.standard());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,140,"return new Period(new int[] {0, 0, 0, 0, hours, 0, 0, 0}, PeriodType.standard());"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,151,"eturn new Period(new int[] {minutes}, PeriodType.standard());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,151,"return new Period(new int[] {0, 0, 0, 0, 0, minutes, 0, 0}, PeriodType.standard());"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,162,"eturn new Period(new int[] {seconds}, PeriodType.standard());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,162,"return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,173,"eturn new Period(new int[] {millis}, PeriodType.standard());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,173,"return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,563," @param type  the period type to use, null means AllType"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,563,"* @param type  the period type to use, null means standard"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,576,* Creates a new Period instance with the fields from the specified period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,577,* set to new values.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,579,"* @param period  the period to copy from, null ignored"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,580,* @return the new period instance
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,581,* @throws IllegalArgumentException if a field type is unsupported
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,583,public Period withFields(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,584,if (period == null) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,585,return this;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,587,int[] newValues = getValues();  // cloned
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,588,"newValues = super.mergePeriodInto(newValues, period);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,589,"return new Period(newValues, getPeriodType());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,594,* Creates a new Period instance with the specified field set to a new value.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,596,"* @param field  the field to set, null ignored"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,597,* @param value  the value to set to
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,598,* @return the new period instance
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,599,* @throws IllegalArgumentException if the field type is unsupported
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,601,"public Period withField(DurationFieldType field, int value) {"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,602,if (field == null) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,603,return this;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,605,int[] newValues = getValues();  // cloned
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,606,"super.setFieldInto(newValues, field, value);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,607,"return new Period(newValues, getPeriodType());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,732,* Creates a new Period instance with the valueToAdd added to the specified field.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,734,"* @param field  the field to set, null ignored"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,735,* @param value  the value to add
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,736,* @return the new period instance
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,737,* @throws IllegalArgumentException if the field type is unsupported
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,739,"public Period plusField(DurationFieldType field, int valueToAdd) {"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,740,if (valueToAdd == 0 || field == null) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,741,return this;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,743,int[] newValues = getValues();  // cloned
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,744,"super.addFieldInto(newValues, field, valueToAdd);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,745,"return new Period(newValues, getPeriodType());"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,228, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,228,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,236, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,236,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,246, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,246,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,254, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,254,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,264, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,264,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,272, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,272,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,282, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,282,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,290, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,290,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,300, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,300,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,308, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,308,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,318, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,318,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,326, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,326,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,336, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,336,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,344, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,344,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,354, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,354,* @throws IllegalArgumentException if field is not supported and the value is non-zero
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,362, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,362,* @throws IllegalArgumentException if field is not supported and the value is non-zero
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,448,"setFieldInto(iValues, field, value);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,452,* Sets the value of a field in this period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,454,* @param values  the array of values to update
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,455,* @param field  the field to set
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,456,* @param value  the value to set
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,457,* @throws IllegalArgumentException if field is not supported.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,459,"protected void setFieldInto(int[] values, DurationFieldType field, int value) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,460,int index = indexOf(field);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,461,if (index == -1) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,462,if (value != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,463,throw new IllegalArgumentException(
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,464,"""Period does not support field '"" + field.getName() + ""'"");"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,466,} else {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,467,values[index] = value;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,472,* Adds the value of a field in this period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,474,* @param field  the field to set
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,475,* @param value  the value to set
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,476,* @throws IllegalArgumentException if field is not supported.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,478,"protected void addField(DurationFieldType field, int value) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,479,"addFieldInto(iValues, field, value);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,483,* Adds the value of a field in this period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,485,* @param values  the array of values to update
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,486,* @param field  the field to set
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,487,* @param value  the value to set
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,488,* @throws IllegalArgumentException if field is not supported.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,490,"protected void addFieldInto(int[] values, DurationFieldType field, int value) {"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,450,hrow new UnsupportedOperationException(
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,494,throw new IllegalArgumentException(
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,454,"etValue(index, value);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,498,"values[index] = FieldUtils.safeAdd(values[index], value);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,503,* Merges the fields from another period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,505,"* @param period  the period to add from, not null"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,506,* @throws IllegalArgumentException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,508,protected void mergePeriod(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,509,"iValues = mergePeriodInto(getValues(), period);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,513,* Merges the fields from another period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,515,* @param values  the array of values to update
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,516,"* @param period  the period to add from, not null"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,517,* @return the updated values
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,518,* @throws IllegalArgumentException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,520,"protected int[] mergePeriodInto(int[] values, ReadablePeriod period) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,521,"for (int i = 0, isize = period.size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,522,DurationFieldType type = period.getFieldType(i);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,523,int value = period.getValue(i);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,524,"checkAndUpdate(type, values, value);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,526,return values;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,465,nt[] newValues = getValues(); // already cloned
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,536,"iValues = addPeriodInto(getValues(), period);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,540,* Adds the fields from another period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,542,* @param values  the array of values to update
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,543,"* @param period  the period to add from, not null"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,544,* @return the updated values
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,545,* @throws IllegalArgumentException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,547,"protected int[] addPeriodInto(int[] values, ReadablePeriod period) {"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,476,"ewValues[index] = FieldUtils.safeAdd(getValue(index), value);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,558,"values[index] = FieldUtils.safeAdd(getValue(index), value);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,479,etValues(newValues);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,561,return values;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,284, catch (UnsupportedOperationException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,284,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,521,public void testWithFields1() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,522,"Period test1 = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,523,"Period test2 = new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,524,Period result = test1.withFields(test2);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,526,"assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test1);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,527,"assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis()), test2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,528,"assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 9), result);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,531,public void testWithFields2() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,532,"Period test1 = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,533,Period test2 = null;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,534,Period result = test1.withFields(test2);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,536,"assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test1);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,537,"assertSame(test1, result);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,540,public void testWithFields3() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,541,"Period test1 = new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,542,"Period test2 = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,543,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,544,test1.withFields(test2);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,545,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,546,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,547,"assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis()), test1);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,548,"assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test2);"

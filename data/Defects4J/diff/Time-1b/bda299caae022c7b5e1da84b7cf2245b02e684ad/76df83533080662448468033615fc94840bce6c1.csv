is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,97,suite.addTest(TestDateTimeUtils.suite());
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,56,import java.lang.reflect.Modifier;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,57,import java.security.AllPermission;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,58,import java.security.CodeSource;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,59,import java.security.Permission;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,60,import java.security.PermissionCollection;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,61,import java.security.Permissions;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,62,import java.security.Policy;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,63,import java.security.ProtectionDomain;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,65,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,66,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,69,* This class is a Junit unit test for Instant.
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,71,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,73,public class TestDateTimeUtils extends TestCase {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,74,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,75,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,77,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,78,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,80,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,81,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,82,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,83,366 + 365;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,84,long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,85,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,86,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,87,366 + 365 + 365;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,89,// 2002-06-09
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,90,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,91,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,93,// 2002-04-05
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,94,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,95,(y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,96,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,97,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,99,// 2003-05-06
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,100,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,101,(y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,102,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,103,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,105,private static final Policy RESTRICT;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,106,private static final Policy ALLOW;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,107,static {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,108,// don't call Policy.getPolicy()
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,109,RESTRICT = new Policy() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,110,public PermissionCollection getPermissions(CodeSource codesource) {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,111,Permissions p = new Permissions();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,112,p.add(new AllPermission());  // enable everything
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,113,return p;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,115,public void refresh() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,117,"public boolean implies(ProtectionDomain domain, Permission permission) {"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,118,if (permission instanceof JodaTimePermission) {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,119,return false;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,121,"return super.implies(domain, permission);"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,124,ALLOW = new Policy() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,125,public PermissionCollection getPermissions(CodeSource codesource) {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,126,Permissions p = new Permissions();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,127,p.add(new AllPermission());  // enable everything
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,128,return p;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,130,public void refresh() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,135,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,136,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,139,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,140,return new TestSuite(TestDateTimeUtils.class);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,143,public TestDateTimeUtils(String name) {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,144,super(name);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,147,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,150,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,154,public void testTest() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,155,"assertEquals(""2002-06-09T00:00:00.000Z"", new Instant(TEST_TIME_NOW).toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,156,"assertEquals(""2002-04-05T12:24:00.000Z"", new Instant(TEST_TIME1).toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,157,"assertEquals(""2003-05-06T14:28:00.000Z"", new Instant(TEST_TIME2).toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,161,public void testClass() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,162,Class cls = DateTimeUtils.class;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,163,"assertEquals(true, Modifier.isPublic(cls.getModifiers()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,164,"assertEquals(true, Modifier.isFinal(cls.getModifiers()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,166,"assertEquals(1, cls.getDeclaredConstructors().length);"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,167,"assertEquals(true, Modifier.isPrivate(cls.getDeclaredConstructors()[0].getModifiers()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,171,public void testSystemMillis() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,172,long nowSystem = System.currentTimeMillis();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,173,long now = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,174,assertTrue((now >= nowSystem));
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,175,assertTrue((now - nowSystem) < 10000L);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,179,public void testSystemMillisSecurity() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,180,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,181,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,182,Policy.setPolicy(RESTRICT);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,183,System.setSecurityManager(new SecurityManager());
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,184,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,185,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,186,} catch (SecurityException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,187,// ok
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,188,} finally {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,189,System.setSecurityManager(null);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,190,Policy.setPolicy(ALLOW);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,192,} finally {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,193,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,198,public void testFixedMillis() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,199,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,200,DateTimeUtils.setCurrentMillisFixed(0L);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,201,"assertEquals(0L, DateTimeUtils.currentTimeMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,202,"assertEquals(0L, DateTimeUtils.currentTimeMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,203,"assertEquals(0L, DateTimeUtils.currentTimeMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,204,} finally {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,205,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,207,long nowSystem = System.currentTimeMillis();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,208,long now = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,209,assertTrue((now >= nowSystem));
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,210,assertTrue((now - nowSystem) < 10000L);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,214,public void testFixedMillisSecurity() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,215,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,216,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,217,Policy.setPolicy(RESTRICT);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,218,System.setSecurityManager(new SecurityManager());
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,219,DateTimeUtils.setCurrentMillisFixed(0L);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,220,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,221,} catch (SecurityException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,222,// ok
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,223,} finally {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,224,System.setSecurityManager(null);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,225,Policy.setPolicy(ALLOW);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,227,} finally {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,228,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,233,public void testOffsetMillis() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,234,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,235,// set time to one day ago
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,236,DateTimeUtils.setCurrentMillisOffset(-24 * 60 *  60 * 1000);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,237,long nowSystem = System.currentTimeMillis();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,238,long now = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,239,long nowAdjustDay = now + (24 * 60 *  60 * 1000);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,240,assertTrue((now < nowSystem));
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,241,assertTrue((nowAdjustDay >= nowSystem));
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,242,assertTrue((nowAdjustDay - nowSystem) < 10000L);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,243,} finally {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,244,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,246,long nowSystem = System.currentTimeMillis();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,247,long now = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,248,assertTrue((now >= nowSystem));
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,249,assertTrue((now - nowSystem) < 10000L);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,253,public void testOffsetMillisSecurity() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,254,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,255,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,256,Policy.setPolicy(RESTRICT);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,257,System.setSecurityManager(new SecurityManager());
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,258,DateTimeUtils.setCurrentMillisOffset(-24 * 60 *  60 * 1000);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,259,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,260,} catch (SecurityException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,261,// ok
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,262,} finally {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,263,System.setSecurityManager(null);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,264,Policy.setPolicy(ALLOW);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,266,} finally {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,267,DateTimeUtils.setCurrentMillisSystem();

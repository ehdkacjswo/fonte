is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,30,import org.joda.time.LocalDate;
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,196,"LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone));"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,197,if (cutoverDate.getYear() <= 0) {
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,198,"throw new IllegalArgumentException(""Cutover too early. Must be on or after 0001-01-01."");"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,983,if (iConvertByWeekyear) {
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,984,int wyear = iGregorianChronology.weekyear().get(instant);
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,985,if (wyear <= 0) {
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,986,"instant = iGregorianChronology.weekyear().add(instant, -1);"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,988,} else {
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,989,int year = iGregorianChronology.year().get(instant);
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,990,if (year <= 0) {
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,991,"instant = iGregorianChronology.year().add(instant, -1);"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,1002,// no special handling for year zero as cutover always after year zero
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,1016,if (iConvertByWeekyear) {
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,1017,int wyear = iGregorianChronology.weekyear().get(instant);
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,1018,if (wyear <= 0) {
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,1019,"instant = iGregorianChronology.weekyear().add(instant, -1);"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,1021,} else {
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,1022,int year = iGregorianChronology.year().get(instant);
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,1023,if (year <= 0) {
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,1024,"instant = iGregorianChronology.year().add(instant, -1);"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,1035,// no special handling for year zero as cutover always after year zero
True,src/test/java/org/joda/time/chrono/TestAll.java,src/test/java/org/joda/time/chrono/TestAll.java,50,suite.addTest(TestGJDate.suite());
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,5,*  you may not use this file except in compliance with the License.
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,6,*  You may obtain a copy of the License at
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,13,*  See the License for the specific language governing permissions and
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,14,*  limitations under the License.
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,16,package org.joda.time.chrono;
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,18,import junit.framework.TestCase;
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,19,import junit.framework.TestSuite;
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,21,import org.joda.time.Chronology;
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,22,import org.joda.time.DateTime;
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,23,import org.joda.time.DateTimeZone;
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,24,import org.joda.time.LocalDate;
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,27,* Test.
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,29,public class TestGJDate extends TestCase {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,30,public static void main(String[] args) {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,31,junit.textui.TestRunner.run(suite());
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,34,public static TestSuite suite() {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,35,return new TestSuite(TestGJDate.class);
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,38,public TestGJDate(String name) {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,39,super(name);
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,42,protected void setUp() throws Exception {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,45,protected void tearDown() throws Exception {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,49,private static final Chronology GJ_CHRONOLOGY = GJChronology.getInstanceUTC();
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,52,public void test_plusYears_positiveToPositive() {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,53,"LocalDate date = new LocalDate(3, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,54,"LocalDate expected = new LocalDate(7, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,55,"assertEquals(expected, date.plusYears(4));"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,58,public void test_plusYears_positiveToZero() {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,59,"LocalDate date = new LocalDate(3, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,60,"LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,61,"assertEquals(expected, date.plusYears(-3));"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,64,public void test_plusYears_positiveToNegative() {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,65,"LocalDate date = new LocalDate(3, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,66,"LocalDate expected = new LocalDate(-2, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,67,"assertEquals(expected, date.plusYears(-4));"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,71,public void test_plusYears_negativeToNegative() {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,72,"LocalDate date = new LocalDate(-3, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,73,"LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,74,"assertEquals(expected, date.plusYears(2));"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,77,public void test_plusYears_negativeToZero() {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,78,"LocalDate date = new LocalDate(-3, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,79,"LocalDate expected = new LocalDate(1, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,80,"assertEquals(expected, date.plusYears(3));"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,83,public void test_plusYears_negativeToPositive() {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,84,"LocalDate date = new LocalDate(-3, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,85,"LocalDate expected = new LocalDate(2, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,86,"assertEquals(expected, date.plusYears(4));"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,90,public void test_plusYears_positiveToPositive_crossCutover() {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,91,"LocalDate date = new LocalDate(3, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,92,"LocalDate expected = new LocalDate(2007, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,93,"assertEquals(expected, date.plusYears(2004));"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,96,public void test_plusYears_positiveToZero_crossCutover() {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,97,"LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,98,"LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,99,"assertEquals(expected, date.plusYears(-2003));"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,102,public void test_plusYears_positiveToNegative_crossCutover() {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,103,"LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,104,"LocalDate expected = new LocalDate(-2, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,105,"assertEquals(expected, date.plusYears(-2004));"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,108,public void test_plusYears_negativeToPositive_crossCutover() {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,109,"LocalDate date = new LocalDate(-3, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,110,"LocalDate expected = new LocalDate(2002, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,111,"assertEquals(expected, date.plusYears(2004));"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,115,public void test_plusWeekyears_positiveToZero_crossCutover() {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,116,"LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,117,"LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek());"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,118,"assertEquals(expected, date.weekyear().addToCopy(-2003));"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,121,public void test_plusWeekyears_positiveToNegative_crossCutover() {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,122,"LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,123,"LocalDate expected = new LocalDate(-2, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek());"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,124,"assertEquals(expected, date.weekyear().addToCopy(-2004));"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,128,public void test_cutoverPreZero() {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,129,"DateTime cutover = new LocalDate(-2, 6, 30, ISOChronology.getInstanceUTC()).toDateTimeAtStartOfDay(DateTimeZone.UTC);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,130,try {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,131,"GJChronology.getInstance(DateTimeZone.UTC, cutover);"
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,132,fail();
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,133,} catch (IllegalArgumentException ex) {
True,src/test/java/org/joda/time/chrono/TestGJDate.java,src/test/java/org/joda/time/chrono/TestGJDate.java,134,// expected

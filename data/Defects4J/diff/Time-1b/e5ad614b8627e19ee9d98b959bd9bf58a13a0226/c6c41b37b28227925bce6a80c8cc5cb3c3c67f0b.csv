is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,28,import org.joda.time.DurationField;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,29,import org.joda.time.DurationFieldType;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,298,public void testIllegalDates() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,299,try {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,300,"new DateTime(1582, 10, 5, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,301,"fail(""Constructed illegal date"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,302,} catch (IllegalArgumentException e) { /* good */ }
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,304,try {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,305,"new DateTime(1582, 10, 14, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,306,"fail(""Constructed illegal date"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,307,} catch (IllegalArgumentException e) { /* good */ }
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,310,public void testParseEquivalence() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,311,"testParse(""1581-01-01T01:23:45.678"", 1581, 1, 1, 1, 23, 45, 678);"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,312,"testParse(""1581-06-30"", 1581, 6, 30, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,313,"testParse(""1582-01-01T01:23:45.678"", 1582, 1, 1, 1, 23, 45, 678);"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,314,"testParse(""1582-06-30T01:23:45.678"", 1582, 6, 30, 1, 23, 45, 678);"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,315,"testParse(""1582-10-04"", 1582, 10, 4, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,316,"testParse(""1582-10-15"", 1582, 10, 15, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,317,"testParse(""1582-12-31"", 1582, 12, 31, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,318,"testParse(""1583-12-31"", 1583, 12, 31, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,321,"private void testParse(String str,"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,322,"int year, int month, int day,"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,323,"int hour, int minute, int second, int millis) {"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,324,"assertEquals(new DateTime(str, GJChronology.getInstance(DateTimeZone.UTC)),"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,325,"new DateTime(year, month, day, hour, minute, second, millis,"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,326,GJChronology.getInstance(DateTimeZone.UTC)));
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,329,public void testCutoverAddYears() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,330,"testAdd(""1582-01-01"", DurationFieldType.years(), 1, ""1583-01-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,331,"testAdd(""1582-02-15"", DurationFieldType.years(), 1, ""1583-02-15"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,332,"testAdd(""1582-02-28"", DurationFieldType.years(), 1, ""1583-02-28"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,333,"testAdd(""1582-03-01"", DurationFieldType.years(), 1, ""1583-03-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,334,"testAdd(""1582-09-30"", DurationFieldType.years(), 1, ""1583-09-30"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,335,"testAdd(""1582-10-01"", DurationFieldType.years(), 1, ""1583-10-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,336,"testAdd(""1582-10-04"", DurationFieldType.years(), 1, ""1583-10-04"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,337,"testAdd(""1582-10-15"", DurationFieldType.years(), 1, ""1583-10-15"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,338,"testAdd(""1582-10-16"", DurationFieldType.years(), 1, ""1583-10-16"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,340,// Leap years...
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,341,"testAdd(""1580-01-01"", DurationFieldType.years(), 4, ""1584-01-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,342,"testAdd(""1580-02-29"", DurationFieldType.years(), 4, ""1584-02-29"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,343,"testAdd(""1580-10-01"", DurationFieldType.years(), 4, ""1584-10-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,344,"testAdd(""1580-10-10"", DurationFieldType.years(), 4, ""1584-10-10"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,345,"testAdd(""1580-10-15"", DurationFieldType.years(), 4, ""1584-10-15"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,346,"testAdd(""1580-12-31"", DurationFieldType.years(), 4, ""1584-12-31"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,349,public void testCutoverAddWeekyears() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,350,"testAdd(""1582-W01-1"", DurationFieldType.weekyears(), 1, ""1583-W01-1"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,351,"testAdd(""1582-W39-1"", DurationFieldType.weekyears(), 1, ""1583-W39-1"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,352,"testAdd(""1583-W45-1"", DurationFieldType.weekyears(), 1, ""1584-W45-1"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,354,"// This test fails, but I'm not sure if its worth fixing. The date"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,355,"// falls after the cutover, but in the cutover year. The add operation"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,356,"// is performed completely within the gregorian calendar, with no"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,357,"// crossing of the cutover. As a result, no special correction is"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,358,// applied. Since the full gregorian year of 1582 has a different week
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,359,"// numbers than the full julian year of 1582, the week number is off by"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,360,// one after the addition.
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,362,"//testAdd(""1582-W42-1"", DurationFieldType.weekyears(), 1, ""1583-W42-1"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,364,// Leap years...
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,365,"testAdd(""1580-W01-1"", DurationFieldType.weekyears(), 4, ""1584-W01-1"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,366,"testAdd(""1580-W30-7"", DurationFieldType.weekyears(), 4, ""1584-W30-7"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,367,"testAdd(""1580-W50-7"", DurationFieldType.weekyears(), 4, ""1584-W50-7"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,370,public void testCutoverAddMonths() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,371,"testAdd(""1582-01-01"", DurationFieldType.months(), 1, ""1582-02-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,372,"testAdd(""1582-01-01"", DurationFieldType.months(), 6, ""1582-07-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,373,"testAdd(""1582-01-01"", DurationFieldType.months(), 12, ""1583-01-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,374,"testAdd(""1582-11-15"", DurationFieldType.months(), 1, ""1582-12-15"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,376,"testAdd(""1582-09-04"", DurationFieldType.months(), 2, ""1582-11-04"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,377,"testAdd(""1582-09-05"", DurationFieldType.months(), 2, ""1582-11-05"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,378,"testAdd(""1582-09-10"", DurationFieldType.months(), 2, ""1582-11-10"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,379,"testAdd(""1582-09-15"", DurationFieldType.months(), 2, ""1582-11-15"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,382,// Leap years...
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,383,"testAdd(""1580-01-01"", DurationFieldType.months(), 48, ""1584-01-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,384,"testAdd(""1580-02-29"", DurationFieldType.months(), 48, ""1584-02-29"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,385,"testAdd(""1580-10-01"", DurationFieldType.months(), 48, ""1584-10-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,386,"testAdd(""1580-10-10"", DurationFieldType.months(), 48, ""1584-10-10"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,387,"testAdd(""1580-10-15"", DurationFieldType.months(), 48, ""1584-10-15"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,388,"testAdd(""1580-12-31"", DurationFieldType.months(), 48, ""1584-12-31"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,391,public void testCutoverAddWeeks() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,392,"testAdd(""1582-01-01"", DurationFieldType.weeks(), 1, ""1582-01-08"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,393,"testAdd(""1583-01-01"", DurationFieldType.weeks(), 1, ""1583-01-08"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,395,"// Weeks are precise, and so cutover is not ignored."
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,396,"testAdd(""1582-10-01"", DurationFieldType.weeks(), 2, ""1582-10-25"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,397,"testAdd(""1582-W01-1"", DurationFieldType.weeks(), 51, ""1583-W01-1"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,400,public void testCutoverAddDays() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,401,"testAdd(""1582-10-03"", DurationFieldType.days(), 1, ""1582-10-04"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,402,"testAdd(""1582-10-04"", DurationFieldType.days(), 1, ""1582-10-15"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,403,"testAdd(""1582-10-15"", DurationFieldType.days(), 1, ""1582-10-16"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,405,"testAdd(""1582-09-30"", DurationFieldType.days(), 10, ""1582-10-20"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,406,"testAdd(""1582-10-04"", DurationFieldType.days(), 10, ""1582-10-24"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,407,"testAdd(""1582-10-15"", DurationFieldType.days(), 10, ""1582-10-25"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,410,"private void testAdd(String start, DurationFieldType type, int amt, String end) {"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,411,"DateTime dtStart = new DateTime(start, GJChronology.getInstance(DateTimeZone.UTC));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,412,"DateTime dtEnd = new DateTime(end, GJChronology.getInstance(DateTimeZone.UTC));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,413,"assertEquals(dtEnd, dtStart.withFieldAdded(type, amt));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,414,"assertEquals(dtStart, dtEnd.withFieldAdded(type, -amt));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,416,DurationField field = type.getField(GJChronology.getInstance(DateTimeZone.UTC));
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,417,"int diff = field.getDifference(dtEnd.getMillis(), dtStart.getMillis());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,418,"assertEquals(amt, diff);"

is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,246,* Constructs an instance from an Object that represents a datetime.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,247,"* The time zone will be retrieved from the object if possible,"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,248,* otherwise the default time zone will be used.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,249,* <p>
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,250,"* If the object contains no chronology, <code>ISOChronology</code> is used."
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,251,"* Once the constructor is completed, the zone is no longer used."
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,252,* <p>
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,253,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,254,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,255,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,257,* @param instant  the datetime object
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,258,* @param zone  the time zone
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,259,* @throws IllegalArgumentException if the instant is invalid
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,261,public static LocalDate forInstant(Object instant) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,262,"return forInstant(instant, (Chronology) null);"
False,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,64,uite.addTest(TestLocalTime_Basics.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,64,suite.addTest(TestLocalDate_Constructors.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,65,suite.addTest(TestLocalDate_Basics.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,68,suite.addTest(TestLocalTime_Basics.suite());
False,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,68,uite.addTest(TestLocalDate_Basics.suite());
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,18,import java.util.Calendar;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,19,import java.util.Date;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,20,import java.util.GregorianCalendar;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,22,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,23,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,25,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,26,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,27,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,28,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,31,* This class is a Junit unit test for LocalDate.
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,33,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,35,public class TestLocalDate_Constructors extends TestCase {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,37,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,38,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,39,private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,40,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,41,private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,42,private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,43,private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,45,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,46,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,48,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,49,(31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,50,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,51,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,53,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,54,(365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,55,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,56,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,58,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,60,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,61,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,64,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,65,return new TestSuite(TestLocalDate_Constructors.class);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,68,public TestLocalDate_Constructors(String name) {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,69,super(name);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,72,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,73,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,74,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,75,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,78,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,79,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,80,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,81,zone = null;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,85,public void testFactory_ForCalendarFields() throws Exception {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,86,"GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,87,"cal.set(Calendar.MILLISECOND, 7);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,88,"LocalDate expected = new LocalDate(1970, 2, 3);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,89,"assertEquals(expected, LocalDate.forFields(cal));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,90,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,91,LocalDate.forFields((Calendar) null);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,92,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,93,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,97,public void testFactory_ForDateFields() throws Exception {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,98,"GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,99,"cal.set(Calendar.MILLISECOND, 7);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,100,"LocalDate expected = new LocalDate(1970, 2, 3);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,101,"assertEquals(expected, LocalDate.forFields(cal.getTime()));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,102,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,103,LocalDate.forFields((Date) null);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,104,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,105,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,109,public void testFactory_nowDefaultZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,110,LocalDate test = LocalDate.nowDefaultZone();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,111,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,112,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,113,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,114,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,117,public void testFactory_now_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,118,"DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,119,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,120,// 23:59 in London is 00:59 the following day in Paris
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,122,LocalDate test = LocalDate.now(LONDON);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,123,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,124,"assertEquals(2005, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,125,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,126,"assertEquals(8, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,128,test = LocalDate.now(PARIS);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,129,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,130,"assertEquals(2005, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,131,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,132,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,135,public void testFactory_now_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,136,"DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,137,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,138,// 23:59 in London is 00:59 the following day in Paris
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,140,LocalDate test = LocalDate.now((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,141,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,142,"assertEquals(2005, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,143,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,144,"assertEquals(8, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,147,public void testFactory_now_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,148,LocalDate test = LocalDate.now(GREGORIAN_PARIS);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,149,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,150,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,151,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,152,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,155,public void testFactory_now_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,156,LocalDate test = LocalDate.now((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,157,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,158,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,159,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,160,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,164,public void testFactory_forInstantDefaultZone_long1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,165,LocalDate test = LocalDate.forInstantDefaultZone(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,166,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,167,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,168,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,169,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,172,public void testFactory_forInstantDefaultZone_long2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,173,LocalDate test = LocalDate.forInstantDefaultZone(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,174,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,175,"assertEquals(1971, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,176,"assertEquals(5, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,177,"assertEquals(7, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,180,public void testFactory_forInstant_long1_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,181,"LocalDate test = LocalDate.forInstant(TEST_TIME1, PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,182,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,183,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,184,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,185,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,188,public void testFactory_forInstant_long2_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,189,"LocalDate test = LocalDate.forInstant(TEST_TIME2, PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,190,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,191,"assertEquals(1971, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,192,"assertEquals(5, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,193,"assertEquals(7, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,196,public void testFactory_forInstant_long_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,197,"LocalDate test = LocalDate.forInstant(TEST_TIME1, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,198,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,199,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,200,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,201,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,204,public void testFactory_forInstant_long1_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,205,"LocalDate test = LocalDate.forInstant(TEST_TIME1, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,206,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,207,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,208,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,209,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,212,public void testFactory_forInstant_long2_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,213,"LocalDate test = LocalDate.forInstant(TEST_TIME2, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,214,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,215,"assertEquals(1971, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,216,"assertEquals(5, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,217,"assertEquals(7, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,220,public void testFactory_forInstant_long_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,221,"LocalDate test = LocalDate.forInstant(TEST_TIME1, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,222,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,223,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,224,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,225,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,229,public void testFactory_forInstant_Object1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,230,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,231,LocalDate test = LocalDate.forInstant(date);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,232,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,233,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,234,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,235,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,238,public void testFactory_forInstant_nullObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,239,LocalDate test = LocalDate.forInstant((Object) null);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,240,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,241,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,242,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,243,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,246,public void testFactory_forInstant_Object_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,247,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,248,"LocalDate test = LocalDate.forInstant(date, PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,249,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,250,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,251,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,252,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,255,public void testFactory_forInstant_nullObject_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,256,"LocalDate test = LocalDate.forInstant((Object) null, PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,257,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,258,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,259,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,260,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,263,public void testFactory_Object_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,264,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,265,"LocalDate test = LocalDate.forInstant(date, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,266,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,267,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,268,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,269,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,272,public void testFactory_nullObject_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,273,"LocalDate test = LocalDate.forInstant((Object) null, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,274,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,275,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,276,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,277,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,280,public void testFactory_forInstant_Object_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,281,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,282,"LocalDate test = LocalDate.forInstant(date, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,283,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,284,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,285,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,286,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,289,public void testFactory_forInstant_nullObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,290,"LocalDate test = LocalDate.forInstant((Object) null, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,291,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,292,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,293,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,294,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,297,public void testFactory_Object_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,298,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,299,"LocalDate test = LocalDate.forInstant(date, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,300,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,301,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,302,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,303,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,306,public void testFactory_nullObject_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,307,"LocalDate test = LocalDate.forInstant((Object) null, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,308,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,309,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,310,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,311,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,315,public void testConstructor_int_int_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,316,"LocalDate test = new LocalDate(1970, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,317,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,318,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,319,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,320,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,321,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,322,"new LocalDate(Integer.MIN_VALUE, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,323,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,324,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,325,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,326,"new LocalDate(Integer.MAX_VALUE, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,327,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,328,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,329,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,330,"new LocalDate(1970, 0, 9);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,331,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,332,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,333,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,334,"new LocalDate(1970, 13, 9);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,335,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,336,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,337,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,338,"new LocalDate(1970, 6, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,339,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,340,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,341,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,342,"new LocalDate(1970, 6, 31);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,343,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,344,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,345,"new LocalDate(1970, 7, 31);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,346,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,347,"new LocalDate(1970, 7, 32);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,348,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,349,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,352,public void testConstructor_int_int_int_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,353,"LocalDate test = new LocalDate(1970, 6, 9, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,354,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,355,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,356,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,357,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,358,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,359,"new LocalDate(Integer.MIN_VALUE, 6, 9, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,360,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,361,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,362,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,363,"new LocalDate(Integer.MAX_VALUE, 6, 9, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,364,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,365,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,366,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,367,"new LocalDate(1970, 0, 9, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,368,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,369,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,370,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,371,"new LocalDate(1970, 13, 9, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,372,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,373,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,374,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,375,"new LocalDate(1970, 6, 0, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,376,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,377,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,378,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,379,"new LocalDate(1970, 6, 31, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,380,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,381,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,382,"new LocalDate(1970, 7, 31, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,383,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,384,"new LocalDate(1970, 7, 32, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,385,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,386,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,389,public void testConstructor_int_int_int_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,390,"LocalDate test = new LocalDate(1970, 6, 9, null);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,391,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,392,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,393,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,394,"assertEquals(9, test.getDayOfMonth());"

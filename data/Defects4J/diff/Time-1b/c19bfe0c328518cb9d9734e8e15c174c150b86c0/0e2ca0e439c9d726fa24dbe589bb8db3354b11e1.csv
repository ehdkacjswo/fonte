is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/AbstractPeriod.java,JodaTime/src/java/org/joda/time/AbstractPeriod.java,793,* @throws ArithmeticException if the set exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/AbstractPeriod.java,JodaTime/src/java/org/joda/time/AbstractPeriod.java,818,ype = type.withChronology(type.getChronology().withUTC());
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,95, The exact impact of this constructor is determined by the period type.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,96, Only precise fields in the period type will be used and the calculation will use UTC.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,95,* Only precise fields in the period type will be used.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,96,"* For AllType, this is the time fields only."
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,97,"* The year, month, week and day fields will not be populated."
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,98,* The period constructed will always be precise.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,99, as you might expect and split the fields evenly. The situation is more complex
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,100, for larger durations.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,101,* as you might expect and split the fields evenly.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,102, If this period uses the PreciseAll period type then all fields can be set.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,103," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,104," 1 year, 2 months and 5 days using the PreciseAll type."
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,103,* If the duration is larger than one day then all the remaining duration will
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,104,"* be stored in the largest available precise field, hours in this case."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,106, If the period uses the All period type then the years and months fields
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,107," will remain as zero, with the duration allocated to the weeks field."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,108," Normally, the weeks and days fields are imprecise, but this method"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,109, calculates using the UTC time zone making weeks and days precise.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,110, The effect is that a large duration of several years or months will be converted
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,111, to a period including a large number of weeks and zero years and months.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,113, 61 weeks and 3 days.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,107,* ((365 + 60 + 5) * 24) hours by this constructor.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,115," For more control over the conversion process, you should convert the duration"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,116, to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,109,"* For more control over the conversion process, you have two options:"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,110,* <ul>
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,111,"* <li>convert the duration to an {@link Interval}, and from there obtain the period"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,112,* <li>specify a period type that contains precise definitions of the day and larger
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,113,"* fields, such as the UTC or precise types."
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,114,* </ul>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,127, The exact impact of this constructor is determined by the period type.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,128, Only precise fields in the period type will be used and the calculation will use UTC.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,125,* Only precise fields in the period type will be used.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,126,* Imprecise fields will not be populated.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,127,* The period constructed will always be precise.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,130," If the duration is small, less than one day, then this method will perform"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,131, as you might expect and split the fields evenly. The situation is more complex
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,132, for larger durations.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,129,* If the duration is small then this method will perform
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,130,* as you might expect and split the fields evenly.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,134, If this period uses the PreciseAll period type then all fields can be set.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,135," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,136," 1 year, 2 months and 5 days using the PreciseAll type."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,137, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,138, If the period uses the All period type then the years and months fields
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,139," will remain as zero, with the duration allocated to the weeks field."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,140," Normally, the weeks and days fields are imprecise, but this method"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,141, calculates using the UTC time zone making weeks and days precise.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,142, The effect is that a large duration of several years or months will be converted
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,143, to a period including a large number of weeks and zero years and months.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,144," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,145, 61 weeks and 3 days.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,146, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,147," For more control over the conversion process, you should convert the duration"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,148, to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,132,* If the duration is large then all the remaining duration will
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,133,* be stored in the largest available precise field.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,134,"* For details as to which fields are precise, review the period type javadoc."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,348, The exact impact of this method is determined by the period type.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,349, Only precise fields in the period type will be used and the calculation will use UTC.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,350, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,351," If the duration is small, less than one day, then this method will perform"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,352, as you might expect and split the fields evenly. The situation is more complex
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,353, for larger durations.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,354, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,355, If this period uses the PreciseAll period type then all fields can be set.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,356," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,357," 1 year, 2 months and 5 days using the PreciseAll type."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,358, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,359, If the period uses the All period type then the years and months fields
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,360," will remain as zero, with the duration allocated to the weeks field."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,361," Normally, the weeks and days fields are imprecise, but this method"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,362, calculates using the UTC time zone making weeks and days precise.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,363, The effect is that a large duration of several years or months will be converted
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,364, to a period including a large number of weeks and zero years and months.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,365," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,366, 61 weeks and 3 days.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,367, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,368," For more control over the conversion process, you should convert the duration"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,369, to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,334,"* When dividing the duration, only precise fields in the period type will be used."
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,335,"* For large durations, all the remaining duration will be stored in the largest"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,336,* available precise field.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,381, The exact impact of this method is determined by the period type.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,382, Only precise fields in the period type will be used and the calculation will use UTC.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,383, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,384," If the duration is small, less than one day, then this method will perform"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,385, as you might expect and split the fields evenly. The situation is more complex
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,386, for larger durations.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,387, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,388, If this period uses the PreciseAll period type then all fields can be set.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,389," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,390," 1 year, 2 months and 5 days using the PreciseAll type."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,391, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,392, If the period uses the All period type then the years and months fields
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,393," will remain as zero, with the duration allocated to the weeks field."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,394," Normally, the weeks and days fields are imprecise, but this method"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,395, calculates using the UTC time zone making weeks and days precise.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,396, The effect is that a large duration of several years or months will be converted
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,397, to a period including a large number of weeks and zero years and months.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,398," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,399, 61 weeks and 3 days.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,400, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,401," For more control over the conversion process, you should convert the duration"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,402, to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,348,"* When dividing the duration, only precise fields in the period type will be used."
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,349,"* For large durations, all the remaining duration will be stored in the largest"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,350,* available precise field.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,458, The exact impact of this method is determined by the period type.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,459, Only precise fields in the period type will be used and the calculation will use UTC.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,460, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,461," If the duration is small, less than one day, then this method will perform"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,462, as you might expect and split the fields evenly. The situation is more complex
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,463, for larger durations.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,464, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,465, If this period uses the PreciseAll period type then all fields can be set.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,466," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,467," 1 year, 2 months and 5 days using the PreciseAll type."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,468, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,469, If the period uses the All period type then the years and months fields
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,470," will remain as zero, with the duration allocated to the weeks field."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,471," Normally, the weeks and days fields are imprecise, but this method"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,472, calculates using the UTC time zone making weeks and days precise.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,473, The effect is that a large duration of several years or months will be converted
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,474, to a period including a large number of weeks and zero years and months.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,475," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,476, 61 weeks and 3 days.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,477, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,478," For more control over the conversion process, you should convert the duration"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,479, to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,406,"* When dividing the duration, only precise fields in the period type will be used."
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,407,"* For large durations, all the remaining duration will be added to the largest"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,408,* available precise field.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,492, The exact impact of this method is determined by the period type.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,493, Only precise fields in the period type will be used and the calculation will use UTC.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,494, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,495," If the duration is small, less than one day, then this method will perform"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,496, as you might expect and split the fields evenly. The situation is more complex
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,497, for larger durations.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,498, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,499, If this period uses the PreciseAll period type then all fields can be set.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,500," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,501," 1 year, 2 months and 5 days using the PreciseAll type."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,502, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,503, If the period uses the All period type then the years and months fields
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,504," will remain as zero, with the duration allocated to the weeks field."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,505," Normally, the weeks and days fields are imprecise, but this method"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,506, calculates using the UTC time zone making weeks and days precise.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,507, The effect is that a large duration of several years or months will be converted
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,508, to a period including a large number of weeks and zero years and months.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,509," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,510, 61 weeks and 3 days.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,511, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,512," For more control over the conversion process, you should convert the duration"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,513, to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,421,"* When dividing the duration, only precise fields in the period type will be used."
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,422,"* For large durations, all the remaining duration will be added to the largest"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,423,* available precise field.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,98, The millisecond duration will be split to fields using a UTC version of
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,99, the period type. This ensures that there are no odd effects caused by
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,100, time zones. The add methods will still use the time zone specific version
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,101, of the period type.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,98,* Only precise fields in the period type will be used.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,99,"* For AllType, this is the time fields only."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,100,"* The year, month, week and day fields will not be populated."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,101,* The period constructed will always be precise.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,102,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,103,"* If the duration is small, less than one day, then this method will perform"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,104,* as you might expect and split the fields evenly.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,105,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,106,* If the duration is larger than one day then all the remaining duration will
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,107,"* be stored in the largest available precise field, hours in this case."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,108,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,109,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,110,* ((365 + 60 + 5) * 24) hours by this constructor.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,111,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,112,"* For more control over the conversion process, you have two options:"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,113,* <ul>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,114,"* <li>convert the duration to an {@link Interval}, and from there obtain the period"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,115,* <li>specify a period type that contains precise definitions of the day and larger
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,116,"* fields, such as the UTC or precise types."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,117,* </ul>
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,112, The millisecond duration will be split to fields using a UTC version of
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,113, the period type. This ensures that there are no odd effects caused by
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,114, time zones. The add methods will still use the time zone specific version
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,115, of the period type.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,128,* Only precise fields in the period type will be used.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,129,* Imprecise fields will not be populated.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,130,* The period constructed will always be precise.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,131,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,132,* If the duration is small then this method will perform
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,133,* as you might expect and split the fields evenly.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,134,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,135,* If the duration is large then all the remaining duration will
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,136,* be stored in the largest available precise field.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,137,"* For details as to which fields are precise, review the period type javadoc."
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,96,private static final PeriodType MILLIS_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,98,private static final PeriodType YEAR_DAY_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,100,rivate static final PeriodType MILLIS_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,102,private static final PeriodType UTC_DAY_HOUR_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,103,private static final PeriodType UTC_YEAR_DAY_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,104,private static final PeriodType UTC_YEAR_WEEK_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,105,private static final PeriodType UTC_YEAR_MONTH_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,106,private static final PeriodType UTC_ALL_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,114,MILLIS_TYPE = new MillisType();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,116,YEAR_DAY_TYPE = new YearDayType(ISOChronology.getInstance());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,112,ILLIS_TYPE = new MillisType();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,120,UTC_DAY_HOUR_TYPE = new DayHourType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,121,UTC_YEAR_DAY_TYPE = new YearDayType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,122,UTC_YEAR_WEEK_TYPE = new YearWeekType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,123,UTC_YEAR_MONTH_TYPE = new YearMonthType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,124,UTC_ALL_TYPE = new AllType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,155, This factory method returns a PeriodType that calculates using any
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,156," Chronology. For best results, the Chronology's time zone should"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,157, be UTC or have fixed offsets.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,167,* This factory method returns a PeriodType that calculates using any Chronology.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,175,if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,176,return getUTCDayHourType();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,176, <li>hours
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,177, <li>minutes
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,178, <li>seconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,179, <li>milliseconds
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,189,* <li>hours (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,190,* <li>minutes (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,191,* <li>seconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,192,* <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,200, This factory method returns a PeriodType that calculates using any
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,201," Chronology. For best results, the Chronology's time zone should"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,202, be UTC or have fixed offsets.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,213,* This factory method returns a PeriodType that calculates using any Chronology.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,221,if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,222,return getUTCAllType();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,218, <li>months
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,232,* <li>days
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,233,* <li>hours (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,234,* <li>minutes (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,235,* <li>seconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,236,* <li>milliseconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,237,* </ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,239,public static PeriodType getYearDayType() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,240,return YEAR_DAY_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,244,* Returns a PeriodType of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,246,* <ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,247,* <li>years
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,255,* This factory method returns a PeriodType that calculates using any Chronology.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,257,* @param chrono Chronology to use for calculations.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,259,public static PeriodType getYearDayType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,260,if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,261,return getYearDayType();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,263,if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,264,return getUTCYearDayType();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,266,return new YearDayType(chrono);
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,270,* Returns a PeriodType using the ISOChronology in current time zone of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,272,* <ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,273,* <li>years
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,274,* <li>months
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,275,* <li>days
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,276,* <li>hours (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,277,* <li>minutes (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,278,* <li>seconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,279,* <li>milliseconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,280,* </ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,243, This factory method returns a PeriodType that calculates using any
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,244," Chronology. For best results, the Chronology's time zone should"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,245, be UTC or have fixed offsets.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,299,* This factory method returns a PeriodType that calculates using any Chronology.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,307,if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,308,return getUTCYearMonthType();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,263, <li>hours
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,264, <li>minutes
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,265, <li>seconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,266, <li>milliseconds
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,320,* <li>hours (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,321,* <li>minutes (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,322,* <li>seconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,323,* <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,286, This factory method returns a PeriodType that calculates using any
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,287," Chronology. For best results, the Chronology's time zone should"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,288, be UTC or have fixed offsets.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,343,* This factory method returns a PeriodType that calculates using any Chronology.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,351,if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,352,return getUTCYearWeekType();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,303, <li>days (fixed at 24 hours)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,304, <li>hours
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,305, <li>minutes
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,306, <li>seconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,307, <li>milliseconds
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,362,"* <li>days (precise, fixed at 24 hours)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,363,* <li>hours (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,364,* <li>minutes (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,365,* <li>seconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,366,* <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,310,ublic static PeriodType getPreciseDayHourType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,311,eturn PRECISE_DAY_HOUR_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,369,public static PeriodType getUTCDayHourType() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,370,return UTC_DAY_HOUR_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,374,* Returns a PeriodType using the ISOChronology in UTC of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,376,* <ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,377,* <li>years
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,378,"* <li>days (precise, fixed at 24 hours)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,379,* <li>hours (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,380,* <li>minutes (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,381,* <li>seconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,382,* <li>milliseconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,383,* </ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,385,public static PeriodType getUTCYearDayType() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,386,return UTC_YEAR_DAY_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,390,* Returns a PeriodType using the ISOChronology in UTC of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,392,* <ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,393,* <li>years
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,394,* <li>months
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,395,"* <li>days (precise, fixed at 24 hours)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,396,* <li>hours (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,397,* <li>minutes (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,398,* <li>seconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,399,* <li>milliseconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,400,* </ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,402,public static PeriodType getUTCYearMonthType() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,403,return UTC_YEAR_MONTH_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,407,* Returns a PeriodType using the ISOChronology in UTC of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,409,* <ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,410,* <li>years
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,411,"* <li>weeks (precise, fixed at 7 days)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,412,"* <li>days (precise, fixed at 24 hours)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,413,* <li>hours (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,414,* <li>minutes (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,415,* <li>seconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,416,* <li>milliseconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,417,* </ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,419,public static PeriodType getUTCYearWeekType() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,420,return UTC_YEAR_WEEK_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,424,* Returns a PeriodType using the ISOChronology in UTC of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,426,* <ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,427,* <li>years
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,428,* <li>months
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,429,"* <li>weeks (precise, fixed at 7 days)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,430,"* <li>days (precise, fixed at 24 hours)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,431,* <li>hours (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,432,* <li>minutes (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,433,* <li>seconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,434,* <li>milliseconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,435,* </ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,437,public static PeriodType getUTCAllType() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,438,return UTC_ALL_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,318, <li>years (fixed at 365 days)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,319, <li>days (fixed at 24 hours)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,320, <li>hours
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,321, <li>minutes
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,322, <li>seconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,323, <li>milliseconds
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,446,"* <li>days (precise, fixed at 24 hours)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,447,* <li>hours (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,448,* <li>minutes (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,449,* <li>seconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,450,* <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,326,ublic static PeriodType getPreciseYearDayType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,327,eturn PRECISE_YEAR_DAY_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,453,public static PeriodType getPreciseDayHourType() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,454,return PRECISE_DAY_HOUR_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,334, <li>years (fixed at 365 days)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,335, <li>months (fixed at 30 days)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,336, <li>weeks (fixed at 7 days)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,337, <li>days (fixed at 24 hours)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,338, <li>hours
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,339, <li>minutes
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,340, <li>seconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,341, <li>milliseconds
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,461,"* <li>years (precise, fixed at 365 days)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,462,"* <li>days (precise, fixed at 24 hours)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,463,* <li>hours (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,464,* <li>minutes (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,465,* <li>seconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,466,* <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,344,ublic static PeriodType getPreciseAllType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,345,eturn PRECISE_ALL_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,469,public static PeriodType getPreciseYearDayType() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,470,return PRECISE_YEAR_DAY_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,352, <li>years (fixed at 365 days)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,353, <li>months (fixed at 30 days)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,354, <li>days (fixed at 24 hours)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,355, <li>hours
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,356, <li>minutes
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,357, <li>seconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,358, <li>milliseconds
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,477,"* <li>years (precise, fixed at 365 days)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,478,"* <li>months (precise, fixed at 30 days)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,479,"* <li>days (precise, fixed at 24 hours)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,480,* <li>hours (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,481,* <li>minutes (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,482,* <li>seconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,483,* <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,369, <li>years (fixed at 365 days)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,370, <li>weeks (fixed at 7 days)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,371, <li>days (fixed at 24 hours)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,372, <li>hours
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,373, <li>minutes
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,374, <li>seconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,375, <li>milliseconds
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,494,"* <li>years (precise, fixed at 365 days)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,495,"* <li>weeks (precise, fixed at 7 days)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,496,"* <li>days (precise, fixed at 24 hours)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,497,* <li>hours (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,498,* <li>minutes (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,499,* <li>seconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,500,* <li>milliseconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,508,* Returns a precise PeriodType using the ISOChronology in UTC of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,510,* <ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,511,"* <li>years (precise, fixed at 365 days)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,512,"* <li>months (precise, fixed at 30 days)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,513,"* <li>weeks (precise, fixed at 7 days)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,514,"* <li>days (precise, fixed at 24 hours)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,515,* <li>hours (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,516,* <li>minutes (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,517,* <li>seconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,518,* <li>milliseconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,519,* </ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,521,public static PeriodType getPreciseAllType() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,522,return PRECISE_ALL_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,883,private static class YearDayType extends DayHourType {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,884,private static final long serialVersionUID = 6567563546499L;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,886,YearDayType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,887,super(chrono);
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,890,public PeriodType withChronology(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,891,if (chrono == iChronology) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,892,return this;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,894,return PeriodType.getYearWeekType(chrono);
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,897,public boolean isPrecise() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,898,return years().isPrecise()
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,899,&& super.isPrecise();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,902,public DurationField years() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,903,return iChronology.weekyears();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,906,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,907,return getYearDayType(iChronology);
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,910,public String getName() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,911,"return ""YearDayType"";"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,114, The exact impact of this method is determined by the period type.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,115, Only precise fields in the period type will be used and the calculation will use UTC.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,116, <p>
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,117," If the duration is small, less than one day, then this method will perform"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,118, as you might expect and split the fields evenly. The situation is more complex
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,119, for larger durations.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,120, <p>
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,121, If this period uses the PreciseAll period type then all fields can be set.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,122," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,123," 1 year, 2 months and 5 days using the PreciseAll type."
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,124, <p>
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,125, If the period uses the All period type then the years and months fields
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,126," will remain as zero, with the duration allocated to the weeks field."
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,127," Normally, the weeks and days fields are imprecise, but this method"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,128, calculates using the UTC time zone making weeks and days precise.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,129, The effect is that a large duration of several years or months will be converted
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,130, to a period including a large number of weeks and zero years and months.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,131," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,132, 61 weeks and 3 days.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,133, <p>
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,134," For more control over the conversion process, you should convert the duration"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,135, to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,114,"* When dividing the duration, only precise fields in the period type will be used."
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,115,"* For large durations, all the remaining duration will be stored in the largest"
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,116,* available precise field.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,145, The exact impact of this method is determined by the period type.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,146, Only precise fields in the period type will be used and the calculation will use UTC.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,147, <p>
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,148," If the duration is small, less than one day, then this method will perform"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,149, as you might expect and split the fields evenly. The situation is more complex
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,150, for larger durations.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,151, <p>
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,152, If this period uses the PreciseAll period type then all fields can be set.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,153," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,154," 1 year, 2 months and 5 days using the PreciseAll type."
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,155, <p>
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,156, If the period uses the All period type then the years and months fields
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,157," will remain as zero, with the duration allocated to the weeks field."
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,158," Normally, the weeks and days fields are imprecise, but this method"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,159, calculates using the UTC time zone making weeks and days precise.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,160, The effect is that a large duration of several years or months will be converted
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,161, to a period including a large number of weeks and zero years and months.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,162," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,163, 61 weeks and 3 days.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,164, <p>
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,165," For more control over the conversion process, you should convert the duration"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,166, to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,126,"* When dividing the duration, only precise fields in the period type will be used."
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,127,"* For large durations, all the remaining duration will be stored in the largest"
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,128,* available precise field.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,214, The exact impact of this method is determined by the period type.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,215, Only precise fields in the period type will be used and the calculation will use UTC.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,216, <p>
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,217," If the duration is small, less than one day, then this method will perform"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,218, as you might expect and split the fields evenly. The situation is more complex
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,219, for larger durations.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,220, <p>
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,221, If this period uses the PreciseAll period type then all fields can be set.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,222," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,223," 1 year, 2 months and 5 days using the PreciseAll type."
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,224, <p>
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,225, If the period uses the All period type then the years and months fields
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,226," will remain as zero, with the duration allocated to the weeks field."
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,227," Normally, the weeks and days fields are imprecise, but this method"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,228, calculates using the UTC time zone making weeks and days precise.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,229, The effect is that a large duration of several years or months will be converted
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,230, to a period including a large number of weeks and zero years and months.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,231," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,232, 61 weeks and 3 days.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,233, <p>
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,234," For more control over the conversion process, you should convert the duration"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,235, to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,176,"* When dividing the duration, only precise fields in the period type will be used."
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,177,"* For large durations, all the remaining duration will be added to the largest"
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,178,* available precise field.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,246, The exact impact of this method is determined by the period type.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,247, Only precise fields in the period type will be used and the calculation will use UTC.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,248, <p>
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,249," If the duration is small, less than one day, then this method will perform"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,250, as you might expect and split the fields evenly. The situation is more complex
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,251, for larger durations.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,252, <p>
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,253, If this period uses the PreciseAll period type then all fields can be set.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,254," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,255," 1 year, 2 months and 5 days using the PreciseAll type."
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,256, <p>
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,257, If the period uses the All period type then the years and months fields
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,258," will remain as zero, with the duration allocated to the weeks field."
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,259," Normally, the weeks and days fields are imprecise, but this method"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,260, calculates using the UTC time zone making weeks and days precise.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,261, The effect is that a large duration of several years or months will be converted
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,262, to a period including a large number of weeks and zero years and months.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,263," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,264, 61 weeks and 3 days.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,265, <p>
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,266," For more control over the conversion process, you should convert the duration"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,267, to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,189,"* When dividing the duration, only precise fields in the period type will be used."
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,190,"* For large durations, all the remaining duration will be added to the largest"
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,191,* available precise field.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,91, Only precise fields in the period type will be used and the calculation will use UTC.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,91,* Only precise fields in the period type will be used.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,92,"* For AllType, this is the time fields only."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,93,"* The year, month, week and day fields will not be populated."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,94,* The period constructed will always be precise.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,94, as you might expect and split the fields evenly. The situation is more complex
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,95, for larger durations.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,97,* as you might expect and split the fields evenly.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,97," If the duration is larger then the years and months fields will remain as zero,"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,98, with the duration allocated to the weeks field.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,99," Normally, the weeks and days fields are imprecise, but this method"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,100, calculates using the UTC time zone making weeks and days precise.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,101, The effect is that a large duration of several years or months will be converted
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,102, to a period including a large number of weeks and zero years and months.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,103," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,104, 61 weeks and 3 days.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,99,* If the duration is larger than one day then all the remaining duration will
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,100,"* be stored in the largest available precise field, hours in this case."
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,106," For more control over the conversion process, you should convert the duration"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,107, to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,102,"* For example, a duration effectively equal to (365 + 60 + 5) days will be"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,103,* converted to ((365 + 60 + 5) * 24) hours by this constructor.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,104,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,105,"* For more control over the conversion process, you have two options:"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,106,* <ul>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,107,"* <li>convert the duration to an {@link Interval}, and from there obtain the period"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,108,* <li>specify a period type that contains precise definitions of the day and larger
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,109,"* fields, such as the UTC or precise types."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,110,* </ul>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,117, The exact impact of this method is determined by the period type.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,118, Only precise fields in the period type will be used and the calculation will use UTC.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,119, <p>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,120," If the duration is small, less than one day, then this method will perform"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,121, as you might expect and split the fields evenly. The situation is more complex
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,122, for larger durations.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,123, <p>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,124, If the period type is PreciseAll then all fields can be set.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,125," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,126," 1 year, 2 months and 5 days using the PreciseAll type."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,120,* Only precise fields in the period type will be used.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,121,* Imprecise fields will not be populated.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,122,* The period constructed will always be precise.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,128," If the period type is All then the years and months fields will remain as zero,"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,129, with the duration allocated to the weeks and days fields.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,130, The effect is that a large duration of several years or months will be converted
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,131, to a period including a large number of weeks and zero years and months.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,132," For example, a duration equal to (365 + 60 + 5) days will be converted to"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,133, 61 weeks and 3 days.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,124,* If the duration is small then this method will perform
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,125,* as you might expect and split the fields evenly.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,135," For more control over the conversion process, you should convert the duration"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,136, to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,127,* If the duration is large then all the remaining duration will
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,128,* be stored in the largest available precise field.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,129,"* For details as to which fields are precise, review the period type javadoc."
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,199,"ssertEquals(4, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,200,"ssertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,199,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,200,"assertEquals((4 * 24) + 5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,204,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,205,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,206,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,207,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,208, catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,204,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,205,"assertEquals(length, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,227,public void testConstructor_long3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,228,long length =
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,229,(4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,230,5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,231,6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,232,7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,233,MutablePeriod test = new MutablePeriod(length);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,234,"assertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,235,// only time fields are precise in AllType
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,236,"assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,237,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,238,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,239,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,240,"assertEquals((450 * 24) + 5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,241,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,242,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,243,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,244,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,245,"assertEquals(length, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,241,"ssertEquals(4, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,242,"ssertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,259,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,260,"assertEquals((4 * 24) + 5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,246,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,247,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,248,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,249,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,250, catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,264,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,265,"assertEquals(length, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,282,"ssertEquals(4, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,283,"ssertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,297,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,298,"assertEquals((4 * 24) + 5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,287,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,288,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,289,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,290,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,291, catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,302,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,303,"assertEquals(length, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,701,ystem.err.println(test);  // TODO
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,702,"ssertEquals(1, test.getYears());  // 365"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,703,"ssertEquals(2, test.getMonths()); // 31 + 30 (Jan + Feb)"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,704,"ssertEquals(3, test.getWeeks());  // 3 * 7"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,705,"ssertEquals(3, test.getDays());   // 3 left (one given to months)"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,706,"ssertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,701,// only time fields are precise
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,702,"assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,703,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,704,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,705,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,706,"assertEquals((450 * 24) + 5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,944,"MutablePeriod test = new MutablePeriod(100L, PeriodType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,945,long ms =
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,946,(4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,947,5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,948,6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,949,7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,950,test.add(ms);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,951,// only time fields are precise
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,952,"assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,953,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,954,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,955,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,956,"assertEquals((450 * 24) + 5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,957,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,958,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,959,"assertEquals(108, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,962,public void testAdd_long3() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,962,ublic void testAdd_long3() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,981,public void testAdd_long4() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,977,ublic void testAdd_long4() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,996,public void testAdd_long5() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,146,"ssertEquals(4, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,147,"ssertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,146,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,147,"assertEquals((4 * 24) + 5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,151,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,152,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,153,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,154,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,155, catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,151,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,152,"assertEquals(length, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,174,public void testConstructor_long3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,175,long length =
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,176,(4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,177,5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,178,6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,179,7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,180,Period test = new Period(length);
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,181,"assertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,182,// only time fields are precise in AllType
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,183,"assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,184,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,185,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,186,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,187,"assertEquals((450 * 24) + 5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,188,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,189,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,190,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,191,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,192,"assertEquals(length, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,188,"ssertEquals(4, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,189,"ssertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,206,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,207,"assertEquals((4 * 24) + 5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,193,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,194,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,195,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,196,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,197, catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,211,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,212,"assertEquals(length, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,229,"ssertEquals(4, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,230,"ssertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,244,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,245,"assertEquals((4 * 24) + 5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,234,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,235,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,236,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,237,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,238, catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,249,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,250,"assertEquals(length, test.toDurationMillis());"

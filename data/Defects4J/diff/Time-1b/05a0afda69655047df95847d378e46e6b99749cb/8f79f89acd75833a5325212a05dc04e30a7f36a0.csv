is_addition,old_file_path,new_file_path,line_num,content
False,src/example/org/joda/example/time/TimeZoneTable.java,src/example/org/joda/example/time/TimeZoneTable.java,66,ist aliases = new ArrayList();
True,src/example/org/joda/example/time/TimeZoneTable.java,src/example/org/joda/example/time/TimeZoneTable.java,66,List<ZoneData> aliases = new ArrayList<ZoneData>();
True,src/main/java/org/joda/time/DateTimeComparator.java,src/main/java/org/joda/time/DateTimeComparator.java,78,* <p>
True,src/main/java/org/joda/time/DateTimeComparator.java,src/main/java/org/joda/time/DateTimeComparator.java,79,* The time-zone is considered when using this comparator.
True,src/main/java/org/joda/time/DateTimeComparator.java,src/main/java/org/joda/time/DateTimeComparator.java,80,* The input millis are truncated using the time-zone of that input value.
True,src/main/java/org/joda/time/DateTimeComparator.java,src/main/java/org/joda/time/DateTimeComparator.java,81,"* Thus, two inputs with different time-zones will typically not be equal"
True,src/main/java/org/joda/time/DateTimeComparator.java,src/main/java/org/joda/time/DateTimeComparator.java,96,* <p>
True,src/main/java/org/joda/time/DateTimeComparator.java,src/main/java/org/joda/time/DateTimeComparator.java,97,* The time-zone is considered when using this comparator unless both limits are null.
True,src/main/java/org/joda/time/DateTimeComparator.java,src/main/java/org/joda/time/DateTimeComparator.java,98,* The input millis are rounded/truncated using the time-zone of that input value.
True,src/main/java/org/joda/time/DateTimeComparator.java,src/main/java/org/joda/time/DateTimeComparator.java,99,"* Thus, two inputs with different time-zones will typically not be equal"
True,src/main/java/org/joda/time/DateTimeComparator.java,src/main/java/org/joda/time/DateTimeComparator.java,121,* <p>
True,src/main/java/org/joda/time/DateTimeComparator.java,src/main/java/org/joda/time/DateTimeComparator.java,122,* The time-zone is considered when using this comparator.
True,src/main/java/org/joda/time/DateTimeComparator.java,src/main/java/org/joda/time/DateTimeComparator.java,123,* The input millis are rounded down to the start of the day
True,src/main/java/org/joda/time/DateTimeComparator.java,src/main/java/org/joda/time/DateTimeComparator.java,124,"* in the time-zone of that input value. Thus, two inputs with"
True,src/main/java/org/joda/time/DateTimeComparator.java,src/main/java/org/joda/time/DateTimeComparator.java,125,* different time-zones will typically not be equal
True,src/main/java/org/joda/time/DateTimeComparator.java,src/main/java/org/joda/time/DateTimeComparator.java,136,* <p>
True,src/main/java/org/joda/time/DateTimeComparator.java,src/main/java/org/joda/time/DateTimeComparator.java,137,* The time-zone is considered when using this comparator.
True,src/main/java/org/joda/time/DateTimeComparator.java,src/main/java/org/joda/time/DateTimeComparator.java,138,* The input millis are truncated to be within the day
True,src/main/java/org/joda/time/DateTimeComparator.java,src/main/java/org/joda/time/DateTimeComparator.java,139,"* in the time-zone of that input value. Thus, two inputs with"
True,src/main/java/org/joda/time/DateTimeComparator.java,src/main/java/org/joda/time/DateTimeComparator.java,140,* different time-zones will typically not be equal
False,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,31, DateTimeUtils is thread-safe although shared static variables are used.
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,31,* DateTimeUtils uses shared static variables which are declared as volatile
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,32,* for thread-safety. These can be changed during the lifetime of the application
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,33,* however doing so is generally a bad idea.
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,474,* Returns a new duration with this length multiplied by the
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,475,* specified multiplicand.
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,476,* This instance is immutable and is not altered.
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,477,* <p>
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,478,"* If the multiplicand is one, this instance is returned."
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,480,* @param multiplicand  the multiplicand to multiply this one by
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,481,* @return the new duration instance
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,483,public Duration multipliedBy(long multiplicand) {
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,484,if (multiplicand == 1) {
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,485,return this;
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,487,"return new Duration(FieldUtils.safeMultiply(getMillis(), multiplicand));"
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,491,* Returns a new duration with this length divided by the
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,492,* specified divisor.
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,493,* This instance is immutable and is not altered.
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,494,* <p>
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,495,"* If the divisor is one, this instance is returned."
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,497,* @param divisor  the divisor to divide this one by
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,498,* @return the new duration instance
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,500,public Duration dividedBy(long divisor) {
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,501,if (divisor == 1) {
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,502,return this;
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,504,"return new Duration(FieldUtils.safeDivide(getMillis(), divisor));"
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,508,* Returns a new duration with this length negated.
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,509,* This instance is immutable and is not altered.
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,511,* @return the new duration instance
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,513,public Duration negated() {
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,514,if (getMillis() == Long.MIN_VALUE) {
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,515,"throw new ArithmeticException(""Negation of this duration would overflow"");"
True,src/main/java/org/joda/time/Duration.java,src/main/java/org/joda/time/Duration.java,517,return new Duration(-getMillis());
False,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,113,rivate transient volatile int iHash;
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,113,private transient int iHash;
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1617,type = DateTimeUtils.getPeriodType(type);
False,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1623,"eriod result = new Period(millis, DateTimeUtils.getPeriodType(type), ISOChronology.getInstanceUTC());"
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1624,"Period result = new Period(millis, type, ISOChronology.getInstanceUTC());"
False,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1627,"ears = FieldUtils.safeAdd(years, months / 12);"
False,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1628,onths = months % 12;
False,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1629,f (years != 0) {
False,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1630,esult = result.withYears(years);
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1628,long totalMonths = years * 12L + months;
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1629,if (type.isSupported(DurationFieldType.YEARS_TYPE)) {
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1630,int normalizedYears = FieldUtils.safeToInt(totalMonths / 12);
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1631,result = result.withYears(normalizedYears);
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1632,totalMonths = totalMonths - (normalizedYears * 12);
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1634,if (type.isSupported(DurationFieldType.MONTHS_TYPE)) {
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1635,int normalizedMonths = FieldUtils.safeToInt(totalMonths);
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1636,result = result.withMonths(normalizedMonths);
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1637,totalMonths = totalMonths - normalizedMonths;
False,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1632,f (months != 0) {
False,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1633,esult = result.withMonths(months);
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1639,if (totalMonths != 0) {
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1640,"throw new UnsupportedOperationException(""Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: "" + toString());"
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,180,* Divides the dividend by the divisor throwing an exception if
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,181,* overflow occurs or the divisor is zero.
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,183,* @param dividend  the dividend
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,184,* @param divisor  the divisor
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,185,* @return the new total
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,186,* @throws ArithmeticException if the operation overflows or the divisor is zero
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,188,"public static long safeDivide(long dividend, long divisor) {"
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,189,if (dividend == Long.MIN_VALUE && divisor == -1L) {
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,190,"throw new ArithmeticException(""Multiplication overflows a long: "" + dividend + "" / "" + divisor);"
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,192,return dividend / divisor;
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,75,* <p>
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,76,* Parsing builds up the resultant instant by 'setting' the value of each parsed field
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,77,"* from largest to smallest onto an initial instant, typically 1970-01-01T00:00Z."
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,78,* This design means that day-of-month is set before day-of-week.
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,79,"* As such, if both the day-of-month and day-of-week are parsed, and the day-of-week"
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,80,"* is incorrect, then the day-of-week overrides the day-of-month."
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,82,* This has a side effect if the input is not consistent.
False,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,84,rivate final Info[] iInfoCache = new Info[cInfoCacheMask + 1];
True,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,src/main/java/org/joda/time/tz/CachedDateTimeZone.java,84,private final transient Info[] iInfoCache = new Info[cInfoCacheMask + 1];
False,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,48, Compiles Olson ZoneInfo database files into binary files for each time zone
True,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,48,* Compiles IANA ZoneInfo database files into binary files for each time zone
False,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,54, compatible. The latest Olson database files may be obtained
False,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,55," <a href=""http://www.twinsun.com/tz/tz-link.htm"">here</a>."
True,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,54,* compatible. The latest IANA time zone database files may be obtained
True,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,55,"* <a href=""http://www.iana.org/time-zones"">here</a>."
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,682,public void testMultipliedBy_long1() {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,683,Duration test = new Duration(123L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,684,Duration result = test.multipliedBy(2L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,685,"assertEquals(246L, result.getMillis());"
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,688,public void testMultipliedBy_long2() {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,689,Duration test = new Duration(123L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,690,Duration result = test.multipliedBy(1L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,691,"assertSame(test, result);"
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,695,public void testDividedBy_long1() {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,696,Duration test = new Duration(246L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,697,Duration result = test.dividedBy(2L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,698,"assertEquals(123L, result.getMillis());"
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,701,public void testDividedBy_long2() {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,702,Duration test = new Duration(123L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,703,Duration result = test.dividedBy(1L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,704,"assertSame(test, result);"
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,708,public void testNegated_long1() {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,709,Duration test = new Duration(246L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,710,Duration result = test.negated();
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,711,"assertEquals(-246L, result.getMillis());"
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,714,public void testNegated_long2() {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,715,Duration test = new Duration(-246L);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,716,Duration result = test.negated();
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,717,"assertEquals(246L, result.getMillis());"
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,720,public void testNegated_long3() {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,721,Duration test = new Duration(Long.MIN_VALUE);
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,722,try {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,723,test.negated();
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,724,fail();
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,725,} catch(ArithmeticException e) {
True,src/test/java/org/joda/time/TestDuration_Basics.java,src/test/java/org/joda/time/TestDuration_Basics.java,726,// expected
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,220,private static final long serialVersionUID = 1L;
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1520,public void testNormalizedStandard_periodType_months1() {
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1521,"Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1522,Period result = test.normalizedStandard(PeriodType.months());
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1523,"assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1524,"assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1527,public void testNormalizedStandard_periodType_months2() {
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1528,"Period test = new Period(-2, 15, 0, 0, 0, 0, 0, 0);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1529,Period result = test.normalizedStandard(PeriodType.months());
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1530,"assertEquals(new Period(-2, 15, 0, 0, 0, 0, 0, 0), test);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1531,"assertEquals(new Period(0, -9, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1534,public void testNormalizedStandard_periodType_months3() {
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1535,"Period test = new Period(0, 4, 0, 0, 0, 0, 0, 0);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1536,Period result = test.normalizedStandard(PeriodType.months());
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1537,"assertEquals(new Period(0, 4, 0, 0, 0, 0, 0, 0), test);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1538,"assertEquals(new Period(0, 4, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1541,public void testNormalizedStandard_periodType_years() {
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1542,"Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1543,try {
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1544,test.normalizedStandard(PeriodType.years());
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1545,fail();
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1546,} catch (UnsupportedOperationException ex) {
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1547,// expected
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1551,public void testNormalizedStandard_periodType_monthsWeeks() {
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1552,PeriodType type = PeriodType.forFields(new DurationFieldType[]{
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1553,"DurationFieldType.months(),"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1554,"DurationFieldType.weeks(),"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1555,DurationFieldType.days()});
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1556,"Period test = new Period(2, 4, 6, 0, 0, 0, 0, 0);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1557,Period result = test.normalizedStandard(type);
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1558,"assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1559,"assertEquals(new Period(0, 28, 6, 0, 0, 0, 0, 0, type), result);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,285,public void testSafeDivideLongLong() {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,286,"assertEquals(1L, FieldUtils.safeDivide(1L, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,288,"assertEquals(1L, FieldUtils.safeDivide(3L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,289,"assertEquals(0L, FieldUtils.safeDivide(1L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,290,"assertEquals(3L, FieldUtils.safeDivide(3L, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,292,"assertEquals(1L, FieldUtils.safeDivide(5L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,293,"assertEquals(-1L, FieldUtils.safeDivide(5L, -3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,294,"assertEquals(-1L, FieldUtils.safeDivide(-5L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,295,"assertEquals(1L, FieldUtils.safeDivide(-5L, -3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,297,"assertEquals(2L, FieldUtils.safeDivide(6L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,298,"assertEquals(-2L, FieldUtils.safeDivide(6L, -3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,299,"assertEquals(-2L, FieldUtils.safeDivide(-6L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,300,"assertEquals(2L, FieldUtils.safeDivide(-6L, -3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,302,"assertEquals(2L, FieldUtils.safeDivide(7L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,303,"assertEquals(-2L, FieldUtils.safeDivide(7L, -3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,304,"assertEquals(-2L, FieldUtils.safeDivide(-7L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,305,"assertEquals(2L, FieldUtils.safeDivide(-7L, -3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,307,"assertEquals(Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,308,"assertEquals(Long.MIN_VALUE, FieldUtils.safeDivide(Long.MIN_VALUE, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,309,"assertEquals(-Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, -1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,311,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,312,"FieldUtils.safeDivide(Long.MIN_VALUE, -1L);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,313,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,314,} catch (ArithmeticException e) {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,317,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,318,"FieldUtils.safeDivide(1L, 0L);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,319,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,320,} catch (ArithmeticException e) {

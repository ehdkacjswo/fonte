is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,973, Instructs the printer to emit a locale-specific time zone name. A
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,974, parser cannot be created from this builder if a time zone name is
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,975, appended.
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,973,* Instructs the printer to emit a locale-specific time zone name.
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,974,"* Using this method prevents parsing, because time zone names are not unique."
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,975,* See {@link #appendTimeZoneName(Map)}.
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,980,"eturn append0(new TimeZoneName(TimeZoneName.LONG_NAME), null);"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,980,"return append0(new TimeZoneName(TimeZoneName.LONG_NAME, null), null);"
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,984, Instructs the printer to emit a short locale-specific time zone
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,985, name. A parser cannot be created from this builder if time zone
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,986, name is appended.
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,984,"* Instructs the printer to emit a locale-specific time zone name, providing a lookup for parsing."
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,985,"* Time zone names are not unique, thus the API forces you to supply the lookup."
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,986,"* The names are searched in the order of the map, thus it is strongly recommended"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,987,* to use a {@code LinkedHashMap} or similar.
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,989,"* @param parseLookup  the table of names, not null"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,990,"* @return this DateTimeFormatterBuilder, for chaining"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,992,"public DateTimeFormatterBuilder appendTimeZoneName(Map<String, DateTimeZone> parseLookup) {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,993,"TimeZoneName pp = new TimeZoneName(TimeZoneName.LONG_NAME, parseLookup);"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,994,"return append0(pp, pp);"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,998,* Instructs the printer to emit a short locale-specific time zone name.
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,999,"* Using this method prevents parsing, because time zone names are not unique."
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1000,* See {@link #appendTimeZoneShortName(Map)}.
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,991,"eturn append0(new TimeZoneName(TimeZoneName.SHORT_NAME), null);"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1005,"return append0(new TimeZoneName(TimeZoneName.SHORT_NAME, null), null);"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1009,* Instructs the printer to emit a short locale-specific time zone
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1010,"* name, providing a lookup for parsing."
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1011,"* Time zone names are not unique, thus the API forces you to supply the lookup."
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1012,"* The names are searched in the order of the map, thus it is strongly recommended"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1013,* to use a {@code LinkedHashMap} or similar.
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1015,"* @param parseLookup  the table of names, not null"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1016,"* @return this DateTimeFormatterBuilder, for chaining"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1018,"public DateTimeFormatterBuilder appendTimeZoneShortName(Map<String, DateTimeZone> parseLookup) {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1019,"TimeZoneName pp = new TimeZoneName(TimeZoneName.SHORT_NAME, parseLookup);"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1020,"return append0(pp, pp);"
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2401,mplements DateTimePrinter {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2430,"implements DateTimePrinter, DateTimeParser {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2435,"private final Map<String, DateTimeZone> iParseLookup;"
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2408,imeZoneName(int type) {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2438,"TimeZoneName(int type, Map<String, DateTimeZone> parseLookup) {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2441,iParseLookup = parseLookup;
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2481,public int estimateParsedLength() {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2482,return (iType == SHORT_NAME ? 4 : 20);
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2485,"public int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2486,String str = text.substring(position);
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2487,for (String name : iParseLookup.keySet()) {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2488,if (str.startsWith(name)) {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2489,bucket.setZone(iParseLookup.get(name));
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2490,return position + name.length();
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2493,return ~position;
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,18,import java.util.LinkedHashMap;
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,19,import java.util.Locale;
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,20,import java.util.Map;
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,38,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,39,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,40,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,217,"ateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,218,"ssertEquals(""Asia/Tokyo"", f.print(new DateTime(2007, 3, 4, 0, 0, 0, zone)));"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,219,"ssertEquals(zone, f.parseDateTime(""Asia/Tokyo"").getZone());"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,225,"assertEquals(""Asia/Tokyo"", f.print(new DateTime(2007, 3, 4, 0, 0, 0, TOKYO)));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,226,"assertEquals(TOKYO, f.parseDateTime(""Asia/Tokyo"").getZone());"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,232,"ateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,233,"ateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, zone);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,239,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO);"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,243,"ateTimeZone zone = DateTimeZone.forID(""Europe/Paris"");"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,244,"ateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, zone);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,249,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, PARIS);"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,255,"ateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,256,"ateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, zone);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,260,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO);"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,259,"ssertEquals(dt, f.withZone(zone).parseDateTime(""2007-03-04 12:30 +09:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,263,"assertEquals(dt, f.withZone(TOKYO).parseDateTime(""2007-03-04 12:30 +09:00""));"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,268,"ateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,269,"ateTimeZone paris = DateTimeZone.forID(""Europe/Paris"");"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,270,"ateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, zone);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,272,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO);"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,272,"ssertEquals(dt, f.withZone(zone).parseDateTime(""2007-03-04 12:30 +09:00 Asia/Tokyo""));"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,273,"ssertEquals(dt.withZone(paris), f.withZone(paris).parseDateTime(""2007-03-04 12:30 +09:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,274,"assertEquals(dt, f.withZone(TOKYO).parseDateTime(""2007-03-04 12:30 +09:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,275,"assertEquals(dt.withZone(PARIS), f.withZone(PARIS).parseDateTime(""2007-03-04 12:30 +09:00 Asia/Tokyo""));"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,282,"ateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,285,"ssertEquals(expected.withZone(zone), f.withZone(zone).parseDateTime(""2007-03-04 12:30 +07:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,286,"assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime(""2007-03-04 12:30 +07:00""));"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,297,"ateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,300,"ssertEquals(expected.withZone(zone), f.parseDateTime(""2007-03-04 12:30 +07:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,300,"assertEquals(expected.withZone(TOKYO), f.parseDateTime(""2007-03-04 12:30 +07:00 Asia/Tokyo""));"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,302,"ssertEquals(expected.withZone(zone), f.withZone(zone).parseDateTime(""2007-03-04 12:30 +07:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,302,"assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime(""2007-03-04 12:30 +07:00 Asia/Tokyo""));"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,313,"ateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,314,"ateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, zone);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,313,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO);"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,326,"ateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,327,"ateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, zone);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,325,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO);"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,332,"ssertEquals(expected, f.withZone(zone).parseLocalDateTime(""2007-03-04 12:30 +09:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,330,"assertEquals(expected, f.withZone(TOKYO).parseLocalDateTime(""2007-03-04 12:30 +09:00""));"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,341,"ateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,342,"ateTimeZone paris = DateTimeZone.forID(""Europe/Paris"");"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,343,"ateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, zone);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,339,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO);"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,347,"ssertEquals(expected, f.withZone(zone).parseLocalDateTime(""2007-03-04 12:30 +09:00 Asia/Tokyo""));"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,348,"ssertEquals(expected, f.withZone(paris).parseLocalDateTime(""2007-03-04 12:30 +09:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,343,"assertEquals(expected, f.withZone(TOKYO).parseLocalDateTime(""2007-03-04 12:30 +09:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,344,"assertEquals(expected, f.withZone(PARIS).parseLocalDateTime(""2007-03-04 12:30 +09:00 Asia/Tokyo""));"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,356,"ateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,361,"ssertEquals(expected, f.withZone(zone).parseLocalDateTime(""2007-03-04 12:30 +07:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,356,"assertEquals(expected, f.withZone(TOKYO).parseLocalDateTime(""2007-03-04 12:30 +07:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,362,public void test_printParseShortName() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,363,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,364,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneShortName();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,365,DateTimeFormatter f = bld.toFormatter().withLocale(Locale.ENGLISH);
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,367,"DateTime dt1 = new DateTime(2011, 1, 4, 12, 30, 0, LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,368,"assertEquals(""2011-01-04 12:30 GMT"", f.print(dt1));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,369,"DateTime dt2 = new DateTime(2011, 7, 4, 12, 30, 0, LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,370,"assertEquals(""2011-07-04 12:30 BST"", f.print(dt2));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,371,try {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,372,"f.parseDateTime(""2007-03-04 12:30 GMT"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,373,fail();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,374,} catch (IllegalArgumentException e) {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,378,public void test_printParseShortNameWithLookup() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,379,"Map<String, DateTimeZone> lookup = new LinkedHashMap<String, DateTimeZone>();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,380,"lookup.put(""GMT"", LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,381,"lookup.put(""BST"", LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,382,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,383,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneShortName(lookup);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,384,DateTimeFormatter f = bld.toFormatter().withLocale(Locale.ENGLISH);
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,386,"DateTime dt1 = new DateTime(2011, 1, 4, 12, 30, 0, LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,387,"assertEquals(""2011-01-04 12:30 GMT"", f.print(dt1));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,388,"DateTime dt2 = new DateTime(2011, 7, 4, 12, 30, 0, LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,389,"assertEquals(""2011-07-04 12:30 BST"", f.print(dt2));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,391,"assertEquals(dt1, f.parseDateTime(""2011-01-04 12:30 GMT""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,392,"assertEquals(dt2, f.parseDateTime(""2011-07-04 12:30 BST""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,393,try {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,394,"f.parseDateTime(""2007-03-04 12:30 EST"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,395,fail();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,396,} catch (IllegalArgumentException e) {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,401,public void test_printParseLongName() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,402,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,403,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneName();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,404,DateTimeFormatter f = bld.toFormatter().withLocale(Locale.ENGLISH);
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,406,"DateTime dt1 = new DateTime(2011, 1, 4, 12, 30, 0, LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,407,"assertEquals(""2011-01-04 12:30 Greenwich Mean Time"", f.print(dt1));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,408,"DateTime dt2 = new DateTime(2011, 7, 4, 12, 30, 0, LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,409,"assertEquals(""2011-07-04 12:30 British Summer Time"", f.print(dt2));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,410,try {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,411,"f.parseDateTime(""2007-03-04 12:30 GMT"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,412,fail();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,413,} catch (IllegalArgumentException e) {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,417,public void test_printParseLongNameWithLookup() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,418,"Map<String, DateTimeZone> lookup = new LinkedHashMap<String, DateTimeZone>();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,419,"lookup.put(""Greenwich Mean Time"", LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,420,"lookup.put(""British Summer Time"", LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,421,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,422,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneName(lookup);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,423,DateTimeFormatter f = bld.toFormatter().withLocale(Locale.ENGLISH);
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,425,"DateTime dt1 = new DateTime(2011, 1, 4, 12, 30, 0, LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,426,"assertEquals(""2011-01-04 12:30 Greenwich Mean Time"", f.print(dt1));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,427,"DateTime dt2 = new DateTime(2011, 7, 4, 12, 30, 0, LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,428,"assertEquals(""2011-07-04 12:30 British Summer Time"", f.print(dt2));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,430,"assertEquals(dt1, f.parseDateTime(""2011-01-04 12:30 Greenwich Mean Time""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,431,"assertEquals(dt2, f.parseDateTime(""2011-07-04 12:30 British Summer Time""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,432,try {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,433,"f.parseDateTime(""2007-03-04 12:30 EST"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,434,fail();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,435,} catch (IllegalArgumentException e) {

is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,54,tatic final long MILLIS_1970_TO_2000 = 946684800000L;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,402,ong yearStart = getYearMillis(year);
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,400,long yearStart;
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,401,try {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,402,yearStart = getYearMillis(year);
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,403,} catch (ArithmeticException e) {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,404,if (instant > 0) {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,405,"throw new ArithmeticException(""Instant too large: "" + instant);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,406,} else {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,407,"throw new ArithmeticException(""Instant too small: "" + instant);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,406,f (diff < -DateTimeConstants.MILLIS_PER_DAY * 2L) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,407,"/ Too much error, assume operation overflowed."
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,408,eturn getYearOverflow(instant);
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,412,f (diff >= DateTimeConstants.MILLIS_PER_DAY * 367L) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,413,"/ Too much error, assume operation overflowed."
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,414,eturn getYearOverflow(instant);
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,426,f ((yearStart ^ instant) < 0) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,427,"/ Sign mismatch, operation may have overflowed."
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,428,f ((yearStart <  0 && (yearStart - oneYear) >= 0) ||
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,429,yearStart >= 0 && (yearStart - oneYear) <  0)   ) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,430,/ It overflowed.
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,431,eturn getYearOverflow(instant);
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,444,rivate int getYearOverflow(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,445,f (instant > 0) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,446,nt year = getMaxYear();
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,447,ong yearStartMillis = getYearMillis(year);
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,448,f (isLeapYear(year)) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,449,earStartMillis += DateTimeConstants.MILLIS_PER_DAY * 366L;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,450, else {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,451,earStartMillis += DateTimeConstants.MILLIS_PER_DAY * 365L;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,453,ong yearEndMillis = yearStartMillis - 1;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,455,f (instant <= yearEndMillis) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,456,eturn year;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,459,hrow new IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,460,"""Instant too large: "" + instant + "" > "" + yearEndMillis);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,461, else {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,462,nt year = getMinYear();
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,463,ong yearStartMillis = getYearMillis(year);
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,464,f (instant >= yearStartMillis) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,465,eturn year;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,468,hrow new IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,469,"""Instant too small: "" + instant + "" < "" + yearStartMillis);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,72,// The lowest year that can be fully supported.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,73,private static final int MIN_YEAR = -292269337;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,75,// The highest year that can be fully supported. Although
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,76,"// calculateFirstDayOfYearMillis can go higher without overflowing, the"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,77,// getYear method overflows when it adds the approximate millis at the
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,78,// epoch.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,79,private static final int MAX_YEAR = 292271022;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,296,if (year > MAX_YEAR) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,297,"throw new ArithmeticException(""Year is too large: "" + year + "" > "" + MAX_YEAR);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,299,if (year < MIN_YEAR) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,300,"throw new ArithmeticException(""Year is too small: "" + year + "" < "" + MIN_YEAR);"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,315,/ The lowest year that can be fully supported.
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,316,eturn -292269337;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,331,return MIN_YEAR;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,321,/ The highest year that can be fully supported.
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,322,eturn 292271022;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,336,return MAX_YEAR;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,56,private static final int DAYS_0000_TO_1970 = 719527;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,58,// The lowest year that can be fully supported.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,59,private static final int MIN_YEAR = -292275054;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,61,// The highest year that can be fully supported. Although
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,62,// calculateFirstDayOfYearMillis can operate on years up to 292278994
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,63,"// without overflowing, the getYear method overflows when it adds the"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,64,// approximate millis at the epoch.
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,65,private static final int MAX_YEAR = 292277023;
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,189,/ Calculate relative to 2000 as that is on a 400 year boundary
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,190,/ and that makes the sum easier
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,191,nt relativeYear = year - 2000;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,200,if (year > MAX_YEAR) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,201,"throw new ArithmeticException(""Year is too large: "" + year + "" > "" + MAX_YEAR);"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,203,if (year < MIN_YEAR) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,204,"throw new ArithmeticException(""Year is too small: "" + year + "" < "" + MIN_YEAR);"
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,193,nt leapYears = relativeYear / 100;
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,194,f (relativeYear <= 0) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,208,int leapYears = year / 100;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,209,if (year < 0) {
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,197,"/ (relativeYear / 4) - (relativeYear / 100) + (relativeYear / 400),"
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,212,"// (year / 4) - (year / 100) + (year / 400),"
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,200,eapYears = ((relativeYear + 3) >> 2) - leapYears + ((leapYears + 3) >> 2);
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,215,leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,202,eapYears = (relativeYear >> 2) - leapYears + (leapYears >> 2);
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,203,/ For post 2000 an adjustment is needed as jan1st is before leap day
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,204,f (!isLeapYear(year)) {
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,205,eapYears++;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,217,leapYears = (year >> 2) - leapYears + (leapYears >> 2);
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,218,if (isLeapYear(year)) {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,219,leapYears--;
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,209,ong millis = (relativeYear * 365L + leapYears)
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,210, (long)DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,212,/ Previous line was reduced from this to eliminate a multiplication.
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,213,/ millis = ((relativeYear - leapYears) * 365L + leapYears * 366) * MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,214,/ (x - y)*c + y*(c + 1) => x*c - y*c + y*c + y => x*c + y
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,216,eturn millis + MILLIS_1970_TO_2000;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,223,return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,220,/ The lowest year that can be fully supported.
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,221,eturn -292275054;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,227,return MIN_YEAR;
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,225,/ The highest year that can be fully supported.
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,226,eturn 292277023;
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,231,return MAX_YEAR;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,61,// The lowest year that can be fully supported.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,62,private static final int MIN_YEAR = -292269054;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,64,// The highest year that can be fully supported. Although
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,65,"// calculateFirstDayOfYearMillis can go higher without overflowing, the"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,66,// getYear method overflows when it adds the approximate millis at the
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,67,// epoch.
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,68,private static final int MAX_YEAR = 292271022;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,214,if (year > MAX_YEAR) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,215,"throw new ArithmeticException(""Year is too large: "" + year + "" > "" + MAX_YEAR);"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,217,if (year < MIN_YEAR) {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,218,"throw new ArithmeticException(""Year is too small: "" + year + "" < "" + MIN_YEAR);"
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,223,ong millis = (relativeYear * 365L + leapYears)
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,224, (long)DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,239,long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,232,/ The lowest year that can be fully supported.
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,233,eturn -292269054;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,247,return MIN_YEAR;
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,237,/ The highest year that can be fully supported.
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,238,eturn 292271022;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,251,return MAX_YEAR;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,24,import org.joda.time.DateTime;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,28,import org.joda.time.IllegalFieldValueException;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,242,public void testMaxYear() {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,243,final ISOChronology chrono = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,244,final int maxYear = chrono.year().getMaximumValue();
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,246,"DateTime start = new DateTime(maxYear, 1, 1, 0, 0, 0, 0, chrono);"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,247,"DateTime end = new DateTime(maxYear, 12, 31, 23, 59, 59, 999, chrono);"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,248,assertTrue(start.getMillis() > 0);
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,249,assertTrue(end.getMillis() > start.getMillis());
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,250,"assertEquals(maxYear, start.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,251,"assertEquals(maxYear, end.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,252,long delta = end.getMillis() - start.getMillis();
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,253,long expectedDelta =
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,254,(start.year().isLeap() ? 366L : 365L) * DateTimeConstants.MILLIS_PER_DAY - 1;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,255,"assertEquals(expectedDelta, delta);"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,257,"assertEquals(start, new DateTime(maxYear + ""-01-01T00:00:00.000Z"", chrono));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,258,"assertEquals(end, new DateTime(maxYear + ""-12-31T23:59:59.999Z"", chrono));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,260,try {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,261,start.plusYears(1);
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,262,fail();
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,263,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,266,try {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,267,end.plusYears(1);
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,268,fail();
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,269,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,272,try {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,273,chrono.year().get(Long.MAX_VALUE);
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,274,fail();
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,275,} catch (ArithmeticException e) {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,279,public void testMinYear() {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,280,final ISOChronology chrono = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,281,final int minYear = chrono.year().getMinimumValue();
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,283,"DateTime start = new DateTime(minYear, 1, 1, 0, 0, 0, 0, chrono);"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,284,"DateTime end = new DateTime(minYear, 12, 31, 23, 59, 59, 999, chrono);"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,285,assertTrue(start.getMillis() < 0);
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,286,assertTrue(end.getMillis() > start.getMillis());
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,287,"assertEquals(minYear, start.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,288,"assertEquals(minYear, end.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,289,long delta = end.getMillis() - start.getMillis();
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,290,long expectedDelta =
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,291,(start.year().isLeap() ? 366L : 365L) * DateTimeConstants.MILLIS_PER_DAY - 1;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,292,"assertEquals(expectedDelta, delta);"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,294,"assertEquals(start, new DateTime(minYear + ""-01-01T00:00:00.000Z"", chrono));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,295,"assertEquals(end, new DateTime(minYear + ""-12-31T23:59:59.999Z"", chrono));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,297,try {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,298,start.minusYears(1);
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,299,fail();
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,300,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,303,try {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,304,end.minusYears(1);
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,305,fail();
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,306,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,309,try {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,310,chrono.year().get(Long.MIN_VALUE);
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,311,fail();
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,312,} catch (ArithmeticException e) {

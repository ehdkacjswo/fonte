is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,608,* Converts this object to a YearMonthDay using the same millis and chronology.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,610,* @return a YearMonthDay using the same millis and chronology
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,612,public YearMonthDay toYearMonthDay() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,613,"return new YearMonthDay(getMillis(), getChronology());"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,617,* Converts this object to an Interval encompassing the whole of this day.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,618,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,619,"* The interval starts at midnight 00:00 and ends at 00:00 the following day,"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,620,"* (which is not included in the interval, as intervals are half-open)."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,622,* @return a YearMonthDay using the same millis and chronology
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,624,public Interval toInterval() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,625,"return new Interval(this, Period.days(1));"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,739, Get this object as a DateMidnight using the same millis and chronology.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,739,* Converts this object to a DateMidnight using the same millis and chronology.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,748,* Converts this object to a YearMonthDay using the same millis and chronology.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,750,* @return a YearMonthDay using the same millis and chronology
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,752,public YearMonthDay toYearMonthDay() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,753,"return new YearMonthDay(getMillis(), getChronology());"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,757,* Converts this object to a TimeOfDay using the same millis and chronology.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,759,* @return a TimeOfDay using the same millis and chronology
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,761,public TimeOfDay toTimeOfDay() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,762,"return new TimeOfDay(getMillis(), getChronology());"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,81," Gets the chronology of the instant, null if not applicable."
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,81,* Gets the chronology of the instant.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,86," @return the Chronology, null if not applicable"
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,86,"* @return the Chronology, never null"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,91," Gets the time zone of the instant, null if not applicable."
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,91,* Gets the time zone of the instant from the chronology.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,93," @return the DateTimeZone, null if not applicable"
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,93,"* @return the DateTimeZone that the instant is using, never null"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,188, (getChronology() == null ? 0 : getChronology().hashCode())
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,188,* (getChronology().hashCode())
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,407,* Converts this object to an Interval representing the whole day
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,408,* in the default time zone.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,410,* @return the DateMidnight instance in the default zone
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,412,public Interval toInterval() {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,413,return toInterval(null);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,417,* Converts this object to an Interval representing the whole day.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,419,"* @param zone  the zone to get the Interval in, null means default"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,420,* @return the DateMidnight instance
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,422,public Interval toInterval(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,423,zone = DateTimeUtils.getZone(zone);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,424,DateMidnight start = toDateMidnight(zone);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,425,"return new Interval(start, start.plus(Period.days(1)));"
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,293,alendar cal;
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,294,f (zone == null) {
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,295,al = Calendar.getInstance(locale);
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,296, else {
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,297,"al = Calendar.getInstance(zone.toTimeZone(), locale);"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,293,"Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);"
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,310,regorianCalendar cal;
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,311,f (zone == null) {
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,312,al = new GregorianCalendar();
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,313, else {
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,314,al = new GregorianCalendar(zone.toTimeZone());
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,305,GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,100," Gets the time zone of the datetime from the chronology, or null if there"
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,101, isn't any chronology.
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,100,* Gets the time zone of the instant from the chronology.
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,103, @return the DateTimeZone that the datetime is using
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,102,"* @return the DateTimeZone that the instant is using, never null"
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,106,hronology chrono = getChronology();
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,107,eturn (chrono != null ? chrono.getZone() : null);
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,105,return getChronology().getZone();
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,279,getChronology() == null ? 0 : getChronology().hashCode());
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,277,(getChronology().hashCode());
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,62,mport org.joda.time.TimeOfDay;
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,63,mport org.joda.time.YearMonthDay;
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,393, Get this object as a YearMonthDay and chronology.
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,395, @return a YearMonthDay using the same millis and chronology
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,397,ublic YearMonthDay toYearMonthDay() {
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,398,"eturn new YearMonthDay(getMillis(), getChronology());"
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,402, Get this object as a TimeOfDay and chronology.
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,404, @return a TimeOfDay using the same millis and chronology
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,406,ublic TimeOfDay toTimeOfDay() {
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,407,"eturn new TimeOfDay(getMillis(), getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,70,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,73,import org.joda.time.field.UnsupportedDateTimeField;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,630,public void testToYearMonthDay() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,631,"DateMidnight base = new DateMidnight(TEST_TIME1_UTC, Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,632,YearMonthDay test = base.toYearMonthDay();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,633,"assertEquals(new YearMonthDay(TEST_TIME1_UTC, Chronology.getCoptic()), test);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,636,public void testToInterval() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,637,"DateMidnight base = new DateMidnight(TEST_TIME1_UTC, Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,638,Interval test = base.toInterval();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,639,DateMidnight end = base.plus(Period.days(1));
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,640,"assertEquals(new Interval(base, end), test);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,711,public void testWithFields_RPartial() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,712,"DateMidnight test = new DateMidnight(2004, 5, 6);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,713,"DateMidnight result = test.withFields(new YearMonthDay(2003, 4, 5));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,714,"DateMidnight expected = new DateMidnight(2003, 4, 5);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,715,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,717,test = new DateMidnight(TEST_TIME1_UTC);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,718,result = test.withFields(null);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,719,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,723,public void testWithField1() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,724,"DateMidnight test = new DateMidnight(2004, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,725,"DateMidnight result = test.withField(DateTimeFieldType.year(), 2006);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,727,"assertEquals(new DateMidnight(2004, 6, 9), test);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,728,"assertEquals(new DateMidnight(2006, 6, 9), result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,731,public void testWithField2() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,732,"DateMidnight test = new DateMidnight(2004, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,733,"DateMidnight result = test.withField(null, 6);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,734,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,738,public void testWithFieldAdded1() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,739,"DateMidnight test = new DateMidnight(2004, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,740,"DateMidnight result = test.withFieldAdded(DurationFieldType.years(), 6);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,742,"assertEquals(new DateMidnight(2004, 6, 9), test);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,743,"assertEquals(new DateMidnight(2010, 6, 9), result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,746,public void testWithFieldAdded2() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,747,"DateMidnight test = new DateMidnight(2004, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,748,"DateMidnight result = test.withFieldAdded(null, 6);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,749,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,753,public void testWithDurationAdded_long_int() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,754,"DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,755,"DateMidnight result = test.withDurationAdded(123456789L, 1);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,756,"DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,757,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,759,"result = test.withDurationAdded(123456789L, 0);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,760,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,762,"result = test.withDurationAdded(123456789L, 2);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,763,"expected = new DateMidnight(test.getMillis() + (2L * 123456789L), BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,764,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,766,"result = test.withDurationAdded(123456789L, -3);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,767,"expected = new DateMidnight(test.getMillis() - (3L * 123456789L), BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,768,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,772,public void testWithDurationAdded_RD_int() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,773,"DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,774,"DateMidnight result = test.withDurationAdded(new Duration(123456789L), 1);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,775,"DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,776,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,778,"result = test.withDurationAdded(null, 1);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,779,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,781,"result = test.withDurationAdded(new Duration(123456789L), 0);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,782,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,784,"result = test.withDurationAdded(new Duration(123456789L), 2);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,785,"expected = new DateMidnight(test.getMillis() + (2L * 123456789L), BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,786,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,788,"result = test.withDurationAdded(new Duration(123456789L), -3);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,789,"expected = new DateMidnight(test.getMillis() - (3L * 123456789L), BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,790,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,794,public void testWithDurationAdded_RP_int() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,795,"DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,796,"DateMidnight result = test.withPeriodAdded(new Period(1, 2, 3, 4, 5, 6, 7, 8), 1);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,797,"DateMidnight expected = new DateMidnight(2003, 7, 28, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,798,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,800,"result = test.withPeriodAdded(null, 1);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,801,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,803,"result = test.withPeriodAdded(new Period(1, 2, 3, 4, 5, 6, 7, 8), 0);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,804,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,806,"result = test.withPeriodAdded(new Period(1, 2, 0, 4, 5, 6, 7, 8), 3);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,807,"expected = new DateMidnight(2005, 11, 15, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,808,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,810,"result = test.withPeriodAdded(new Period(1, 2, 0, 1, 1, 2, 3, 4), -1);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,811,"expected = new DateMidnight(2001, 3, 1, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,812,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,816,public void testPlus_long() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,817,"DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,818,DateMidnight result = test.plus(123456789L);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,819,"DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,820,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,823,public void testPlus_RD() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,824,"DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,825,DateMidnight result = test.plus(new Duration(123456789L));
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,826,"DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,827,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,829,result = test.plus((ReadableDuration) null);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,830,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,833,public void testPlus_RP() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,834,"DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,835,"DateMidnight result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,836,"DateMidnight expected = new DateMidnight(2003, 7, 28, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,837,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,839,result = test.plus((ReadablePeriod) null);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,840,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,844,public void testMinus_long() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,845,"DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,846,DateMidnight result = test.minus(123456789L);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,847,"DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,848,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,851,public void testMinus_RD() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,852,"DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,853,DateMidnight result = test.minus(new Duration(123456789L));
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,854,"DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,855,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,857,result = test.minus((ReadableDuration) null);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,858,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,861,public void testMinus_RP() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,862,"DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,863,"DateMidnight result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,864,"DateMidnight expected = new DateMidnight(2001, 3, 25, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,865,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,867,result = test.minus((ReadablePeriod) null);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,868,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,872,public void testProperty() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,873,DateMidnight test = new DateMidnight();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,874,"assertEquals(test.year(), test.property(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,875,"assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,876,"assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,877,"assertEquals(test.property(DateTimeFieldType.millisOfSecond()), test.property(DateTimeFieldType.millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,878,"DateTimeFieldType bad = new DateTimeFieldType(""bad"") {"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,879,public DurationFieldType getDurationType() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,880,return DurationFieldType.weeks();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,882,public DurationFieldType getRangeDurationType() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,883,return null;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,885,public DateTimeField getField(Chronology chronology) {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,886,"return UnsupportedDateTimeField.getInstance(this, null);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,889,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,890,test.property(bad);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,891,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,892,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,311,public void testGetIntervalChronology_RInterval() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,312,"Interval dt = new Interval(123L, 456L, Chronology.getBuddhist());"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,313,"assertEquals(Chronology.getBuddhist(), DateTimeUtils.getIntervalChronology(dt));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,315,"assertEquals(Chronology.getISO(), DateTimeUtils.getIntervalChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,317,MutableInterval ai = new MutableInterval() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,318,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,319,return null; // testing for this
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,322,"assertEquals(Chronology.getISO(), DateTimeUtils.getIntervalChronology(ai));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,326,public void testGetIntervalChronology_RI_RI() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,327,"DateTime dt1 = new DateTime(123L, Chronology.getBuddhist());"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,328,"DateTime dt2 = new DateTime(123L, Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,329,"assertEquals(Chronology.getBuddhist(), DateTimeUtils.getIntervalChronology(dt1, dt2));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,330,"assertEquals(Chronology.getBuddhist(), DateTimeUtils.getIntervalChronology(dt1, null));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,331,"assertEquals(Chronology.getCoptic(), DateTimeUtils.getIntervalChronology(null, dt2));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,332,"assertEquals(Chronology.getISO(), DateTimeUtils.getIntervalChronology(null, null));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,74,import org.joda.time.field.UnsupportedDateTimeField;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,665,public void testToDateMidnight() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,666,"DateTime base = new DateTime(TEST_TIME1, Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,667,DateMidnight test = base.toDateMidnight();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,668,"assertEquals(new DateMidnight(base, Chronology.getCoptic()), test);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,671,public void testToYearMonthDay() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,672,"DateTime base = new DateTime(TEST_TIME1, Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,673,YearMonthDay test = base.toYearMonthDay();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,674,"assertEquals(new YearMonthDay(TEST_TIME1, Chronology.getCoptic()), test);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,677,public void testToTimeOfDay() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,678,"DateTime base = new DateTime(TEST_TIME1, Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,679,TimeOfDay test = base.toTimeOfDay();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,680,"assertEquals(new TimeOfDay(TEST_TIME1, Chronology.getCoptic()), test);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,949,public void testProperty() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,950,DateTime test = new DateTime();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,951,"assertEquals(test.year(), test.property(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,952,"assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,953,"assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,954,"assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,955,"DateTimeFieldType bad = new DateTimeFieldType(""bad"") {"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,956,public DurationFieldType getDurationType() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,957,return DurationFieldType.weeks();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,959,public DurationFieldType getRangeDurationType() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,960,return null;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,962,public DateTimeField getField(Chronology chronology) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,963,"return UnsupportedDateTimeField.getInstance(this, null);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,966,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,967,test.property(bad);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,968,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,969,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,519,public void testWithDurationAdded_long_int() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,520,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,521,"Instant result = test.withDurationAdded(123456789L, 1);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,522,Instant expected = new Instant(TEST_TIME1 + 123456789L);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,523,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,525,"result = test.withDurationAdded(123456789L, 0);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,526,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,528,"result = test.withDurationAdded(123456789L, 2);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,529,expected = new Instant(TEST_TIME1 + (2L * 123456789L));
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,530,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,532,"result = test.withDurationAdded(123456789L, -3);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,533,expected = new Instant(TEST_TIME1 - (3L * 123456789L));
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,534,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,538,public void testWithDurationAdded_RD_int() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,539,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,540,"Instant result = test.withDurationAdded(new Duration(123456789L), 1);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,541,Instant expected = new Instant(TEST_TIME1 + 123456789L);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,542,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,544,"result = test.withDurationAdded(null, 1);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,545,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,547,"result = test.withDurationAdded(new Duration(123456789L), 0);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,548,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,550,"result = test.withDurationAdded(new Duration(123456789L), 2);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,551,expected = new Instant(TEST_TIME1 + (2L * 123456789L));
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,552,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,554,"result = test.withDurationAdded(new Duration(123456789L), -3);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,555,expected = new Instant(TEST_TIME1 - (3L * 123456789L));
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,556,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,560,public void testPlus_long() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,561,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,562,Instant result = test.plus(123456789L);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,563,Instant expected = new Instant(TEST_TIME1 + 123456789L);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,564,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,567,public void testPlus_RD() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,568,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,569,Instant result = test.plus(new Duration(123456789L));
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,570,Instant expected = new Instant(TEST_TIME1 + 123456789L);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,571,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,573,result = test.plus((ReadableDuration) null);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,574,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,578,public void testMinus_long() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,579,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,580,Instant result = test.minus(123456789L);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,581,Instant expected = new Instant(TEST_TIME1 - 123456789L);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,582,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,585,public void testMinus_RD() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,586,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,587,Instant result = test.minus(new Duration(123456789L));
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,588,Instant expected = new Instant(TEST_TIME1 - 123456789L);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,589,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,591,result = test.minus((ReadableDuration) null);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,592,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,490,public void testWithChronology1() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,491,"Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,492,Interval test = base.withChronology(Chronology.getBuddhist());
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,493,"assertEquals(new Interval(TEST_TIME1, TEST_TIME2, Chronology.getBuddhist()), test);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,496,public void testWithChronology2() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,497,"Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,498,Interval test = base.withChronology(null);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,499,"assertEquals(new Interval(TEST_TIME1, TEST_TIME2, Chronology.getISO()), test);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,611,public void testWithDurationAfterStart4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,612,"Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,613,Interval test = base.withDurationAfterStart(base.toDuration());
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,615,"assertSame(base, test);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,643,public void testWithDurationBeforeEnd4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,644,"Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,645,Interval test = base.withDurationBeforeEnd(base.toDuration());
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,647,"assertSame(base, test);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,137,* Test factory (long)
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,139,public void testFactoryMillisOfDay_long1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,140,TimeOfDay test = TimeOfDay.fromMillisOfDay(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,141,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,142,"assertEquals(1, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,143,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,144,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,145,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,149,"* Test factory (long, Chronology)"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,151,public void testFactoryMillisOfDay_long1_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,152,"TimeOfDay test = TimeOfDay.fromMillisOfDay(TEST_TIME1, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,153,"assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,154,"assertEquals(1, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,155,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,156,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,157,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,161,"* Test factory (long, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,163,public void testFactoryMillisOfDay_long_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,164,"TimeOfDay test = TimeOfDay.fromMillisOfDay(TEST_TIME1, null);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,165,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,166,"assertEquals(1, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,167,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,168,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,169,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,441,public void testToInterval() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,442,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,443,Interval test = base.toInterval();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,444,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,445,DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,446,DateTime end = start.plus(Period.days(1));
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,447,"Interval expected = new Interval(start, end);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,448,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,452,public void testToInterval_Zone() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,453,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,454,Interval test = base.toInterval(TOKYO);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,455,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,456,"DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT, TOKYO);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,457,DateTime end = start.plus(Period.days(1));
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,458,"Interval expected = new Interval(start, end);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,459,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,462,public void testToInterval_nullZone() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,463,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,464,Interval test = base.toInterval(null);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,465,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,466,"DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT, LONDON);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,467,DateTime end = start.plus(Period.days(1));
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,468,"Interval expected = new Interval(start, end);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,469,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,67,import org.joda.time.MutableDateTime;
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,146,MutableDateTime mdt = new MutableDateTime() {
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,147,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,148,return null; // bad
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,151,"assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(mdt));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,164,MutableDateTime mdt = new MutableDateTime() {
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,165,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,166,return null; // bad
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,169,"assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(mdt, PARIS));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,173,public void testSetIntoInterval_Object3() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,174,"MutableInterval i = new MutableInterval(0L, 123L) {"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,175,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,176,return null; // bad
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,179,"MutableInterval m = new MutableInterval(-1000L, 1000L, Chronology.getBuddhist());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,180,"ReadableIntervalConverter.INSTANCE.setInto(m, i, Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,181,"assertEquals(0L, m.getStartMillis());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,182,"assertEquals(123L, m.getEndMillis());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,183,"assertEquals(Chronology.getISO(), m.getChronology());"

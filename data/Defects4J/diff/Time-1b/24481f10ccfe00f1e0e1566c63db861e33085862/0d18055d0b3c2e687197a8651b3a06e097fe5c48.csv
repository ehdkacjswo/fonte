is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,59, A <code>ReadablePartial</code> supports a set of fields which be be a
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,60, subset of those on the chronology.
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,61, A <code>ReadablePartial</code> cannot be compared to a <code>ReadableInstant</code>.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,59,* A <code>ReadablePartial</code> supports a subset of those fields on the chronology.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,60,"* It cannot be compared to a <code>ReadableInstant</code>, as it does not fully"
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,61,"* specify an instant in time. The time it does specify is a local time, and does"
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,62,* not include a time zone.
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,65, instant that can be used to 'fill in the gaps'.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,66,* instant that can be used to 'fill in the gaps' and specify a time zone.
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,76,nt getFieldSize();
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,77,int size();
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,79, Gets the field at the specified index.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,80,* Gets the field type at the specified index.
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,85,ateTimeField getField(int index);
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,86,DateTimeFieldType getFieldType(int index);
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,88, Gets an array of the fields that this partial supports.
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,89, <p>
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,90," The fields are returned largest to smallest, for example Hour, Minute, Second."
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,89,* Gets the field at the specified index.
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,92," @return the fields supported in an array that may be altered, largest to smallest"
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,91,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,92,* @return the field at the specified index
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,93,* @throws IndexOutOfBoundsException if the index is invalid
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,94,ateTimeField[] getFields();
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,95,DateTimeField getField(int index);
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,106, Gets an array of the value of each of the fields that this partial supports.
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,107, <p>
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,108," The fields are returned largest to smallest, for example Hour, Minute, Second."
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,109, Each value corresponds to the same array index as <code>getFields()</code>
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,111," @return the current values of each field in an array that may be altered, largest to smallest"
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,113,nt[] getValues();
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,126, Get the value of one of the fields of a datetime.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,117,* Gets the value of one of the fields.
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,128, The field specified must be one of those that is supported by the partial.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,119,* The field type specified must be one of those that is supported by the partial.
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,130, @param field  a DateTimeField instance that is supported by this partial
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,121,* @param field  a DateTimeFieldType instance that is supported by this partial
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,134,nt get(DateTimeField field);
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,125,int get(DateTimeFieldType field);
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,137, Checks whether the field specified is supported by this partial.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,128,* Checks whether the field type specified is supported by this partial.
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,142,oolean isSupported(DateTimeField field);
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,133,boolean isSupported(DateTimeFieldType field);
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,191," chronology, same fields in same order and same values."
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,182,"* chronology, same field types (in same order) and same values."
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,207,      total = 23 * total + fields[i].hashCode();
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,198,*      total = 23 * total + fieldTypes[i].hashCode();
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,99,/** The singleton set of field types */
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,100,private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,101,"DateTimeFieldType.hourOfDay(),"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,102,"DateTimeFieldType.minuteOfHour(),"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,103,"DateTimeFieldType.secondOfMinute(),"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,104,"DateTimeFieldType.millisOfSecond(),"
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,313,ublic int getFieldSize() {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,320,public int size() {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,349,* Gets the field type at the specified index.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,351,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,352,* @return the field at the specified index
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,353,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,355,public DateTimeFieldType getFieldType(int index) {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,356,return FIELD_TYPES[index];
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,360,* Gets an array of the field type of each of the fields that this partial supports.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,361,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,362,"* The fields are returned largest to smallest, Hour, Minute, Second, Millis."
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,364,"* @return the array of field types (cloned), largest to smallest"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,366,public DateTimeFieldType[] getFieldTypes() {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,367,return (DateTimeFieldType[]) FIELD_TYPES.clone();
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,98,/** The singleton set of field types */
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,99,private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,100,"DateTimeFieldType.year(),"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,101,"DateTimeFieldType.monthOfYear(),"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,102,"DateTimeFieldType.dayOfMonth(),"
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,245,ublic int getFieldSize() {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,251,public int size() {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,278,* Gets the field type at the specified index.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,280,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,281,* @return the field at the specified index
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,282,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,284,public DateTimeFieldType getFieldType(int index) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,285,return FIELD_TYPES[index];
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,289,* Gets an array of the field type of each of the fields that this partial supports.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,290,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,291,"* The fields are returned largest to smallest, Year, Month, Day"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,293,"* @return the array of field types (cloned), largest to smallest"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,295,public DateTimeFieldType[] getFieldTypes() {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,296,return (DateTimeFieldType[]) FIELD_TYPES.clone();
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,59,import org.joda.time.DateTimeFieldType;
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,107,* Gets the field type at the specifed index.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,109,* @param index  the index
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,110,* @return the field type
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,111,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,113,public DateTimeFieldType getFieldType(int index) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,114,"return getField(index, getChronology()).getType();"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,118,* Gets an array of the field types that this partial supports.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,119,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,120,"* The fields are returned largest to smallest, for example Hour, Minute, Second."
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,122,"* @return the fields supported in an array that may be altered, largest to smallest"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,124,public DateTimeFieldType[] getFieldTypes() {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,125,DateTimeFieldType[] result = new DateTimeFieldType[size()];
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,126,for (int i = 0; i < result.length; i++) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,127,result[i] = getFieldType(i);
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,129,return result;
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,124,ateTimeField[] result = new DateTimeField[getFieldSize()];
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,151,DateTimeField[] result = new DateTimeField[size()];
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,140,nt[] result = new int[getFieldSize()];
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,167,int[] result = new int[size()];
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,153, @param field  a DateTimeField instance that is supported by this partial
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,180,* @param type  a DateTimeFieldType instance that is supported by this partial
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,157,ublic int get(DateTimeField field) {
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,158,"or (int i = 0, isize = getFieldSize(); i < isize; i++) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,159,f (getField(i) == field) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,184,public int get(DateTimeFieldType type) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,185,"for (int i = 0, isize = size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,186,if (getFieldType(i) == type) {
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,163,"hrow new IllegalArgumentException(""Field '"" + field + ""' is not supported"");"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,190,"throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,169," @param field  the field to check, may be null which returns false"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,196,"* @param type  the type to check, may be null which returns false"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,172,ublic boolean isSupported(DateTimeField field) {
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,173,"or (int i = 0, isize = getFieldSize(); i < isize; i++) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,174,f (getField(i) == field) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,199,public boolean isSupported(DateTimeFieldType type) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,200,"for (int i = 0, isize = size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,201,if (getFieldType(i) == type) {
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,247,"or (int i = 0, isize = getFieldSize(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,274,"for (int i = 0, isize = size(); i < isize; i++) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,256, fields and values are equal.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,283,* field types and values are equal.
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,266,f (getFieldSize() != other.getFieldSize()) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,293,if (size() != other.size()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,269,"or (int i = 0, isize = getFieldSize(); i < isize; i++) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,270,f (getValue(i) != other.getValue(i) || getField(i) != other.getField(i)) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,296,"for (int i = 0, isize = size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,297,if (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,285,"or (int i = 0, isize = getFieldSize(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,312,"for (int i = 0, isize = size(); i < isize; i++) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,287,otal = 23 * total + getField(i).hashCode();
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,314,total = 23 * total + getFieldType(i).hashCode();
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,242,nt[] values = new int[getFieldSize()];
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,242,int[] values = new int[size()];
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,210, @param instant  the partial instant to validate
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,210,* @param partial  the partial instant to validate
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,214,"ublic void validate(ReadablePartial instant, int[] values) {"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,215,ateTimeField[] fields = instant.getFields();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,214,"public void validate(ReadablePartial partial, int[] values) {"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,218,or (int i = 0; i < fields.length; i++) {
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,219,f (values[i] < fields[i].getMinimumValue()) {
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,220,"hrow new IllegalArgumentException(""Value "" + values[i] +"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,221," for "" + fields[i].getName() + "" is less than minimum"");"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,217,int size = partial.size();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,218,for (int i = 0; i < size; i++) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,219,int value = values[i];
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,220,DateTimeField field = partial.getField(i);
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,221,if (value < field.getMinimumValue()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,222,"throw new IllegalArgumentException(""Value "" + value +"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,223,""" for "" + field.getName() + "" is less than minimum"");"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,223,f (values[i] > fields[i].getMaximumValue()) {
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,224,"hrow new IllegalArgumentException(""Value "" + values[i] +"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,225," for "" + fields[i].getName() + "" is greater than maximum"");"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,225,if (value > field.getMaximumValue()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,226,"throw new IllegalArgumentException(""Value "" + value +"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,227,""" for "" + field.getName() + "" is greater than maximum"");"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,228,"/ check values in specific range, catching really cases like 30th Feb"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,229,or (int i = 0; i < fields.length; i++) {
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,230,"f (values[i] < fields[i].getMinimumValue(instant, values)) {"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,231,"hrow new IllegalArgumentException(""Value "" + values[i] +"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,232," for "" + fields[i].getName() + "" is less than minimum"");"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,230,"// check values in specific range, catching really odd cases like 30th Feb"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,231,for (int i = 0; i < size; i++) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,232,int value = values[i];
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,233,DateTimeField field = partial.getField(i);
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,234,"if (value < field.getMinimumValue(partial, values)) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,235,"throw new IllegalArgumentException(""Value "" + value +"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,236,""" for "" + field.getName() + "" is less than minimum"");"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,234,"f (values[i] > fields[i].getMaximumValue(instant, values)) {"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,235,"hrow new IllegalArgumentException(""Value "" + values[i] +"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,236," for "" + fields[i].getName() + "" is greater than maximum"");"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,238,"if (value > field.getMaximumValue(partial, values)) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,239,"throw new IllegalArgumentException(""Value "" + value +"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,240,""" for "" + field.getName() + "" is greater than maximum"");"
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,56,mport org.joda.time.DateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,105,ublic int getMaximumValue(ReadablePartial instant) {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,106,f (instant.isSupported(iChronology.monthOfYear())) {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,107,nt month = instant.get(iChronology.monthOfYear());
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,104,public int getMaximumValue(ReadablePartial partial) {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,105,if (partial.isSupported(DateTimeFieldType.monthOfYear())) {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,106,// find month
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,107,int month = partial.get(DateTimeFieldType.monthOfYear());
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,111,f (instant.isSupported(iChronology.year())) {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,112,nt year = instant.get(iChronology.year());
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,111,"// 13th month, so check year"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,112,if (partial.isSupported(DateTimeFieldType.year())) {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,113,int year = partial.get(DateTimeFieldType.year());
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,120,"ublic int getMaximumValue(ReadablePartial instant, int[] values) {"
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,121,ateTimeField[] fields = instant.getFields();
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,122,or (int i = 0; i < fields.length; i++) {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,123,f (fields[i] == iChronology.monthOfYear()) {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,121,"public int getMaximumValue(ReadablePartial partial, int[] values) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,122,int size = partial.size();
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,123,for (int i = 0; i < size; i++) {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,124,// find month
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,125,if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,128,or (int j = 0; j < fields.length; j++) {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,129,f (fields[j] == iChronology.year()) {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,130,"// 13th month, so check year"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,131,for (int j = 0; j < size; j++) {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,132,if (partial.getFieldType(j) == DateTimeFieldType.year()) {
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,56,mport org.joda.time.DateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,112,ublic int getMaximumValue(ReadablePartial instant) {
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,113,f (instant.isSupported(iChronology.monthOfYear())) {
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,114,nt month = instant.get(iChronology.monthOfYear());
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,115,f (instant.isSupported(iChronology.year())) {
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,116,nt year = instant.get(iChronology.year());
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,111,public int getMaximumValue(ReadablePartial partial) {
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,112,if (partial.isSupported(DateTimeFieldType.monthOfYear())) {
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,113,int month = partial.get(DateTimeFieldType.monthOfYear());
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,114,if (partial.isSupported(DateTimeFieldType.year())) {
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,115,int year = partial.get(DateTimeFieldType.year());
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,124,"ublic int getMaximumValue(ReadablePartial instant, int[] values) {"
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,125,ateTimeField[] fields = instant.getFields();
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,126,or (int i = 0; i < fields.length; i++) {
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,127,f (fields[i] == iChronology.monthOfYear()) {
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,123,"public int getMaximumValue(ReadablePartial partial, int[] values) {"
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,124,int size = partial.size();
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,125,for (int i = 0; i < size; i++) {
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,126,if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,129,or (int j = 0; j < fields.length; j++) {
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,130,f (fields[j] == iChronology.year()) {
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,128,for (int j = 0; j < size; j++) {
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,129,if (partial.getFieldType(j) == DateTimeFieldType.year()) {
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,56,mport org.joda.time.DateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,111,ublic int getMaximumValue(ReadablePartial instant) {
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,112,f (instant.isSupported(iChronology.year())) {
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,113,nt year = instant.get(iChronology.year());
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,110,public int getMaximumValue(ReadablePartial partial) {
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,111,if (partial.isSupported(DateTimeFieldType.year())) {
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,112,int year = partial.get(DateTimeFieldType.year());
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,119,"ublic int getMaximumValue(ReadablePartial instant, int[] values) {"
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,120,ateTimeField[] fields = instant.getFields();
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,121,or (int i = 0; i < fields.length; i++) {
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,122,f (fields[i] == iChronology.year()) {
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,118,"public int getMaximumValue(ReadablePartial partial, int[] values) {"
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,119,int size = partial.size();
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,120,for (int i = 0; i < size; i++) {
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,121,if (partial.getFieldType(i) == DateTimeFieldType.year()) {
False,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,57,mport org.joda.time.DateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,131,ublic int getMaximumValue(ReadablePartial instant) {
False,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,132,f (instant.isSupported(iChronology.weekyear())) {
False,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,133,nt weekyear = instant.get(iChronology.weekyear());
True,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,130,public int getMaximumValue(ReadablePartial partial) {
True,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,131,if (partial.isSupported(DateTimeFieldType.weekyear())) {
True,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,132,int weekyear = partial.get(DateTimeFieldType.weekyear());
False,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,139,"ublic int getMaximumValue(ReadablePartial instant, int[] values) {"
False,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,140,ateTimeField[] fields = instant.getFields();
False,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,141,or (int i = 0; i < fields.length; i++) {
False,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,142,f (fields[i] == iChronology.weekyear()) {
True,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,138,"public int getMaximumValue(ReadablePartial partial, int[] values) {"
True,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,139,int size = partial.size();
True,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,140,for (int i = 0; i < size; i++) {
True,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,141,if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,58,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,60,import org.joda.time.DateTimeFieldType;
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,61,import org.joda.time.DateTimeUtils;
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,95,* Gets the field type being used.
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,97,* @return the field type
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,99,public DateTimeFieldType getFieldType() {
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,100,return getField().getType();
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,246, The {@link #get()} method is used to obtain the value to compare for
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,247, this instant and the {@link ReadableInstant#get(DateTimeField)} method
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,248, is used for the specified instant.
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,258,"* The comparison is based on the value of the same field type, irrespective"
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,259,"* of any difference in chronology. Thus, if this property represents the"
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,260,"* hourOfDay field, then the hourOfDay field of the other instant will be queried"
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,261,* whether in the same chronology or not.
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,252, @throws IllegalArgumentException if the instant is null
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,265,* @throws IllegalArgumentException if the instant is null or the instant
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,266,*  doesn't support the field of this property
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,259,nt otherValue = instant.get(getField());
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,273,Chronology chrono = DateTimeUtils.getChronology(instant.getChronology());
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,274,int otherValue = chrono.getField(getFieldType()).get(instant.getMillis());
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,272, The {@link #get()} method is used to obtain the value to compare for
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,273, this instant and the {@link ReadablePartial#get(DateTimeField)} method
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,274, is used for the specified instant.
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,287,"* The comparison is based on the value of the same field type, irrespective"
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,288,"* of any difference in chronology. Thus, if this property represents the"
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,289,"* hourOfDay field, then the hourOfDay field of the other partial will be queried"
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,290,* whether in the same chronology or not.
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,276, @param instant  the instant to compare to
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,292,* @param partial  the partial to compare to
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,282,ublic int compareTo(ReadablePartial instant) {
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,283,f (instant == null) {
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,298,public int compareTo(ReadablePartial partial) {
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,299,if (partial == null) {
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,287,nt otherValue = instant.get(getField());
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,303,int otherValue = partial.get(getFieldType());
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,173,"eturn getAsText(partial, partial.get(this), locale);"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,173,"return getAsText(partial, partial.get(getType()), locale);"
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,247,"eturn getAsShortText(partial, partial.get(this), locale);"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,247,"return getAsShortText(partial, partial.get(getType()), locale);"
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,528, @param instant  the partial instant
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,528,* @param partial  the partial instant
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,535,"ublic int[] set(ReadablePartial instant, int fieldIndex, int[] values, int newValue) {"
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,536,"ieldUtils.verifyValueBounds(this, newValue, getMinimumValue(instant, values), getMaximumValue(instant, values));"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,535,"public int[] set(ReadablePartial partial, int fieldIndex, int[] values, int newValue) {"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,536,"FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));"
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,540,f (fieldIndex < instant.getFieldSize()) {
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,541,or (int i = fieldIndex + 1; i < instant.getFieldSize(); i++) {
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,542,ateTimeField field = instant.getField(i);
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,543,"f (values[i] > field.getMaximumValue(instant, values)) {"
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,544,"alues[i] = field.getMaximumValue(instant, values);"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,540,if (fieldIndex < partial.size()) {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,541,for (int i = fieldIndex + 1; i < partial.size(); i++) {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,542,DateTimeField field = partial.getField(i);
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,543,"if (values[i] > field.getMaximumValue(partial, values)) {"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,544,"values[i] = field.getMaximumValue(partial, values);"
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,546,"f (values[i] < field.getMinimumValue(instant, values)) {"
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,547,"alues[i] = field.getMinimumValue(instant, values);"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,546,"if (values[i] < field.getMinimumValue(partial, values)) {"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,547,"values[i] = field.getMinimumValue(partial, values);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1218,f (partial.isSupported(iField)) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1218,if (partial.isSupported(iField.getType())) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1220,"ormatUtils.appendUnpaddedInteger(buf, partial.get(iField));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1220,"FormatUtils.appendUnpaddedInteger(buf, partial.get(iField.getType()));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1230,f (partial.isSupported(iField)) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1230,if (partial.isSupported(iField.getType())) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1232,"ormatUtils.writeUnpaddedInteger(out, partial.get(iField));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1232,"FormatUtils.writeUnpaddedInteger(out, partial.get(iField.getType()));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1276,f (partial.isSupported(iField)) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1276,if (partial.isSupported(iField.getType())) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1278,"ormatUtils.appendPaddedInteger(buf, partial.get(iField), iMinPrintedDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1278,"FormatUtils.appendPaddedInteger(buf, partial.get(iField.getType()), iMinPrintedDigits);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1288,f (partial.isSupported(iField)) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1288,if (partial.isSupported(iField.getType())) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1290,"ormatUtils.writePaddedInteger(out, partial.get(iField), iMinPrintedDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1290,"FormatUtils.writePaddedInteger(out, partial.get(iField.getType()), iMinPrintedDigits);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1408,f (partial.isSupported(iField)) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1408,if (partial.isSupported(iField.getType())) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1410,nt year = partial.get(iField);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1410,int year = partial.get(iField.getType());
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1491,f (partial.isSupported(iField)) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1491,if (partial.isSupported(iField.getType())) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1608,f (partial.isSupported(iField)) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1608,if (partial.isSupported(iField.getType())) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1621,f (partial.isSupported(iField)) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1621,if (partial.isSupported(iField.getType())) {
False,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,76,ublic int getFieldSize() {
True,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,76,public int size() {
True,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,79,public DateTimeFieldType getFieldType(int index) {
True,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,80,return getFields()[index].getType();
False,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,85,ublic int get(DateTimeField field) {
True,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,88,public int get(DateTimeFieldType field) {
False,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,88,ublic boolean isSupported(DateTimeField field) {
True,JodaTime/src/test/org/joda/time/MockPartial.java,JodaTime/src/test/org/joda/time/MockPartial.java,91,public boolean isSupported(DateTimeFieldType field) {
False,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,169,ublic int getFieldSize() {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,169,public int size() {
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,79,suite.addTest(org.joda.time.format.TestAll.suite());
False,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,159,ublic int getFieldSize() {
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,159,public int size() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,598,"ssertEquals(10, test.get(ISOChronology.getInstance().hourOfDay()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,599,"ssertEquals(20, test.get(ISOChronology.getInstance().minuteOfHour()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,600,"ssertEquals(30, test.get(ISOChronology.getInstance().secondOfMinute()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,601,"ssertEquals(40, test.get(ISOChronology.getInstance().millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,598,"assertEquals(10, test.get(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,599,"assertEquals(20, test.get(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,600,"assertEquals(30, test.get(DateTimeFieldType.secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,601,"assertEquals(40, test.get(DateTimeFieldType.millisOfSecond()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,607,est.get(ISOChronology.getInstance().dayOfMonth());
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,607,test.get(DateTimeFieldType.dayOfMonth());
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,612,public void testSize() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,613,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,614,"assertEquals(4, test.size());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,617,public void testGetFieldType() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,618,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,619,"assertSame(DateTimeFieldType.hourOfDay(), test.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,620,"assertSame(DateTimeFieldType.minuteOfHour(), test.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,621,"assertSame(DateTimeFieldType.secondOfMinute(), test.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,622,"assertSame(DateTimeFieldType.millisOfSecond(), test.getFieldType(3));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,611,est.get(ISOChronology.getInstance(PARIS).hourOfDay());
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,612,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,613, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,614,/ TODO: Should this fail or suceed - by succeeding it exposes out implementation
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,615,/        try {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,616,/            test.get(JulianChronology.getInstance().hourOfDay());
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,617,/            fail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,618,/        } catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,624,test.getFieldType(-1);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,625,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,626,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,627,test.getFieldType(5);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,628,} catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,621,ublic void testGetFieldSize() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,631,public void testGetFieldTypes() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,623,"ssertEquals(4, test.getFieldSize());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,633,DateTimeFieldType[] fields = test.getFieldTypes();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,634,"assertSame(DateTimeFieldType.hourOfDay(), fields[0]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,635,"assertSame(DateTimeFieldType.minuteOfHour(), fields[1]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,636,"assertSame(DateTimeFieldType.secondOfMinute(), fields[2]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,637,"assertSame(DateTimeFieldType.millisOfSecond(), fields[3]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,638,"assertNotSame(test.getFieldTypes(), test.getFieldTypes());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,676,"ssertEquals(true, test.isSupported(ISOChronology.getInstance().hourOfDay()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,677,"ssertEquals(true, test.isSupported(ISOChronology.getInstance().minuteOfHour()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,678,"ssertEquals(true, test.isSupported(ISOChronology.getInstance().secondOfMinute()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,679,"ssertEquals(true, test.isSupported(ISOChronology.getInstance().millisOfSecond()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,680,"ssertEquals(false, test.isSupported(ISOChronology.getInstance().dayOfMonth()));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,681,"ssertEquals(false, test.isSupported(ISOChronology.getInstance(PARIS).hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,691,"assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,692,"assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,693,"assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,694,"assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/TestTimeOfDay.java,695,"assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth()));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,415,"ssertEquals(1970, test.get(ISOChronology.getInstance().year()));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,416,"ssertEquals(6, test.get(ISOChronology.getInstance().monthOfYear()));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,417,"ssertEquals(9, test.get(ISOChronology.getInstance().dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,415,"assertEquals(1970, test.get(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,416,"assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,417,"assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,423,est.get(ISOChronology.getInstance().hourOfDay());
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,423,test.get(DateTimeFieldType.hourOfDay());
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,428,public void testSize() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,429,YearMonthDay test = new YearMonthDay();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,430,"assertEquals(3, test.size());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,433,public void testGetFieldType() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,434,YearMonthDay test = new YearMonthDay();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,435,"assertSame(DateTimeFieldType.year(), test.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,436,"assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,437,"assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(2));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,427,est.get(ISOChronology.getInstance(PARIS).year());
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,428,ail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,429, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,430,/ TODO: Should this fail or suceed - by succeeding it exposes out implementation
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,431,/        try {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,432,/            test.get(GregorianChronology.getInstance().year());
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,433,/            fail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,434,/        } catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,439,test.getFieldType(-1);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,440,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,441,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,442,test.getFieldType(3);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,443,} catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,437,ublic void testGetFieldSize() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,446,public void testGetFieldTypes() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,439,"ssertEquals(3, test.getFieldSize());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,448,DateTimeFieldType[] fields = test.getFieldTypes();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,449,"assertSame(DateTimeFieldType.year(), fields[0]);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,450,"assertSame(DateTimeFieldType.monthOfYear(), fields[1]);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,451,"assertSame(DateTimeFieldType.dayOfMonth(), fields[2]);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,452,"assertNotSame(test.getFieldTypes(), test.getFieldTypes());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,488,"ssertEquals(true, test.isSupported(ISOChronology.getInstance().year()));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,489,"ssertEquals(true, test.isSupported(ISOChronology.getInstance().monthOfYear()));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,490,"ssertEquals(true, test.isSupported(ISOChronology.getInstance().dayOfMonth()));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,491,"ssertEquals(false, test.isSupported(ISOChronology.getInstance().hourOfDay()));"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,492,"ssertEquals(false, test.isSupported(ISOChronology.getInstance(PARIS).year()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,501,"assertEquals(true, test.isSupported(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,502,"assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,503,"assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,JodaTime/src/test/org/joda/time/TestYearMonthDay.java,504,"assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay()));"

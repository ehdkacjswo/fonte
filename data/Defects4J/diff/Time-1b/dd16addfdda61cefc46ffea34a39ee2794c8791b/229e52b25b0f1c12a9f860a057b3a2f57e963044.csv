is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,16,package org.joda.time;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,18,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,19,import java.util.Collections;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,20,import java.util.HashMap;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,21,import java.util.Map;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,22,import java.util.Set;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,24,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,25,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,26,import org.joda.time.chrono.GJChronology;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,27,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,28,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,29,import org.joda.time.chrono.JulianChronology;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,32,"* Identifies a type of chronology, which represents the calendar system."
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,33,* <p>
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,34,"* Various chronologies are supported by Joda-Time, including ISO and"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,35,* GregorianJulian. This class defines static methods to obtain the
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,36,* different kinds of chronology that are supported. Each instance then
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,37,* defines methods to obtain a Chronology by specifying the time zone.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,38,"* For example, to obtain the coptic chronology in the default zone:"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,39,* <pre>
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,40,* Chronology c = ChronologyType.coptic().getChronology();
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,41,* </pre>
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,42,* <p>
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,43,* The provided chronology types are:
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,44,* <ul>
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,45,* <li>ISO - Based on the ISO8601 standard and suitable for use after about 1600
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,46,* <li>GJ - Historically accurate calendar with Julian followed by Gregorian
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,47,* <li>Gregorian - The Gregorian calendar system used for all time (proleptic)
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,48,* <li>Julian - The Julian calendar system used for all time (proleptic)
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,49,* <li>Buddhist - The Buddhist calendar system which is an offset in years from GJ
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,50,* <li>Coptic - The Coptic calendar system which defines 30 day months
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,51,* </ul>
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,52,* Hopefully future releases will contain more chronologies.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,54,* @see org.joda.time.chrono.ISOChronology
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,55,* @see org.joda.time.chrono.GJChronology
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,56,* @see org.joda.time.chrono.GregorianChronology
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,57,* @see org.joda.time.chrono.JulianChronology
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,58,* @see org.joda.time.chrono.CopticChronology
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,59,* @see org.joda.time.chrono.BuddhistChronology
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,61,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,62,* @since 1.2
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,64,public abstract class ChronologyType implements Serializable {
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,66,/** Serialization version */
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,67,private static final long serialVersionUID = 83923682285389L;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,69,/** The map of id to type. */
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,70,private static final Map cTypes = Collections.synchronizedMap(new HashMap());
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,72,/** Ordinal values for standard chronology types. */
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,73,static final byte  // do not change - values matter for serialization
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,74,"ISO = 1,"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,75,"GJ = 2,"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,76,"GREGORIAN = 3,"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,77,"JULIAN = 4,"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,78,"BUDDHIST = 5,"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,79,COPTIC = 6;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,81,/** The iso chronology type. */
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,82,"private static final ChronologyType ISO_TYPE = new StandardChronologyType(""ISO"", ISO);"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,83,/** The iso chronology type. */
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,84,"private static final ChronologyType GJ_TYPE = new StandardChronologyType(""GJ"", GJ);"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,85,/** The iso chronology type. */
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,86,"private static final ChronologyType GREGORIAN_TYPE = new StandardChronologyType(""Gregorian"", GREGORIAN);"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,87,/** The iso chronology type. */
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,88,"private static final ChronologyType JULIAN_TYPE = new StandardChronologyType(""Julian"", JULIAN);"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,89,/** The iso chronology type. */
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,90,"private static final ChronologyType BUDDHIST_TYPE = new StandardChronologyType(""Buddhist"", BUDDHIST);"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,91,/** The iso chronology type. */
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,92,"private static final ChronologyType COPTIC_TYPE = new StandardChronologyType(""Coptic"", COPTIC);"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,94,/** The id of the field. */
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,95,private final String iID;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,99,* Constructor.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,101,* @param id  the id to use
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,103,protected ChronologyType(String id) {
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,104,super();
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,105,iID = id;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,106,"cTypes.put(id, this);"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,111,* Gets a ChronologyType by id.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,112,* <p>
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,113,* Note that this method will work with your own subclasses of
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,114,"* ChronologyType, so long as an instance of the subclass has been"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,115,* class-loaded.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,117,* @param id  the id to get
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,118,"* @return the chronology type, null if no known chronology"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,120,public static ChronologyType forID(String id) {
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,121,return (ChronologyType) cTypes.get(id);
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,125,* Gets all the available ids supported.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,127,* @return an unmodifiable Set of String ids
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,129,public static Set getAvailableIDs() {
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,130,return Collections.unmodifiableSet(cTypes.keySet());
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,135,* Get the ISO chronology type.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,136,* <p>
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,137,* {@link ISOChronology} defines all fields in line with the ISO8601 standard.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,138,"* This chronology is the default, and is suitable for all normal datetime processing."
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,139,"* It is <i>unsuitable</i> for historical datetimes before October 15, 1582"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,140,* as it applies the modern Gregorian calendar rules before that date.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,142,* @return the ChronologyType constant
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,144,public static ChronologyType iso() {
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,145,return ISO_TYPE;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,149,* Get the GJ chronology type.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,150,* <p>
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,151,* {@link GJChronology} defines all fields using standard meanings.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,152,* This chronology is intended to be used as a replacement for <code>GregorianCalendar</code>.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,153,"* The Gregorian calendar system is used after October 15, 1582, while the"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,154,* Julian calendar system is used before.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,155,* <p>
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,156,"* Unlike <code>GregorianCalendar</code>, this chronology returns a year of -1"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,157,"* for 1 BCE, -2 for 2 BCE and so on. Thus there is no year zero."
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,158,* <p>
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,159,* This method uses the standard Julian to Gregorian cutover date of
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,160,"* October 15th 1582. If you require a cutover on a different date, then use"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,161,* the factory methods on <code>GJChronology</code> itself.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,162,* <p>
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,163,"* When dealing solely with dates in the modern era, from 1600 onwards,"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,164,"* we recommend using ISOChronology, which is the default."
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,166,* @return the ChronologyType constant
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,168,public static ChronologyType gj() {
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,169,return GJ_TYPE;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,173,* Get the Gregorian chronology type.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,174,* <p>
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,175,* {@link GregorianChronology} defines all fields using standard meanings.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,176,* It uses the Gregorian calendar rules <i>for all time</i> (proleptic)
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,177,* thus it is NOT a replacement for <code>GregorianCalendar</code>.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,178,"* For that purpose, you should use {@link #gj()}."
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,179,* <p>
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,180,"* The Gregorian calendar system defines a leap year every four years,"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,181,"* except that every 100 years is not leap, but every 400 is leap."
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,182,* <p>
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,183,"* Technically, this chronology is almost identical to the ISO chronology,"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,184,"* thus we recommend using ISOChronology instead, which is the default."
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,186,* @return the ChronologyType constant
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,188,public static ChronologyType gregorian() {
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,189,return GREGORIAN_TYPE;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,193,* Get the Julian chronology type.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,194,* <p>
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,195,* {@link JulianChronology} defines all fields using standard meanings.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,196,* It uses the Julian calendar rules <i>for all time</i> (proleptic).
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,197,* The Julian calendar system defines a leap year every four years.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,199,* @return the ChronologyType constant
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,201,public static ChronologyType julian() {
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,202,return JULIAN_TYPE;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,206,* Get the Buddhist chronology type.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,207,* <p>
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,208,"* {@link BuddhistChronology} defines all fields using standard meanings,"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,209,* however the year is offset by 543. The chronology cannot be used before
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,210,* year 1 in the Buddhist calendar.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,212,* @return the ChronologyType constant
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,214,public static ChronologyType buddhist() {
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,215,return BUDDHIST_TYPE;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,219,* Get the Coptic chronology type.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,220,* <p>
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,221,* {@link CopticChronology} defines fields sensibly for the Coptic calendar system.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,222,* The Coptic calendar system defines every fourth year as leap.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,223,"* The year is broken down into 12 months, each 30 days in length."
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,224,* An extra period at the end of the year is either 5 or 6 days in length
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,225,* and is returned as a 13th month.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,226,"* Year 1 in the Coptic calendar began on August 29, 284 CE (Julian)."
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,227,* The chronology cannot be used before the first Coptic year.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,229,* @return the ChronologyType constant
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,231,public static ChronologyType coptic() {
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,232,return COPTIC_TYPE;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,237,* Get the id of the chronology.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,239,* @return the id of the chronology
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,241,public String getID() {
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,242,return iID;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,246,* Get an instance of the Chronology in the default time zone.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,248,* @return the Chronology
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,250,public Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,251,return getChronology(null);
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,255,* Get an instance of the Chronology in the UTC time zone.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,257,* @return the Chronology
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,259,public Chronology getChronologyUTC() {
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,260,return getChronology(DateTimeZone.UTC);
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,264,* Get an instance of the Chronology in the specified time zone.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,266,"* @param zone  the time zone, null means default"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,268,public abstract Chronology getChronology(DateTimeZone zone);
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,271,"* Gets the chronology as a string, which is simply its id."
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,273,* @return the id of the chronology
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,275,public String toString() {
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,276,return getID();
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,280,private static class StandardChronologyType extends ChronologyType {
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,281,/** Serialization version */
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,282,private static final long serialVersionUID = -562289176239L;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,284,"/** The ordinal of the standard field type, for switch statements */"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,285,private final byte iOrdinal;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,288,* Constructor.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,290,"StandardChronologyType(String id, byte ordinal) {"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,291,super(id);
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,292,iOrdinal = ordinal;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,295,/** @inheritdoc */
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,296,public Chronology getChronology(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,297,switch (iOrdinal) {
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,298,case ISO:
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,299,return ISOChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,300,case GJ:
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,301,return GJChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,302,case GREGORIAN:
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,303,return GregorianChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,304,case JULIAN:
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,305,return JulianChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,306,case BUDDHIST:
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,307,return BuddhistChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,308,case COPTIC:
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,309,return CopticChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,310,default:
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,311,// Shouldn't happen.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,312,throw new InternalError();
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,317,* Ensure a singleton is returned.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,319,* @return the singleton type
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,321,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,322,return (ChronologyType) forID(getID());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,38,suite.addTest(TestChronologyType.suite());
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,18,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,19,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,20,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,21,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,22,import java.lang.reflect.Constructor;
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,23,import java.util.Set;
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,25,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,26,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,28,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,29,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,30,import org.joda.time.chrono.GJChronology;
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,31,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,32,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,33,import org.joda.time.chrono.JulianChronology;
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,36,* This class is a Junit unit test for ChronologyType.
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,38,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,40,public class TestChronologyType extends TestCase {
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,42,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,44,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,45,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,48,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,49,return new TestSuite(TestChronologyType.class);
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,52,public TestChronologyType(String name) {
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,53,super(name);
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,56,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,59,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,63,public void test_forName() throws Exception {
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,64,"assertSame(ChronologyType.iso(), ChronologyType.forID(""ISO""));"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,65,"assertSame(null, ChronologyType.forID(""rubbish""));"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,66,"assertSame(null, ChronologyType.forID(""""));"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,67,"assertSame(null, ChronologyType.forID(null));"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,71,public void test_getAvailableIDs() throws Exception {
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,72,Set set = ChronologyType.getAvailableIDs();
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,73,"assertEquals(6, set.size());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,74,"assertEquals(true, set.contains(""ISO""));"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,75,"assertEquals(true, set.contains(""GJ""));"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,76,"assertEquals(true, set.contains(""Gregorian""));"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,77,"assertEquals(true, set.contains(""Julian""));"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,78,"assertEquals(true, set.contains(""Buddhist""));"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,79,"assertEquals(true, set.contains(""Coptic""));"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,83,public void test_iso() throws Exception {
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,84,"assertEquals(ChronologyType.iso(), ChronologyType.iso());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,85,"assertEquals(""ISO"", ChronologyType.iso().getID());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,86,"assertEquals(ISOChronology.getInstance(), ChronologyType.iso().getChronology());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,87,"assertEquals(ISOChronology.getInstanceUTC(), ChronologyType.iso().getChronologyUTC());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,88,"assertEquals(ISOChronology.getInstance(PARIS), ChronologyType.iso().getChronology(PARIS));"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,89,"assertEquals(""ISO"", ChronologyType.iso().toString());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,90,assertSerialization(ChronologyType.iso());
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,93,public void test_gj() throws Exception {
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,94,"assertEquals(ChronologyType.gj(), ChronologyType.gj());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,95,"assertEquals(""GJ"", ChronologyType.gj().getID());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,96,"assertEquals(GJChronology.getInstance(), ChronologyType.gj().getChronology());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,97,"assertEquals(GJChronology.getInstanceUTC(), ChronologyType.gj().getChronologyUTC());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,98,"assertEquals(GJChronology.getInstance(PARIS), ChronologyType.gj().getChronology(PARIS));"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,99,"assertEquals(""GJ"", ChronologyType.gj().toString());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,100,assertSerialization(ChronologyType.gj());
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,103,public void test_gregorian() throws Exception {
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,104,"assertEquals(ChronologyType.gregorian(), ChronologyType.gregorian());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,105,"assertEquals(""Gregorian"", ChronologyType.gregorian().getID());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,106,"assertEquals(GregorianChronology.getInstance(), ChronologyType.gregorian().getChronology());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,107,"assertEquals(GregorianChronology.getInstanceUTC(), ChronologyType.gregorian().getChronologyUTC());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,108,"assertEquals(GregorianChronology.getInstance(PARIS), ChronologyType.gregorian().getChronology(PARIS));"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,109,"assertEquals(""Gregorian"", ChronologyType.gregorian().toString());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,110,assertSerialization(ChronologyType.gregorian());
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,113,public void test_julian() throws Exception {
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,114,"assertEquals(ChronologyType.julian(), ChronologyType.julian());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,115,"assertEquals(""Julian"", ChronologyType.julian().getID());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,116,"assertEquals(JulianChronology.getInstance(), ChronologyType.julian().getChronology());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,117,"assertEquals(JulianChronology.getInstanceUTC(), ChronologyType.julian().getChronologyUTC());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,118,"assertEquals(JulianChronology.getInstance(PARIS), ChronologyType.julian().getChronology(PARIS));"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,119,"assertEquals(""Julian"", ChronologyType.julian().toString());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,120,assertSerialization(ChronologyType.julian());
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,123,public void test_buddhist() throws Exception {
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,124,"assertEquals(ChronologyType.buddhist(), ChronologyType.buddhist());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,125,"assertEquals(""Buddhist"", ChronologyType.buddhist().getID());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,126,"assertEquals(BuddhistChronology.getInstance(), ChronologyType.buddhist().getChronology());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,127,"assertEquals(BuddhistChronology.getInstanceUTC(), ChronologyType.buddhist().getChronologyUTC());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,128,"assertEquals(BuddhistChronology.getInstance(PARIS), ChronologyType.buddhist().getChronology(PARIS));"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,129,"assertEquals(""Buddhist"", ChronologyType.buddhist().toString());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,130,assertSerialization(ChronologyType.buddhist());
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,133,public void test_coptic() throws Exception {
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,134,"assertEquals(ChronologyType.coptic(), ChronologyType.coptic());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,135,"assertEquals(""Coptic"", ChronologyType.coptic().getID());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,136,"assertEquals(CopticChronology.getInstance(), ChronologyType.coptic().getChronology());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,137,"assertEquals(CopticChronology.getInstanceUTC(), ChronologyType.coptic().getChronologyUTC());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,138,"assertEquals(CopticChronology.getInstance(PARIS), ChronologyType.coptic().getChronology(PARIS));"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,139,"assertEquals(""Coptic"", ChronologyType.coptic().toString());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,140,assertSerialization(ChronologyType.coptic());
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,143,public void test_other() throws Exception {
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,144,"assertEquals(1, ChronologyType.class.getDeclaredClasses().length);"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,145,Class cls = ChronologyType.class.getDeclaredClasses()[0];
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,146,"assertEquals(1, cls.getDeclaredConstructors().length);"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,147,Constructor con = cls.getDeclaredConstructors()[0];
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,148,"Object[] params = new Object[] { ""other"", new Byte((byte) 128) };"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,149,ChronologyType type = (ChronologyType) con.newInstance(params);
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,151,"assertEquals(""other"", type.getID());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,152,try {
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,153,type.getChronology(PARIS);
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,154,fail();
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,155,} catch (InternalError ex) {}
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,156,assertSerialization(type);   // same because of ID map
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,160,private void assertSerialization(ChronologyType type) throws Exception {
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,161,ChronologyType result = doSerialization(type);
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,162,"assertSame(type, result);"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,165,private ChronologyType doSerialization(ChronologyType type) throws Exception {
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,166,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,167,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,168,oos.writeObject(type);
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,169,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,170,oos.close();
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,172,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,173,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,174,ChronologyType result = (ChronologyType) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,175,ois.close();
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,176,return result;

is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,2,*  Copyright 2001-2007 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,62," Set values which may be out of bounds. If the value is out of bounds,"
False,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,63," the instant is first set to the minimum allowed value, and then the"
False,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,64, difference is added.
True,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,62,* Set values which may be out of bounds by adding the difference between
True,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,63,* the new value and the current value.
False,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,67,nt min = getMinimumValue(instant);
False,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,68,f (value >= min && value <= getMaximumValue(instant)) {
False,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,69,"eturn super.set(instant, value);"
False,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,71,"eturn add(super.set(instant, min), value - min);"
True,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,66,"long difference = FieldUtils.safeSubtract(value, get(instant));"
True,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java,67,"return add(instant, difference);"
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,2,*  Copyright 2001-2007 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,18,public class MockZone extends DateTimeZone {
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,20,long transition;
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,21,int winterOffset;
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,23,"public MockZone(long transition, int winterOffset) {"
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,24,"super(""MockZone"");"
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,25,this.transition = transition;
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,26,this.winterOffset = winterOffset;
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,29,public int getOffset(long instant) {
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,30,return (instant < transition ? winterOffset : winterOffset + 3600000);
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,33,public int getStandardOffset(long instant) {
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,34,return winterOffset;
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,37,public long nextTransition(long instant) {
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,38,return (instant < transition ? transition : transition + 180L * DateTimeConstants.MILLIS_PER_DAY);
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,41,public long previousTransition(long instant) {
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,42,return (instant > transition ? transition : transition - 180L * DateTimeConstants.MILLIS_PER_DAY);
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,45,public boolean isFixed() {
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,46,return false;
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,49,public String getNameKey(long instant) {
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,50,return null;
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,53,public boolean equals(Object object) {
True,JodaTime/src/test/org/joda/time/MockZone.java,JodaTime/src/test/org/joda/time/MockZone.java,54,return false;
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,21,import org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,24,import org.joda.time.MockZone;
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,51,public void test_setYear() {
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,52,Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,53,"DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,54,"assertEquals(""2007-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,55,dt = dt.withYear(2008);
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,56,"assertEquals(""2008-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,60,public void test_setMonthOfYear() {
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,61,Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,62,"DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,63,"assertEquals(""2007-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,64,dt = dt.withMonthOfYear(13);
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,65,"assertEquals(""2008-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,66,dt = dt.withMonthOfYear(0);
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,67,"assertEquals(""2007-12-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,71,public void test_setDayOfMonth() {
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,72,Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,73,"DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,74,"assertEquals(""2007-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,75,dt = dt.withDayOfMonth(32);
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,76,"assertEquals(""2007-02-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,77,dt = dt.withDayOfMonth(0);
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,78,"assertEquals(""2007-01-31T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,82,public void test_setHourOfDay() {
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,83,Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,84,"DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,85,"assertEquals(""2007-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,86,dt = dt.withHourOfDay(24);
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,87,"assertEquals(""2007-01-02T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,88,dt = dt.withHourOfDay(-1);
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,89,"assertEquals(""2007-01-01T23:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,93,//------------------------ Bug ------------------------------------------
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,118,//------------------------ Bug [1755161] --------------------------------
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,120,/** Mock zone simulating America/Grand_Turk cutover at midnight 2007-04-01 */
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,121,private static long CUTOVER_TURK = 1175403600000L;
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,122,private static int OFFSET_TURK = -18000000;  // -05:00
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,123,"private static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK);"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,126,public void test_MockTurkIsCorrect() {
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,127,"DateTime pre = new DateTime(CUTOVER_TURK - 1L, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,128,"assertEquals(""2007-03-31T23:59:59.999-05:00"", pre.toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,129,"DateTime at = new DateTime(CUTOVER_TURK, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,130,"assertEquals(""2007-04-01T01:00:00.000-04:00"", at.toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,131,"DateTime post = new DateTime(CUTOVER_TURK + 1L, MOCK_TURK);"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,132,"assertEquals(""2007-04-01T01:00:00.001-04:00"", post.toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,135,public void test_lenientChrononolgy_Chicago() {
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,136,"DateTimeZone zone = DateTimeZone.forID(""America/Chicago"");"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,137,Chronology lenient = LenientChronology.getInstance(ISOChronology.getInstance(zone));
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,138,"DateTime dt = new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient);"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,139,"assertEquals(""2007-03-11T03:30:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,142,public void test_lenientChrononolgy_Turk() {
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,143,Chronology lenient = LenientChronology.getInstance(ISOChronology.getInstance(MOCK_TURK));
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,144,"DateTime dt = new DateTime(2007, 4, 1, 0, 30, 0, 0, lenient);"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,145,"assertEquals(""2007-04-01T01:30:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,148,public void test_strictChrononolgy_Chicago() {
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,149,"DateTimeZone zone = DateTimeZone.forID(""America/Chicago"");"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,150,Chronology lenient = StrictChronology.getInstance(ISOChronology.getInstance(zone));
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,151,try {
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,152,"new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient);"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,153,fail();
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,154,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,155,// expected
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,159,public void test_isoChrononolgy_Chicago() {
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,160,"DateTimeZone zone = DateTimeZone.forID(""America/Chicago"");"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,161,Chronology lenient = ISOChronology.getInstance(zone);
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,162,try {
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,163,"new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient);"
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,164,fail();
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,165,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java,166,// expected

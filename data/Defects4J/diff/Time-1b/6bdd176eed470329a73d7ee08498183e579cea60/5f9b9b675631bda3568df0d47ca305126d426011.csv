is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,56,import org.joda.time.chrono.GJChronology;
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,57,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,79,ublic interface Chronology {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,82,public abstract class Chronology {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,85,* Gets an instance of the ISOChronology in the default zone.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,86,* <p>
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,87,* {@link ISOChronology} defines all fields in line with the ISO8601 standard.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,88,"* This chronology is the default, and is suitable for all normal datetime processing."
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,89,"* It is <i>unsuitable</i> for historical datetimes before October 15, 1582"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,90,* as it applies the modern Gregorian calendar rules before that date.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,92,* @return the ISO chronology
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,94,public static Chronology getISO() {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,95,return ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,99,* Gets an instance of the ISOChronology in the UTC zone.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,100,* <p>
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,101,* {@link ISOChronology} defines all fields in line with the ISO8601 standard.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,102,"* This chronology is the default, and is suitable for all normal datetime processing."
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,103,"* It is <i>unsuitable</i> for historical datetimes before October 15, 1582"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,104,* as it applies the modern Gregorian calendar rules before that date.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,106,* @return the ISO chronology
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,108,public static Chronology getISOUTC() {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,109,return ISOChronology.getInstanceUTC();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,113,* Gets an instance of the ISOChronology in the specified zone.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,114,* <p>
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,115,* {@link ISOChronology} defines all fields in line with the ISO8601 standard.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,116,"* This chronology is the default, and is suitable for all normal datetime processing."
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,117,"* It is <i>unsuitable</i> for historical datetimes before October 15, 1582"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,118,* as it applies the modern Gregorian calendar rules before that date.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,120,"* @param zone  the zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,121,* @return the ISO chronology
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,123,public static Chronology getISO(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,124,return ISOChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,129,* Gets an instance of the GJChronology in the default zone.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,130,* <p>
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,131,* {@link GJChronology} defines all fields using standard meanings.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,132,* This chronology is intended to be used as a replacement for <code>GregorianCalendar</code>.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,133,"* The Gregorian calendar system is used after October 15, 1582, while the"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,134,* Julian calendar system is used before.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,135,* <p>
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,136,"* When dealing solely with dates in the modern era, from 1600 onwards,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,137,"* we recommend using ISOChronology, which is the default."
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,139,* @return the GJ chronology
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,141,public static Chronology getGJ() {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,142,return GJChronology.getInstance();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,146,* Gets an instance of the GJChronology in the UTC zone.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,147,* <p>
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,148,* {@link GJChronology} defines all fields using standard meanings.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,149,* This chronology is intended to be used as a replacement for <code>GregorianCalendar</code>.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,150,"* The Gregorian calendar system is used after October 15, 1582, while the"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,151,* Julian calendar system is used before.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,152,* <p>
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,153,"* When dealing solely with dates in the modern era, from 1600 onwards,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,154,"* we recommend using ISOChronology, which is the default."
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,156,* @return the GJ chronology
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,158,public static Chronology getGJUTC() {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,159,return GJChronology.getInstanceUTC();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,163,* Gets an instance of the GJChronology in the specified zone.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,164,* <p>
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,165,* {@link GJChronology} defines all fields using standard meanings.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,166,* This chronology is intended to be used as a replacement for <code>GregorianCalendar</code>.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,167,"* The Gregorian calendar system is used after October 15, 1582, while the"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,168,* Julian calendar system is used before.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,169,* <p>
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,170,"* When dealing solely with dates in the modern era, from 1600 onwards,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,171,"* we recommend using ISOChronology, which is the default."
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,173,"* @param zone  the zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,174,* @return the GJ chronology
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,176,public static Chronology getGJ(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,177,return GJChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,87,ateTimeZone getZone();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,187,public abstract DateTimeZone getZone();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,96,hronology withUTC();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,196,public abstract Chronology withUTC();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,105,hronology withZone(DateTimeZone zone);
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,205,public abstract Chronology withZone(DateTimeZone zone);
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,122,"ong getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay)"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,222,"public abstract long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay)"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,144,"ong getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,244,"public abstract long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,166,"ong getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,266,"public abstract long getDateTimeMillis(long instant,"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,178,"oid validate(ReadablePartial instant, int[] values);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,278,"public abstract void validate(ReadablePartial instant, int[] values);"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,187,urationField millis();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,287,public abstract DurationField millis();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,194,ateTimeField millisOfSecond();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,294,public abstract DateTimeField millisOfSecond();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,201,ateTimeField millisOfDay();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,301,public abstract DateTimeField millisOfDay();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,210,urationField seconds();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,310,public abstract DurationField seconds();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,217,ateTimeField secondOfMinute();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,317,public abstract DateTimeField secondOfMinute();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,224,ateTimeField secondOfDay();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,324,public abstract DateTimeField secondOfDay();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,233,urationField minutes();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,333,public abstract DurationField minutes();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,240,ateTimeField minuteOfHour();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,340,public abstract DateTimeField minuteOfHour();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,247,ateTimeField minuteOfDay();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,347,public abstract DateTimeField minuteOfDay();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,256,urationField hours();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,356,public abstract DurationField hours();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,263,ateTimeField hourOfDay();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,363,public abstract DateTimeField hourOfDay();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,270,ateTimeField clockhourOfDay();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,370,public abstract DateTimeField clockhourOfDay();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,277,ateTimeField hourOfHalfday();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,377,public abstract DateTimeField hourOfHalfday();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,284,ateTimeField clockhourOfHalfday();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,384,public abstract DateTimeField clockhourOfHalfday();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,291,ateTimeField halfdayOfDay();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,391,public abstract DateTimeField halfdayOfDay();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,300,urationField days();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,400,public abstract DurationField days();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,310,ateTimeField dayOfWeek();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,410,public abstract DateTimeField dayOfWeek();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,317,ateTimeField dayOfMonth();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,417,public abstract DateTimeField dayOfMonth();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,324,ateTimeField dayOfYear();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,424,public abstract DateTimeField dayOfYear();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,333,urationField weeks();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,433,public abstract DurationField weeks();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,340,ateTimeField weekOfWeekyear();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,440,public abstract DateTimeField weekOfWeekyear();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,347,urationField weekyears();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,447,public abstract DurationField weekyears();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,354,ateTimeField weekyear();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,454,public abstract DateTimeField weekyear();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,363,urationField months();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,463,public abstract DurationField months();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,370,ateTimeField monthOfYear();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,470,public abstract DateTimeField monthOfYear();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,379,urationField years();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,479,public abstract DurationField years();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,386,ateTimeField year();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,486,public abstract DateTimeField year();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,393,ateTimeField yearOfEra();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,493,public abstract DateTimeField yearOfEra();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,400,ateTimeField yearOfCentury();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,500,public abstract DateTimeField yearOfCentury();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,407,urationField centuries();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,507,public abstract DurationField centuries();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,414,ateTimeField centuryOfEra();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,514,public abstract DateTimeField centuryOfEra();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,421,urationField eras();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,521,public abstract DurationField eras();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,428,ateTimeField era();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,528,public abstract DateTimeField era();
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,435,tring toString();
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,535,public abstract String toString();
False,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,73,ublic abstract class AssembledChronology extends AbstractChronology {
True,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java,73,public abstract class AssembledChronology extends BaseChronology {
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,76,"ublic abstract class AbstractChronology implements Chronology, Serializable {"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,76,public abstract class BaseChronology
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,77,extends Chronology
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,78,implements Serializable {
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,84,rotected AbstractChronology() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,86,protected BaseChronology() {
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,85,ublic abstract class AbstractGJChronology extends AssembledChronology {
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,85,public abstract class BaseGJChronology extends AssembledChronology {
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,197,"bstractGJChronology(Chronology base, Object param, int minDaysInFirstWeek) {"
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,197,"BaseGJChronology(Chronology base, Object param, int minDaysInFirstWeek) {"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,85,ublic final class CopticChronology extends AbstractGJChronology {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,85,public final class CopticChronology extends BaseGJChronology {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,71,rivate final AbstractGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,71,private final BaseGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,76,"opticDayOfMonthDateTimeField(AbstractGJChronology chronology, DurationField days) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,76,"CopticDayOfMonthDateTimeField(BaseGJChronology chronology, DurationField days) {"
False,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,69,rivate final AbstractGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,69,private final BaseGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,74,"opticMonthOfYearDateTimeField(AbstractGJChronology chronology, DurationField months) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,74,"CopticMonthOfYearDateTimeField(BaseGJChronology chronology, DurationField months) {"
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,70,rivate final AbstractGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,70,private final BaseGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,75,opticYearDateTimeField(AbstractGJChronology chronology) {
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,75,CopticYearDateTimeField(BaseGJChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,133,bstractGJChronology chrono = iChronology;
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,133,BaseGJChronology chrono = iChronology;
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,73,rivate final AbstractGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,73,private final BaseGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,78,"JDayOfMonthDateTimeField(AbstractGJChronology chronology, DurationField days) {"
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,78,"GJDayOfMonthDateTimeField(BaseGJChronology chronology, DurationField days) {"
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,76,rivate final AbstractGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,76,private final BaseGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,81,"JDayOfWeekDateTimeField(AbstractGJChronology chronology, DurationField days) {"
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,81,"GJDayOfWeekDateTimeField(BaseGJChronology chronology, DurationField days) {"
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,73,rivate final AbstractGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,73,private final BaseGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,78,"JDayOfYearDateTimeField(AbstractGJChronology chronology, DurationField days) {"
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,78,"GJDayOfYearDateTimeField(BaseGJChronology chronology, DurationField days) {"
False,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,77,rivate final AbstractGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,77,private final BaseGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,82,JEraDateTimeField(AbstractGJChronology chronology) {
True,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,82,GJEraDateTimeField(BaseGJChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,80,rivate final AbstractGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,80,private final BaseGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,85,JMonthOfYearDateTimeField(AbstractGJChronology chronology) {
True,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,85,GJMonthOfYearDateTimeField(BaseGJChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,75,rivate final AbstractGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,75,private final BaseGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,80,"JWeekOfWeekyearDateTimeField(AbstractGJChronology chronology, DurationField weeks) {"
True,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,80,"GJWeekOfWeekyearDateTimeField(BaseGJChronology chronology, DurationField weeks) {"
False,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,78,rivate final AbstractGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,78,private final BaseGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,83,JWeekyearDateTimeField(AbstractGJChronology chronology) {
True,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java,83,GJWeekyearDateTimeField(BaseGJChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,75,rivate final AbstractGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,75,private final BaseGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,80,JYearDateTimeField(AbstractGJChronology chronology) {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,80,GJYearDateTimeField(BaseGJChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,70,rivate final AbstractGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,70,private final BaseGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,75,"JYearOfEraDateTimeField(DateTimeField yearField, AbstractGJChronology chronology) {"
True,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,75,"GJYearOfEraDateTimeField(DateTimeField yearField, BaseGJChronology chronology) {"
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,83,ublic final class GregorianChronology extends AbstractGJChronology {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,83,public final class GregorianChronology extends BaseGJChronology {
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,88,ublic final class JulianChronology extends AbstractGJChronology {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,88,public final class JulianChronology extends BaseGJChronology {
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,302,inal AbstractGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,302,final BaseGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,305,"oYearZeroField(AbstractGJChronology chronology, DateTimeField field) {"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,305,"NoYearZeroField(BaseGJChronology chronology, DateTimeField field) {"
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,343,"oWeekyearZeroField(AbstractGJChronology chronology, DateTimeField field) {"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,343,"NoWeekyearZeroField(BaseGJChronology chronology, DateTimeField field) {"
False,JodaTime/src/test/org/joda/time/MockNullZoneChronology.java,JodaTime/src/test/org/joda/time/MockNullZoneChronology.java,56,mport org.joda.time.chrono.AbstractChronology;
True,JodaTime/src/test/org/joda/time/MockNullZoneChronology.java,JodaTime/src/test/org/joda/time/MockNullZoneChronology.java,56,import org.joda.time.chrono.BaseChronology;
False,JodaTime/src/test/org/joda/time/MockNullZoneChronology.java,JodaTime/src/test/org/joda/time/MockNullZoneChronology.java,64,lass MockNullZoneChronology extends AbstractChronology {
True,JodaTime/src/test/org/joda/time/MockNullZoneChronology.java,JodaTime/src/test/org/joda/time/MockNullZoneChronology.java,64,class MockNullZoneChronology extends BaseChronology {
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,75,suite.addTest(TestChronology.suite());
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,56,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,57,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,59,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,60,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,62,import org.joda.time.chrono.GJChronology;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,63,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,66,* This class is a Junit unit test for Chronology.
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,68,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,70,public class TestChronology extends TestCase {
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,71,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,72,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,74,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,75,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,77,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,78,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,79,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,80,366 + 365;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,81,long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,82,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,83,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,84,366 + 365 + 365;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,86,// 2002-06-09
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,87,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,88,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,90,// 2002-04-05
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,91,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,92,(y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,93,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,94,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,96,// 2003-05-06
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,97,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,98,(y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,99,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,100,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,102,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,103,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,104,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,106,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,107,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,110,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,111,return new TestSuite(TestChronology.class);
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,114,public TestChronology(String name) {
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,115,super(name);
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,118,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,119,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,120,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,121,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,122,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,123,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,124,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,125,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,128,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,129,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,130,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,131,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,132,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,133,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,134,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,135,originalLocale = null;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,139,public void testTest() {
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,140,"assertEquals(""2002-06-09T00:00:00.000Z"", new Instant(TEST_TIME_NOW).toString());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,141,"assertEquals(""2002-04-05T12:24:00.000Z"", new Instant(TEST_TIME1).toString());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,142,"assertEquals(""2003-05-06T14:28:00.000Z"", new Instant(TEST_TIME2).toString());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,146,public void testGetISO() {
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,147,"assertEquals(ISOChronology.getInstance(), Chronology.getISO());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,150,public void testGetISOUTC() {
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,151,"assertEquals(ISOChronology.getInstanceUTC(), Chronology.getISOUTC());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,154,public void testGetISO_Zone() {
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,155,"assertEquals(ISOChronology.getInstance(PARIS), Chronology.getISO(PARIS));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,156,"assertEquals(ISOChronology.getInstance(), Chronology.getISO(null));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,160,public void testGetGJ() {
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,161,"assertEquals(GJChronology.getInstance(), Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,164,public void testGetGJUTC() {
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,165,"assertEquals(GJChronology.getInstanceUTC(), Chronology.getGJUTC());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,168,public void testGetGJ_Zone() {
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,169,"assertEquals(GJChronology.getInstance(PARIS), Chronology.getGJ(PARIS));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,170,"assertEquals(GJChronology.getInstance(), Chronology.getGJ(null));"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,70,mport org.joda.time.chrono.AbstractChronology;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,70,import org.joda.time.chrono.BaseChronology;
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,251,lass MockEqualsChronology extends AbstractChronology {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,251,class MockEqualsChronology extends BaseChronology {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,70,mport org.joda.time.chrono.AbstractChronology;
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,70,import org.joda.time.chrono.BaseChronology;
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,267,lass MockEqualsChronology extends AbstractChronology {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,267,class MockEqualsChronology extends BaseChronology {
False,JodaTime/src/test/org/joda/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJChronology.java,60,mport org.joda.time.chrono.AbstractChronology;
True,JodaTime/src/test/org/joda/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJChronology.java,60,import org.joda.time.chrono.BaseChronology;
False,JodaTime/src/test/org/joda/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJChronology.java,85,bstract class TestGJChronology extends AbstractChronology {
True,JodaTime/src/test/org/joda/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/gj/TestGJChronology.java,85,abstract class TestGJChronology extends BaseChronology {
False,JodaTime/src/test/org/joda/time/convert/MockBadChronology.java,JodaTime/src/test/org/joda/time/convert/MockBadChronology.java,58,mport org.joda.time.chrono.AbstractChronology;
True,JodaTime/src/test/org/joda/time/convert/MockBadChronology.java,JodaTime/src/test/org/joda/time/convert/MockBadChronology.java,58,import org.joda.time.chrono.BaseChronology;
False,JodaTime/src/test/org/joda/time/convert/MockBadChronology.java,JodaTime/src/test/org/joda/time/convert/MockBadChronology.java,65,lass MockBadChronology extends AbstractChronology {
True,JodaTime/src/test/org/joda/time/convert/MockBadChronology.java,JodaTime/src/test/org/joda/time/convert/MockBadChronology.java,65,class MockBadChronology extends BaseChronology {

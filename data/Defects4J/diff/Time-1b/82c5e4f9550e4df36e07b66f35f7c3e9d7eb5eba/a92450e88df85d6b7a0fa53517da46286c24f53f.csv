is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,900, else if (offsetLocal > 0) {
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,900,} else if (offsetLocal >= 0) {
False,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1249,ublic void testDateTimeCreation_europe() {
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1249,public void testDateTimeCreation_athens() {
False,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1256,ublic void testDateTimeCreation_us() {
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1256,public void testDateTimeCreation_paris() {
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1257,"DateTimeZone zone = DateTimeZone.forID(""Europe/Paris"");"
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1258,"DateTime base = new DateTime(2011, 10, 30, 2, 15, zone);"
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1259,"assertEquals(""2011-10-30T02:15:00.000+02:00"", base.toString());"
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1260,"assertEquals(""2011-10-30T02:15:00.000+01:00"", base.plusHours(1).toString());"
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1263,public void testDateTimeCreation_london() {
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1264,"DateTimeZone zone = DateTimeZone.forID(""Europe/London"");"
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1265,"DateTime base = new DateTime(2011, 10, 30, 1, 15, zone);"
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1266,"assertEquals(""2011-10-30T01:15:00.000+01:00"", base.toString());"
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1267,"assertEquals(""2011-10-30T01:15:00.000Z"", base.plusHours(1).toString());"
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1270,public void testDateTimeCreation_newYork() {
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1271,"DateTimeZone zone = DateTimeZone.forID(""America/New_York"");"
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1272,"DateTime base = new DateTime(2010, 11, 7, 1, 15, zone);"
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1273,"assertEquals(""2010-11-07T01:15:00.000-04:00"", base.toString());"
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1274,"assertEquals(""2010-11-07T01:15:00.000-05:00"", base.plusHours(1).toString());"
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1277,public void testDateTimeCreation_losAngeles() {

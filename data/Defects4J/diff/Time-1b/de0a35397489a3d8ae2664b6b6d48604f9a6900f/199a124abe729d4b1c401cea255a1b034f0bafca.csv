is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,521,* Get the field from the type.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,522,* <p>
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,523,* This method obtains the <code>DateTimeField</code> for the <code>DateTimeFieldType</code>.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,524,* It is essentially a generic way of calling one of the field methods.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,526,"* @param type  a field type, usually obtained from DateTimeFieldType"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,527,* @return the chronology field
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,528,* @throws IllegalArgumentException if the field is null
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,530,public abstract DateTimeField getField(DateTimeFieldType type);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,60,import org.joda.time.convert.InstantConverter;
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,91,"rivate static final DateTimeComparator INSTANCE = new DateTimeComparator(null, null);"
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,92,"private static final DateTimeComparator ALL_INSTANCE = new DateTimeComparator(null, null);"
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,93,/** Singleton instance */
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,94,"private static final DateTimeComparator DATE_INSTANCE = new DateTimeComparator(DateTimeFieldType.dayOfYear(), null);"
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,95,/** Singleton instance */
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,96,"private static final DateTimeComparator TIME_INSTANCE = new DateTimeComparator(null, DateTimeFieldType.dayOfYear());"
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,94,rivate final DateTimeField iLowerLimit;
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,99,private final DateTimeFieldType iLowerLimit;
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,96,rivate final DateTimeField iUpperLimit;
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,101,private final DateTimeFieldType iUpperLimit;
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,105,eturn INSTANCE;
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,110,return ALL_INSTANCE;
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,115,ublic static DateTimeComparator getInstance(DateTimeField lowerLimit) {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,120,public static DateTimeComparator getInstance(DateTimeFieldType lowerLimit) {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,129, @throws IllegalArgumentException if the lower limit is greater than the upper
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,131,"ublic static DateTimeComparator getInstance(DateTimeField lowerLimit, DateTimeField upperLimit) {"
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,135,"public static DateTimeComparator getInstance(DateTimeFieldType lowerLimit, DateTimeFieldType upperLimit) {"
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,133,eturn INSTANCE;
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,137,return ALL_INSTANCE;
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,135,f (lowerLimit != null && upperLimit != null) {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,136,f (lowerLimit.getDurationField().getUnitMillis() > upperLimit.getDurationField().getUnitMillis()) {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,137,"hrow new IllegalArgumentException(""Lower limit greater than upper: "" +"
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,138,"owerLimit.getName() + "" > "" + upperLimit.getName());"
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,139,if (lowerLimit == DateTimeFieldType.dayOfYear() && upperLimit == null) {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,140,return DATE_INSTANCE;
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,142,if (lowerLimit == null && upperLimit == DateTimeFieldType.dayOfYear()) {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,143,return TIME_INSTANCE;
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,148, @param chrono  the chronology to use
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,151,ublic static DateTimeComparator getDateOnlyInstance(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,152,hrono = DateTimeUtils.getChronology(chrono);
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,153,"eturn getInstance(chrono.dayOfYear(), null);"
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,154,public static DateTimeComparator getDateOnlyInstance() {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,155,return DATE_INSTANCE;
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,160, @param chrono  the chronology to use
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,163,ublic static DateTimeComparator getTimeOnlyInstance(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,164,hrono = DateTimeUtils.getChronology(chrono);
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,165,"eturn getInstance(null, chrono.dayOfYear());"
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,164,public static DateTimeComparator getTimeOnlyInstance() {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,165,return TIME_INSTANCE;
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,174,"rotected DateTimeComparator(DateTimeField lowerLimit, DateTimeField upperLimit) {"
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,174,"protected DateTimeComparator(DateTimeFieldType lowerLimit, DateTimeFieldType upperLimit) {"
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,182, Gets the field that represents the lower limit of comparison.
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,182,* Gets the field type that represents the lower limit of comparison.
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,184," @return the field, null if no upper limit"
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,184,"* @return the field type, null if no upper limit"
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,186,ublic DateTimeField getLowerLimit() {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,186,public DateTimeFieldType getLowerLimit() {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,191, Gets the field that represents the upper limit of comparison.
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,191,* Gets the field type that represents the upper limit of comparison.
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,193," @return the field, null if no upper limit"
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,193,"* @return the field type, null if no upper limit"
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,195,ublic DateTimeField getUpperLimit() {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,195,public DateTimeFieldType getUpperLimit() {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,212,ong lhsMillis = getMillisFromObject(lhsObj);
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,213,ong rhsMillis = getMillisFromObject(rhsObj);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,212,InstantConverter conv = ConverterManager.getInstance().getInstantConverter(lhsObj);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,213,long lhsMillis = conv.getInstantMillis(lhsObj);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,214,Chronology lhsChrono = conv.getChronology(lhsObj);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,216,conv = ConverterManager.getInstance().getInstantConverter(rhsObj);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,217,long rhsMillis = conv.getInstantMillis(rhsObj);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,218,Chronology rhsChrono = conv.getChronology(rhsObj);
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,216,hsMillis = iLowerLimit.roundFloor(lhsMillis);
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,217,hsMillis = iLowerLimit.roundFloor(rhsMillis);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,221,lhsMillis = lhsChrono.getField(iLowerLimit).roundFloor(lhsMillis);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,222,rhsMillis = rhsChrono.getField(iLowerLimit).roundFloor(rhsMillis);
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,221,hsMillis = iUpperLimit.remainder(lhsMillis);
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,222,hsMillis = iUpperLimit.remainder(rhsMillis);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,226,lhsMillis = lhsChrono.getField(iUpperLimit).remainder(lhsMillis);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,227,rhsMillis = rhsChrono.getField(iUpperLimit).remainder(rhsMillis);
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,235, Gets the millisecond value from an object using the converter system.
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,237, @param obj  the object to convert
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,238, @return millis since the epoch
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,240,rivate static long getMillisFromObject(Object obj) {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,241,eturn ConverterManager.getInstance().getInstantConverter(obj).getInstantMillis(obj);
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,10,* are met:
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,54,package org.joda.time;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,57,import java.util.HashMap;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,58,import java.util.Map;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,61,"* Identifies a field, such as year or minuteOfHour, in a chronology-neutral way."
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,63,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,64,* @since 1.0
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,66,public class DateTimeFieldType implements Serializable {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,68,/** Serialization version */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,69,private static final long serialVersionUID = -42615285973990L;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,71,/** The cache of name to type used to ensure singletons. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,72,private static Map cCache = new HashMap();
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,73,/** The era field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,74,"private static final DateTimeFieldType ERA = new DateTimeFieldType(""era"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,75,/** The yearOfEra field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,76,"private static final DateTimeFieldType YEAR_OF_ERA = new DateTimeFieldType(""yearOfEra"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,77,/** The centuryOfEra field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,78,"private static final DateTimeFieldType CENTURY_OF_ERA = new DateTimeFieldType(""centuryOfEra"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,79,/** The yearOfCentury field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,80,"private static final DateTimeFieldType YEAR_OF_CENTURY = new DateTimeFieldType(""yearOfCentury"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,81,/** The year field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,82,"private static final DateTimeFieldType YEAR = new DateTimeFieldType(""year"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,83,/** The dayOfYear field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,84,"private static final DateTimeFieldType DAY_OF_YEAR = new DateTimeFieldType(""dayOfYear"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,85,/** The monthOfYear field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,86,"private static final DateTimeFieldType MONTH_OF_YEAR = new DateTimeFieldType(""monthOfYear"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,87,/** The dayOfMonth field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,88,"private static final DateTimeFieldType DAY_OF_MONTH = new DateTimeFieldType(""dayOfMonth"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,89,/** The weekyear field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,90,"private static final DateTimeFieldType WEEKYEAR = new DateTimeFieldType(""weekyear"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,91,/** The weekOfWeekyear field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,92,"private static final DateTimeFieldType WEEK_OF_WEEKYEAR = new DateTimeFieldType(""weekOfWeekyear"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,93,/** The dayOfWeek field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,94,"private static final DateTimeFieldType DAY_OF_WEEK = new DateTimeFieldType(""dayOfWeek"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,96,/** The halfday field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,97,"private static final DateTimeFieldType HALFDAY_OF_DAY = new DateTimeFieldType(""halfdayOfDay"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,98,/** The hourOfHalfday field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,99,"private static final DateTimeFieldType HOUR_OF_HALFDAY = new DateTimeFieldType(""hourOfHalfday"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,100,/** The clockhourOfHalfday field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,101,"private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY = new DateTimeFieldType(""clockhourOfHalfday"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,102,/** The clockhourOfDay field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,103,"private static final DateTimeFieldType CLOCKHOUR_OF_DAY = new DateTimeFieldType(""clockhourOfDay"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,104,/** The hourOfDay field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,105,"private static final DateTimeFieldType HOUR_OF_DAY = new DateTimeFieldType(""hourOfDay"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,106,/** The minuteOfDay field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,107,"private static final DateTimeFieldType MINUTE_OF_DAY = new DateTimeFieldType(""minuteOfDay"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,108,/** The minuteOfHour field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,109,"private static final DateTimeFieldType MINUTE_OF_HOUR = new DateTimeFieldType(""minuteOfHour"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,110,/** The secondOfDay field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,111,"private static final DateTimeFieldType SECOND_OF_DAY = new DateTimeFieldType(""secondOfDay"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,112,/** The secondOfMinute field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,113,"private static final DateTimeFieldType SECOND_OF_MINUTE = new DateTimeFieldType(""secondOfMinute"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,114,/** The millisOfDay field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,115,"private static final DateTimeFieldType MILLIS_OF_DAY = new DateTimeFieldType(""millisOfDay"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,116,/** The millisOfSecond field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,117,"private static final DateTimeFieldType MILLIS_OF_SECOND = new DateTimeFieldType(""millisOfSecond"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,119,/** The name of the field. */
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,120,private final String iName;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,124,* Factory method to obtain a DateTimeFieldType by name ensuring each
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,125,* type is a singleton.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,126,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,127,"* If the name is not found, an error is thrown."
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,129,* @param name  the name to retrieve
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,130,* @return the singleton type
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,132,public static synchronized DateTimeFieldType getInstance(String name) {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,133,DateTimeFieldType type = (DateTimeFieldType) cCache.get(name);
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,134,if (type == null) {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,135,"throw new IllegalArgumentException(""The field '"" + name + ""' is unknown"");"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,137,return type;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,141,* Factory method to define a DateTimeFieldType by name ensuring each
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,142,* type is a singleton.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,143,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,144,"* This method checks to see if the name is previously defined, in which"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,145,* case it returns the previously defined type object.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,146,"* If the name is not found, a new type is created."
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,147,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,148,* It is intended that this method is called once in your program startup
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,149,* and then you use the <code>getInstance</code> method. This could be
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,150,* achieved by subclassing this class.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,152,* @param name  the name to retrieve
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,153,* @return the singleton type
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,155,public static synchronized DateTimeFieldType define(String name) {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,156,DateTimeFieldType type = (DateTimeFieldType) cCache.get(name);
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,157,if (type == null) {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,158,return new DateTimeFieldType(name);
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,160,return type;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,165,* Constructor.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,167,* @param name  the name to use
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,169,private DateTimeFieldType(String name) {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,170,super();
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,171,iName = name;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,172,"cCache.put(name, this);"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,176,* Ensure a singleton is returned.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,178,* @return the singleton type
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,180,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,181,return getInstance(iName);
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,186,* Get the millis of second field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,188,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,190,public static DateTimeFieldType millisOfSecond() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,191,return MILLIS_OF_SECOND;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,195,* Get the millis of day field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,197,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,199,public static DateTimeFieldType millisOfDay() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,200,return MILLIS_OF_DAY;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,204,* Get the second of minute field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,206,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,208,public static DateTimeFieldType secondOfMinute() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,209,return SECOND_OF_MINUTE;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,213,* Get the second of day field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,215,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,217,public static DateTimeFieldType secondOfDay() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,218,return SECOND_OF_DAY;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,222,* Get the minute of hour field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,224,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,226,public static DateTimeFieldType minuteOfHour() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,227,return MINUTE_OF_HOUR;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,231,* Get the minute of day field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,233,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,235,public static DateTimeFieldType minuteOfDay() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,236,return MINUTE_OF_DAY;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,240,* Get the hour of day (0-23) field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,242,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,244,public static DateTimeFieldType hourOfDay() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,245,return HOUR_OF_DAY;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,249,* Get the hour of day (offset to 1-24) field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,251,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,253,public static DateTimeFieldType clockhourOfDay() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,254,return CLOCKHOUR_OF_DAY;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,258,* Get the hour of am/pm (0-11) field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,260,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,262,public static DateTimeFieldType hourOfHalfday() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,263,return HOUR_OF_HALFDAY;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,267,* Get the hour of am/pm (offset to 1-12) field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,269,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,271,public static DateTimeFieldType clockhourOfHalfday() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,272,return CLOCKHOUR_OF_HALFDAY;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,276,* Get the AM(0) PM(1) field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,278,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,280,public static DateTimeFieldType halfdayOfDay() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,281,return HALFDAY_OF_DAY;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,286,* Get the day of week field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,288,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,290,public static DateTimeFieldType dayOfWeek() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,291,return DAY_OF_WEEK;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,295,* Get the day of month field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,297,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,299,public static DateTimeFieldType dayOfMonth() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,300,return DAY_OF_MONTH;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,304,* Get the day of year field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,306,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,308,public static DateTimeFieldType dayOfYear() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,309,return DAY_OF_YEAR;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,313,* Get the week of a week based year field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,315,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,317,public static DateTimeFieldType weekOfWeekyear() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,318,return WEEK_OF_WEEKYEAR;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,322,* Get the year of a week based year field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,324,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,326,public static DateTimeFieldType weekyear() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,327,return WEEKYEAR;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,331,* Get the month of year field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,333,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,335,public static DateTimeFieldType monthOfYear() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,336,return MONTH_OF_YEAR;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,340,* Get the year field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,342,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,344,public static DateTimeFieldType year() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,345,return YEAR;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,349,* Get the year of era field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,351,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,353,public static DateTimeFieldType yearOfEra() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,354,return YEAR_OF_ERA;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,358,* Get the year of century field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,360,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,362,public static DateTimeFieldType yearOfCentury() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,363,return YEAR_OF_CENTURY;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,367,* Get the century of era field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,369,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,371,public static DateTimeFieldType centuryOfEra() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,372,return CENTURY_OF_ERA;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,376,* Get the era field type.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,378,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,380,public static DateTimeFieldType era() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,381,return ERA;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,386,* Get the name of the field.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,387,"* By convention, names follow a pattern of ""dddOfRrr"", where ""ddd"" represents"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,388,"* the (singular) duration field name and ""Rrr"" represents the (singular)"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,389,"* range duration field name. If the range field is not applicable, then"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,390,* the name of the field is simply the (singular) duration field name.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,392,* @return field name
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,394,public String getName() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,395,return iName;
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,399,* Get a suitable debug string.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,401,* @return debug string
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,403,public String toString() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,404,return getName();
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,10,* are met:
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,54,package org.joda.time;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,57,import java.util.HashMap;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,58,import java.util.Map;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,61,"* Identifies a field, such as year or minutes, in a chronology-neutral way."
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,63,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,64,* @since 1.0
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,66,public class DurationFieldType implements Serializable {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,68,/** Serialization version */
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,69,private static final long serialVersionUID = 8765135187319L;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,71,/** The cache of name to type used to ensure singletons. */
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,72,private static Map cCache = new HashMap();
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,73,/** The eras field. */
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,74,"private static final DurationFieldType ERAS = new DurationFieldType(""eras"");"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,75,/** The centuries field. */
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,76,"private static final DurationFieldType CENTURIES = new DurationFieldType(""centuries"");"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,77,/** The weekyears field. */
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,78,"private static final DurationFieldType WEEKYEARS = new DurationFieldType(""weekyears"");"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,79,/** The years field. */
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,80,"private static final DurationFieldType YEARS = new DurationFieldType(""years"");"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,81,/** The months field. */
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,82,"private static final DurationFieldType MONTHS = new DurationFieldType(""months"");"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,83,/** The weeks field. */
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,84,"private static final DurationFieldType WEEKS = new DurationFieldType(""weeks"");"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,85,/** The days field. */
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,86,"private static final DurationFieldType DAYS = new DurationFieldType(""days"");"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,87,/** The halfdays field. */
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,88,"private static final DurationFieldType HALFDAYS = new DurationFieldType(""halfdays"");"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,89,/** The hours field. */
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,90,"private static final DurationFieldType HOURS = new DurationFieldType(""hours"");"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,91,/** The minutes field. */
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,92,"private static final DurationFieldType MINUTES = new DurationFieldType(""minutes"");"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,93,/** The seconds field. */
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,94,"private static final DurationFieldType SECONDS = new DurationFieldType(""seconds"");"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,95,/** The millis field. */
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,96,"private static final DurationFieldType MILLIS = new DurationFieldType(""millis"");"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,98,/** The name of the field. */
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,99,private final String iName;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,103,* Factory method to obtain a DurationFieldType by name ensuring each
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,104,* type is a singleton.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,105,* <p>
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,106,"* If the name is not found, an error is thrown."
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,108,* @param name  the name to retrieve
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,109,* @return the singleton type
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,111,public static synchronized DurationFieldType getInstance(String name) {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,112,DurationFieldType type = (DurationFieldType) cCache.get(name);
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,113,if (type == null) {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,114,"throw new IllegalArgumentException(""The field '"" + name + ""' is unknown"");"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,116,return type;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,120,* Factory method to define a DurationFieldType by name ensuring each
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,121,* type is a singleton.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,122,* <p>
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,123,"* This method checks to see if the name is previously defined, in which"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,124,* case it returns the previously defined type object.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,125,"* If the name is not found, a new type is created."
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,126,* <p>
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,127,* It is intended that this method is called once in your program startup
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,128,* and then you use the <code>getInstance</code> method. This could be
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,129,* achieved by subclassing this class.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,131,* @param name  the name to retrieve
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,132,* @return the singleton type
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,134,public static synchronized DurationFieldType define(String name) {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,135,DurationFieldType type = (DurationFieldType) cCache.get(name);
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,136,if (type == null) {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,137,return new DurationFieldType(name);
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,139,return type;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,144,* Constructor.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,146,* @param name  the name to use
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,148,private DurationFieldType(String name) {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,149,super();
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,150,iName = name;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,151,"cCache.put(name, this);"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,155,* Ensure a singleton is returned.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,157,* @return the singleton type
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,159,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,160,return getInstance(iName);
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,165,* Get the millis field type.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,167,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,169,public static DurationFieldType millis() {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,170,return MILLIS;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,174,* Get the seconds field type.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,176,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,178,public static DurationFieldType seconds() {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,179,return SECONDS;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,183,* Get the minutes field type.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,185,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,187,public static DurationFieldType minutes() {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,188,return MINUTES;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,192,* Get the hours field type.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,194,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,196,public static DurationFieldType hours() {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,197,return HOURS;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,201,* Get the halfdays field type.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,203,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,205,public static DurationFieldType halfdays() {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,206,return HALFDAYS;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,211,* Get the days field type.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,213,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,215,public static DurationFieldType days() {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,216,return DAYS;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,220,* Get the weeks field type.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,222,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,224,public static DurationFieldType weeks() {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,225,return WEEKS;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,229,* Get the weekyears field type.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,231,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,233,public static DurationFieldType weekyears() {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,234,return WEEKYEARS;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,238,* Get the months field type.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,240,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,242,public static DurationFieldType months() {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,243,return MONTHS;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,247,* Get the years field type.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,249,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,251,public static DurationFieldType years() {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,252,return YEARS;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,256,* Get the centuries field type.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,258,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,260,public static DurationFieldType centuries() {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,261,return CENTURIES;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,265,* Get the eras field type.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,267,* @return the DateTimeFieldType constant
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,269,public static DurationFieldType eras() {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,270,return ERAS;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,275,* Get the name of the field.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,276,"* By convention, names have a plural name."
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,278,* @return field name
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,280,public String getName() {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,281,return iName;
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,285,* Get a suitable debug string.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,287,* @return debug string
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,289,public String toString() {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,290,return getName();
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,75,* Get the value of one of the fields of a datetime.
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,76,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,77,* This method uses the chronology of the datetime to obtain the value.
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,78,* It is essentially a generic way of calling one of the get methods.
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,80,"* @param type  a field type, usually obtained from DateTimeFieldType"
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,81,* @return the value of that field
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,82,* @throws IllegalArgumentException if the field is null
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,84,int get(DateTimeFieldType type);
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,98, Get the value of one of the fields of a datetime.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,98,"* Gets a value of the specified field, which is obtained from a Chronology."
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,100, DateTimeField instances are generally obtained from a {@link Chronology} subclass.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,101," However, an application can create its own DateTimeField to manipulate the"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,102, date time millis in new ways.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,100,* Field instances are generally obtained from a {@link Chronology}.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,101,"* However, an application can create its own fields to manipulate the"
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,102,* datetime millis in new ways.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,104," @param field  a DateTimeField instance, usually obtained from a Chronology"
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,104,"* @param field  a field, usually obtained from a Chronology"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,58,import org.joda.time.DateTimeFieldType;
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,92,* Get the value of one of the fields of a datetime.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,93,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,94,* This method uses the chronology of the datetime to obtain the value.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,95,* It is essentially a generic way of calling one of the get methods.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,97,"* @param type  a field type, usually obtained from DateTimeFieldType"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,98,* @return the value of that field
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,99,* @throws IllegalArgumentException if the field is null
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,101,public int get(DateTimeFieldType type) {
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,102,return getChronology().getField(type).get(getMillis());
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,59,import org.joda.time.DateTimeFieldType;
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,242,* Get the field from the type.
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,243,* <p>
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,244,* This method obtains the <code>DateTimeField</code> for the <code>DateTimeFieldType</code>.
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,245,* It is essentially a generic way of calling one of the field methods.
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,247,"* @param type  a field type, usually obtained from DateTimeFieldType"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,248,* @return the chronology field
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,249,* @throws IllegalArgumentException if the field is null
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,251,public DateTimeField getField(DateTimeFieldType type) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,252,if (type == DateTimeFieldType.millisOfSecond()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,253,return millisOfSecond();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,254,} else if (type == DateTimeFieldType.millisOfDay()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,255,return millisOfDay();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,256,} else if (type == DateTimeFieldType.secondOfMinute()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,257,return secondOfMinute();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,258,} else if (type == DateTimeFieldType.secondOfDay()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,259,return secondOfDay();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,260,} else if (type == DateTimeFieldType.minuteOfHour()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,261,return minuteOfHour();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,262,} else if (type == DateTimeFieldType.minuteOfDay()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,263,return minuteOfDay();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,264,} else if (type == DateTimeFieldType.hourOfDay()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,265,return hourOfDay();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,266,} else if (type == DateTimeFieldType.hourOfHalfday()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,267,return hourOfHalfday();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,268,} else if (type == DateTimeFieldType.clockhourOfDay()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,269,return clockhourOfDay();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,270,} else if (type == DateTimeFieldType.halfdayOfDay()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,271,return halfdayOfDay();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,272,} else if (type == DateTimeFieldType.clockhourOfHalfday()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,273,return clockhourOfHalfday();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,274,} else if (type == DateTimeFieldType.dayOfWeek()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,275,return dayOfWeek();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,276,} else if (type == DateTimeFieldType.dayOfMonth()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,277,return dayOfMonth();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,278,} else if (type == DateTimeFieldType.dayOfYear()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,279,return dayOfYear();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,280,} else if (type == DateTimeFieldType.weekOfWeekyear()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,281,return weekOfWeekyear();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,282,} else if (type == DateTimeFieldType.weekyear()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,283,return weekyear();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,284,} else if (type == DateTimeFieldType.monthOfYear()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,285,return monthOfYear();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,286,} else if (type == DateTimeFieldType.year()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,287,return year();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,288,} else if (type == DateTimeFieldType.yearOfEra()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,289,return yearOfEra();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,290,} else if (type == DateTimeFieldType.yearOfCentury()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,291,return yearOfCentury();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,292,} else if (type == DateTimeFieldType.centuryOfEra()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,293,return centuryOfEra();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,294,} else if (type == DateTimeFieldType.era()) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,295,return era();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,296,} else {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,297,"throw new IllegalArgumentException(""Unrecognised field: "" + type);"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,171,ublic void testGet() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,171,public void testGet_DateTimeField() {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,196,est.get(null);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,196,test.get((DateTimeField) null);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,197,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,198,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,201,public void testGet_DateTimeFieldType() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,202,DateMidnight test = new DateMidnight();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,203,"assertEquals(1, test.get(DateTimeFieldType.era()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,204,"assertEquals(20, test.get(DateTimeFieldType.centuryOfEra()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,205,"assertEquals(2, test.get(DateTimeFieldType.yearOfCentury()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,206,"assertEquals(2002, test.get(DateTimeFieldType.yearOfEra()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,207,"assertEquals(2002, test.get(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,208,"assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,209,"assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,210,"assertEquals(2002, test.get(DateTimeFieldType.weekyear()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,211,"assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,212,"assertEquals(7, test.get(DateTimeFieldType.dayOfWeek()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,213,"assertEquals(160, test.get(DateTimeFieldType.dayOfYear()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,214,"assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,215,"assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,216,"assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,217,"assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,218,"assertEquals(0, test.get(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,219,"assertEquals(0, test.get(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,220,"assertEquals(0, test.get(DateTimeFieldType.minuteOfDay()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,221,"assertEquals(0, test.get(DateTimeFieldType.secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,222,"assertEquals(0, test.get(DateTimeFieldType.secondOfDay()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,223,"assertEquals(0, test.get(DateTimeFieldType.millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,224,"assertEquals(0, test.get(DateTimeFieldType.millisOfDay()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,225,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,226,test.get((DateTimeFieldType) null);
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,177,"Millis = DateTimeComparator.getInstance(null, chrono.secondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,178,"Second = DateTimeComparator.getInstance(chrono.secondOfMinute(), chrono.minuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,179,"Minute = DateTimeComparator.getInstance(chrono.minuteOfHour(), chrono.hourOfDay());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,180,"Hour = DateTimeComparator.getInstance(chrono.hourOfDay(), chrono.dayOfYear());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,181,"DayOfWeek = DateTimeComparator.getInstance(chrono.dayOfWeek(), chrono.weekOfWeekyear());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,182,"DayOfMonth = DateTimeComparator.getInstance(chrono.dayOfMonth(), chrono.monthOfYear());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,183,"DayOfYear = DateTimeComparator.getInstance(chrono.dayOfYear(), chrono.year());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,184,"WeekOfWeekyear = DateTimeComparator.getInstance(chrono.weekOfWeekyear(), chrono.weekyear());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,185,Weekyear = DateTimeComparator.getInstance(chrono.weekyear());
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,186,"Month = DateTimeComparator.getInstance(chrono.monthOfYear(), chrono.year());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,187,Year = DateTimeComparator.getInstance(chrono.year());
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,188,Date = DateTimeComparator.getDateOnlyInstance(chrono);
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,189,Time = DateTimeComparator.getTimeOnlyInstance(chrono);
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,177,"cMillis = DateTimeComparator.getInstance(null, DateTimeFieldType.secondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,178,"cSecond = DateTimeComparator.getInstance(DateTimeFieldType.secondOfMinute(), DateTimeFieldType.minuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,179,"cMinute = DateTimeComparator.getInstance(DateTimeFieldType.minuteOfHour(), DateTimeFieldType.hourOfDay());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,180,"cHour = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,181,"cDayOfWeek = DateTimeComparator.getInstance(DateTimeFieldType.dayOfWeek(), DateTimeFieldType.weekOfWeekyear());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,182,"cDayOfMonth = DateTimeComparator.getInstance(DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,183,"cDayOfYear = DateTimeComparator.getInstance(DateTimeFieldType.dayOfYear(), DateTimeFieldType.year());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,184,"cWeekOfWeekyear = DateTimeComparator.getInstance(DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.weekyear());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,185,cWeekyear = DateTimeComparator.getInstance(DateTimeFieldType.weekyear());
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,186,"cMonth = DateTimeComparator.getInstance(DateTimeFieldType.monthOfYear(), DateTimeFieldType.year());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,187,cYear = DateTimeComparator.getInstance(DateTimeFieldType.year());
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,188,cDate = DateTimeComparator.getDateOnlyInstance();
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,189,cTime = DateTimeComparator.getTimeOnlyInstance();
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,230,ateTimeComparator c = DateTimeComparator.getDateOnlyInstance(ISO);
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,231,"ssertEquals(ISO.dayOfYear(), c.getLowerLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,231,DateTimeComparator c = DateTimeComparator.getDateOnlyInstance();
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,232,"assertEquals(DateTimeFieldType.dayOfYear(), c.getLowerLimit());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,235, = DateTimeComparator.getDateOnlyInstance(null);
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,236,"ssertEquals(ISO.dayOfYear(), c.getLowerLimit());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,237,"ssertEquals(null, c.getUpperLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,236,"assertSame(DateTimeComparator.getDateOnlyInstance(), DateTimeComparator.getDateOnlyInstance());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,240,ateTimeComparator c = DateTimeComparator.getTimeOnlyInstance(ISO);
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,239,DateTimeComparator c = DateTimeComparator.getTimeOnlyInstance();
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,242,"ssertEquals(ISO.dayOfYear(), c.getUpperLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,241,"assertEquals(DateTimeFieldType.dayOfYear(), c.getUpperLimit());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,245, = DateTimeComparator.getTimeOnlyInstance(null);
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,246,"ssertEquals(null, c.getLowerLimit());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,247,"ssertEquals(ISO.dayOfYear(), c.getUpperLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,244,"assertSame(DateTimeComparator.getTimeOnlyInstance(), DateTimeComparator.getTimeOnlyInstance());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,250,ateTimeComparator c = DateTimeComparator.getInstance(ISO.hourOfDay());
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,251,"ssertEquals(ISO.hourOfDay(), c.getLowerLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,247,DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay());
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,248,"assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,259,"ateTimeComparator c = DateTimeComparator.getInstance(ISO.hourOfDay(), ISO.dayOfYear());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,260,"ssertEquals(ISO.hourOfDay(), c.getLowerLimit());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,261,"ssertEquals(ISO.dayOfYear(), c.getUpperLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,256,"DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,257,"assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,258,"assertEquals(DateTimeFieldType.dayOfYear(), c.getUpperLimit());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,264," = DateTimeComparator.getInstance(ISO.hourOfDay(), ISO.hourOfDay());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,265,"ssertEquals(ISO.hourOfDay(), c.getLowerLimit());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,266,"ssertEquals(ISO.hourOfDay(), c.getUpperLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,261,"c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.hourOfDay());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,262,"assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,263,"assertEquals(DateTimeFieldType.hourOfDay(), c.getUpperLimit());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,272,ry {
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,273,"ateTimeComparator.getInstance(ISO.dayOfYear(), ISO.hourOfDay());"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,274,ail();
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,275, catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,269,"c = DateTimeComparator.getInstance(DateTimeFieldType.dayOfYear(), null);"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,270,"assertSame(DateTimeComparator.getDateOnlyInstance(), c);"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,272,"c = DateTimeComparator.getInstance(null, DateTimeFieldType.dayOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,273,"assertSame(DateTimeComparator.getTimeOnlyInstance(), c);"
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,285,ateTimeComparator c2 = DateTimeComparator.getTimeOnlyInstance(ISOChronology.getInstance());
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,283,DateTimeComparator c2 = DateTimeComparator.getTimeOnlyInstance();
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,292,ateTimeComparator c3 = DateTimeComparator.getTimeOnlyInstance(ISOChronology.getInstance());
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,290,DateTimeComparator c3 = DateTimeComparator.getTimeOnlyInstance();
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,301,ateTimeComparator c4 = DateTimeComparator.getDateOnlyInstance(ISOChronology.getInstance());
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,299,DateTimeComparator c4 = DateTimeComparator.getDateOnlyInstance();
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,309,"ateTimeComparator c = DateTimeComparator.getInstance(ISO.hourOfDay(), ISO.dayOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,307,"DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,156,ublic void testGet() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,156,public void testGet_DateTimeField() {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,181,est.get(null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,181,test.get((DateTimeField) null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,182,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,183,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,186,public void testGet_DateTimeFieldType() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,187,DateTime test = new DateTime();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,188,"assertEquals(1, test.get(DateTimeFieldType.era()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,189,"assertEquals(20, test.get(DateTimeFieldType.centuryOfEra()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,190,"assertEquals(2, test.get(DateTimeFieldType.yearOfCentury()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,191,"assertEquals(2002, test.get(DateTimeFieldType.yearOfEra()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,192,"assertEquals(2002, test.get(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,193,"assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,194,"assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,195,"assertEquals(2002, test.get(DateTimeFieldType.weekyear()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,196,"assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,197,"assertEquals(7, test.get(DateTimeFieldType.dayOfWeek()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,198,"assertEquals(160, test.get(DateTimeFieldType.dayOfYear()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,199,"assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,200,"assertEquals(1, test.get(DateTimeFieldType.hourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,201,"assertEquals(1, test.get(DateTimeFieldType.clockhourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,202,"assertEquals(1, test.get(DateTimeFieldType.clockhourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,203,"assertEquals(1, test.get(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,204,"assertEquals(0, test.get(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,205,"assertEquals(60, test.get(DateTimeFieldType.minuteOfDay()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,206,"assertEquals(0, test.get(DateTimeFieldType.secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,207,"assertEquals(60 * 60, test.get(DateTimeFieldType.secondOfDay()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,208,"assertEquals(0, test.get(DateTimeFieldType.millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,209,"assertEquals(60 * 60 * 1000, test.get(DateTimeFieldType.millisOfDay()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,210,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,211,test.get((DateTimeFieldType) null);
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,155,ublic void testGet() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,155,public void testGet_DateTimeField() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,180,est.get(null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,180,test.get((DateTimeField) null);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,181,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,182,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,185,public void testGet_DateTimeFieldType() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,186,MutableDateTime test = new MutableDateTime();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,187,"assertEquals(1, test.get(DateTimeFieldType.era()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,188,"assertEquals(20, test.get(DateTimeFieldType.centuryOfEra()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,189,"assertEquals(2, test.get(DateTimeFieldType.yearOfCentury()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,190,"assertEquals(2002, test.get(DateTimeFieldType.yearOfEra()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,191,"assertEquals(2002, test.get(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,192,"assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,193,"assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,194,"assertEquals(2002, test.get(DateTimeFieldType.weekyear()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,195,"assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,196,"assertEquals(7, test.get(DateTimeFieldType.dayOfWeek()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,197,"assertEquals(160, test.get(DateTimeFieldType.dayOfYear()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,198,"assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,199,"assertEquals(1, test.get(DateTimeFieldType.hourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,200,"assertEquals(1, test.get(DateTimeFieldType.clockhourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,201,"assertEquals(1, test.get(DateTimeFieldType.clockhourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,202,"assertEquals(1, test.get(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,203,"assertEquals(0, test.get(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,204,"assertEquals(60, test.get(DateTimeFieldType.minuteOfDay()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,205,"assertEquals(0, test.get(DateTimeFieldType.secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,206,"assertEquals(60 * 60, test.get(DateTimeFieldType.secondOfDay()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,207,"assertEquals(0, test.get(DateTimeFieldType.millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,208,"assertEquals(60 * 60 * 1000, test.get(DateTimeFieldType.millisOfDay()));"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,209,try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,210,test.get((DateTimeFieldType) null);

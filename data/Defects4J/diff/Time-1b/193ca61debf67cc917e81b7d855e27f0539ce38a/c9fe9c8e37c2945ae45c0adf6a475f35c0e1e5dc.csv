is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,108,uper();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,109,Chronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,110,Millis = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,108,"this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,122,uper();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,123,Chronology = ISOChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,124,Millis = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,120,"this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,137,uper();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,138,Chronology = selectChronology(chronology);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,139,Millis = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,133,"this(DateTimeUtils.currentTimeMillis(), chronology);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,150,uper();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,151,Chronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,152,Millis = instant;
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,144,"this(instant, ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,165,uper();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,166,Chronology = ISOChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,167,Millis = instant;
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,157,"this(instant, ISOChronology.getInstance(zone));"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,183,Millis = instant;
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,173,"iMillis = round(instant, iChronology);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,203,Millis = converter.getInstantMillis(instant);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,193,"iMillis = round(converter.getInstantMillis(instant), iChronology);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,224,"Millis = converter.getInstantMillis(instant, zone);"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,214,"iMillis = round(converter.getInstantMillis(instant, zone), iChronology);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,244,"Millis = converter.getInstantMillis(instant, chronology);"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,234,"iMillis = round(converter.getInstantMillis(instant, chronology), iChronology);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,268,uper();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,269,Chronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,270,Millis = iChronology.getDateTimeMillis(
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,271,"ear, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,258,"this(year, monthOfYear, dayOfMonth, hourOfDay,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,259,"minuteOfHour, secondOfMinute, millisOfSecond, ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,298,uper();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,299,Chronology = ISOChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,300,Millis = iChronology.getDateTimeMillis(
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,301,"ear, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,286,"this(year, monthOfYear, dayOfMonth, hourOfDay,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,287,"minuteOfHour, secondOfMinute, millisOfSecond, ISOChronology.getInstance(zone));"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,331,Millis = iChronology.getDateTimeMillis(
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,332,"ear, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,317,"long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,318,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,319,"iMillis = round(instant, iChronology);"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,323,* Rounds the specified instant as required by the subclass.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,324,* This method must not access instance variables.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,325,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,326,* This implementation performs no rounding and returns the instant.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,328,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to round
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,329,"* @param chronology  the chronology to use, not null"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,331,"protected long round(long instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,332,return instant;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,10,* are met:
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,54,package org.joda.time;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,57,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,59,import org.joda.time.format.ISODateTimeFormat;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,60,import org.joda.time.property.AbstractReadableInstantFieldProperty;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,63,* DateMidnight defines a date where the time component is fixed at midnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,64,"* The class uses a time zone, if supplied, so midnight is local unless a UTC"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,65,* time zone is used.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,66,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,67,* This class uses a Chronology internally. The Chronology determines how the
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,68,* millisecond instant value is converted into the date time fields.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,69,* The default Chronology is <code>ISOChronology</code> which is the agreed
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,70,* international standard and compatable with the modern Gregorian calendar.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,72,* <p>Each individual field can be queried in two ways:
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,73,* <ul>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,74,* <li><code>getDayOfMonth()</code>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,75,* <li><code>dayOfMonth().get()</code>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,76,* </ul>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,77,* The second technique also provides access to other useful methods on the
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,78,* field:
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,79,* <ul>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,80,* <li>numeric value
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,81,* <li>text value
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,82,* <li>short text value
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,83,* <li>maximum/minimum values
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,84,* <li>add/subtract
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,85,* <li>set
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,86,* <li>rounding
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,87,* </ul>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,89,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,90,"* DateMidnight is thread-safe and immutable, provided that the Chronology is as well."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,91,* All standard Chronology classes supplied are thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,93,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,94,* @since 1.0
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,96,public class DateMidnight extends AbstractDateTime
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,97,"implements ReadableDateTime, Serializable {"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,99,/** Serialization lock */
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,100,private static final long serialVersionUID = 156371964018738L;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,102,// Constructors
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,105,* Constructs an instance set to the current system millisecond time
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,106,* using <code>ISOChronology</code> in the default time zone.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,107,* The constructed object will have a local time of midnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,109,public DateMidnight() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,110,super();
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,114,* Constructs an instance set to the current system millisecond time
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,115,* using <code>ISOChronology</code> in the specified time zone.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,116,* The constructed object will have a local time of midnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,117,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,118,"* If the specified time zone is null, the default zone is used."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,120,"* @param zone  the time zone, null means default zone"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,122,public DateMidnight(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,123,super(zone);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,127,* Constructs an instance set to the current system millisecond time
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,128,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,129,* The constructed object will have a local time of midnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,130,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,131,"* If the chronology is null, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,132,* in the default time zone is used.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,134,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,136,public DateMidnight(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,137,super(chronology);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,142,* Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,143,* using <code>ISOChronology</code> in the default time zone.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,144,* The constructed object will have a local time of midnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,146,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,148,public DateMidnight(long instant) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,149,super(instant);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,153,* Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,154,* using <code>ISOChronology</code> in the specified time zone.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,155,* The constructed object will have a local time of midnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,156,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,157,"* If the specified time zone is null, the default zone is used."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,159,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,160,"* @param zone  the time zone, null means default zone"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,162,"public DateMidnight(long instant, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,163,"super(instant, zone);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,167,* Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,168,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,169,* The constructed object will have a local time of midnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,170,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,171,"* If the chronology is null, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,172,* in the default time zone is used.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,174,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,175,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,177,"public DateMidnight(long instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,178,"super(instant, chronology);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,183,* Constructs an instance from an Object that represents a datetime.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,184,* The constructed object will have a local time of midnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,185,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,186,"* If the object contains no chronology, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,187,* in the default time zone is used.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,188,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,189,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,190,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,191,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,193,"* @param instant  the datetime object, null means now"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,194,* @throws IllegalArgumentException if the instant is invalid
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,196,public DateMidnight(Object instant) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,197,super(instant);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,201,"* Constructs an instance from an Object that represents a datetime,"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,202,* forcing the time zone to that specified.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,203,* The constructed object will have a local time of midnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,204,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,205,"* If the object contains no chronology, <code>ISOChronology</code> is used."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,206,"* If the specified time zone is null, the default zone is used."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,207,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,208,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,209,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,210,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,212,"* @param instant  the datetime object, null means now"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,213,"* @param zone  the time zone, null means default time zone"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,214,* @throws IllegalArgumentException if the instant is invalid
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,216,"public DateMidnight(Object instant, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,217,"super(instant, zone);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,221,"* Constructs an instance from an Object that represents a datetime,"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,222,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,223,* The constructed object will have a local time of midnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,224,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,225,"* If the chronology is null, ISOChronology in the default time zone is used."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,226,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,227,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,228,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,229,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,231,"* @param instant  the datetime object, null means now"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,232,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,233,* @throws IllegalArgumentException if the instant is invalid
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,235,"public DateMidnight(Object instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,236,"super(instant, chronology);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,241,* Constructs an instance from datetime field values
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,242,* using <code>ISOChronology</code> in the default time zone.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,243,* The constructed object will have a local time of midnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,245,* @param year  the year
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,246,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,247,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,249,"public DateMidnight(int year, int monthOfYear, int dayOfMonth) {"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,250,"super(year, monthOfYear, dayOfMonth, 0, 0, 0, 0);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,254,* Constructs an instance from datetime field values
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,255,* using <code>ISOChronology</code> in the specified time zone.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,256,* The constructed object will have a local time of midnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,257,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,258,"* If the specified time zone is null, the default zone is used."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,260,* @param year  the year
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,261,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,262,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,263,"* @param zone  the time zone, null means default time zone"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,265,"public DateMidnight(int year, int monthOfYear, int dayOfMonth, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,266,"super(year, monthOfYear, dayOfMonth, 0, 0, 0, 0, zone);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,270,* Constructs an instance from datetime field values
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,271,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,272,* The constructed object will have a local time of midnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,273,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,274,"* If the chronology is null, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,275,* in the default time zone is used.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,277,* @param year  the year
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,278,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,279,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,280,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,282,"public DateMidnight(int year, int monthOfYear, int dayOfMonth, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,283,"super(year, monthOfYear, dayOfMonth, 0, 0, 0, 0, chronology);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,287,* Rounds the specified instant as required by the subclass.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,288,* This method must not access instance variables.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,289,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,290,* This implementation performs no rounding and returns the instant.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,292,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to round
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,293,"* @param chronology  the chronology to use, not null"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,295,"protected long round(long instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,296,return chronology.dayOfMonth().roundFloor(instant);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,301,* Gets a copy of this instant with different millis.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,302,* The returned object will have a local time of midnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,303,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,304,"* Only the millis will change, the chronology and time zone are kept."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,305,* The returned object will be either be a new instance or <code>this</code>.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,307,"* @param newMillis  the new millis, from 1970-01-01T00:00:00Z"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,308,* @return a copy of this instant with different millis
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,310,public final DateMidnight withMillis(long newMillis) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,311,Chronology chrono = getChronology();
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,312,"newMillis = round(newMillis, chrono);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,313,"return (newMillis == getMillis() ? this : new DateMidnight(newMillis, chrono));"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,317,* Gets a copy of this instant with a different chronology.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,318,* The returned object will have a local time of midnight in the new chronology.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,319,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,320,* The returned object will be either be a new instance or <code>this</code>.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,322,* @param newChronology  the new chronology
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,323,* @return a copy of this instant with a different chronology
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,325,public final DateMidnight withChronology(Chronology newChronology) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,326,"return (newChronology == getChronology() ? this : new DateMidnight(getMillis(), newChronology));"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,330,"* Gets a copy of this instant with a different time zone, preserving the"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,331,* millisecond instant.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,332,* The returned object will have a local time of midnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,333,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,334,* This method is useful for finding the local time in another timezone.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,335,"* For example, if this instant holds 12:30 in Europe/London, the result"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,336,* from this method with Europe/Paris would be 13:30.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,337,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,338,* The returned object will be a new instance of the same implementation type.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,339,"* This method changes alters the time zone, and does not change the"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,340,"* millisecond instant, with the effect that the field values usually change."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,341,* The returned object will be either be a new instance or <code>this</code>.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,343,* @param newDateTimeZone  the new time zone
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,344,* @return a copy of this instant with a different time zone
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,345,* @see #withZoneRetainFields
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,347,public final DateMidnight withZone(DateTimeZone newDateTimeZone) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,348,return withChronology(getChronology().withZone(newDateTimeZone));
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,352,"* Gets a copy of this instant with a different time zone, preserving the"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,353,* field values.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,354,* The returned object will have a local time of midnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,355,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,356,* This method is useful for finding the millisecond time in another timezone.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,357,"* For example, if this instant holds 12:30 in Europe/London (ie. 12:30Z),"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,358,* the result from this method with Europe/Paris would be 12:30 (ie. 11:30Z).
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,359,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,360,* The returned object will be a new instance of the same implementation type.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,361,* This method alters the time zone and the millisecond instant to keep
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,362,* the field values the same.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,363,* The returned object will be either be a new instance or <code>this</code>.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,365,* @param newDateTimeZone  the new time zone
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,366,* @return a copy of this instant with a different time zone
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,367,* @see #withZone
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,369,public final DateMidnight withZoneRetainFields(DateTimeZone newDateTimeZone) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,370,final long originalMillis = getMillis();
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,371,final Chronology originalChrono = getChronology();
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,372,final DateTimeZone originalZone;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,373,if (originalChrono == null || (originalZone = originalChrono.getZone()) == null) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,374,"// Without an original chronology or time zone, no new time zone"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,375,// can be set. Call withMillis to let it decide if a clone should
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,376,// be made or not.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,377,return withMillis(originalMillis);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,380,DateMidnight newInstant = withChronology(originalChrono.withZone(newDateTimeZone));
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,381,newDateTimeZone = newInstant.getZone();
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,383,if (newDateTimeZone == null || newDateTimeZone == originalZone) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,384,// New time zone didn't stick or didn't change. Skip millis adjustment.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,385,return newInstant;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,388,long newMillis = originalMillis + originalZone.getOffset(originalMillis);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,389,newMillis -= newDateTimeZone.getOffsetFromLocal(newMillis);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,391,return newInstant.withMillis(newMillis);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,394,// Date properties
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,397,* Get the era property.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,399,* @return the era property
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,401,public final Property era() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,402,"return new Property(this, getChronology().era());"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,406,* Get the century of era property.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,408,* @return the year of era property
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,410,public final Property centuryOfEra() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,411,"return new Property(this, getChronology().centuryOfEra());"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,415,* Get the year of century property.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,417,* @return the year of era property
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,419,public final Property yearOfCentury() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,420,"return new Property(this, getChronology().yearOfCentury());"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,424,* Get the year of era property.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,426,* @return the year of era property
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,428,public final Property yearOfEra() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,429,"return new Property(this, getChronology().yearOfEra());"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,433,* Get the year property.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,435,* @return the year property
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,437,public final Property year() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,438,"return new Property(this, getChronology().year());"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,442,* Get the year of a week based year property.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,444,* @return the year of a week based year property
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,446,public final Property weekyear() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,447,"return new Property(this, getChronology().weekyear());"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,451,* Get the month of year property.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,453,* @return the month of year property
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,455,public final Property monthOfYear() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,456,"return new Property(this, getChronology().monthOfYear());"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,460,* Get the week of a week based year property.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,462,* @return the week of a week based year property
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,464,public final Property weekOfWeekyear() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,465,"return new Property(this, getChronology().weekOfWeekyear());"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,469,* Get the day of year property.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,471,* @return the day of year property
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,473,public final Property dayOfYear() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,474,"return new Property(this, getChronology().dayOfYear());"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,478,* Get the day of month property.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,480,* @return the day of month property
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,482,public final Property dayOfMonth() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,483,"return new Property(this, getChronology().dayOfMonth());"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,487,* Get the day of week property.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,489,* @return the day of week property
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,491,public final Property dayOfWeek() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,492,"return new Property(this, getChronology().dayOfWeek());"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,495,// Output
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,498,* Output the date time in ISO8601 format (yyyy-MM-dd'T'00:00:00.000Z).
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,500,* @return ISO8601 time formatted string.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,502,public final String toString() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,503,return ISODateTimeFormat.getInstance(getChronology()).dateTime().print(this);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,507,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,508,* immutable.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,510,protected final void setMillis(long millis) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,514,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,515,* immutable.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,517,protected final void setChronology(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,521,* DateTimeFieldProperty binds a DateMidnight to a DateTimeField allowing powerful
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,522,* datetime functionality to be easily accessed.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,523,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,524,"* The simplest use of this class is as an alternative get method, here used to"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,525,* get the year '1972' (as an int) and the month 'December' (as a String).
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,526,* <pre>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,527,"* DateMidnight dt = new DateMidnight(1972, 12, 3);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,528,* int year = dt.year().get();
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,529,* String monthStr = dt.monthOfYear().getAsText();
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,530,* </pre>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,531,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,532,* Methods are also provided that allow date modification. These return new instances
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,533,* of DateMidnight - they do not modify the original. The example below yields two
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,534,* independent immutable date objects 20 years apart.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,535,* <pre>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,536,"* DateMidnight dt = new DateMidnight(1972, 12, 3);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,537,* DateMidnight dt20 = dt.year().addToCopy(20);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,538,* </pre>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,539,* Serious modification of dates (ie. more than just changing one or two fields)
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,540,* should use the {@link org.joda.time.MutableDateTime MutableDateTime} class.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,541,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,542,* DateMidnight.Property itself is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,544,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,545,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,546,* @since 1.0
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,548,public static class Property extends AbstractReadableInstantFieldProperty {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,550,/** Serialization lock */
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,551,private static final long serialVersionUID = 257629620L;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,553,/** The instant this property is working against */
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,554,private final DateMidnight iInstant;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,555,/** The field this property is working against */
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,556,private final DateTimeField iField;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,559,* Constructor.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,561,* @param instant  the instant to set
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,562,* @param field  the field to use
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,564,"public Property(DateMidnight instant, DateTimeField field) {"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,565,super();
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,566,iInstant = instant;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,567,iField = field;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,572,* Gets the field being used.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,574,* @return the field
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,576,public DateTimeField getField() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,577,return iField;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,581,* Gets the instant being used.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,583,* @return the instant
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,585,public ReadableInstant getReadableInstant() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,586,return iInstant;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,590,* Gets the datetime being used.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,592,* @return the datetime
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,594,public DateMidnight getDateMidnight() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,595,return iInstant;
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,600,* Adds to this field in a copy of this DateMidnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,601,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,602,* The DateMidnight attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,603,* This operation is faster than converting a DateMidnight to a MutableDateTime
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,604,"* and back again when setting one field. When setting multiple fields,"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,605,* it is generally quicker to make the conversion to MutableDateTime.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,607,* @param value  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,608,* @return a copy of the DateMidnight with the field value changed
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,609,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,611,public DateMidnight addToCopy(int value) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,612,"return iInstant.withMillis(iField.add(iInstant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,616,* Adds to this field in a copy of this DateMidnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,617,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,618,* The DateMidnight attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,619,* This operation is faster than converting a DateMidnight to a MutableDateTime
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,620,"* and back again when setting one field. When setting multiple fields,"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,621,* it is generally quicker to make the conversion to MutableDateTime.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,623,* @param value  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,624,* @return a copy of the DateMidnight with the field value changed
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,625,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,627,public DateMidnight addToCopy(long value) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,628,"return iInstant.withMillis(iField.add(iInstant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,632,"* Adds to this field, possibly wrapped, in a copy of this DateMidnight."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,633,* A wrapped operation only changes this field.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,634,* Thus 31st January addWrapField one day goes to the 1st January.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,635,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,636,* The DateMidnight attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,637,* This operation is faster than converting a DateMidnight to a MutableDateTime
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,638,"* and back again when setting one field. When setting multiple fields,"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,639,* it is generally quicker to make the conversion to MutableDateTime.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,641,* @param value  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,642,* @return a copy of the DateMidnight with the field value changed
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,643,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,645,public DateMidnight addWrapFieldToCopy(int value) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,646,"return iInstant.withMillis(iField.addWrapField(iInstant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,651,* Sets this field in a copy of the DateMidnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,652,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,653,* The DateMidnight attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,654,* This operation is faster than converting a DateMidnight to a MutableDateTime
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,655,"* and back again when setting one field. When setting multiple fields,"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,656,* it is generally quicker to make the conversion to MutableDateTime.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,658,* @param value  the value to set the field in the copy to
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,659,* @return a copy of the DateMidnight with the field value changed
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,660,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,662,public DateMidnight setCopy(int value) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,663,"return iInstant.withMillis(iField.set(iInstant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,667,* Sets this field in a copy of the DateMidnight to a parsed text value.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,668,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,669,* The DateMidnight attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,670,* This operation is faster than converting a DateMidnight to a MutableDateTime
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,671,"* and back again when setting one field. When setting multiple fields,"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,672,* it is generally quicker to make the conversion to MutableDateTime.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,674,* @param text  the text value to set
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,675,* @param locale  optional locale to use for selecting a text symbol
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,676,* @return a copy of the DateMidnight with the field value changed
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,677,* @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,679,"public DateMidnight setCopy(String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,680,"return iInstant.withMillis(iField.set(iInstant.getMillis(), text, locale));"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,684,* Sets this field in a copy of the DateMidnight to a parsed text value.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,685,* <p>
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,686,* The DateMidnight attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,687,* This operation is faster than converting a DateMidnight to a MutableDateTime
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,688,"* and back again when setting one field. When setting multiple fields,"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,689,* it is generally quicker to make the conversion to MutableDateTime.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,691,* @param text  the text value to set
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,692,* @return a copy of the DateMidnight with the field value changed
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,693,* @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,695,public final DateMidnight setCopy(String text) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,696,"return setCopy(text, null);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,701,* Rounds to the lowest whole unit of this field on a copy of this DateMidnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,703,* @return a copy of the DateMidnight with the field value changed
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,705,public DateMidnight roundFloorCopy() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,706,return iInstant.withMillis(iField.roundFloor(iInstant.getMillis()));
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,710,* Rounds to the highest whole unit of this field on a copy of this DateMidnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,712,* @return a copy of the DateMidnight with the field value changed
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,714,public DateMidnight roundCeilingCopy() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,715,return iInstant.withMillis(iField.roundCeiling(iInstant.getMillis()));
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,719,"* Rounds to the nearest whole unit of this field on a copy of this DateMidnight,"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,720,* favoring the floor if halfway.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,722,* @return a copy of the DateMidnight with the field value changed
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,724,public DateMidnight roundHalfFloorCopy() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,725,return iInstant.withMillis(iField.roundHalfFloor(iInstant.getMillis()));
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,729,"* Rounds to the nearest whole unit of this field on a copy of this DateMidnight,"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,730,* favoring the ceiling if halfway.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,732,* @return a copy of the DateMidnight with the field value changed
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,734,public DateMidnight roundHalfCeilingCopy() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,735,return iInstant.withMillis(iField.roundHalfCeiling(iInstant.getMillis()));
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,739,* Rounds to the nearest whole unit of this field on a copy of this DateMidnight.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,740,"* If halfway, the ceiling is favored over the floor only if it makes this field's value even."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,742,* @return a copy of the DateMidnight with the field value changed
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,744,public DateMidnight roundHalfEvenCopy() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,745,return iInstant.withMillis(iField.roundHalfEven(iInstant.getMillis()));
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,75,suite.addTest(TestInstant_Constructors.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,76,suite.addTest(TestInstant_Basics.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,82,suite.addTest(TestDateMidnight_Constructors.suite());
False,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,80,uite.addTest(TestInstant_Constructors.suite());
False,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,81,uite.addTest(TestInstant_Basics.suite());
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,56,import java.util.Date;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,57,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,59,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,60,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,62,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,63,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,64,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,65,import org.joda.time.convert.MockZeroNullIntegerConverter;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,68,* This class is a Junit unit test for DateMidnight.
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,70,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,72,public class TestDateMidnight_Constructors extends TestCase {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,73,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,74,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,76,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,77,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,79,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,80,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,81,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,82,366 + 365;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,83,long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,84,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,85,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,86,366 + 365 + 365;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,88,// 2002-06-09
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,89,private long TEST_TIME_NOW_UTC =
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,90,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,91,private long TEST_TIME_NOW_LONDON =
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,92,TEST_TIME_NOW_UTC - DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,93,private long TEST_TIME_NOW_PARIS =
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,94,TEST_TIME_NOW_UTC - 2*DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,96,// 2002-04-05
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,97,private long TEST_TIME1_UTC =
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,98,(y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,99,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,100,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,101,private long TEST_TIME1_LONDON =
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,102,(y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,103,- DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,104,private long TEST_TIME1_PARIS =
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,105,(y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,106,- 2*DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,108,// 2003-05-06
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,109,private long TEST_TIME2_UTC =
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,110,(y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,111,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,112,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,113,private long TEST_TIME2_LONDON =
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,114,(y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,115,- DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,116,private long TEST_TIME2_PARIS =
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,117,(y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,118,- 2*DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,120,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,121,private Locale locale = null;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,123,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,124,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,127,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,128,return new TestSuite(TestDateMidnight_Constructors.class);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,131,public TestDateMidnight_Constructors(String name) {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,132,super(name);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,135,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,136,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW_UTC);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,137,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,138,locale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,139,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,140,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,143,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,144,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,145,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,146,Locale.setDefault(locale);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,147,zone = null;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,151,public void testTest() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,152,"assertEquals(""2002-06-09T00:00:00.000Z"", new Instant(TEST_TIME_NOW_UTC).toString());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,153,"assertEquals(""2002-04-05T12:24:00.000Z"", new Instant(TEST_TIME1_UTC).toString());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,154,"assertEquals(""2003-05-06T14:28:00.000Z"", new Instant(TEST_TIME2_UTC).toString());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,159,* Test constructor ()
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,161,public void testConstructor() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,162,DateMidnight test = new DateMidnight();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,163,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,164,"assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,165,"assertEquals(2002, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,166,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,167,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,171,* Test constructor (DateTimeZone)
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,173,public void testConstructor_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,174,DateMidnight test = new DateMidnight(PARIS);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,175,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,176,"assertEquals(TEST_TIME_NOW_PARIS, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,180,* Test constructor (DateTimeZone=null)
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,182,public void testConstructor_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,183,DateMidnight test = new DateMidnight((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,184,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,185,"assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,189,* Test constructor (Chronology)
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,191,public void testConstructor_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,192,DateMidnight test = new DateMidnight(GregorianChronology.getInstance());
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,193,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,194,"assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,198,* Test constructor (Chronology=null)
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,200,public void testConstructor_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,201,DateMidnight test = new DateMidnight((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,202,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,203,"assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,208,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,210,public void testConstructor_long1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,211,DateMidnight test = new DateMidnight(TEST_TIME1_UTC);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,212,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,213,"assertEquals(TEST_TIME1_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,217,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,219,public void testConstructor_long2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,220,DateMidnight test = new DateMidnight(TEST_TIME2_UTC);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,221,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,222,"assertEquals(TEST_TIME2_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,226,"* Test constructor (long, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,228,public void testConstructor_long1_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,229,"DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,230,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,231,"assertEquals(TEST_TIME1_PARIS, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,235,"* Test constructor (long, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,237,public void testConstructor_long2_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,238,"DateMidnight test = new DateMidnight(TEST_TIME2_UTC, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,239,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,240,"assertEquals(TEST_TIME2_PARIS, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,244,"* Test constructor (long, DateTimeZone=null)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,246,public void testConstructor_long_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,247,"DateMidnight test = new DateMidnight(TEST_TIME1_UTC, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,248,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,249,"assertEquals(TEST_TIME1_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,253,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,255,public void testConstructor_long1_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,256,"DateMidnight test = new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,257,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,258,"assertEquals(TEST_TIME1_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,262,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,264,public void testConstructor_long2_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,265,"DateMidnight test = new DateMidnight(TEST_TIME2_UTC, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,266,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,267,"assertEquals(TEST_TIME2_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,271,"* Test constructor (long, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,273,public void testConstructor_long_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,274,"DateMidnight test = new DateMidnight(TEST_TIME1_UTC, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,275,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,276,"assertEquals(TEST_TIME1_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,281,* Test constructor (Object)
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,283,public void testConstructor_Object() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,284,Date date = new Date(TEST_TIME1_UTC);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,285,DateMidnight test = new DateMidnight(date);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,286,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,287,"assertEquals(TEST_TIME1_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,291,* Test constructor (Object)
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,293,public void testConstructor_invalidObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,294,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,295,new DateMidnight(new Object());
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,296,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,297,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,301,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,303,public void testConstructor_nullObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,304,DateMidnight test = new DateMidnight((Object) null);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,305,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,306,"assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,310,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,312,public void testConstructor_badconverterObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,313,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,314,ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,315,DateMidnight test = new DateMidnight(new Integer(0));
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,316,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,317,"assertEquals(0L - DateTimeConstants.MILLIS_PER_HOUR, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,318,} finally {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,319,ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,324,"* Test constructor (Object, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,326,public void testConstructor_Object_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,327,Date date = new Date(TEST_TIME1_UTC);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,328,"DateMidnight test = new DateMidnight(date, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,329,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,330,"assertEquals(TEST_TIME1_PARIS, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,334,"* Test constructor (Object, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,336,public void testConstructor_invalidObject_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,337,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,338,"new DateMidnight(new Object(), PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,339,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,340,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,344,"* Test constructor (Object=null, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,346,public void testConstructor_nullObject_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,347,"DateMidnight test = new DateMidnight((Object) null, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,348,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,349,"assertEquals(TEST_TIME_NOW_PARIS, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,353,"* Test constructor (Object, DateTimeZone=null)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,355,public void testConstructor_Object_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,356,Date date = new Date(TEST_TIME1_UTC);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,357,"DateMidnight test = new DateMidnight(date, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,358,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,359,"assertEquals(TEST_TIME1_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,363,"* Test constructor (Object=null, DateTimeZone=null)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,365,public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,366,"DateMidnight test = new DateMidnight((Object) null, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,367,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,368,"assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,372,"* Test constructor (Object, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,374,public void testConstructor_badconverterObject_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,375,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,376,ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,377,"DateMidnight test = new DateMidnight(new Integer(0), GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,378,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,379,"assertEquals(0L - DateTimeConstants.MILLIS_PER_HOUR, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,380,} finally {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,381,ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,386,"* Test constructor (Object, Chronology)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,388,public void testConstructor_Object_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,389,Date date = new Date(TEST_TIME1_UTC);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,390,"DateMidnight test = new DateMidnight(date, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,391,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,392,"assertEquals(TEST_TIME1_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,396,"* Test constructor (Object, Chronology)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,398,public void testConstructor_invalidObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,399,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,400,"new DateMidnight(new Object(), GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,401,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,402,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,406,"* Test constructor (Object=null, Chronology)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,408,public void testConstructor_nullObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,409,"DateMidnight test = new DateMidnight((Object) null, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,410,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,411,"assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,415,"* Test constructor (Object, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,417,public void testConstructor_Object_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,418,Date date = new Date(TEST_TIME1_UTC);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,419,"DateMidnight test = new DateMidnight(date, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,420,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,421,"assertEquals(TEST_TIME1_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,425,"* Test constructor (Object=null, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,427,public void testConstructor_nullObject_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,428,"DateMidnight test = new DateMidnight((Object) null, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,429,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,430,"assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,434,"* Test constructor (Object, Chronology)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,436,public void testConstructor_badconverterObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,437,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,438,ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,439,"DateMidnight test = new DateMidnight(new Integer(0), GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,440,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,441,"assertEquals(0L - DateTimeConstants.MILLIS_PER_HOUR, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,442,} finally {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,443,ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,449,"* Test constructor (int, int, int)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,451,public void testConstructor_int_int_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,452,"DateMidnight test = new DateMidnight(2002, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,453,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,454,"assertEquals(LONDON, test.getZone());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,455,"assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,456,"assertEquals(2002, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,457,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,458,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,459,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,460,"new DateMidnight(Integer.MIN_VALUE, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,461,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,462,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,463,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,464,"new DateMidnight(Integer.MAX_VALUE, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,465,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,466,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,467,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,468,"new DateMidnight(2002, 0, 9);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,469,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,470,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,471,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,472,"new DateMidnight(2002, 13, 9);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,473,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,474,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,475,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,476,"new DateMidnight(2002, 6, 0);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,477,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,478,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,479,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,480,"new DateMidnight(2002, 6, 31);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,481,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,482,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,483,"new DateMidnight(2002, 7, 31);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,484,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,485,"new DateMidnight(2002, 7, 32);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,486,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,487,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,491,"* Test constructor (int, int, int, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,493,public void testConstructor_int_int_int_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,494,"DateMidnight test = new DateMidnight(2002, 6, 9, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,495,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,496,"assertEquals(TEST_TIME_NOW_PARIS, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,497,"assertEquals(2002, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,498,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,499,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,500,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,501,"new DateMidnight(Integer.MIN_VALUE, 6, 9, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,502,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,503,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,504,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,505,"new DateMidnight(Integer.MAX_VALUE, 6, 9, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,506,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,507,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,508,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,509,"new DateMidnight(2002, 0, 9, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,510,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,511,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,512,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,513,"new DateMidnight(2002, 13, 9, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,514,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,515,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,516,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,517,"new DateMidnight(2002, 6, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,518,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,519,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,520,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,521,"new DateMidnight(2002, 6, 31, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,522,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,523,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,524,"new DateMidnight(2002, 7, 31, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,525,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,526,"new DateMidnight(2002, 7, 32, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,527,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,528,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,532,"* Test constructor (int, int, int, DateTimeZone=null)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,534,public void testConstructor_int_int_int_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,535,"DateMidnight test = new DateMidnight(2002, 6, 9, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,536,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,537,"assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,538,"assertEquals(2002, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,539,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,540,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,544,"* Test constructor (int, int, int, Chronology)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,546,public void testConstructor_int_int_int_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,547,"DateMidnight test = new DateMidnight(2002, 6, 9, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,548,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,549,"assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,550,"assertEquals(2002, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,551,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,552,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,553,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,554,"new DateMidnight(Integer.MIN_VALUE, 6, 9, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,555,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,556,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,557,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,558,"new DateMidnight(Integer.MAX_VALUE, 6, 9, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,559,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,560,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,561,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,562,"new DateMidnight(2002, 0, 9, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,563,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,564,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,565,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,566,"new DateMidnight(2002, 13, 9, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,567,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,568,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,569,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,570,"new DateMidnight(2002, 6, 0, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,571,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,572,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,573,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,574,"new DateMidnight(2002, 6, 31, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,575,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,576,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,577,"new DateMidnight(2002, 7, 31, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,578,try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,579,"new DateMidnight(2002, 7, 32, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,580,fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,581,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,585,"* Test constructor (int, int, int, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,587,public void testConstructor_int_int_int_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,588,"DateMidnight test = new DateMidnight(2002, 6, 9, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,589,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,590,"assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,591,"assertEquals(2002, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,592,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,593,"assertEquals(9, test.getDayOfMonth());"

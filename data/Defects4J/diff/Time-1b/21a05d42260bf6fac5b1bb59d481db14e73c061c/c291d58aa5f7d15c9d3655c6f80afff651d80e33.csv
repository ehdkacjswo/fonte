is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/example/org/joda/example/time/Examples.java,JodaTime/src/example/org/joda/example/time/Examples.java,89,"System.out.println(""Change millis:         in.withMillis(0):         "" + in.withMillis(0L));"
False,JodaTime/src/example/org/joda/example/time/Examples.java,JodaTime/src/example/org/joda/example/time/Examples.java,106,"ystem.out.println("""");"
False,JodaTime/src/example/org/joda/example/time/Examples.java,JodaTime/src/example/org/joda/example/time/Examples.java,107,"ystem.out.println(""Change chrono IGNORED: in.withChronology(...):   "" + in.withChronology(null));"
False,JodaTime/src/example/org/joda/example/time/Examples.java,JodaTime/src/example/org/joda/example/time/Examples.java,108,"ystem.out.println(""Change zone IGNORED:   in.withZone(...):         "" + in.withZone(null));"
False,JodaTime/src/example/org/joda/example/time/Examples.java,JodaTime/src/example/org/joda/example/time/Examples.java,109,"ystem.out.println(""Change zone IGNORED:   in.withZoneRetainFields(...):"" + in.withZoneRetainFields(null));"
False,JodaTime/src/example/org/joda/example/time/Examples.java,JodaTime/src/example/org/joda/example/time/Examples.java,110,"ystem.out.println(""Change millis:         in.withMillis(0):         "" + in.withMillis(0L));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,498,"ublic final ReadableInstant addTo(ReadableInstant instant, int scalar) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,499,"eturn instant.withMillis(addTo(instant.getMillis(), scalar));"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,498,"public final Instant addTo(ReadableInstant instant, int scalar) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,499,"return new Instant(addTo(instant.getMillis(), scalar));"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,88,// Accessors
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,99,/ Accessors
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,108, int gjYear = dt.get(ISOChronology.getInstance().year());
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,108,* int gjYear = dt.get(GJChronology.getInstance().year());
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,123," Gets a copy of this instant with a different time zone, preserving the"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,124, millisecond instant.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,125, <p>
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,126, This method is useful for finding the local time in another timezone.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,127," For example, if this instant holds 12:30 in Europe/London, the result"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,128, from this method with Europe/Paris would be 13:30.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,129, <p>
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,130, The returned object will be a new instance of the same implementation type.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,131," This method changes alters the time zone, and does not change the"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,132," millisecond instant, with the effect that the field values usually change."
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,133, Immutable implementations may return <code>this</code> if appropriate.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,135, @param newDateTimeZone  the new time zone
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,136, @return a copy of this instant with a different time zone
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,137, @see #withZoneRetainFields
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,139,ublic ReadableInstant withZone(DateTimeZone newDateTimeZone) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,140,inal Chronology originalChrono = getChronology();
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,141,f (originalChrono == null) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,142,"/ Without an original chronology, no new time zone can be"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,143,/ set. Call withMillis to allow subclass to decide if a clone
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,144,/ should be made or not.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,145,eturn withMillis(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,147,eturn withChronology(originalChrono.withZone(newDateTimeZone));
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,151," Gets a copy of this instant with a different time zone, preserving the"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,152, field values.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,153, <p>
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,154, This method is useful for finding the millisecond time in another timezone.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,155," For example, if this instant holds 12:30 in Europe/London (ie. 12:30Z),"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,156, the result from this method with Europe/Paris would be 12:30 (ie. 11:30Z).
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,157, <p>
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,158, The returned object will be a new instance of the same implementation type.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,159, This method changes alters the time zone and the millisecond instant to keep
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,160, the field values the same.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,161, Immutable implementations may return <code>this</code> if appropriate.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,163, @param newDateTimeZone  the new time zone
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,164, @return a copy of this instant with a different time zone
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,165, @see #withZone
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,167,ublic ReadableInstant withZoneRetainFields(DateTimeZone newDateTimeZone) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,168,inal long originalMillis = getMillis();
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,169,inal Chronology originalChrono = getChronology();
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,170,inal DateTimeZone originalZone;
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,171,f (originalChrono == null || (originalZone = originalChrono.getZone()) == null) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,172,"/ Without an original chronology or time zone, no new time zone"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,173,/ can be set. Call withMillis to allow subclass to decide if a
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,174,/ clone should be made or not.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,175,eturn withMillis(originalMillis);
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,178,eadableInstant newInstant = withChronology(originalChrono.withZone(newDateTimeZone));
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,179,ewDateTimeZone = newInstant.getZone();
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,181,f (newDateTimeZone == null || newDateTimeZone == originalZone) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,182,/ New time zone didn't stick or didn't change. Skip millis adjustment.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,183,eturn newInstant;
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,186,ong newMillis = originalMillis + originalZone.getOffset(originalMillis);
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,187,ewMillis -= newDateTimeZone.getOffsetFromLocal(newMillis);
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,189,eturn newInstant.withMillis(newMillis);
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,59,/ Import for @link support
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,60,mport org.joda.time.convert.ConverterManager;
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,89," DateOnly is thread-safe and immutable, provided that the Chronology is as"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,90, well. All standard Chronology classes supplied are thread-safe and
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,91, immutable.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,87,"* DateOnly is thread-safe and immutable, provided that the Chronology is as well."
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,88,* All standard Chronology classes supplied are thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,102,tatic final long serialVersionUID = -5796551185494585279L;
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,99,/** Serialization lock */
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,100,private static final long serialVersionUID = -5796551185494585279L;
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,156, The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,154,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,155,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,170, The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,169,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,170,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,228,* Time fields will be removed from the specified millis.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,232,ublic ReadableInstant withMillis(long newMillis) {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,234,public final DateOnly withMillis(long newMillis) {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,234,"eturn newMillis == getMillis() ? this : new DateOnly(newMillis, getChronology());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,236,"return (newMillis == getMillis() ? this : new DateOnly(newMillis, getChronology()));"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,244,* The chronology will be converted to a UTC zone.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,247,ublic ReadableInstant withChronology(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,248,ewChronology = newChronology == null ? ISOChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,249, newChronology.withUTC();
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,250,"eturn newChronology == getChronology() ? this : new DateOnly(getMillis(), newChronology);"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,250,public final DateOnly withChronology(Chronology newChronology) {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,251,newChronology = newChronology == null ? ISOChronology.getInstanceUTC() : newChronology.withUTC();
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,252,"return (newChronology == getChronology() ? this : new DateOnly(getMillis(), newChronology));"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,58,/ Import for @link support
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,59,mport org.joda.time.convert.ConverterManager;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,88," DateTime is thread-safe and immutable, provided that the Chronology is as"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,89, well. All standard Chronology classes supplied are thread-safe and
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,90, immutable.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,86,"* DateTime is thread-safe and immutable, provided that the Chronology is as well."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,87,* All standard Chronology classes supplied are thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,103,tatic final long serialVersionUID = -5171125899451703815L;
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,100,/** Serialization lock */
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,101,private static final long serialVersionUID = -5171125899451703815L;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,185, The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,183,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,184,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,202, The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,201,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,202,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,219, The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,219,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,220,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,322,ublic ReadableInstant withMillis(long newMillis) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,323,"eturn newMillis == getMillis() ? this : new DateTime(newMillis, getChronology());"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,323,public final DateTime withMillis(long newMillis) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,324,"return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,336,ublic ReadableInstant withChronology(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,337,"eturn newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,337,public final DateTime withChronology(Chronology newChronology) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,338,"return (newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology));"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,342,"* Gets a copy of this instant with a different time zone, preserving the"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,343,* millisecond instant.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,344,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,345,* This method is useful for finding the local time in another timezone.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,346,"* For example, if this instant holds 12:30 in Europe/London, the result"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,347,* from this method with Europe/Paris would be 13:30.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,348,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,349,* The returned object will be a new instance of the same implementation type.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,350,"* This method changes alters the time zone, and does not change the"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,351,"* millisecond instant, with the effect that the field values usually change."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,352,* Immutable implementations may return <code>this</code> if appropriate.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,354,* @param newDateTimeZone  the new time zone
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,355,* @return a copy of this instant with a different time zone
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,356,* @see #withZoneRetainFields
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,358,public final DateTime withZone(DateTimeZone newDateTimeZone) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,359,return withChronology(getChronology().withZone(newDateTimeZone));
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,363,"* Gets a copy of this instant with a different time zone, preserving the"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,364,* field values.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,365,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,366,* This method is useful for finding the millisecond time in another timezone.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,367,"* For example, if this instant holds 12:30 in Europe/London (ie. 12:30Z),"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,368,* the result from this method with Europe/Paris would be 12:30 (ie. 11:30Z).
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,369,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,370,* The returned object will be a new instance of the same implementation type.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,371,* This method changes alters the time zone and the millisecond instant to keep
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,372,* the field values the same.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,373,* Immutable implementations may return <code>this</code> if appropriate.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,375,* @param newDateTimeZone  the new time zone
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,376,* @return a copy of this instant with a different time zone
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,377,* @see #withZone
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,379,public final DateTime withZoneRetainFields(DateTimeZone newDateTimeZone) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,380,final long originalMillis = getMillis();
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,381,final Chronology originalChrono = getChronology();
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,382,final DateTimeZone originalZone;
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,383,if (originalChrono == null || (originalZone = originalChrono.getZone()) == null) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,384,"// Without an original chronology or time zone, no new time zone"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,385,// can be set. Call withMillis to allow subclass to decide if a
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,386,// clone should be made or not.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,387,return withMillis(originalMillis);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,390,DateTime newInstant = withChronology(originalChrono.withZone(newDateTimeZone));
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,391,newDateTimeZone = newInstant.getZone();
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,393,if (newDateTimeZone == null || newDateTimeZone == originalZone) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,394,// New time zone didn't stick or didn't change. Skip millis adjustment.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,395,return newInstant;
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,398,long newMillis = originalMillis + originalZone.getOffset(originalMillis);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,399,newMillis -= newDateTimeZone.getOffsetFromLocal(newMillis);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,401,return newInstant.withMillis(newMillis);
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,78,tatic final long serialVersionUID = 3299096530934209741L;
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,78,/** Serialization lock */
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,79,private static final long serialVersionUID = 3299096530934209741L;
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,130," Gets a copy of this instant with different millis, as an Instant."
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,132,* Gets a copy of this instant with different millis.
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,132, The returned object will be either be a new Instant or
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,133, <code>this</code>.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,134,* The returned object will be either be a new Instant or <code>this</code>.
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,138,ublic ReadableInstant withMillis(long newMillis) {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,139,public Instant withMillis(long newMillis) {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,143," Since Instant does not support chronologies, this method always returns"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,144, <code>this</code>.
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,146, @param newChronology  ignored
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,147, @return this
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,149,ublic ReadableInstant withChronology(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,150,eturn this;
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,154," Since Instant does not support time zones, this method always returns"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,155, <code>this</code>.
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,157, @param newDateTimeZone  ignored
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,158, @return this
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,160,ublic ReadableInstant withZone(DateTimeZone newDateTimeZone) {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,161,eturn this;
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,165," Since Instant does not support time zones, this method always returns"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,166, <code>this</code>.
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,168, @param newDateTimeZone  ignored
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,169, @return this
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,171,ublic ReadableInstant withZoneRetainFields(DateTimeZone newDateTimeZone) {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,172,eturn this;
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,182,ublic final long getMillis() {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,150,public long getMillis() {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,192,ublic final long getMillis(ReadableInstant base) {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,160,public long getMillis(ReadableInstant base) {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,203,"ublic final long getMillis(ReadableInstant base, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,171,"public long getMillis(ReadableInstant base, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,217,ublic final Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,185,public Chronology getChronology() {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,231,ublic final String toString() {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,199,public String toString() {
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,147,"eadableInstant addTo(ReadableInstant instant, int scalar);"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,147,"Instant addTo(ReadableInstant instant, int scalar);"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,144," Gets a copy of this instant with different millis, preserving the"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,145, chronology.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,146, <p>
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,147, The returned object will be a new instance of the same implementation
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,148," type. Only the millis will change, the chronology and time zone are"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,149, kept. Immutable implementations may return <code>this</code> if
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,150, appropriate.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,152," @param newMillis  the new millis, from 1970-01-01T00:00:00Z"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,153, @return a copy of this instant with different millis
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,155,eadableInstant withMillis(long newMillis);
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,158," Gets a copy of this instant with a different chronology, preserving the"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,159, millisecond instant.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,160, <p>
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,161, The returned object will be a new instance of the same implementation
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,162," type. Only the chronology will change, the millis are kept. Immutable"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,163, implementations may return <code>this</code> if appropriate.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,165, @param newChronology  the new chronology
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,166, @return a copy of this instant with a different chronology
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,168,eadableInstant withChronology(Chronology newChronology);
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,171," Gets a copy of this instant with a different time zone, preserving the"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,172, millisecond instant.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,173, <p>
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,174, This method is useful for finding the local time in another timezone.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,175," For example, if this instant holds 12:30 in Europe/London, the result"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,176, from this method with Europe/Paris would be 13:30.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,177, <p>
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,178, The returned object will be a new instance of the same implementation type.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,179," This method changes alters the time zone, and does not change the"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,180," millisecond instant, with the effect that the field values usually change."
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,181, Immutable implementations may return <code>this</code> if appropriate.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,183, @param newDateTimeZone  the new time zone
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,184, @return a copy of this instant with a different time zone
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,185, @see #withZoneRetainFields
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,187,eadableInstant withZone(DateTimeZone newDateTimeZone);
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,190," Gets a copy of this instant with a different time zone, preserving the"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,191, field values.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,192, <p>
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,193, This method is useful for finding the millisecond time in another timezone.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,194," For example, if this instant holds 12:30 in Europe/London (ie. 12:30Z),"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,195, the result from this method with Europe/Paris would be 12:30 (ie. 11:30Z).
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,196, <p>
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,197, The returned object will be a new instance of the same implementation type.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,198, This method changes alters the time zone and the millisecond instant to keep
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,199, the field values the same.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,200, Immutable implementations may return <code>this</code> if appropriate.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,202, @param newDateTimeZone  the new time zone
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,203, @return a copy of this instant with a different time zone
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,204, @see #withZone
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,206,eadableInstant withZoneRetainFields(DateTimeZone newDateTimeZone);
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,59,/ Import for @link support
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,60,mport org.joda.time.convert.ConverterManager;
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,102,tatic final long serialVersionUID = -8414446947366046476L;
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,100,/** Serialization lock */
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,101,private static final long serialVersionUID = -8414446947366046476L;
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,156, The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,155,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,156,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,170, The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,170,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,171,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,232,* Date fields will be removed from the millis.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,236,ublic ReadableInstant withMillis(long newMillis) {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,238,public final TimeOnly withMillis(long newMillis) {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,238,"eturn newMillis == getMillis() ? this : new TimeOnly(newMillis, getChronology());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,240,"return (newMillis == getMillis() ? this : new TimeOnly(newMillis, getChronology()));"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,248,* The chronology will be converted to a UTC zone.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,251,ublic ReadableInstant withChronology(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,252,ewChronology = newChronology == null ? ISOChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,253, newChronology.withUTC();
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,254,"eturn newChronology == getChronology() ? this : new TimeOnly(getMillis(), newChronology);"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,254,public final TimeOnly withChronology(Chronology newChronology) {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,255,newChronology = newChronology == null ? ISOChronology.getInstanceUTC() : newChronology.withUTC();
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,256,"return (newChronology == getChronology() ? this : new TimeOnly(getMillis(), newChronology));"

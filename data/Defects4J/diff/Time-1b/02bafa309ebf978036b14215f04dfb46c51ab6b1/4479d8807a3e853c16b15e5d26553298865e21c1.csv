is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,172, Validates whether the fields stored in a partial instant are valid.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,172,* Validates whether the values are valid for the fields of a partial instant.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,175,"* @param values  the values to validate, not null, match fields in partial"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,177,oid validate(ReadablePartial instant);
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,178,"void validate(ReadablePartial instant, int[] values);"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,203, This implementation uses {@link DateTimeField#getMinimumValue()} and
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,204, {@link DateTimeField#getMaximumValue()}.
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,203,"* This implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,204,"* and {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}."
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,207,"* @param values  the values to validate, not null"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,209,ublic void validate(ReadablePartial instant) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,210,"public void validate(ReadablePartial instant, int[] values) {"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,211,nt[] values = instant.getValues();
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,212,"// check values in standard range, catching really stupid cases like -1"
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,213,// this means that the second check will not hit trouble
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,224,"// check values in specific range, catching really cases like 30th Feb"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,223,f (values[i] < fields[i].getMinimumValue(instant)) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,226,"if (values[i] < fields[i].getMinimumValue(instant, values)) {"
False,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,227,f (values[i] > fields[i].getMaximumValue(instant)) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java,230,"if (values[i] > fields[i].getMaximumValue(instant, values)) {"

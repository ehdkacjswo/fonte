is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,1,ackage org.apache.commons.lang.exception;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,54,package org.apache.commons.lang.exception;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,64,import java.util.Arrays;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,69,import org.apache.commons.lang.ArrayUtils;
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,72, Utility routines for manipulating <code>Throwable</code> objects.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,73,* <p><code>ExceptionUtils</code> provides utilities for manipulating
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,74,* <code>Throwable</code> objects.</p>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,77,* @author Dmitri Plotnikov
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,78,* @author Stephen Colebourne
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,80,"* @version $Id: ExceptionUtils.java,v 1.19 2002/12/23 00:03:47 scolebourne Exp $"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,77,ublic class ExceptionUtils
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,82,public class ExceptionUtils {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,83,rotected static final String[] CAUSE_METHOD_NAMES =
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,87,protected static String[] CAUSE_METHOD_NAMES = {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,91,"getCausedByException"""
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,94,"""getCausedByException"","
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,95,"""getNested"""
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,95, The empty parameter list passed to methods used to access a
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,96, wrapped exception.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,99,* Constructs a new <code>ExceptionUtils</code>. Protected to
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,100,* discourage instantiation.
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,98,rotected static final Object[] CAUSE_METHOD_PARAMS = {};
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,102,protected ExceptionUtils() {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,101, Constructs a new <code>ExceptionUtils</code>.  Protected to
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,102, discourage instantiation.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,106,* <p>Adds to the list of method names used in the search for <code>Throwable</code>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,107,* objects.</p>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,109,"* @param methodName  the methodName to add to the list, null and empty strings are ignored"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,104,rotected ExceptionUtils()
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,111,public static void addCauseMethodName(String methodName) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,112,if (methodName != null && methodName.length() > 0) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,113,List list = new ArrayList(Arrays.asList(CAUSE_METHOD_NAMES));
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,114,list.add(methodName);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,115,CAUSE_METHOD_NAMES = (String[]) list.toArray(new String[list.size()]);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,109, Introspects the specified <code>Throwable</code> for a
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,110," <code>getCause()</code>, <code>getNextException()</code>,"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,111," <code>getTargetException()</code>, or"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,112, <code>getException()</code> method which returns a
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,113," <code>Throwable</code> object (standard as of JDK 1.4, and part"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,114, of the {@link
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,115," org.apache.commons.lang.exception.NestableException} API),"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,116, extracting and returning the cause of the exception.  In the
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,117," absence of any such method, the object is inspected for a"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,118, <code>detail</code> field assignable to a
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,119," <code>Throwable</code>.  If none of the above is found, returns"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,120, <code>null</code>.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,120,* <p>Introspects the specified <code>Throwable</code> to obtain the cause.</p>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,122,* <p>The method searches for methods with specific names that return a
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,123,"* <code>Throwable</code> object. This will pick up most wrapping exceptions,"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,124,"* including those from JDK 1.4, and"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,125,* {@link org.apache.commons.lang.exception.NestableException NestableException}.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,126,* The method names can be added to using {@link #addCauseMethodName(String)}.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,127,* The default list searched for are:</p>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,128,* <ul>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,129,* <li><code>getCause()</code>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,130,* <li><code>getNextException()</code>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,131,* <li><code>getTargetException()</code>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,132,* <li><code>getException()</code>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,133,* <li><code>getSourceException()</code>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,134,* <li><code>getRootCause()</code>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,135,* <li><code>getCausedByException()</code>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,136,* <li><code>getNested()</code>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,137,* </ul>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,139,"* <p>In the absence of any such method, the object is inspected for a"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,140,* <code>detail</code> field assignable to a <code>Throwable</code>.</p>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,142,"* <p>If none of the above is found, returns <code>null</code>.</p>"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,122, @param t The exception to introspect for a cause.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,144,* @param throwable The exception to introspect for a cause.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,146,* @throws NullPointerException if the throwable is null
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,125,ublic static Throwable getCause(Throwable t)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,127,"eturn getCause(t, CAUSE_METHOD_NAMES);"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,148,public static Throwable getCause(Throwable throwable) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,149,"return getCause(throwable, CAUSE_METHOD_NAMES);"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,131, Extends the API of {@link #getCause(Throwable)} by
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,132, introspecting for only user-specified method names.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,153,* <p>Introspects the specified <code>Throwable</code> to obtain the cause
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,154,* using a supplied array of method names.</p>
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,134, @see #getCause(Throwable)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,156,* @param throwable The exception to introspect for a cause.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,157,* @return The cause of the <code>Throwable</code>.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,158,* @throws NullPointerException if the method names array is null or contains null
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,159,* @throws NullPointerException if the throwable is null
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,136,"ublic static Throwable getCause(Throwable t, String[] methodNames)"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,138,hrowable cause = getCauseUsingWellKnownTypes(t);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,139,f (cause == null)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,141,or (int i = 0; i < methodNames.length; i++)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,143,"ause = getCauseUsingMethodName(t, methodNames[i]);"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,144,f (cause != null)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,161,"public static Throwable getCause(Throwable throwable, String[] methodNames) {"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,162,Throwable cause = getCauseUsingWellKnownTypes(throwable);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,163,if (cause == null) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,164,for (int i = 0; i < methodNames.length; i++) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,165,"cause = getCauseUsingMethodName(throwable, methodNames[i]);"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,166,if (cause != null) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,150,f (cause == null)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,152,"ause = getCauseUsingFieldName(t, ""detail"");"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,171,if (cause == null) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,172,"cause = getCauseUsingFieldName(throwable, ""detail"");"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,159, Walks through the exception chain to the last element -- the
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,179,* <p>Walks through the exception chain to the last element -- the
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,161, returns that exception.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,181,* returns that exception.</p>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,183,* @param throwable  the throwable to get the root cause for
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,164, @see #getCause(Throwable)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,166,ublic static Throwable getRootCause(Throwable t)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,168,hrowable cause = getCause(t);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,169,f (cause != null)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,171, = cause;
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,172,hile ((t = getCause(t)) != null)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,174,ause = t;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,186,public static Throwable getRootCause(Throwable throwable) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,187,Throwable cause = getCause(throwable);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,188,if (cause != null) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,189,throwable = cause;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,190,while ((throwable = getCause(throwable)) != null) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,191,cause = throwable;
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,181," Uses <code>instanceof</code> checks to examine the exception,"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,198,"* <p>Uses <code>instanceof</code> checks to examine the exception,"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,183, wrapped exceptions.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,200,* wrapped exceptions.</p>
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,185, @param t The exception to examine.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,202,* @param throwable  the exception to examine
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,189,rivate static Throwable getCauseUsingWellKnownTypes(Throwable t)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,191,f (t instanceof Nestable)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,193,eturn ((Nestable) t).getCause();
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,195,lse if (t instanceof SQLException)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,197,eturn ((SQLException) t).getNextException();
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,199,lse if (t instanceof InvocationTargetException)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,201,eturn ((InvocationTargetException) t).getTargetException();
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,203,lse
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,206,private static Throwable getCauseUsingWellKnownTypes(Throwable throwable) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,207,if (throwable instanceof Nestable) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,208,return ((Nestable) throwable).getCause();
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,209,} else if (throwable instanceof SQLException) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,210,return ((SQLException) throwable).getNextException();
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,211,} else if (throwable instanceof InvocationTargetException) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,212,return ((InvocationTargetException) throwable).getTargetException();
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,213,} else {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,210, @param t The exception to examine.
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,211, @param methodName The name of the method to find and invoke.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,219,* <p>Find a throwable by method name.</p>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,221,* @param throwable  the exception to examine
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,222,* @param methodName  the name of the method to find and invoke
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,215,"rivate static Throwable getCauseUsingMethodName(Throwable t,"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,216,tring methodName)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,226,"private static Throwable getCauseUsingMethodName(Throwable throwable, String methodName) {"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,219,ry
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,221,"ethod = t.getClass().getMethod(methodName, null);"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,223,atch (NoSuchMethodException ignored)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,226,atch (SecurityException ignored)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,228,try {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,229,"method = throwable.getClass().getMethod(methodName, null);"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,230,} catch (NoSuchMethodException ignored) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,231,} catch (SecurityException ignored) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,230,f (method != null &&
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,231,hrowable.class.isAssignableFrom(method.getReturnType()))
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,233,ry
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,235,"eturn (Throwable) method.invoke(t, CAUSE_METHOD_PARAMS);"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,237,atch (IllegalAccessException ignored)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,240,atch (IllegalArgumentException ignored)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,243,atch (InvocationTargetException ignored)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,234,if (method != null && Throwable.class.isAssignableFrom(method.getReturnType())) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,235,try {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,236,"return (Throwable) method.invoke(throwable, ArrayUtils.EMPTY_OBJECT_ARRAY);"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,237,} catch (IllegalAccessException ignored) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,238,} catch (IllegalArgumentException ignored) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,239,} catch (InvocationTargetException ignored) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,251, @param t The exception to examine.
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,252, @param fieldName The name of the attribute to examine.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,246,* <p>Find a throwable by field name.</p>
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,248,* @param throwable  the exception to examine
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,249,* @param fieldName  the name of the attribute to examine
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,256,"rivate static Throwable getCauseUsingFieldName(Throwable t,"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,257,tring fieldName)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,253,"private static Throwable getCauseUsingFieldName(Throwable throwable, String fieldName) {"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,260,ry
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,262,ield = t.getClass().getField(fieldName);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,264,atch (NoSuchFieldException ignored)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,267,atch (SecurityException ignored)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,255,try {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,256,field = throwable.getClass().getField(fieldName);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,257,} catch (NoSuchFieldException ignored) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,258,} catch (SecurityException ignored) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,271,f (field != null &&
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,272,hrowable.class.isAssignableFrom(field.getType()))
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,274,ry
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,276,eturn (Throwable) field.get(t);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,278,atch (IllegalAccessException ignored)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,281,atch (IllegalArgumentException ignored)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,261,if (field != null && Throwable.class.isAssignableFrom(field.getType())) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,262,try {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,263,return (Throwable) field.get(throwable);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,264,} catch (IllegalAccessException ignored) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,265,} catch (IllegalArgumentException ignored) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,289, Returns the number of <code>Throwable</code> objects in the
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,290, exception chain.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,272,* <p>Returns the number of <code>Throwable</code> objects in the
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,273,* exception chain.</p>
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,292, @param t The exception to inspect.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,275,* @param throwable  the exception to inspect
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,295,ublic static int getThrowableCount(Throwable t)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,278,public static int getThrowableCount(Throwable throwable) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,299,hile (t != null)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,281,while (throwable != null) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,302, = ExceptionUtils.getCause(t);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,283,throwable = ExceptionUtils.getCause(throwable);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,308, Returns the list of <code>Throwable</code> objects in the
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,309, exception chain.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,289,* <p>Returns the list of <code>Throwable</code> objects in the
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,290,* exception chain.</p>
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,311, @param t The exception to inspect.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,292,* @param throwable  the exception to inspect
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,314,ublic static Throwable[] getThrowables(Throwable t)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,295,public static Throwable[] getThrowables(Throwable throwable) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,317,hile (t != null)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,319,ist.add(t);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,320, = ExceptionUtils.getCause(t);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,297,while (throwable != null) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,298,list.add(throwable);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,299,throwable = ExceptionUtils.getCause(throwable);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,322,eturn (Throwable []) list.toArray(new Throwable[list.size()]);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,301,return (Throwable[]) list.toArray(new Throwable[list.size()]);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,326," Delegates to {@link #indexOfThrowable(Throwable, Class, int)},"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,327, starting the search at the beginning of the exception chain.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,305,"* <p>Delegates to {@link #indexOfThrowable(Throwable, Class, int)},"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,306,* starting the search at the beginning of the exception chain.</p>
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,331,"ublic static int indexOfThrowable(Throwable t, Class type)"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,333,"eturn indexOfThrowable(t, type, 0);"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,310,"public static int indexOfThrowable(Throwable throwable, Class type) {"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,311,"return indexOfThrowable(throwable, type, 0);"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,337," Returns the (zero based) index, of the first"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,315,"* <p>Returns the (zero based) index, of the first"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,341, <code>-1</code> if the type is not found.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,319,* <code>-1</code> if the type is not found.</p>
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,343, @param t The exception to inspect.
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,344, @param type <code>Class</code> to look for.
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,345, @param fromIndex The (zero based) index of the starting
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,346, position in the chain to be searched.
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,347," @return index The first occurrence of the type in the chain, or"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,348, <code>-1</code> if the type is not found.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,321,* @param throwable  the exception to inspect
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,322,* @param type  <code>Class</code> to look for
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,323,* @param fromIndex  the (zero based) index of the starting
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,324,*  position in the chain to be searched
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,325,"* @return the first occurrence of the type in the chain, or"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,326,*  <code>-1</code> if the type is not found
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,350, argument is negative or not less than the count of
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,351, <code>Throwable</code>s in the chain.
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,328,*  argument is negative or not less than the count of
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,329,*  <code>Throwable</code>s in the chain.
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,353,"ublic static int indexOfThrowable(Throwable t, Class type, int fromIndex)"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,355,f (fromIndex < 0)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,357,hrow new IndexOutOfBoundsException
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,358,"""Throwable index out of range: "" + fromIndex);"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,331,"public static int indexOfThrowable(Throwable throwable, Class type, int fromIndex) {"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,332,if (fromIndex < 0) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,333,"throw new IndexOutOfBoundsException(""Throwable index out of range: "" + fromIndex);"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,360,hrowable[] throwables = ExceptionUtils.getThrowables(t);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,361,f (fromIndex >= throwables.length)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,363,hrow new IndexOutOfBoundsException
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,364,"""Throwable index out of range: "" + fromIndex);"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,335,Throwable[] throwables = ExceptionUtils.getThrowables(throwable);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,336,if (fromIndex >= throwables.length) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,337,"throw new IndexOutOfBoundsException(""Throwable index out of range: "" + fromIndex);"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,366,or (int i = fromIndex; i < throwables.length; i++)
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,368,f (throwables[i].getClass().equals(type))
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,339,for (int i = fromIndex; i < throwables.length; i++) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,340,if (throwables[i].getClass().equals(type)) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,386,"ublic static void printRootCauseStackTrace(Throwable t, PrintStream stream)"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,357,"public static void printRootCauseStackTrace(Throwable t, PrintStream stream) {"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,389,or (int i = 0; i < trace.length; i++){
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,359,for (int i = 0; i < trace.length; i++) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,398,ublic static void printRootCauseStackTrace(Throwable t)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,368,public static void printRootCauseStackTrace(Throwable t) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,407,"ublic static void printRootCauseStackTrace(Throwable t, PrintWriter writer)"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,376,"public static void printRootCauseStackTrace(Throwable t, PrintWriter writer) {"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,410,or (int i = 0; i < trace.length; i++){
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,378,for (int i = 0; i < trace.length; i++) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,421," See <code>printRootCauseStackTrace(Throwable t, PrintStream s)</code>"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,423,ublic static String[] getRootCauseStackTrace(Throwable t)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,389,"* See <code>printRootCauseStackTrace(Throwable t, PrintStream s)</code>"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,391,public static String[] getRootCauseStackTrace(Throwable t) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,426,nt count = throwables.length;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,393,int count = throwables.length;
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,428,ist nextTrace = getStackFrameList(throwables[count-1]);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,429,or (int i = count; --i >= 0;){
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,395,List nextTrace = getStackFrameList(throwables[count - 1]);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,396,for (int i = count; --i >= 0;) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,431,f (i != 0){
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,432,extTrace = getStackFrameList(throwables[i-1]);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,398,if (i != 0) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,399,nextTrace = getStackFrameList(throwables[i - 1]);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,435,f (i == count - 1){
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,402,if (i == count - 1) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,438,lse {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,404,} else {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,441,or (int j = 0; j < trace.size(); j++){
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,407,for (int j = 0; j < trace.size(); j++) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,453,"rivate static void removeCommonFrames(List causeFrames, List wrapperFrames)"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,455,nt causeFrameIndex = causeFrames.size() - 1;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,419,* @param causeFrames   stack trace of a cause throwable
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,420,* @param wrapperFrames stack trace of a wrapper throwable
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,422,"private static void removeCommonFrames(List causeFrames, List wrapperFrames) {"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,423,int causeFrameIndex = causeFrames.size() - 1;
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,457,hile (causeFrameIndex >= 0 && wrapperFrameIndex >= 0)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,425,while (causeFrameIndex >= 0 && wrapperFrameIndex >= 0) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,461,tring causeFrame = (String)causeFrames.get(causeFrameIndex);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,462,tring wrapperFrame = (String)wrapperFrames.get(wrapperFrameIndex);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,463,f (causeFrame.equals(wrapperFrame)){
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,428,String causeFrame = (String) causeFrames.get(causeFrameIndex);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,429,String wrapperFrame = (String) wrapperFrames.get(wrapperFrameIndex);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,430,if (causeFrame.equals(wrapperFrame)) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,476,ublic static String getStackTrace(Throwable t)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,443,public static String getStackTrace(Throwable t) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,492,ublic static String[] getStackFrames(Throwable t)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,458,public static String[] getStackFrames(Throwable t) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,503,tatic String[] getStackFrames(String stackTrace)
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,468,static String[] getStackFrames(String stackTrace) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,508,hile (frames.hasMoreTokens())
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,472,while (frames.hasMoreTokens()) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,512,eturn (String []) list.toArray(new String[] {});
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,475,return (String[]) list.toArray(new String[] {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,523,tatic List getStackFrameList(Throwable t){
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,487,* @param t is any throwable
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,488,* @return List of stack frames
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,490,static List getStackFrameList(Throwable t) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,529,hile (frames.hasMoreTokens())
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,531,tring token = frames.nextToken();
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,496,while (frames.hasMoreTokens()) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,497,String token = frames.nextToken();
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,534,"f (at != -1 && token.substring(0, at).trim().length() == 0){"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,500,"if (at != -1 && token.substring(0, at).trim().length() == 0) {"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,538,lse if (traceStarted){
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,503,} else if (traceStarted) {

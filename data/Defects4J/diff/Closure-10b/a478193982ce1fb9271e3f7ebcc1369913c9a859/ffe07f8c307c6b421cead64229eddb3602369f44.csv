is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,67,public void setDebugOptionsForCompilationLevel(CompilerOptions options) {
True,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,68,options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.UNMAPPED;
True,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,69,options.generatePseudoNames = true;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1442,"options_.generatePseudoNames,"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1652,"boolean generatePseudoNames,"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1661,"generatePseudoNames,"
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,340,** Generate pseudo names for properties (for debugging purposes) */
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,341,* Generate pseudo names for variables and properties for debugging purposes.
False,src/com/google/javascript/jscomp/ConcreteType.java,src/com/google/javascript/jscomp/ConcreteType.java,290,"tatic final String CALL_SLOT_NAME = ""$call"";"
True,src/com/google/javascript/jscomp/ConcreteType.java,src/com/google/javascript/jscomp/ConcreteType.java,290,"static final String CALL_SLOT_NAME = "":call"";"
False,src/com/google/javascript/jscomp/ConcreteType.java,src/com/google/javascript/jscomp/ConcreteType.java,293,"tatic final String THIS_SLOT_NAME = ""$this"";"
True,src/com/google/javascript/jscomp/ConcreteType.java,src/com/google/javascript/jscomp/ConcreteType.java,293,"static final String THIS_SLOT_NAME = "":this"";"
False,src/com/google/javascript/jscomp/ConcreteType.java,src/com/google/javascript/jscomp/ConcreteType.java,296,"tatic final String RETURN_SLOT_NAME = ""$return"";"
True,src/com/google/javascript/jscomp/ConcreteType.java,src/com/google/javascript/jscomp/ConcreteType.java,296,"static final String RETURN_SLOT_NAME = "":return"";"
True,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,201,Node getElem = ref.getParent();
False,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,204,f (ref.getParent().getType() != Token.GETELEM) {
True,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,206,if (getElem.getType() != Token.GETELEM) {
True,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,222,Node getElemParent = getElem.getParent();
True,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,223,"// When we have argument[0](), replacing it with a() is semantically"
True,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,224,// different if argument[0] is a function call that refers to 'this'
True,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,225,if (NodeUtil.isCall(getElemParent) &&
True,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,226,getElemParent.getFirstChild() == getElem) {
True,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,227,// TODO(user): We can consider using .call() if aliasing that
True,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,228,// argument allows shorter alias for other arguments.
True,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,229,return false;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,109,/** Generate pseudo names for variables for debugging purposes */
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,110,private boolean generatePseudoNames;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,122,"boolean generatePseudoNames,"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,130,this.generatePseudoNames = generatePseudoNames;
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,291,tring oldName = n.getString();
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,292,ssignment a = assignments.get(oldName);
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,296,String newName = getNewGlobalName(n);
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,295,f (a.newName != null) {
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,296,.setString(a.newName);
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,297,hanged = changed || !a.newName.equals(oldName);
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,298,if (newName != null) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,299,n.setString(newName);
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,300,changed = true;
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,304,tring oldName = localTempNames.get(count);
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,305,ssignment a = assignments.get(oldName);
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,306,.setString(a.newName);
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,307,hanged = changed || !a.newName.equals(oldName);
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,307,"String newName = getNewLocalName(n, count);"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,308,if (newName != null) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,309,n.setString(newName);
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,310,changed = true;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,324,private String getNewGlobalName(Node n) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,325,String oldName = n.getString();
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,326,Assignment a = assignments.get(oldName);
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,327,if (a.newName != null && !a.newName.equals(oldName)) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,328,if (generatePseudoNames) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,329,return getPseudoName(oldName);
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,331,return a.newName;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,332,} else {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,333,return null;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,337,"private String getNewLocalName(Node n, int index) {"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,338,String oldTempName = localTempNames.get(index);
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,339,Assignment a = assignments.get(oldTempName);
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,340,if (!a.newName.equals(oldTempName)) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,341,if (generatePseudoNames) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,342,return getPseudoName(n.getString());
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,344,return a.newName;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,346,return null;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,349,private String getPseudoName(String s) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,350,Preconditions.checkState(generatePseudoNames);
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,351,// Variable names should be in a different name space than
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,352,// property pseudo names.
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,353,"return '$' + s + ""$$"";"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,83,"put(""externs"", Annotation.EXTERNS)."
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,155,"EXTERNS,"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,420,case EXTERNS:
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,421,if (!jsdocBuilder.recordExterns()) {
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,422,"parser.addWarning(""msg.jsdoc.externs"","
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,423,"stream.getLineno(), stream.getCharno());"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,425,token = eatTokensUntilEOL();
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,426,continue retry;
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,218,private static final int MASK_EXTERNS       = 0x00008000; // @externs
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,296,void setExterns(boolean value) {
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,297,"setFlag(value, MASK_EXTERNS);"
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,422,* Returns whether the {@code @externs} annotation is present on this
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,423,* {@link JSDocInfo}.
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,425,public boolean isExterns() {
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,426,return getFlag(MASK_EXTERNS);
False,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,87,eturn isPopulated() && currentInfo.hasFileOverview();
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,87,return isPopulated() &&
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,88,(currentInfo.hasFileOverview() || currentInfo.isExterns());
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,718,* Records that the {@link JSDocInfo} being built should have its
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,719,* {@link JSDocInfo#isExterns()} flag set to {@code true}.
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,721,public boolean recordExterns() {
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,722,if (!currentInfo.isExterns()) {
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,723,currentInfo.setExterns(true);
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,724,populated = true;
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,725,return true;
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,726,} else {
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,727,return false;
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,42,mport static com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE;
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,43,mport static com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE;
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,44,mport static com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE;
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,45,mport static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE;
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,46,mport static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE;
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,42,import com.google.common.collect.ArrayListMultimap;
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,51,import static com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE;
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,52,import static com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE;
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,53,import static com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE;
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,54,import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE;
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,55,import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE;
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,130,ultimaps.newArrayListMultimap();
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,129,ArrayListMultimap.create();
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,134,ultimaps.newArrayListMultimap();
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,133,ArrayListMultimap.create();
True,test/com/google/javascript/jscomp/OptimizeArgumentsArrayTest.java,test/com/google/javascript/jscomp/OptimizeArgumentsArrayTest.java,153,public void testNoOptimizationWhenArgumentIsUsedAsFunctionCall() {
True,test/com/google/javascript/jscomp/OptimizeArgumentsArrayTest.java,test/com/google/javascript/jscomp/OptimizeArgumentsArrayTest.java,154,"testSame(""function f() {arguments[0]()}"");"
False,test/com/google/javascript/jscomp/RenameLocalVarsTest.java,test/com/google/javascript/jscomp/RenameLocalVarsTest.java,30,"eturn new RenameVars(compiler, prefix, true, false, null, null, null);"
True,test/com/google/javascript/jscomp/RenameLocalVarsTest.java,test/com/google/javascript/jscomp/RenameLocalVarsTest.java,30,return new RenameVars(
True,test/com/google/javascript/jscomp/RenameLocalVarsTest.java,test/com/google/javascript/jscomp/RenameLocalVarsTest.java,31,"compiler, prefix, true, false, false, null, null, null);"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,39,private boolean generatePseudoNames = false;
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,57,"generatePseudoNames,"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,75,generatePseudoNames = false;
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,457,public void testPseudoNames() {
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,458,generatePseudoNames = false;
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,459,// See http://code.google.com/p/closure-compiler/issues/detail?id=32
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,460,"test(""var foo = function(a, b, c){}"","
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,461,"""var d = function(a, b, c){}"");"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,463,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,464,"test(""var foo = function(a, b, c){}"","
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,465,"""var $foo$$ = function($a$$, $b$$, $c$$){}"");"
False,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,508,"alse, false, previouslyUsedMap, null,"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,522,"false, false, false, previouslyUsedMap, null,"

is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,615,if (options.foldConstants) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,616,passes.add(latePeepholeOptimizations);
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,910,"ew PeepholeSubstituteAlternateSyntax(),"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,914,"new PeepholeSubstituteAlternateSyntax(true),"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,915,"new PeepholeRemoveDeadCode(),"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,916,new PeepholeFoldConstants());
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,920,/** Same as peepholeOptimizations but aggreesively merges code together */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,921,private final PassFactory latePeepholeOptimizations =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,922,"new PassFactory(""peepholeOptimizations"", false) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,923,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,924,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,925,"return new PeepholeOptimizationsPass(compiler,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,926,"new StatementFusion(),"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,928,"new PeepholeSubstituteAlternateSyntax(false),"
False,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,19,mport com.google.common.collect.ImmutableSet;
True,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,27,* @author acleung@google.com (Alan Leung)(
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,441, else {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,442,f (parent.getType() == Token.EXPR_RESULT
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,443,& parent.getParent().getType() != Token.LABEL) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,444,/ split comma
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,445,.detachChildren();
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,446,/ Replace the original expression with the left operand.
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,447,"arent.replaceChild(n, left);"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,448,/ Add the right expression afterward.
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,449,"ode newStatement = new Node(Token.EXPR_RESULT, right);"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,450,ewStatement.copyInformationFrom(n);
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,452,"/This modifies outside the subtree, which is not"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,453,/desirable in a peephole optimization.
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,454,"arent.getParent().addChildAfter(newStatement, parent);"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,455,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,456,eturn left;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,41,private final boolean doCommaSpliting;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,56,PeepholeSubstituteAlternateSyntax(boolean doCommaSpliting) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,57,this.doCommaSpliting = doCommaSpliting;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,132,case Token.COMMA:
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,133,return tryFoldComma(node);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,143,private Node tryFoldComma(Node n) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,144,if (!doCommaSpliting) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,145,return n;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,147,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,148,Node left = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,149,Node right = n.getLastChild();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,151,if (parent.getType() == Token.EXPR_RESULT
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,152,&& parent.getParent().getType() != Token.LABEL) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,153,// split comma
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,154,n.detachChildren();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,155,// Replace the original expression with the left operand.
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,156,"parent.replaceChild(n, left);"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,157,// Add the right expression afterward.
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,158,"Node newStatement = new Node(Token.EXPR_RESULT, right);"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,159,newStatement.copyInformationFrom(n);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,161,"//This modifies outside the subtree, which is not"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,162,//desirable in a peephole optimization.
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,163,"parent.getParent().addChildAfter(newStatement, parent);"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,164,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,165,return left;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,166,} else {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,167,return n;
False,test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java,test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java,48,"ew PeepholeSubstituteAlternateSyntax(),"
True,test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java,test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java,48,"new PeepholeSubstituteAlternateSyntax(true),"
True,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,24,private boolean doCommaSplitting = true;
True,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,38,this.doCommaSplitting = true;
False,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,48,"ew PeepholeSubstituteAlternateSyntax(),"
True,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,50,"new PeepholeSubstituteAlternateSyntax(doCommaSplitting),"
True,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,330,public void testCommaSplitingConstantCondition() {
True,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,331,"fold(""(b=0,b=1);if(b)x=b;"", ""b=0;b=1;x=b;"");"
True,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,332,"fold(""(b=0,b=1);if(b)x=b;"", ""b=0;b=1;x=b;"");"
True,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,335,public void testAvoidCommaSplitting() {
True,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,336,"fold(""x(),y(),z()"", ""x();y();z()"");"
True,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,337,doCommaSplitting = false;
True,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,338,"foldSame(""x(),y(),z()"");"
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,19,mport com.google.common.collect.ImmutableSet;
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,19,import com.google.common.collect.ImmutableList;
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,34,rivate ImmutableSet<AbstractPeepholeOptimization> currentPeepholePasses;
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,34,private ImmutableList<AbstractPeepholeOptimization> currentPeepholePasses;
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,60,urrentPeepholePasses = ImmutableSet.<AbstractPeepholeOptimization>of();
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,60,currentPeepholePasses = ImmutableList.<AbstractPeepholeOptimization>of();
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,111,"mmutableSet.<AbstractPeepholeOptimization>of(note1Applied, note2Applied);"
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,111,ImmutableList.<
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,112,"AbstractPeepholeOptimization>of(note1Applied, note2Applied);"
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,214,urrentPeepholePasses = ImmutableSet.<AbstractPeepholeOptimization>of(new
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,215,currentPeepholePasses = ImmutableList.<AbstractPeepholeOptimization>of(new
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,223,urrentPeepholePasses = ImmutableSet.<AbstractPeepholeOptimization>of(new
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,224,currentPeepholePasses = ImmutableList.<AbstractPeepholeOptimization>of(new
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,232,urrentPeepholePasses = ImmutableSet.<AbstractPeepholeOptimization>of(new
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,233,currentPeepholePasses = ImmutableList.<AbstractPeepholeOptimization>of(new
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,243,urrentPeepholePasses = ImmutableSet.<AbstractPeepholeOptimization>of(
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,244,currentPeepholePasses = ImmutableList.<AbstractPeepholeOptimization>of(
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,251,urrentPeepholePasses = ImmutableSet.<AbstractPeepholeOptimization>of(
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,252,currentPeepholePasses = ImmutableList.<AbstractPeepholeOptimization>of(
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,111,"old(""(a = true) ? b() : c()"", ""a = true; b()"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,112,"old(""(a = false) ? b() : c()"", ""a = false; c()"");"
True,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,111,"fold(""(a = true) ? b() : c()"", ""a = true, b()"");"
True,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,112,"fold(""(a = false) ? b() : c()"", ""a = false, c()"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,140,"old(""(b=0,b=1);if(b)x=b;"", ""b=0;b=1;x=b;"");"
True,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,140,"fold(""(b=0,b=1);if(b)x=b;"", ""b=0,b=1;if(b)x=b;"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,146,"old(""(b=true)?x=1:x=2;"", ""b=true;x=1"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,147,"old(""(b=false)?x=1:x=2;"", ""b=false;x=2"");"
True,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,146,"fold(""(b=true)?x=1:x=2;"", ""b=true,x=1"");"
True,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,147,"fold(""(b=false)?x=1:x=2;"", ""b=false,x=2"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,219,ublic void testSplitCommaExpressions() {
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,220,/ Don't try to split in expressions.
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,221,"oldSame(""while (foo(), true) boo()"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,222,"oldSame(""var a = (foo(), true);"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,223,"oldSame(""a = (foo(), true);"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,225,/ Don't try to split COMMA under LABELs.
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,226,"oldSame(""a:a(),b()"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,228,"old(""(x=2), foo()"", ""x=2; foo()"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,229,"old(""foo(), boo();"", ""foo(); boo()"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,230,"old(""(a(), b()), (c(), d());"", ""a(); b(); c(); d();"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,231,"old(""foo(), true"", ""foo();"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,232,"old(""function x(){foo(), true}"", ""function x(){foo();}"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,245,"old(""Math.random(f() + g())"", ""f(); g();"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,246,"old(""Math.random(f(),g(),h())"", ""f();g();h();"");"
True,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,230,"fold(""Math.random(f() + g())"", ""f(),g();"");"
True,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,231,"fold(""Math.random(f(),g(),h())"", ""f(),g(),h();"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,263,"old(""f() + g()"", ""f();g()"");"
True,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,248,"fold(""f() + g()"", ""f(),g()"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,395,"est(""a()+b()"", ""a();b()"");"
True,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,380,"test(""a()+b()"", ""a(),b()"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,489,ublic void testComma1() {
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,490,"est(""1, 2"", """");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,493,ublic void testComma2() {
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,494,"est(""1, a()"", ""a()"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,497,ublic void testComma3() {
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,498,"est(""1, a(), b()"", ""a();b()"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,501,ublic void testComma4() {
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,502,"est(""a(), b()"", ""a();b()"");"
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,505,ublic void testComma5() {
False,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,506,"est(""a(), b(), 1"", ""a();b()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,34,private boolean doCommaSplitting = true;
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,47,doCommaSplitting = true;
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,54,ew PeepholeSubstituteAlternateSyntax());
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,56,new PeepholeSubstituteAlternateSyntax(doCommaSplitting));
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,750,ublic void testFoldIfAfterStatementFusion() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,751,"old(""if (x) { a,b,c } else { d,c,e }"", ""x ? (a,b,c) : (d,c,e)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,752,"old(""if (x) { a() && b() } else { c() && d () }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,753,"x ? a() && b() : c() && d () "");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,754,"old(""if (x) { (a(),a()) && b() } else { d() }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,755,"x ? (a(),a()) && b() : d () "");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,756,"old(""if (x) { (a(),a()) && b() } else { (c(),c()) && d () }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,757,"x ? (a(),a()) && b() : (c(),c()) && d () "");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,752,public void testSplitCommaExpressions() {
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,753,// Don't try to split in expressions.
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,754,"foldSame(""while (foo(), !0) boo()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,755,"foldSame(""var a = (foo(), !0);"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,756,"foldSame(""a = (foo(), !0);"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,758,// Don't try to split COMMA under LABELs.
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,759,"foldSame(""a:a(),b()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,761,"fold(""(x=2), foo()"", ""x=2; foo()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,762,"fold(""foo(), boo();"", ""foo(); boo()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,763,"fold(""(a(), b()), (c(), d());"", ""a(); b(); c(); d();"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,764,"fold(""foo(), true"", ""foo();1"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,765,"fold(""function x(){foo(), !0}"", ""function x(){foo(); 1}"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,768,public void testComma1() {
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,769,"fold(""1, 2"", ""1; 1"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,770,doCommaSplitting = false;
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,771,"foldSame(""1, 2"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,774,public void testComma2() {
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,775,"test(""1, a()"", ""1; a()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,776,doCommaSplitting = false;
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,777,"foldSame(""1, a()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,780,public void testComma3() {
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,781,"test(""1, a(), b()"", ""1; a(); b()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,782,doCommaSplitting = false;
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,783,"foldSame(""1, a(), b()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,786,public void testComma4() {
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,787,"test(""a(), b()"", ""a();b()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,788,doCommaSplitting = false;
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,789,"foldSame(""a(), b()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,792,public void testComma5() {
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,793,"test(""a(), b(), 1"", ""a();b();1"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,794,doCommaSplitting = false;
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,795,"foldSame(""a(), b(), 1"");"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,42,rivate static final int OR_PRECEDENCE = NodeUtil.precedence(Token.OR);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,100,"ryMinimizeCondition(node.getFirstChild(), false);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,99,performConditionSubstitutions(node.getFirstChild());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,511,ode cond = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,510,Node originalCond = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,516,"f (NodeUtil.isLiteralValue(cond, true)) {"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,515,"if (NodeUtil.isLiteralValue(originalCond, true)) {"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,520,ode thenBranch = cond.getNext();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,519,Node thenBranch = originalCond.getNext();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,522,MinimizedCondition minCond = MinimizedCondition
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,523,.fromConditionNode(originalCond);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,524,// Compute two minimized representations. The first representation counts
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,525,"// a leading NOT node, and the second ignores a leading NOT node."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,526,"// If we can fold the if statement into a HOOK or boolean operation,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,527,"// then the NOT node does not matter, and we prefer the second condition."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,528,"// If we cannot fold the if statement, then we prefer the first condition."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,529,Node unnegatedCond = minCond.getShorterRepresentation(true);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,530,Node shortCond = minCond.getShorterRepresentation(false);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,533,f (cond.isNot()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,542,if (shortCond.isNot()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,535,"f (isLowerPrecedence(cond.getFirstChild(), OR_PRECEDENCE) &&"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,536,"sLowerPrecedence(expr.getFirstChild(),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,537,R_PRECEDENCE)) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,538,/ It's not okay to add two sets of parentheses.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,539,eturn n;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,543,"ond.removeFirstChild(),"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,545,"shortCond.removeFirstChild(),"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,553,Preconditions.checkState(shortCond.isEquivalentTo(unnegatedCond));
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,553,"f (isLowerPrecedence(cond, AND_PRECEDENCE) &&"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,556,"if (isLowerPrecedence(shortCond, AND_PRECEDENCE) &&"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,563,"maybeReplaceNode(originalCond, shortCond);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,563,.removeChild(cond);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,564,"ode and = IR.and(cond, expr.removeFirstChild()).srcref(n);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,567,"Node and = IR.and(shortCond, expr.removeFirstChild()).srcref(n);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,583,"(isLowerPrecedence(cond, AND_PRECEDENCE) &&"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,586,"!(isLowerPrecedence(unnegatedCond, AND_PRECEDENCE) &&"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,588,"ond,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,591,"unnegatedCond,"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,590,srcref(cond));
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,593,.srcref(originalCond));
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,603,"maybeReplaceNode(originalCond, unnegatedCond);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,611,f (cond.isNot() && !consumesDanglingElse(elseBranch)) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,612,".replaceChild(cond, cond.removeFirstChild());"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,614,if (shortCond.isNot() && !consumesDanglingElse(elseBranch)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,615,"n.replaceChild(originalCond, shortCond.removeFirstChild());"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,623,.removeChild(cond);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,631,"R.hook(cond, thenExpr, elseExpr)"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,633,"IR.hook(shortCond, thenExpr, elseExpr)"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,654,!mayHaveSideEffects(cond) ||
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,656,(!mayHaveSideEffects(originalCond) ||
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,657,.removeChild(cond);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,663,"ode hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,664,"Node hookNode = IR.hook(shortCond, thenExpr, elseExpr).srcref(n);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,675,.removeChild(cond);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,679,"R.hook(cond, thenOp, elseOp).srcref(n));"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,679,"IR.hook(shortCond, thenOp, elseOp).srcref(n));"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,703,ond.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,704,"ode hookNode = IR.hook(cond, thenExpr, elseExpr)"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,703,"Node hookNode = IR.hook(shortCond, thenExpr, elseExpr)"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,728,ond.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,729,"ode hookNode = IR.hook(cond, thenExpr, elseExpr)"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,727,"Node hookNode = IR.hook(shortCond, thenExpr, elseExpr)"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,738,"maybeReplaceNode(originalCond, unnegatedCond);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,965,"* Try to minimize condition expression, as there are additional"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,966,* assumptions that can be made when it is known that the final result
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,967,* is a boolean.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,969,"* @return The replacement for n, or the original if no change was made."
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,966, = tryMinimizeConditionOld(n);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,972,n = performConditionSubstitutions(n);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,987,f (countLeadingNot ||
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,988,inCond.getLength() <= minCond.getNegativeLength()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,989,"eturn maybeReplaceNode(n, minCond.getNode());"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,990, else {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,991,"eturn maybeReplaceNode(n,"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,992,"ew Node(Token.NOT, minCond.getNegatedNode()));"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,993,Node newNode = minCond.getShorterRepresentation(countLeadingNot);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,994,"return maybeReplaceNode(n, newNode);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1088,/** Return the shorter representation of the original condition node.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1090,"* @param countLeadingNot When this is false, do not count a leading"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1091,*  NOT in doing the minimization.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1092,*  i.e. Prefer the right side in cases such as:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1093,*    !x || !y || z  ==>  !(x && y && !z)
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1094,*  This is useful in contexts such as IFs or HOOKs where subsequent
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1095,*  optimizations can efficiently deal with leading NOTs.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1097,"*  @return The minimized condition Node, equivalent to that"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1098,*    passed to #fromConditionNode().
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1100,Node getShorterRepresentation(boolean countLeadingNot) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1101,if (countLeadingNot || getLength() <= getNegativeLength()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1102,return getNode();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1103,} else {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1104,"return new Node(Token.NOT, getNegatedNode());"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1148," Try to minimize conditions expressions, as there are additional"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1149, assumptions that can be made when it is known that the final result
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1150, is a boolean.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1169,* Try to minimize the given condition by applying local substitutions.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1152, The following transformations are done recursively:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1153,   !(x||y) --> !x&&!y
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1154,   !(x&&y) --> !x||!y
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1155,   !!x     --> x
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1156, Thus:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1157,   !(x&&!y) --> !x||!!y --> !x||y
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1171,* The following types of transformations are performed:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1172,*   x || true        --> true
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1173,*   x && true        --> x
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1174,*   x ? false : true --> !x
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1175,*   x ? true : y     --> x || y
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1161,rivate Node tryMinimizeConditionOld(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1179,private Node performConditionSubstitutions(Node n) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1172,eft = tryMinimizeConditionOld(left);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1173,ight = tryMinimizeConditionOld(right);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1190,left = performConditionSubstitutions(left);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1191,right = performConditionSubstitutions(right);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1214,rueNode = tryMinimizeConditionOld(trueNode);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1215,alseNode = tryMinimizeConditionOld(falseNode);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1232,trueNode = performConditionSubstitutions(trueNode);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1233,falseNode = performConditionSubstitutions(falseNode);
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,267,"oldSame(""function f(){if(!(x=1))a.b=1}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,267,"fold(""function f(){if(!(x=1))a.b=1}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,268,"""function f(){(x=1)||(a.b=1)}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,364,public void testPreserveIf() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,365,"foldSame(""if(!a&&!b)for(;f(););"");"

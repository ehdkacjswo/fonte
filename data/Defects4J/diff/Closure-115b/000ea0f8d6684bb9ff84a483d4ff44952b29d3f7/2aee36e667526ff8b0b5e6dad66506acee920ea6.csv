is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,302,staleVars.contains(v) &&
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,303,eferenceInfo.isWellDefined() &&
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,304,eferenceInfo.isAssignedOnceInLifetime() &&
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,305,/ Inlining the variable based solely on well-defined and assigned
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,306,/ once is *NOT* correct. We relax the correctness requirement if
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,307,/ the variable is declared constant.
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,308,"isInlineableDeclaredConstant(v, referenceInfo) ||"
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,309,eferenceInfo.isOnlyAssignmentSameScopeAsDeclaration())) {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,302,!staleVars.contains(v) && referenceInfo.isWellDefined() &&
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,303,referenceInfo.isAssignedOnceInLifetime()) {
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,441, @return Whether the variable is only assigned a value once for its
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,442,     lifetime.
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,444,oolean isOnlyAssignmentSameScopeAsDeclaration() {
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,445,eference ref = getOneAndOnlyAssignment();
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,446,reconditions.checkNotNull(ref);
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,448,/ Make sure the declaration is the same scope as the assignment.
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,449,"/ Otherwise, the variable can be assigned multiple times and possibly"
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,450,/ with a different variable.
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,451,or (BasicBlock block = ref.getBasicBlock();
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,452,lock != null; block = block.getParent()) {
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,453,f (block.isFunction) {
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,454,f (ref.getSymbol().getScope() != ref.scope) {
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,455,eturn false;
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,460,eturn true;
False,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,1068,ublic void testExternalIssue1053() {
False,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,1069,estSame(
False,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,1070,"var u; function f() { u = Random(); var x = u; f(); alert(x===u)}"");"

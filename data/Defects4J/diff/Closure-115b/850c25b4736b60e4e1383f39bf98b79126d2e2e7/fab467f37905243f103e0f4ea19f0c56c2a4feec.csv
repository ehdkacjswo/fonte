is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1096,"new PeepholeMinimizeConditions(late),"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1114,"new PeepholeMinimizeConditions(late),"
True,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,src/com/google/javascript/jscomp/ExpandJqueryAliases.java,84,"new PeepholeMinimizeConditions(late),"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,592,/ PeepholeSubstituteAlternateSyntax#tryMinimizeCondition
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,592,// PeepholeMinimizeConditions#tryMinimizeCondition
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,2,* Copyright 2010 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,20,import com.google.common.base.Predicate;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,21,import com.google.common.collect.ImmutableSet;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,22,import com.google.javascript.rhino.IR;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,23,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,24,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,25,import com.google.javascript.rhino.jstype.TernaryValue;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,27,import java.util.Collections;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,28,import java.util.Comparator;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,31,* A peephole optimization that minimizes conditional expressions
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,32,* according to De Morgan's laws.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,33,* Also rewrites conditional statements as expressions by replacing them
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,34,* with HOOKs and short-circuit binary operators.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,36,* Based on PeepholeSubstituteAlternateSyntax by
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,38,class PeepholeMinimizeConditions
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,39,extends AbstractPeepholeOptimization {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,41,private static final int AND_PRECEDENCE = NodeUtil.precedence(Token.AND);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,42,private static final int OR_PRECEDENCE = NodeUtil.precedence(Token.OR);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,44,private final boolean late;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,46,static final Predicate<Node> DONT_TRAVERSE_FUNCTIONS_PREDICATE
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,47,= new Predicate<Node>() {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,48,@Override
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,49,public boolean apply(Node input) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,50,return !input.isFunction();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,55,"* @param late When late is false, this mean we are currently running before"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,56,* most of the other optimizations. In this case we would avoid optimizations
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,57,"* that would make the code harder to analyze (such as using string splitting,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,58,"* merging statements with commas, etc). When this is true, we would"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,59,* do anything to minimize for size.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,61,PeepholeMinimizeConditions(boolean late) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,62,this.late = late;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,66,* Tries apply our various peephole minimizations on the passed in node.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,68,@Override
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,69,"@SuppressWarnings(""fallthrough"")"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,70,public Node optimizeSubtree(Node node) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,71,switch(node.getType()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,72,case Token.RETURN: {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,73,Node result = tryRemoveRedundantExit(node);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,74,if (result != node) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,75,return result;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,77,result = tryReplaceExitWithBreak(node);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,78,if (result != node) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,79,return result;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,81,return tryReduceReturn(node);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,84,case Token.THROW: {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,85,Node result = tryRemoveRedundantExit(node);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,86,if (result != node) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,87,return result;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,89,return tryReplaceExitWithBreak(node);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,92,// TODO(johnlenz): Maybe remove redundant BREAK and CONTINUE. Overlaps
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,93,// with MinimizeExitPoints.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,95,case Token.NOT:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,96,"tryMinimizeCondition(node.getFirstChild(), true);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,97,return tryMinimizeNot(node);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,99,case Token.IF:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,100,"tryMinimizeCondition(node.getFirstChild(), false);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,101,return tryMinimizeIf(node);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,103,case Token.EXPR_RESULT:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,104,"tryMinimizeCondition(node.getFirstChild(), true);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,105,return node;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,107,case Token.HOOK:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,108,"tryMinimizeCondition(node.getFirstChild(), false);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,109,return tryMinimizeHook(node);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,111,case Token.WHILE:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,112,case Token.DO:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,113,"tryMinimizeCondition(NodeUtil.getConditionExpression(node), true);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,114,return node;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,116,case Token.FOR:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,117,if (!NodeUtil.isForIn(node)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,118,tryJoinForCondition(node);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,119,"tryMinimizeCondition(NodeUtil.getConditionExpression(node), true);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,121,return node;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,123,case Token.BLOCK:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,124,return tryReplaceIf(node);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,126,default:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,127,return node; //Nothing changed
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,131,private void tryJoinForCondition(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,132,if (!late) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,133,return;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,136,Node block = n.getLastChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,137,Node maybeIf = block.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,138,if (maybeIf != null && maybeIf.isIf()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,139,Node maybeBreak = maybeIf.getChildAtIndex(1).getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,140,if (maybeBreak != null && maybeBreak.isBreak()
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,141,&& !maybeBreak.hasChildren()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,143,// Preserve the IF ELSE expression is there is one.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,144,if (maybeIf.getChildCount() == 3) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,145,"block.replaceChild(maybeIf,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,146,maybeIf.getLastChild().detachFromParent());
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,147,} else {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,148,block.removeFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,151,Node ifCondition = maybeIf.removeFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,152,Node fixedIfCondition = IR.not(ifCondition)
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,153,.srcref(ifCondition);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,155,"// OK, join the IF expression with the FOR expression"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,156,Node forCondition = NodeUtil.getConditionExpression(n);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,157,if (forCondition.isEmpty()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,158,"n.replaceChild(forCondition, fixedIfCondition);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,159,} else {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,160,Node replacement = new Node(Token.AND);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,161,"n.replaceChild(forCondition, replacement);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,162,replacement.addChildToBack(forCondition);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,163,replacement.addChildToBack(fixedIfCondition);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,166,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,172,"* Use ""return x?1:2;"" in place of ""if(x)return 1;return 2;"""
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,174,private Node tryReplaceIf(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,176,for (Node child = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,177,child != null; child = child.getNext()){
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,178,if (child.isIf()){
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,179,Node cond = child.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,180,Node thenBranch = cond.getNext();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,181,Node elseBranch = thenBranch.getNext();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,182,Node nextNode = child.getNext();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,184,if (nextNode != null && elseBranch == null
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,185,&& isReturnBlock(thenBranch)
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,186,&& nextNode.isIf()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,187,Node nextCond = nextNode.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,188,Node nextThen = nextCond.getNext();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,189,Node nextElse = nextThen.getNext();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,190,if (thenBranch.isEquivalentToTyped(nextThen)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,191,// Transform
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,192,//   if (x) return 1; if (y) return 1;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,193,// to
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,194,//   if (x||y) return 1;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,195,child.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,196,child.detachChildren();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,197,"Node newCond = new Node(Token.OR, cond);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,198,"nextNode.replaceChild(nextCond, newCond);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,199,newCond.addChildToBack(nextCond);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,200,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,201,} else if (nextElse != null
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,202,&& thenBranch.isEquivalentToTyped(nextElse)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,203,// Transform
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,204,//   if (x) return 1; if (y) foo() else return 1;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,205,// to
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,206,//   if (!x&&y) foo() else return 1;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,207,child.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,208,child.detachChildren();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,209,"Node newCond = new Node(Token.AND,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,210,IR.not(cond).srcref(cond));
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,211,"nextNode.replaceChild(nextCond, newCond);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,212,newCond.addChildToBack(nextCond);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,213,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,215,} else if (nextNode != null && elseBranch == null &&
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,216,isReturnBlock(thenBranch) && isReturnExpression(nextNode)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,217,Node thenExpr = null;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,218,// if(x)return; return 1 -> return x?void 0:1
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,219,if (isReturnExpressBlock(thenBranch)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,220,thenExpr = getBlockReturnExpression(thenBranch);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,221,thenExpr.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,222,} else {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,223,thenExpr = NodeUtil.newUndefinedNode(child);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,226,Node elseExpr = nextNode.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,228,cond.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,229,elseExpr.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,231,Node returnNode = IR.returnNode(
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,232,"IR.hook(cond, thenExpr, elseExpr)"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,233,.srcref(child));
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,234,"n.replaceChild(child, returnNode);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,235,n.removeChild(nextNode);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,236,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,237,} else if (elseBranch != null && statementMustExitParent(thenBranch)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,238,child.removeChild(elseBranch);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,239,"n.addChildAfter(elseBranch, child);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,240,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,244,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,247,private boolean statementMustExitParent(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,248,switch (n.getType()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,249,case Token.THROW:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,250,case Token.RETURN:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,251,return true;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,252,case Token.BLOCK:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,253,if (n.hasChildren()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,254,Node child = n.getLastChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,255,return statementMustExitParent(child);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,257,return false;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,258,// TODO(johnlenz): handle TRY/FINALLY
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,259,case Token.FUNCTION:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,260,default:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,261,return false;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,266,"* Reduce ""return undefined"" or ""return void 0"" to simply ""return""."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,268,"* @return The original node, maybe simplified."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,270,private Node tryReduceReturn(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,271,Node result = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,273,if (result != null) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,274,switch (result.getType()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,275,case Token.VOID:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,276,Node operand = result.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,277,if (!mayHaveSideEffects(operand)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,278,n.removeFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,279,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,281,break;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,282,case Token.NAME:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,283,String name = result.getString();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,284,"if (name.equals(""undefined"")) {"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,285,n.removeFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,286,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,288,break;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,292,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,296,* Replace duplicate exits in control structures.  If the node following
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,297,"* the exit node expression has the same effect as exit node, the node can"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,298,* be replaced or removed.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,299,* For example:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,300,"*   ""while (a) {return f()} return f();"" ==> ""while (a) {break} return f();"""
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,301,"*   ""while (a) {throw 'ow'} throw 'ow';"" ==> ""while (a) {break} throw 'ow';"""
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,303,* @param n An follow control exit expression (a THROW or RETURN node)
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,304,"* @return The replacement for n, or the original if no change was made."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,306,private Node tryReplaceExitWithBreak(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,307,Node result = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,309,"// Find the enclosing control structure, if any, that a ""break"" would exit"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,310,// from.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,311,Node breakTarget = n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,312,"for (; !ControlFlowAnalysis.isBreakTarget(breakTarget, null /* no label */);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,313,breakTarget = breakTarget.getParent()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,314,if (breakTarget.isFunction() || breakTarget.isScript()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,315,// No break target.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,316,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,320,Node follow = ControlFlowAnalysis.computeFollowNode(breakTarget);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,322,// Skip pass all the finally blocks because both the break and return will
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,323,"// also trigger all the finally blocks. However, the order of execution is"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,324,// slightly changed. Consider:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,326,// return a() -> finally { b() } -> return a()
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,328,"// which would call a() first. However, changing the first return to a"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,329,// break will result in calling b().
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,331,Node prefinallyFollows = follow;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,332,follow = skipFinallyNodes(follow);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,334,if (prefinallyFollows != follow) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,335,// There were finally clauses
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,336,if (!isPure(result)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,337,// Can't defer the exit
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,338,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,342,if (follow == null && (n.isThrow() || result != null)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,343,// Can't complete remove a throw here or a return with a result.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,344,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,347,"// When follow is null, this mean the follow of a break target is the"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,348,// end of a function. This means a break is same as return.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,349,"if (follow == null || areMatchingExits(n, follow)) {"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,350,Node replacement = IR.breakNode();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,351,"n.getParent().replaceChild(n, replacement);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,352,this.reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,353,return replacement;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,356,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,360,* Remove duplicate exits.  If the node following the exit node expression
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,361,"* has the same effect as exit node, the node can be removed."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,362,* For example:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,363,"*   ""if (a) {return f()} return f();"" ==> ""if (a) {} return f();"""
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,364,"*   ""if (a) {throw 'ow'} throw 'ow';"" ==> ""if (a) {} throw 'ow';"""
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,366,* @param n An follow control exit expression (a THROW or RETURN node)
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,367,"* @return The replacement for n, or the original if no change was made."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,369,private Node tryRemoveRedundantExit(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,370,Node exitExpr = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,372,Node follow = ControlFlowAnalysis.computeFollowNode(n);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,374,// Skip pass all the finally blocks because both the fall through and return
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,375,// will also trigger all the finally blocks.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,376,Node prefinallyFollows = follow;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,377,follow = skipFinallyNodes(follow);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,378,if (prefinallyFollows != follow) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,379,// There were finally clauses
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,380,if (!isPure(exitExpr)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,381,// Can't replace the return
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,382,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,386,if (follow == null && (n.isThrow() || exitExpr != null)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,387,// Can't complete remove a throw here or a return with a result.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,388,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,391,"// When follow is null, this mean the follow of a break target is the"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,392,// end of a function. This means a break is same as return.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,393,"if (follow == null || areMatchingExits(n, follow)) {"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,394,n.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,395,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,396,return null;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,399,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,403,* @return Whether the expression does not produces and can not be affected
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,404,* by side-effects.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,406,boolean isPure(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,407,return n == null
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,408,|| (!NodeUtil.canBeSideEffected(n)
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,409,&& !mayHaveSideEffects(n));
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,413,* @return n or the node following any following finally nodes.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,415,Node skipFinallyNodes(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,416,"while (n != null && NodeUtil.isTryFinallyNode(n.getParent(), n)) {"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,417,n = ControlFlowAnalysis.computeFollowNode(n);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,419,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,423,* Check whether one exit can be replaced with another. Verify:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,424,* 1) They are identical expressions
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,425,"* 2) If an exception is possible that the statements, the original"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,426,* and the potential replacement are in the same exception handler.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,428,"boolean areMatchingExits(Node nodeThis, Node nodeThat) {"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,429,return nodeThis.isEquivalentTo(nodeThat)
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,430,&& (!isExceptionPossible(nodeThis)
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,431,|| getExceptionHandler(nodeThis) == getExceptionHandler(nodeThat));
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,434,boolean isExceptionPossible(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,435,// TODO(johnlenz): maybe use ControlFlowAnalysis.mayThrowException?
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,436,Preconditions.checkState(n.isReturn()
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,437,|| n.isThrow());
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,438,return n.isThrow()
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,439,|| (n.hasChildren()
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,440,"&& !NodeUtil.isLiteralValue(n.getLastChild(), true));"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,443,Node getExceptionHandler(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,444,return ControlFlowAnalysis.getExceptionHandler(n);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,448,* Try to minimize NOT nodes such as !(x==y).
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,450,* Returns the replacement for n or the original if no change was made
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,452,private Node tryMinimizeNot(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,453,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,455,Node notChild = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,456,// negative operator of the current one : == -> != for instance.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,457,int complementOperator;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,458,switch (notChild.getType()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,459,case Token.EQ:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,460,complementOperator = Token.NE;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,461,break;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,462,case Token.NE:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,463,complementOperator = Token.EQ;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,464,break;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,465,case Token.SHEQ:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,466,complementOperator = Token.SHNE;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,467,break;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,468,case Token.SHNE:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,469,complementOperator = Token.SHEQ;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,470,break;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,471,"// GT, GE, LT, LE are not handled in this because !(x<NaN) != x>=NaN."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,472,default:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,473,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,475,Node newOperator = n.removeFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,476,newOperator.setType(complementOperator);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,477,"parent.replaceChild(n, newOperator);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,478,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,479,return newOperator;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,483,* Try flipping HOOKs that have negated conditions.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,485,* Returns the replacement for n or the original if no replacement was
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,486,* necessary.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,488,private Node tryMinimizeHook(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,489,Node cond = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,490,if (cond.isNot()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,491,Node thenBranch = cond.getNext();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,492,"n.replaceChild(cond, cond.removeFirstChild());"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,493,n.removeChild(thenBranch);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,494,n.addChildToBack(thenBranch);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,495,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,497,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,501,* Try turning IF nodes into smaller HOOKs
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,503,* Returns the replacement for n or the original if no replacement was
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,504,* necessary.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,506,private Node tryMinimizeIf(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,508,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,510,Node cond = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,512,"/* If the condition is a literal, we'll let other"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,513,* optimizations try to remove useless code.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,515,"if (NodeUtil.isLiteralValue(cond, true)) {"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,516,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,519,Node thenBranch = cond.getNext();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,520,Node elseBranch = thenBranch.getNext();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,522,if (elseBranch == null) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,523,if (isFoldableExpressBlock(thenBranch)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,524,Node expr = getBlockExpression(thenBranch);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,525,if (!late && isPropertyAssignmentInExpression(expr)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,526,// Keep opportunities for CollapseProperties such as
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,527,// a.longIdentifier || a.longIdentifier = ... -> var a = ...;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,528,// until CollapseProperties has been run.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,529,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,532,if (cond.isNot()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,533,// if(!x)bar(); -> x||bar();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,534,"if (isLowerPrecedence(cond.getFirstChild(), OR_PRECEDENCE) &&"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,535,"isLowerPrecedence(expr.getFirstChild(),"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,536,OR_PRECEDENCE)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,537,// It's not okay to add two sets of parentheses.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,538,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,541,Node or = IR.or(
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,542,"cond.removeFirstChild(),"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,543,expr.removeFirstChild()).srcref(n);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,544,Node newExpr = NodeUtil.newExpr(or);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,545,"parent.replaceChild(n, newExpr);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,546,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,548,return newExpr;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,551,// if(x)foo(); -> x&&foo();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,552,"if (isLowerPrecedence(cond, AND_PRECEDENCE) &&"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,553,"isLowerPrecedence(expr.getFirstChild(),"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,554,AND_PRECEDENCE)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,555,// One additional set of parentheses is worth the change even if
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,556,"// there is no immediate code size win. However, two extra pair of"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,557,"// {}, we would have to think twice. (unless we know for sure the"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,558,// we can further optimize its parent.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,559,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,562,n.removeChild(cond);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,563,"Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,564,Node newExpr = NodeUtil.newExpr(and);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,565,"parent.replaceChild(n, newExpr);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,566,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,568,return newExpr;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,569,} else {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,571,// Try to combine two IF-ELSE
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,572,if (NodeUtil.isStatementBlock(thenBranch) &&
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,573,thenBranch.hasOneChild()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,574,Node innerIf = thenBranch.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,576,if (innerIf.isIf()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,577,Node innerCond = innerIf.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,578,Node innerThenBranch = innerCond.getNext();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,579,Node innerElseBranch = innerThenBranch.getNext();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,581,if (innerElseBranch == null &&
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,582,"!(isLowerPrecedence(cond, AND_PRECEDENCE) &&"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,583,"isLowerPrecedence(innerCond, AND_PRECEDENCE))) {"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,584,n.detachChildren();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,585,n.addChildToBack(
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,586,IR.and(
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,587,"cond,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,588,innerCond.detachFromParent())
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,589,.srcref(cond));
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,590,n.addChildrenToBack(innerThenBranch.detachFromParent());
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,591,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,592,// Not worth trying to fold the current IF-ELSE into && because
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,593,// the inner IF-ELSE wasn't able to be folded into && anyways.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,594,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,600,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,603,"/* TODO(dcc) This modifies the siblings of n, which is undesirable for a"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,604,* peephole optimization. This should probably get moved to another pass.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,606,tryRemoveRepeatedStatements(n);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,608,// if(!x)foo();else bar(); -> if(x)bar();else foo();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,609,// An additional set of curly braces isn't worth it.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,610,if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,611,"n.replaceChild(cond, cond.removeFirstChild());"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,612,n.removeChild(thenBranch);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,613,n.addChildToBack(thenBranch);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,614,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,615,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,618,// if(x)return 1;else return 2; -> return x?1:2;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,619,if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,620,Node thenExpr = getBlockReturnExpression(thenBranch);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,621,Node elseExpr = getBlockReturnExpression(elseBranch);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,622,n.removeChild(cond);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,623,thenExpr.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,624,elseExpr.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,626,"// note - we ignore any cases with ""return;"", technically this"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,627,"// can be converted to ""return undefined;"" or some variant, but"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,628,// that does not help code size.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,629,Node returnNode = IR.returnNode(
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,630,"IR.hook(cond, thenExpr, elseExpr)"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,631,.srcref(n));
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,632,"parent.replaceChild(n, returnNode);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,633,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,634,return returnNode;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,637,boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,638,boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,640,if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,641,Node thenOp = getBlockExpression(thenBranch).getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,642,Node elseOp = getBlockExpression(elseBranch).getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,643,if (thenOp.getType() == elseOp.getType()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,644,// if(x)a=1;else a=2; -> a=x?1:2;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,645,if (NodeUtil.isAssignmentOp(thenOp)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,646,Node lhs = thenOp.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,647,"if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,648,"// if LHS has side effects, don't proceed [since the optimization"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,649,// evaluates LHS before cond]
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,650,// NOTE - there are some circumstances where we can
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,651,// proceed even if there are side effects...
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,652,!mayEffectMutableState(lhs) &&
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,653,(!mayHaveSideEffects(cond) ||
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,654,(thenOp.isAssign() && thenOp.getFirstChild().isName()))) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,656,n.removeChild(cond);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,657,Node assignName = thenOp.removeFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,658,Node thenExpr = thenOp.removeFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,659,Node elseExpr = elseOp.getLastChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,660,elseOp.removeChild(elseExpr);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,662,"Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,663,"Node assign = new Node(thenOp.getType(), assignName, hookNode)"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,664,.srcref(thenOp);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,665,Node expr = NodeUtil.newExpr(assign);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,666,"parent.replaceChild(n, expr);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,667,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,669,return expr;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,673,// if(x)foo();else bar(); -> x?foo():bar()
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,674,n.removeChild(cond);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,675,thenOp.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,676,elseOp.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,677,Node expr = IR.exprResult(
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,678,"IR.hook(cond, thenOp, elseOp).srcref(n));"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,679,"parent.replaceChild(n, expr);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,680,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,681,return expr;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,684,boolean thenBranchIsVar = isVarBlock(thenBranch);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,685,boolean elseBranchIsVar = isVarBlock(elseBranch);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,687,// if(x)var y=1;else y=2  ->  var y=x?1:2
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,688,if (thenBranchIsVar && elseBranchIsExpressionBlock &&
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,689,getBlockExpression(elseBranch).getFirstChild().isAssign()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,691,Node var = getBlockVar(thenBranch);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,692,Node elseAssign = getBlockExpression(elseBranch).getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,694,Node name1 = var.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,695,Node maybeName2 = elseAssign.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,697,if (name1.hasChildren()
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,698,&& maybeName2.isName()
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,699,&& name1.getString().equals(maybeName2.getString())) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,700,Node thenExpr = name1.removeChildren();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,701,Node elseExpr = elseAssign.getLastChild().detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,702,cond.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,703,"Node hookNode = IR.hook(cond, thenExpr, elseExpr)"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,704,.srcref(n);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,705,var.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,706,name1.addChildrenToBack(hookNode);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,707,"parent.replaceChild(n, var);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,708,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,709,return var;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,712,// if(x)y=1;else var y=2  ->  var y=x?1:2
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,713,} else if (elseBranchIsVar && thenBranchIsExpressionBlock &&
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,714,getBlockExpression(thenBranch).getFirstChild().isAssign()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,716,Node var = getBlockVar(elseBranch);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,717,Node thenAssign = getBlockExpression(thenBranch).getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,719,Node maybeName1 = thenAssign.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,720,Node name2 = var.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,722,if (name2.hasChildren()
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,723,&& maybeName1.isName()
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,724,&& maybeName1.getString().equals(name2.getString())) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,725,Node thenExpr = thenAssign.getLastChild().detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,726,Node elseExpr = name2.removeChildren();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,727,cond.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,728,"Node hookNode = IR.hook(cond, thenExpr, elseExpr)"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,729,.srcref(n);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,730,var.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,731,name2.addChildrenToBack(hookNode);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,732,"parent.replaceChild(n, var);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,733,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,735,return var;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,739,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,743,* Try to remove duplicate statements from IF blocks. For example:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,745,* if (a) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,746,*   x = 1;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,747,*   return true;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,748,* } else {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,749,*   x = 2;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,750,*   return true;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,753,* becomes:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,755,* if (a) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,756,*   x = 1;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,757,* } else {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,758,*   x = 2;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,760,* return true;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,762,* @param n The IF node to examine.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,764,private void tryRemoveRepeatedStatements(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,765,Preconditions.checkState(n.isIf());
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,767,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,768,if (!NodeUtil.isStatementBlock(parent)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,769,"// If the immediate parent is something like a label, we"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,770,"// can't move the statement, so bail."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,771,return;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,774,Node cond = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,775,Node trueBranch = cond.getNext();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,776,Node falseBranch = trueBranch.getNext();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,777,Preconditions.checkNotNull(trueBranch);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,778,Preconditions.checkNotNull(falseBranch);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,780,while (true) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,781,Node lastTrue = trueBranch.getLastChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,782,Node lastFalse = falseBranch.getLastChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,783,if (lastTrue == null || lastFalse == null
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,784,"|| !areNodesEqualForInlining(lastTrue, lastFalse)) {"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,785,break;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,787,lastTrue.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,788,lastFalse.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,789,"parent.addChildAfter(lastTrue, n);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,790,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,795,* @return Whether the node is a block with a single statement that is
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,796,*     an expression.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,798,private static boolean isFoldableExpressBlock(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,799,if (n.isBlock()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,800,if (n.hasOneChild()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,801,Node maybeExpr = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,802,if (maybeExpr.isExprResult()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,803,// IE has a bug where event handlers behave differently when
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,804,// their return value is used vs. when their return value is in
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,805,// an EXPR_RESULT. It's pretty freaking weird. See:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,806,// http://code.google.com/p/closure-compiler/issues/detail?id=291
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,807,"// We try to detect this case, and not fold EXPR_RESULTs"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,808,// into other expressions.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,809,if (maybeExpr.getFirstChild().isCall()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,810,Node calledFn = maybeExpr.getFirstChild().getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,812,// We only have to worry about methods with an implicit 'this'
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,813,"// param, or this doesn't happen."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,814,if (calledFn.isGetElem()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,815,return false;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,816,} else if (calledFn.isGetProp() &&
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,817,"calledFn.getLastChild().getString().startsWith(""on"")) {"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,818,return false;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,822,return true;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,824,return false;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,828,return false;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,832,* @return The expression node.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,834,private static Node getBlockExpression(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,835,Preconditions.checkState(isFoldableExpressBlock(n));
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,836,return n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,840,* @return Whether the node is a block with a single statement that is
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,841,*     an return with or without an expression.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,843,private static boolean isReturnBlock(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,844,if (n.isBlock()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,845,if (n.hasOneChild()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,846,Node first = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,847,return first.isReturn();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,851,return false;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,855,* @return Whether the node is a block with a single statement that is
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,856,*     an return.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,858,private static boolean isReturnExpressBlock(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,859,if (n.isBlock()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,860,if (n.hasOneChild()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,861,Node first = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,862,if (first.isReturn()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,863,return first.hasOneChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,868,return false;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,872,* @return Whether the node is a single return statement.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,874,private static boolean isReturnExpression(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,875,if (n.isReturn()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,876,return n.hasOneChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,878,return false;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,882,* @return The expression that is part of the return.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,884,private static Node getBlockReturnExpression(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,885,Preconditions.checkState(isReturnExpressBlock(n));
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,886,return n.getFirstChild().getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,890,* @return Whether the node is a block with a single statement that is
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,891,*     a VAR declaration of a single variable.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,893,private static boolean isVarBlock(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,894,if (n.isBlock()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,895,if (n.hasOneChild()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,896,Node first = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,897,if (first.isVar()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,898,return first.hasOneChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,903,return false;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,907,* @return The var node.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,909,private static Node getBlockVar(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,910,Preconditions.checkState(isVarBlock(n));
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,911,return n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,915,* Does a statement consume a 'dangling else'? A statement consumes
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,916,* a 'dangling else' if an 'else' token following the statement
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,917,* would be considered by the parser to be part of the statement.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,919,private static boolean consumesDanglingElse(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,920,while (true) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,921,switch (n.getType()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,922,case Token.IF:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,923,if (n.getChildCount() < 3) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,924,return true;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,926,// This IF node has no else clause.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,927,n = n.getLastChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,928,continue;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,929,case Token.WITH:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,930,case Token.WHILE:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,931,case Token.FOR:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,932,n = n.getLastChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,933,continue;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,934,default:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,935,return false;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,941,"* Whether the node type has lower precedence than ""precedence"""
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,943,"private static boolean isLowerPrecedence(Node n, final int precedence) {"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,944,return NodeUtil.precedence(n.getType()) < precedence;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,948,* Does the expression contain a property assignment?
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,950,private static boolean isPropertyAssignmentInExpression(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,951,Predicate<Node> isPropertyAssignmentInExpressionPredicate =
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,952,new Predicate<Node>() {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,953,@Override
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,954,public boolean apply(Node input) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,955,return (input.isGetProp() &&
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,956,input.getParent().isAssign());
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,960,"return NodeUtil.has(n, isPropertyAssignmentInExpressionPredicate,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,961,DONT_TRAVERSE_FUNCTIONS_PREDICATE);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,964,"private Node tryMinimizeCondition(Node n, boolean countLeadingNot) {"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,965,n = tryMinimizeConditionOld(n);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,966,"return demorganMinimizeCondition(n, countLeadingNot);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,970,*  Minimize the given conditional node according to De Morgan's Laws.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,971,*    !(x && !y)  ==> !x || y
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,972,*    (!a || !b || !c || !d)  ==>  !(a && b && c && d)
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,973,*  etc.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,975,"* @param countLeadingNot When this is false, do not count a leading"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,976,*  NOT in doing the minimization. i.e. Allow minimizations such as:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,977,*    (!x || !y || z)  ==>  !(x && y && !z)
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,978,*  This is useful in contexts such as IFs or HOOKs where subsequent
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,979,*  optimizations can efficiently deal with leading NOTs.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,981,* @param n The conditional node.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,982,"* @return The minimized version of n, or n if no minimization was possible."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,984,"private Node demorganMinimizeCondition(Node n, boolean countLeadingNot) {"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,985,MinimizedCondition minCond = MinimizedCondition.fromConditionNode(n);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,986,if (countLeadingNot ||
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,987,minCond.getLength() <= minCond.getNegativeLength()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,988,"return maybeReplaceNode(n, minCond.getNode());"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,989,} else {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,990,"return maybeReplaceNode(n,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,991,"new Node(Token.NOT, minCond.getNegatedNode()));"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,995,"private Node maybeReplaceNode(Node lhs, Node rhs) {"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,996,if (lhs.isEquivalentTo(rhs)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,997,return lhs;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,999,Node parent = lhs.getParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1000,"parent.replaceChild(lhs, rhs);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1001,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1002,return rhs;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1005,/** A class that represents a minimized conditional expression.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1006,"*  Depending on the context, either the original conditional, or the"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1007,"*  negation of the original conditional may be needed, so this class"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1008,*  provides ways to access minimized versions of both of those ASTs.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1010,static class MinimizedCondition {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1011,private final Node positive;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1012,private final Node negative;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1014,"private MinimizedCondition(Node p, Node n) {"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1015,Preconditions.checkArgument(p.getParent() == null);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1016,Preconditions.checkArgument(n.getParent() == null);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1017,positive = p;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1018,negative = n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1021,/** Minimize the condition at the given node.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1023,*  @param n The conditional expression tree to minimize.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1024,*   This may be still connected to a tree and will be cloned as necessary.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1025,*  @return A MinimizedCondition object representing that tree.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1027,static MinimizedCondition fromConditionNode(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1028,switch (n.getType()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1029,case Token.NOT: {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1030,MinimizedCondition subtree = fromConditionNode(n.getFirstChild());
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1031,ImmutableSet<Node> positiveAsts = ImmutableSet.of(
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1032,"negate(subtree.positive.cloneTree()),"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1033,subtree.negative.cloneTree());
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1034,ImmutableSet<Node> negativeAsts = ImmutableSet.of(
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1035,"negate(subtree.negative),"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1036,subtree.positive);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1037,return new MinimizedCondition(
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1038,"Collections.min(positiveAsts, AST_LENGTH_COMPARATOR),"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1039,"Collections.min(negativeAsts, AST_LENGTH_COMPARATOR));"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1041,case Token.AND:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1042,case Token.OR: {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1043,int opType = n.getType();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1044,int complementType = opType == Token.AND ? Token.OR : Token.AND;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1045,MinimizedCondition leftSubtree = fromConditionNode(n.getFirstChild());
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1046,MinimizedCondition rightSubtree = fromConditionNode(n.getLastChild());
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1047,ImmutableSet<Node> positiveAsts = ImmutableSet.of(
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1048,"new Node(opType,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1049,"leftSubtree.positive.cloneTree(),"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1050,"rightSubtree.positive.cloneTree()).srcref(n),"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1051,"negate(new Node(complementType,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1052,"leftSubtree.negative.cloneTree(),"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1053,rightSubtree.negative.cloneTree()).srcref(n)));
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1054,ImmutableSet<Node> negativeAsts = ImmutableSet.of(
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1055,"negate(new Node(opType,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1056,"leftSubtree.positive,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1057,"rightSubtree.positive).srcref(n)),"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1058,"new Node(complementType,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1059,"leftSubtree.negative,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1060,rightSubtree.negative).srcref(n));
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1061,return new MinimizedCondition(
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1062,"Collections.min(positiveAsts, AST_LENGTH_COMPARATOR),"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1063,"Collections.min(negativeAsts, AST_LENGTH_COMPARATOR));"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1065,default:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1066,"return new MinimizedCondition(n.cloneTree(), negate(n.cloneTree()));"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1070,Node getNode() {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1071,return positive;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1074,Node getNegatedNode() {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1075,return negative;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1078,int getLength() {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1079,return length(positive);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1082,int getNegativeLength() {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1083,return length(negative);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1086,private static Node negate(Node node) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1087,Preconditions.checkArgument(node.getParent() == null);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1088,int complementOperator;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1089,switch (node.getType()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1090,default:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1091,"return new Node(Token.NOT, node).srcref(node);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1092,case Token.NOT:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1093,return node.removeFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1094,// Otherwise a binary operator with a complement.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1095,case Token.EQ:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1096,complementOperator = Token.NE;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1097,break;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1098,case Token.NE:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1099,complementOperator = Token.EQ;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1100,break;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1101,case Token.SHEQ:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1102,complementOperator = Token.SHNE;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1103,break;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1104,case Token.SHNE:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1105,complementOperator = Token.SHEQ;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1106,break;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1108,// Clone entire tree and just change operator.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1109,node.setType(complementOperator);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1110,return node;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1113,private static final Comparator<Node> AST_LENGTH_COMPARATOR =
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1114,new Comparator<Node>() {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1115,@Override
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1116,"public int compare(Node o1, Node o2) {"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1117,return length(o1) - length(o2);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1121,/** Return the number of characters in the textual representation of
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1122,"*  the given tree that will be devoted to negation, or parentheses."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1123,*  Since these are the only characters that flipping a condition
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1124,"*  according to De Morgan's rule can affect, these are the only ones"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1125,*  we count.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1126,*  @param node The tree whose length should be checked.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1127,*  @return The number of negations and parentheses in the tree.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1129,static int length(Node node) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1130,int result = 0;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1131,if (node.isNot()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1132,result++;  // One negation needed.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1134,for (Node n = node.getFirstChild(); n != null; n = n.getNext()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1135,if (NodeUtil.precedenceWithDefault(n.getType())
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1136,< NodeUtil.precedenceWithDefault(node.getType())) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1137,result += 2;  // One pair of parentheses needed.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1139,result += length(n);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1141,return result;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1147,"* Try to minimize conditions expressions, as there are additional"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1148,* assumptions that can be made when it is known that the final result
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1149,* is a boolean.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1151,* The following transformations are done recursively:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1152,*   !(x||y) --> !x&&!y
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1153,*   !(x&&y) --> !x||!y
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1154,*   !!x     --> x
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1155,* Thus:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1156,*   !(x&&!y) --> !x||!!y --> !x||y
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1158,"*   Returns the replacement for n, or the original if no change was made"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1160,private Node tryMinimizeConditionOld(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1161,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1163,switch (n.getType()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1164,case Token.OR:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1165,case Token.AND: {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1166,Node left = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1167,Node right = n.getLastChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1169,// Because the expression is in a boolean context minimize
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1170,"// the children, this can't be done in the general case."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1171,left = tryMinimizeConditionOld(left);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1172,right = tryMinimizeConditionOld(right);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1174,// Remove useless conditionals
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1175,// Handle four cases:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1176,//   x || false --> x
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1177,//   x || true  --> true
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1178,//   x && true --> x
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1179,//   x && false  --> false
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1180,TernaryValue rightVal = NodeUtil.getPureBooleanValue(right);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1181,if (NodeUtil.getPureBooleanValue(right) != TernaryValue.UNKNOWN) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1182,int type = n.getType();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1183,Node replacement = null;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1184,boolean rval = rightVal.toBoolean(true);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1186,// (x || FALSE) => x
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1187,// (x && TRUE) => x
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1188,if (type == Token.OR && !rval ||
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1189,type == Token.AND && rval) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1190,replacement = left;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1191,} else if (!mayHaveSideEffects(left)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1192,replacement = right;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1195,if (replacement != null) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1196,n.detachChildren();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1197,"parent.replaceChild(n, replacement);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1198,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1199,return replacement;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1202,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1205,case Token.HOOK: {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1206,Node condition = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1207,Node trueNode = n.getFirstChild().getNext();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1208,Node falseNode = n.getLastChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1210,// Because the expression is in a boolean context minimize
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1211,"// the result children, this can't be done in the general case."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1212,// The condition is handled in the general case in #optimizeSubtree
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1213,trueNode = tryMinimizeConditionOld(trueNode);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1214,falseNode = tryMinimizeConditionOld(falseNode);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1216,// Handle four cases:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1217,//   x ? true : false --> x
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1218,//   x ? false : true --> !x
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1219,//   x ? true : y     --> x || y
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1220,//   x ? y : false    --> x && y
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1221,Node replacement = null;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1222,TernaryValue trueNodeVal = NodeUtil.getPureBooleanValue(trueNode);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1223,TernaryValue falseNodeVal = NodeUtil.getPureBooleanValue(falseNode);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1224,if (trueNodeVal == TernaryValue.TRUE
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1225,&& falseNodeVal == TernaryValue.FALSE) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1226,"// Remove useless conditionals, keep the condition"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1227,condition.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1228,replacement = condition;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1229,} else if (trueNodeVal == TernaryValue.FALSE
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1230,&& falseNodeVal == TernaryValue.TRUE) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1231,"// Remove useless conditionals, keep the condition"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1232,condition.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1233,replacement = IR.not(condition);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1234,} else if (trueNodeVal == TernaryValue.TRUE) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1235,// Remove useless true case.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1236,n.detachChildren();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1237,"replacement = IR.or(condition, falseNode);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1238,} else if (falseNodeVal == TernaryValue.FALSE) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1239,// Remove useless false case
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1240,n.detachChildren();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1241,"replacement = IR.and(condition, trueNode);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1244,if (replacement != null) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1245,"parent.replaceChild(n, replacement);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1246,n = replacement;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1247,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1250,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1253,default:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1254,// while(true) --> while(1)
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1255,TernaryValue nVal = NodeUtil.getPureBooleanValue(n);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1256,if (nVal != TernaryValue.UNKNOWN) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1257,boolean result = nVal.toBoolean(true);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1258,int equivalentResult = result ? 1 : 0;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1259,"return maybeReplaceChildWithNumber(n, parent, equivalentResult);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1261,// We can't do anything else currently.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1262,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1267,* Replaces a node with a number node if the new number node is not equivalent
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1268,* to the current node.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1270,"* Returns the replacement for n if it was replaced, otherwise returns n."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1272,"private Node maybeReplaceChildWithNumber(Node n, Node parent, int num) {"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1273,Node newNode = IR.number(num);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1274,if (!newNode.isEquivalentTo(n)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1275,"parent.replaceChild(n, newNode);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1276,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1278,return newNode;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1281,return n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,21,mport com.google.common.base.Predicate;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,27,mport com.google.javascript.rhino.jstype.TernaryValue;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,29,mport java.util.Collections;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,30,mport java.util.Comparator;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,42,rivate static final int AND_PRECEDENCE = NodeUtil.precedence(Token.AND);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,43,rivate static final int OR_PRECEDENCE = NodeUtil.precedence(Token.OR);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,57,tatic final Predicate<Node> DONT_TRAVERSE_FUNCTIONS_PREDICATE
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,58, new Predicate<Node>() {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,59,Override
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,60,ublic boolean apply(Node input) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,61,eturn !input.isFunction();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,83,ase Token.RETURN: {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,84,ode result = tryRemoveRedundantExit(node);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,85,f (result != node) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,86,eturn result;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,88,esult = tryReplaceExitWithBreak(node);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,89,f (result != node) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,90,eturn result;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,92,eturn tryReduceReturn(node);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,95,ase Token.THROW: {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,96,ode result = tryRemoveRedundantExit(node);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,97,f (result != node) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,98,eturn result;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,100,eturn tryReplaceExitWithBreak(node);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,103,/ TODO(johnlenz): Maybe remove redundant BREAK and CONTINUE. Overlaps
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,104,/ with MinimizeExitPoints.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,106,ase Token.NOT:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,107,"ryMinimizeCondition(node.getFirstChild(), true);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,108,eturn tryMinimizeNot(node);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,110,ase Token.IF:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,111,"ryMinimizeCondition(node.getFirstChild(), false);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,112,eturn tryMinimizeIf(node);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,114,ase Token.EXPR_RESULT:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,115,"ryMinimizeCondition(node.getFirstChild(), true);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,116,eturn node;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,118,ase Token.HOOK:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,119,"ryMinimizeCondition(node.getFirstChild(), false);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,120,eturn tryMinimizeHook(node);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,122,ase Token.WHILE:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,123,ase Token.DO:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,124,"ryMinimizeCondition(NodeUtil.getConditionExpression(node), true);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,125,eturn node;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,127,ase Token.FOR:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,128,f (!NodeUtil.isForIn(node)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,129,ryJoinForCondition(node);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,130,"ryMinimizeCondition(NodeUtil.getConditionExpression(node), true);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,132,eturn node;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,161,ase Token.BLOCK:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,162,eturn tryReplaceIf(node);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,172,rivate void tryJoinForCondition(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,173,f (!late) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,174,eturn;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,177,ode block = n.getLastChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,178,ode maybeIf = block.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,179,f (maybeIf != null && maybeIf.isIf()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,180,ode maybeBreak = maybeIf.getChildAtIndex(1).getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,181,f (maybeBreak != null && maybeBreak.isBreak()
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,182,& !maybeBreak.hasChildren()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,184,/ Preserve the IF ELSE expression is there is one.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,185,f (maybeIf.getChildCount() == 3) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,186,"lock.replaceChild(maybeIf,"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,187,aybeIf.getLastChild().detachFromParent());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,188, else {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,189,lock.removeFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,192,ode ifCondition = maybeIf.removeFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,193,ode fixedIfCondition = IR.not(ifCondition)
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,194,srcref(ifCondition);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,196,"/ OK, join the IF expression with the FOR expression"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,197,ode forCondition = NodeUtil.getConditionExpression(n);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,198,f (forCondition.isEmpty()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,199,".replaceChild(forCondition, fixedIfCondition);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,200, else {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,201,ode replacement = new Node(Token.AND);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,202,".replaceChild(forCondition, replacement);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,203,eplacement.addChildToBack(forCondition);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,204,eplacement.addChildToBack(fixedIfCondition);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,207,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,305," Use ""return x?1:2;"" in place of ""if(x)return 1;return 2;"""
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,307,rivate Node tryReplaceIf(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,309,or (Node child = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,310,hild != null; child = child.getNext()){
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,311,f (child.isIf()){
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,312,ode cond = child.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,313,ode thenBranch = cond.getNext();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,314,ode elseBranch = thenBranch.getNext();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,315,ode nextNode = child.getNext();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,317,f (nextNode != null && elseBranch == null
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,318,& isReturnBlock(thenBranch)
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,319,& nextNode.isIf()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,320,ode nextCond = nextNode.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,321,ode nextThen = nextCond.getNext();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,322,ode nextElse = nextThen.getNext();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,323,f (thenBranch.isEquivalentToTyped(nextThen)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,324,/ Transform
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,325,/   if (x) return 1; if (y) return 1;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,326,/ to
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,327,/   if (x||y) return 1;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,328,hild.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,329,hild.detachChildren();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,330,"ode newCond = new Node(Token.OR, cond);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,331,"extNode.replaceChild(nextCond, newCond);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,332,ewCond.addChildToBack(nextCond);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,333,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,334, else if (nextElse != null
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,335,& thenBranch.isEquivalentToTyped(nextElse)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,336,/ Transform
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,337,/   if (x) return 1; if (y) foo() else return 1;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,338,/ to
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,339,/   if (!x&&y) foo() else return 1;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,340,hild.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,341,hild.detachChildren();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,342,"ode newCond = new Node(Token.AND,"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,343,R.not(cond).srcref(cond));
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,344,"extNode.replaceChild(nextCond, newCond);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,345,ewCond.addChildToBack(nextCond);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,346,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,348, else if (nextNode != null && elseBranch == null &&
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,349,sReturnBlock(thenBranch) && isReturnExpression(nextNode)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,350,ode thenExpr = null;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,351,/ if(x)return; return 1 -> return x?void 0:1
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,352,f (isReturnExpressBlock(thenBranch)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,353,henExpr = getBlockReturnExpression(thenBranch);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,354,henExpr.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,355, else {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,356,henExpr = NodeUtil.newUndefinedNode(child);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,359,ode elseExpr = nextNode.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,361,ond.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,362,lseExpr.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,364,ode returnNode = IR.returnNode(
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,365,"R.hook(cond, thenExpr, elseExpr)"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,366,srcref(child));
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,367,".replaceChild(child, returnNode);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,368,.removeChild(nextNode);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,369,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,370, else if (elseBranch != null && statementMustExitParent(thenBranch)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,371,hild.removeChild(elseBranch);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,372,".addChildAfter(elseBranch, child);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,373,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,377,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,380,rivate boolean statementMustExitParent(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,381,witch (n.getType()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,382,ase Token.THROW:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,383,ase Token.RETURN:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,384,eturn true;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,385,ase Token.BLOCK:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,386,f (n.hasChildren()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,387,ode child = n.getLastChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,388,eturn statementMustExitParent(child);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,390,eturn false;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,391,/ TODO(johnlenz): handle TRY/FINALLY
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,392,ase Token.FUNCTION:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,393,efault:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,394,eturn false;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,415," Reduce ""return undefined"" or ""return void 0"" to simply ""return""."
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,417," @return The original node, maybe simplified."
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,419,rivate Node tryReduceReturn(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,420,ode result = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,422,f (result != null) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,423,witch (result.getType()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,424,ase Token.VOID:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,425,ode operand = result.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,426,f (!mayHaveSideEffects(operand)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,427,.removeFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,428,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,430,reak;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,431,ase Token.NAME:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,432,tring name = result.getString();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,433,"f (name.equals(""undefined"")) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,434,.removeFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,435,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,437,reak;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,441,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,445, Replace duplicate exits in control structures.  If the node following
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,446," the exit node expression has the same effect as exit node, the node can"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,447, be replaced or removed.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,448, For example:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,449,"   ""while (a) {return f()} return f();"" ==> ""while (a) {break} return f();"""
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,450,"   ""while (a) {throw 'ow'} throw 'ow';"" ==> ""while (a) {break} throw 'ow';"""
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,452, @param n An follow control exit expression (a THROW or RETURN node)
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,453," @return The replacement for n, or the original if no change was made."
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,455,rivate Node tryReplaceExitWithBreak(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,456,ode result = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,458,"/ Find the enclosing control structure, if any, that a ""break"" would exit"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,459,/ from.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,460,ode breakTarget = n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,461,"or (; !ControlFlowAnalysis.isBreakTarget(breakTarget, null /* no label */);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,462,reakTarget = breakTarget.getParent()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,463,f (breakTarget.isFunction() || breakTarget.isScript()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,464,/ No break target.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,465,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,469,ode follow = ControlFlowAnalysis.computeFollowNode(breakTarget);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,471,/ Skip pass all the finally blocks because both the break and return will
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,472,"/ also trigger all the finally blocks. However, the order of execution is"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,473,/ slightly changed. Consider:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,475,/ return a() -> finally { b() } -> return a()
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,477,"/ which would call a() first. However, changing the first return to a"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,478,/ break will result in calling b().
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,480,ode prefinallyFollows = follow;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,481,ollow = skipFinallyNodes(follow);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,483,f (prefinallyFollows != follow) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,484,/ There were finally clauses
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,485,f (!isPure(result)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,486,/ Can't defer the exit
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,487,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,491,f (follow == null && (n.isThrow() || result != null)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,492,/ Can't complete remove a throw here or a return with a result.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,493,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,496,"/ When follow is null, this mean the follow of a break target is the"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,497,/ end of a function. This means a break is same as return.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,498,"f (follow == null || areMatchingExits(n, follow)) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,499,ode replacement = IR.breakNode();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,500,".getParent().replaceChild(n, replacement);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,501,his.reportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,502,eturn replacement;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,505,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,509, Remove duplicate exits.  If the node following the exit node expression
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,510," has the same effect as exit node, the node can be removed."
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,511, For example:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,512,"   ""if (a) {return f()} return f();"" ==> ""if (a) {} return f();"""
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,513,"   ""if (a) {throw 'ow'} throw 'ow';"" ==> ""if (a) {} throw 'ow';"""
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,515, @param n An follow control exit expression (a THROW or RETURN node)
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,516," @return The replacement for n, or the original if no change was made."
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,518,rivate Node tryRemoveRedundantExit(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,519,ode exitExpr = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,521,ode follow = ControlFlowAnalysis.computeFollowNode(n);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,523,/ Skip pass all the finally blocks because both the fall through and return
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,524,/ will also trigger all the finally blocks.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,525,ode prefinallyFollows = follow;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,526,ollow = skipFinallyNodes(follow);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,527,f (prefinallyFollows != follow) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,528,/ There were finally clauses
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,529,f (!isPure(exitExpr)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,530,/ Can't replace the return
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,531,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,535,f (follow == null && (n.isThrow() || exitExpr != null)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,536,/ Can't complete remove a throw here or a return with a result.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,537,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,540,"/ When follow is null, this mean the follow of a break target is the"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,541,/ end of a function. This means a break is same as return.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,542,"f (follow == null || areMatchingExits(n, follow)) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,543,.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,544,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,545,eturn null;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,548,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,552, @return Whether the expression does not produces and can not be affected
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,553, by side-effects.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,555,oolean isPure(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,556,eturn n == null
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,557,| (!NodeUtil.canBeSideEffected(n)
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,558,& !mayHaveSideEffects(n));
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,562, @return n or the node following any following finally nodes.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,564,ode skipFinallyNodes(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,565,"hile (n != null && NodeUtil.isTryFinallyNode(n.getParent(), n)) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,566, = ControlFlowAnalysis.computeFollowNode(n);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,568,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,572, Check whether one exit can be replaced with another. Verify:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,573, 1) They are identical expressions
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,574," 2) If an exception is possible that the statements, the original"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,575, and the potential replacement are in the same exception handler.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,577,"oolean areMatchingExits(Node nodeThis, Node nodeThat) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,578,eturn nodeThis.isEquivalentTo(nodeThat)
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,579,& (!isExceptionPossible(nodeThis)
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,580,| getExceptionHandler(nodeThis) == getExceptionHandler(nodeThat));
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,583,oolean isExceptionPossible(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,584,/ TODO(johnlenz): maybe use ControlFlowAnalysis.mayThrowException?
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,585,reconditions.checkState(n.isReturn()
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,586,| n.isThrow());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,587,eturn n.isThrow()
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,588,| (n.hasChildren()
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,589,"& !NodeUtil.isLiteralValue(n.getLastChild(), true));"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,592,ode getExceptionHandler(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,593,eturn ControlFlowAnalysis.getExceptionHandler(n);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,597, Try to minimize NOT nodes such as !(x==y).
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,599, Returns the replacement for n or the original if no change was made
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,601,rivate Node tryMinimizeNot(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,602,ode parent = n.getParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,604,ode notChild = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,605,/ negative operator of the current one : == -> != for instance.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,606,nt complementOperator;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,607,witch (notChild.getType()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,608,ase Token.EQ:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,609,omplementOperator = Token.NE;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,610,reak;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,611,ase Token.NE:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,612,omplementOperator = Token.EQ;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,613,reak;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,614,ase Token.SHEQ:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,615,omplementOperator = Token.SHNE;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,616,reak;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,617,ase Token.SHNE:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,618,omplementOperator = Token.SHEQ;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,619,reak;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,620,"/ GT, GE, LT, LE are not handled in this because !(x<NaN) != x>=NaN."
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,621,efault:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,622,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,624,ode newOperator = n.removeFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,625,ewOperator.setType(complementOperator);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,626,"arent.replaceChild(n, newOperator);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,627,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,628,eturn newOperator;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,632, Try flipping HOOKs that have negated conditions.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,634, Returns the replacement for n or the original if no replacement was
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,635, necessary.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,637,rivate Node tryMinimizeHook(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,638,ode cond = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,639,f (cond.isNot()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,640,ode thenBranch = cond.getNext();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,641,".replaceChild(cond, cond.removeFirstChild());"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,642,.removeChild(thenBranch);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,643,.addChildToBack(thenBranch);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,644,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,646,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,650, Try turning IF nodes into smaller HOOKs
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,652, Returns the replacement for n or the original if no replacement was
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,653, necessary.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,655,rivate Node tryMinimizeIf(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,657,ode parent = n.getParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,659,ode cond = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,661,"* If the condition is a literal, we'll let other"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,662, optimizations try to remove useless code.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,664,"f (NodeUtil.isLiteralValue(cond, true)) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,665,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,668,ode thenBranch = cond.getNext();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,669,ode elseBranch = thenBranch.getNext();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,671,f (elseBranch == null) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,672,f (isFoldableExpressBlock(thenBranch)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,673,ode expr = getBlockExpression(thenBranch);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,674,f (!late && isPropertyAssignmentInExpression(expr)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,675,/ Keep opportunities for CollapseProperties such as
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,676,/ a.longIdentifier || a.longIdentifier = ... -> var a = ...;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,677,/ until CollapseProperties has been run.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,678,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,681,f (cond.isNot()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,682,/ if(!x)bar(); -> x||bar();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,683,"f (isLowerPrecedence(cond.getFirstChild(), OR_PRECEDENCE) &&"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,684,"sLowerPrecedence(expr.getFirstChild(),"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,685,R_PRECEDENCE)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,686,/ It's not okay to add two sets of parentheses.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,687,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,690,ode or = IR.or(
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,691,"ond.removeFirstChild(),"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,692,xpr.removeFirstChild()).srcref(n);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,693,ode newExpr = NodeUtil.newExpr(or);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,694,"arent.replaceChild(n, newExpr);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,695,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,697,eturn newExpr;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,700,/ if(x)foo(); -> x&&foo();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,701,"f (isLowerPrecedence(cond, AND_PRECEDENCE) &&"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,702,"sLowerPrecedence(expr.getFirstChild(),"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,703,ND_PRECEDENCE)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,704,/ One additional set of parentheses is worth the change even if
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,705,"/ there is no immediate code size win. However, two extra pair of"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,706,"/ {}, we would have to think twice. (unless we know for sure the"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,707,/ we can further optimize its parent.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,708,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,711,.removeChild(cond);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,712,"ode and = IR.and(cond, expr.removeFirstChild()).srcref(n);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,713,ode newExpr = NodeUtil.newExpr(and);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,714,"arent.replaceChild(n, newExpr);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,715,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,717,eturn newExpr;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,718, else {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,720,/ Try to combine two IF-ELSE
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,721,f (NodeUtil.isStatementBlock(thenBranch) &&
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,722,henBranch.hasOneChild()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,723,ode innerIf = thenBranch.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,725,f (innerIf.isIf()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,726,ode innerCond = innerIf.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,727,ode innerThenBranch = innerCond.getNext();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,728,ode innerElseBranch = innerThenBranch.getNext();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,730,f (innerElseBranch == null &&
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,731,"(isLowerPrecedence(cond, AND_PRECEDENCE) &&"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,732,"sLowerPrecedence(innerCond, AND_PRECEDENCE))) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,733,.detachChildren();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,734,.addChildToBack(
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,735,R.and(
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,736,"ond,"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,737,nnerCond.detachFromParent())
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,738,srcref(cond));
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,739,.addChildrenToBack(innerThenBranch.detachFromParent());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,740,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,741,/ Not worth trying to fold the current IF-ELSE into && because
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,742,/ the inner IF-ELSE wasn't able to be folded into && anyways.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,743,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,749,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,752,"* TODO(dcc) This modifies the siblings of n, which is undesirable for a"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,753, peephole optimization. This should probably get moved to another pass.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,755,ryRemoveRepeatedStatements(n);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,757,/ if(!x)foo();else bar(); -> if(x)bar();else foo();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,758,/ An additional set of curly braces isn't worth it.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,759,f (cond.isNot() && !consumesDanglingElse(elseBranch)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,760,".replaceChild(cond, cond.removeFirstChild());"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,761,.removeChild(thenBranch);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,762,.addChildToBack(thenBranch);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,763,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,764,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,767,/ if(x)return 1;else return 2; -> return x?1:2;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,768,f (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,769,ode thenExpr = getBlockReturnExpression(thenBranch);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,770,ode elseExpr = getBlockReturnExpression(elseBranch);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,771,.removeChild(cond);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,772,henExpr.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,773,lseExpr.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,775,"/ note - we ignore any cases with ""return;"", technically this"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,776,"/ can be converted to ""return undefined;"" or some variant, but"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,777,/ that does not help code size.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,778,ode returnNode = IR.returnNode(
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,779,"R.hook(cond, thenExpr, elseExpr)"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,780,srcref(n));
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,781,"arent.replaceChild(n, returnNode);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,782,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,783,eturn returnNode;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,786,oolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,787,oolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,789,f (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,790,ode thenOp = getBlockExpression(thenBranch).getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,791,ode elseOp = getBlockExpression(elseBranch).getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,792,f (thenOp.getType() == elseOp.getType()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,793,/ if(x)a=1;else a=2; -> a=x?1:2;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,794,f (NodeUtil.isAssignmentOp(thenOp)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,795,ode lhs = thenOp.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,796,"f (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,797,"/ if LHS has side effects, don't proceed [since the optimization"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,798,/ evaluates LHS before cond]
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,799,/ NOTE - there are some circumstances where we can
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,800,/ proceed even if there are side effects...
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,801,mayEffectMutableState(lhs) &&
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,802,!mayHaveSideEffects(cond) ||
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,803,thenOp.isAssign() && thenOp.getFirstChild().isName()))) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,805,.removeChild(cond);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,806,ode assignName = thenOp.removeFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,807,ode thenExpr = thenOp.removeFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,808,ode elseExpr = elseOp.getLastChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,809,lseOp.removeChild(elseExpr);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,811,"ode hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,812,"ode assign = new Node(thenOp.getType(), assignName, hookNode)"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,813,srcref(thenOp);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,814,ode expr = NodeUtil.newExpr(assign);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,815,"arent.replaceChild(n, expr);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,816,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,818,eturn expr;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,822,/ if(x)foo();else bar(); -> x?foo():bar()
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,823,.removeChild(cond);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,824,henOp.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,825,lseOp.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,826,ode expr = IR.exprResult(
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,827,"R.hook(cond, thenOp, elseOp).srcref(n));"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,828,"arent.replaceChild(n, expr);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,829,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,830,eturn expr;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,833,oolean thenBranchIsVar = isVarBlock(thenBranch);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,834,oolean elseBranchIsVar = isVarBlock(elseBranch);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,836,/ if(x)var y=1;else y=2  ->  var y=x?1:2
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,837,f (thenBranchIsVar && elseBranchIsExpressionBlock &&
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,838,etBlockExpression(elseBranch).getFirstChild().isAssign()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,840,ode var = getBlockVar(thenBranch);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,841,ode elseAssign = getBlockExpression(elseBranch).getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,843,ode name1 = var.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,844,ode maybeName2 = elseAssign.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,846,f (name1.hasChildren()
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,847,& maybeName2.isName()
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,848,& name1.getString().equals(maybeName2.getString())) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,849,ode thenExpr = name1.removeChildren();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,850,ode elseExpr = elseAssign.getLastChild().detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,851,ond.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,852,"ode hookNode = IR.hook(cond, thenExpr, elseExpr)"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,853,srcref(n);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,854,ar.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,855,ame1.addChildrenToBack(hookNode);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,856,"arent.replaceChild(n, var);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,857,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,858,eturn var;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,861,/ if(x)y=1;else var y=2  ->  var y=x?1:2
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,862, else if (elseBranchIsVar && thenBranchIsExpressionBlock &&
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,863,etBlockExpression(thenBranch).getFirstChild().isAssign()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,865,ode var = getBlockVar(elseBranch);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,866,ode thenAssign = getBlockExpression(thenBranch).getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,868,ode maybeName1 = thenAssign.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,869,ode name2 = var.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,871,f (name2.hasChildren()
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,872,& maybeName1.isName()
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,873,& maybeName1.getString().equals(name2.getString())) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,874,ode thenExpr = thenAssign.getLastChild().detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,875,ode elseExpr = name2.removeChildren();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,876,ond.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,877,"ode hookNode = IR.hook(cond, thenExpr, elseExpr)"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,878,srcref(n);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,879,ar.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,880,ame2.addChildrenToBack(hookNode);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,881,"arent.replaceChild(n, var);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,882,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,884,eturn var;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,888,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,892, Try to remove duplicate statements from IF blocks. For example:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,894, if (a) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,895,   x = 1;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,896,   return true;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,897, } else {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,898,   x = 2;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,899,   return true;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,902, becomes:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,904, if (a) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,905,   x = 1;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,906, } else {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,907,   x = 2;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,909, return true;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,911, @param n The IF node to examine.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,913,rivate void tryRemoveRepeatedStatements(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,914,reconditions.checkState(n.isIf());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,916,ode parent = n.getParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,917,f (!NodeUtil.isStatementBlock(parent)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,918,"/ If the immediate parent is something like a label, we"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,919,"/ can't move the statement, so bail."
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,920,eturn;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,923,ode cond = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,924,ode trueBranch = cond.getNext();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,925,ode falseBranch = trueBranch.getNext();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,926,reconditions.checkNotNull(trueBranch);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,927,reconditions.checkNotNull(falseBranch);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,929,hile (true) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,930,ode lastTrue = trueBranch.getLastChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,931,ode lastFalse = falseBranch.getLastChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,932,f (lastTrue == null || lastFalse == null
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,933,"| !areNodesEqualForInlining(lastTrue, lastFalse)) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,934,reak;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,936,astTrue.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,937,astFalse.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,938,"arent.addChildAfter(lastTrue, n);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,939,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,944, @return Whether the node is a block with a single statement that is
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,945,     an expression.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,947,rivate static boolean isFoldableExpressBlock(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,948,f (n.isBlock()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,949,f (n.hasOneChild()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,950,ode maybeExpr = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,951,f (maybeExpr.isExprResult()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,952,/ IE has a bug where event handlers behave differently when
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,953,/ their return value is used vs. when their return value is in
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,954,/ an EXPR_RESULT. It's pretty freaking weird. See:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,955,/ http://code.google.com/p/closure-compiler/issues/detail?id=291
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,956,"/ We try to detect this case, and not fold EXPR_RESULTs"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,957,/ into other expressions.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,958,f (maybeExpr.getFirstChild().isCall()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,959,ode calledFn = maybeExpr.getFirstChild().getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,961,/ We only have to worry about methods with an implicit 'this'
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,962,"/ param, or this doesn't happen."
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,963,f (calledFn.isGetElem()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,964,eturn false;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,965, else if (calledFn.isGetProp() &&
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,966,"alledFn.getLastChild().getString().startsWith(""on"")) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,967,eturn false;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,971,eturn true;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,973,eturn false;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,977,eturn false;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,981, @return The expression node.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,983,rivate static Node getBlockExpression(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,984,reconditions.checkState(isFoldableExpressBlock(n));
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,985,eturn n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,989, @return Whether the node is a block with a single statement that is
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,990,     an return with or without an expression.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,992,rivate static boolean isReturnBlock(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,993,f (n.isBlock()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,994,f (n.hasOneChild()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,995,ode first = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,996,eturn first.isReturn();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1000,eturn false;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1004, @return Whether the node is a block with a single statement that is
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1005,     an return.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1007,rivate static boolean isReturnExpressBlock(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1008,f (n.isBlock()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1009,f (n.hasOneChild()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1010,ode first = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1011,f (first.isReturn()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1012,eturn first.hasOneChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1017,eturn false;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1021, @return Whether the node is a single return statement.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1023,rivate static boolean isReturnExpression(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1024,f (n.isReturn()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1025,eturn n.hasOneChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1027,eturn false;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1031, @return The expression that is part of the return.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1033,rivate static Node getBlockReturnExpression(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1034,reconditions.checkState(isReturnExpressBlock(n));
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1035,eturn n.getFirstChild().getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1039, @return Whether the node is a block with a single statement that is
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1040,     a VAR declaration of a single variable.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1042,rivate static boolean isVarBlock(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1043,f (n.isBlock()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1044,f (n.hasOneChild()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1045,ode first = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1046,f (first.isVar()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1047,eturn first.hasOneChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1052,eturn false;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1056, @return The var node.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1058,rivate static Node getBlockVar(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1059,reconditions.checkState(isVarBlock(n));
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1060,eturn n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1064, Does a statement consume a 'dangling else'? A statement consumes
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1065, a 'dangling else' if an 'else' token following the statement
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1066, would be considered by the parser to be part of the statement.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1068,rivate static boolean consumesDanglingElse(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1069,hile (true) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1070,witch (n.getType()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1071,ase Token.IF:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1072,f (n.getChildCount() < 3) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1073,eturn true;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1075,/ This IF node has no else clause.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1076, = n.getLastChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1077,ontinue;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1078,ase Token.WITH:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1079,ase Token.WHILE:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1080,ase Token.FOR:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1081, = n.getLastChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1082,ontinue;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1083,efault:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1084,eturn false;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1090," Whether the node type has lower precedence than ""precedence"""
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1092,"rivate static boolean isLowerPrecedence(Node n, final int precedence) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1093,eturn NodeUtil.precedence(n.getType()) < precedence;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1097, Does the expression contain a property assignment?
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1099,rivate static boolean isPropertyAssignmentInExpression(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1100,redicate<Node> isPropertyAssignmentInExpressionPredicate =
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1101,ew Predicate<Node>() {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1102,Override
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1103,ublic boolean apply(Node input) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1104,eturn (input.isGetProp() &&
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1105,nput.getParent().isAssign());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1109,"eturn NodeUtil.has(n, isPropertyAssignmentInExpressionPredicate,"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1110,ONT_TRAVERSE_FUNCTIONS_PREDICATE);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1113,"rivate Node tryMinimizeCondition(Node n, boolean countLeadingNot) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1114, = tryMinimizeConditionOld(n);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1115,"eturn demorganMinimizeCondition(n, countLeadingNot);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1119,  Minimize the given conditional node according to De Morgan's Laws.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1120,    !(x && !y)  ==> !x || y
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1121,    (!a || !b || !c || !d)  ==>  !(a && b && c && d)
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1122,  etc.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1124," @param countLeadingNot When this is false, do not count a leading"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1125,  NOT in doing the minimization. i.e. Allow minimizations such as:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1126,    (!x || !y || z)  ==>  !(x && y && !z)
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1127,  This is useful in contexts such as IFs or HOOKs where subsequent
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1128,  optimizations can efficiently deal with leading NOTs.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1130, @param n The conditional node.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1131," @return The minimized version of n, or n if no minimization was possible."
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1133,"rivate Node demorganMinimizeCondition(Node n, boolean countLeadingNot) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1134,inimizedCondition minCond = MinimizedCondition.fromConditionNode(n);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1135,f (countLeadingNot ||
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1136,inCond.getLength() <= minCond.getNegativeLength()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1137,"eturn maybeReplaceNode(n, minCond.getNode());"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1138, else {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1139,"eturn maybeReplaceNode(n,"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1140,"ew Node(Token.NOT, minCond.getNegatedNode()));"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1144,"rivate Node maybeReplaceNode(Node lhs, Node rhs) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1145,f (lhs.isEquivalentTo(rhs)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1146,eturn lhs;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1148,ode parent = lhs.getParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1149,"arent.replaceChild(lhs, rhs);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1150,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1151,eturn rhs;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1154,** A class that represents a minimized conditional expression.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1155,"  Depending on the context, either the original conditional, or the"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1156,"  negation of the original conditional may be needed, so this class"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1157,  provides ways to access minimized versions of both of those ASTs.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1159,tatic class MinimizedCondition {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1160,rivate final Node positive;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1161,rivate final Node negative;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1163,"rivate MinimizedCondition(Node p, Node n) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1164,reconditions.checkArgument(p.getParent() == null);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1165,reconditions.checkArgument(n.getParent() == null);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1166,ositive = p;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1167,egative = n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1170,** Minimize the condition at the given node.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1172,  @param n The conditional expression tree to minimize.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1173,   This may be still connected to a tree and will be cloned as necessary.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1174,  @return A MinimizedCondition object representing that tree.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1176,tatic MinimizedCondition fromConditionNode(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1177,witch (n.getType()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1178,ase Token.NOT: {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1179,inimizedCondition subtree = fromConditionNode(n.getFirstChild());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1180,mmutableSet<Node> positiveAsts = ImmutableSet.of(
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1181,"egate(subtree.positive.cloneTree()),"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1182,ubtree.negative.cloneTree());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1183,mmutableSet<Node> negativeAsts = ImmutableSet.of(
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1184,"egate(subtree.negative),"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1185,ubtree.positive);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1186,eturn new MinimizedCondition(
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1187,"ollections.min(positiveAsts, AST_LENGTH_COMPARATOR),"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1188,"ollections.min(negativeAsts, AST_LENGTH_COMPARATOR));"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1190,ase Token.AND:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1191,ase Token.OR: {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1192,nt opType = n.getType();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1193,nt complementType = opType == Token.AND ? Token.OR : Token.AND;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1194,inimizedCondition leftSubtree = fromConditionNode(n.getFirstChild());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1195,inimizedCondition rightSubtree = fromConditionNode(n.getLastChild());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1196,mmutableSet<Node> positiveAsts = ImmutableSet.of(
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1197,"ew Node(opType,"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1198,"eftSubtree.positive.cloneTree(),"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1199,"ightSubtree.positive.cloneTree()).srcref(n),"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1200,"egate(new Node(complementType,"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1201,"eftSubtree.negative.cloneTree(),"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1202,ightSubtree.negative.cloneTree()).srcref(n)));
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1203,mmutableSet<Node> negativeAsts = ImmutableSet.of(
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1204,"egate(new Node(opType,"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1205,"eftSubtree.positive,"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1206,"ightSubtree.positive).srcref(n)),"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1207,"ew Node(complementType,"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1208,"eftSubtree.negative,"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1209,ightSubtree.negative).srcref(n));
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1210,eturn new MinimizedCondition(
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1211,"ollections.min(positiveAsts, AST_LENGTH_COMPARATOR),"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1212,"ollections.min(negativeAsts, AST_LENGTH_COMPARATOR));"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1214,efault:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1215,"eturn new MinimizedCondition(n.cloneTree(), negate(n.cloneTree()));"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1219,ode getNode() {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1220,eturn positive;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1223,ode getNegatedNode() {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1224,eturn negative;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1227,nt getLength() {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1228,eturn length(positive);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1231,nt getNegativeLength() {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1232,eturn length(negative);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1235,rivate static Node negate(Node node) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1236,reconditions.checkArgument(node.getParent() == null);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1237,nt complementOperator;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1238,witch (node.getType()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1239,efault:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1240,"eturn new Node(Token.NOT, node).srcref(node);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1241,ase Token.NOT:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1242,eturn node.removeFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1243,/ Otherwise a binary operator with a complement.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1244,ase Token.EQ:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1245,omplementOperator = Token.NE;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1246,reak;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1247,ase Token.NE:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1248,omplementOperator = Token.EQ;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1249,reak;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1250,ase Token.SHEQ:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1251,omplementOperator = Token.SHNE;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1252,reak;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1253,ase Token.SHNE:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1254,omplementOperator = Token.SHEQ;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1255,reak;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1257,/ Clone entire tree and just change operator.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1258,ode.setType(complementOperator);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1259,eturn node;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1262,rivate static final Comparator<Node> AST_LENGTH_COMPARATOR =
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1263,ew Comparator<Node>() {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1264,Override
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1265,"ublic int compare(Node o1, Node o2) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1266,eturn length(o1) - length(o2);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1270,** Return the number of characters in the textual representation of
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1271,"  the given tree that will be devoted to negation, or parentheses."
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1272,  Since these are the only characters that flipping a condition
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1273,"  according to De Morgan's rule can affect, these are the only ones"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1274,  we count.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1275,  @param node The tree whose length should be checked.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1276,  @return The number of negations and parentheses in the tree.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1278,tatic int length(Node node) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1279,nt result = 0;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1280,f (node.isNot()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1281,esult++;  // One negation needed.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1283,or (Node n = node.getFirstChild(); n != null; n = n.getNext()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1284,f (NodeUtil.precedenceWithDefault(n.getType())
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1285, NodeUtil.precedenceWithDefault(node.getType())) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1286,esult += 2;  // One pair of parentheses needed.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1288,esult += length(n);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1290,eturn result;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1296," Try to minimize conditions expressions, as there are additional"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1297, assumptions that can be made when it is known that the final result
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1298, is a boolean.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1300, The following transformations are done recursively:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1301,   !(x||y) --> !x&&!y
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1302,   !(x&&y) --> !x||!y
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1303,   !!x     --> x
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1304, Thus:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1305,   !(x&&!y) --> !x||!!y --> !x||y
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1307,"   Returns the replacement for n, or the original if no change was made"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1309,rivate Node tryMinimizeConditionOld(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1310,ode parent = n.getParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1312,witch (n.getType()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1313,ase Token.OR:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1314,ase Token.AND: {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1315,ode left = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1316,ode right = n.getLastChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1318,/ Because the expression is in a boolean context minimize
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1319,"/ the children, this can't be done in the general case."
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1320,eft = tryMinimizeConditionOld(left);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1321,ight = tryMinimizeConditionOld(right);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1323,/ Remove useless conditionals
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1324,/ Handle four cases:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1325,/   x || false --> x
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1326,/   x || true  --> true
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1327,/   x && true --> x
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1328,/   x && false  --> false
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1329,ernaryValue rightVal = NodeUtil.getPureBooleanValue(right);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1330,f (NodeUtil.getPureBooleanValue(right) != TernaryValue.UNKNOWN) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1331,nt type = n.getType();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1332,ode replacement = null;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1333,oolean rval = rightVal.toBoolean(true);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1335,/ (x || FALSE) => x
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1336,/ (x && TRUE) => x
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1337,f (type == Token.OR && !rval ||
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1338,ype == Token.AND && rval) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1339,eplacement = left;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1340, else if (!mayHaveSideEffects(left)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1341,eplacement = right;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1344,f (replacement != null) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1345,.detachChildren();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1346,"arent.replaceChild(n, replacement);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1347,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1348,eturn replacement;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1351,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1354,ase Token.HOOK: {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1355,ode condition = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1356,ode trueNode = n.getFirstChild().getNext();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1357,ode falseNode = n.getLastChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1359,/ Because the expression is in a boolean context minimize
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1360,"/ the result children, this can't be done in the general case."
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1361,/ The condition is handled in the general case in #optimizeSubtree
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1362,rueNode = tryMinimizeConditionOld(trueNode);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1363,alseNode = tryMinimizeConditionOld(falseNode);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1365,/ Handle four cases:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1366,/   x ? true : false --> x
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1367,/   x ? false : true --> !x
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1368,/   x ? true : y     --> x || y
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1369,/   x ? y : false    --> x && y
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1370,ode replacement = null;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1371,ernaryValue trueNodeVal = NodeUtil.getPureBooleanValue(trueNode);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1372,ernaryValue falseNodeVal = NodeUtil.getPureBooleanValue(falseNode);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1373,f (trueNodeVal == TernaryValue.TRUE
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1374,& falseNodeVal == TernaryValue.FALSE) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1375,"/ Remove useless conditionals, keep the condition"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1376,ondition.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1377,eplacement = condition;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1378, else if (trueNodeVal == TernaryValue.FALSE
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1379,& falseNodeVal == TernaryValue.TRUE) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1380,"/ Remove useless conditionals, keep the condition"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1381,ondition.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1382,eplacement = IR.not(condition);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1383, else if (trueNodeVal == TernaryValue.TRUE) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1384,/ Remove useless true case.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1385,.detachChildren();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1386,"eplacement = IR.or(condition, falseNode);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1387, else if (falseNodeVal == TernaryValue.FALSE) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1388,/ Remove useless false case
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1389,.detachChildren();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1390,"eplacement = IR.and(condition, trueNode);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1393,f (replacement != null) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1394,"arent.replaceChild(n, replacement);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1395, = replacement;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1396,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1399,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1402,efault:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1403,/ while(true) --> while(1)
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1404,ernaryValue nVal = NodeUtil.getPureBooleanValue(n);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1405,f (nVal != TernaryValue.UNKNOWN) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1406,oolean result = nVal.toBoolean(true);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1407,nt equivalentResult = result ? 1 : 0;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1408,"eturn maybeReplaceChildWithNumber(n, parent, equivalentResult);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1410,/ We can't do anything else currently.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1411,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1416, Replaces a node with a number node if the new number node is not equivalent
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1417, to the current node.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1419," Returns the replacement for n if it was replaced, otherwise returns n."
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1421,"rivate Node maybeReplaceChildWithNumber(Node n, Node parent, int num) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1422,ode newNode = IR.number(num);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1423,f (!newNode.isEquivalentTo(n)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1424,"arent.replaceChild(n, newNode);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1425,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1427,eturn newNode;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1430,eturn n;
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,31, goodies in {@link PeepholeSubstituteAlternateSyntax}.
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,31,* goodies in {@link PeepholeMinimizeConditions}.
False,test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java,test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java,49,"ew PeepholeSubstituteAlternateSyntax(true),"
True,test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java,test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java,49,"new PeepholeMinimizeConditions(true),"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,38,@Override
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,166,"new PeepholeMinimizeConditions(late),"
True,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,50,"new PeepholeMinimizeConditions(late),"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,2,* Copyright 2004 The Closure Compiler Authors.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,19,import com.google.javascript.jscomp.PeepholeMinimizeConditions.MinimizedCondition;
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,20,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,23,* Tests for {@link PeepholeMinimizeConditions} in isolation.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,24,* Tests for the interaction of multiple peephole passes are in
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,25,* PeepholeIntegrationTest.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,27,public class PeepholeMinimizeConditionsTest extends CompilerTestCase {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,29,private boolean late = true;
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,31,// TODO(user): Remove this when we no longer need to do string comparison.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,32,private PeepholeMinimizeConditionsTest(boolean compareAsTree) {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,33,"super("""", compareAsTree);"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,36,public PeepholeMinimizeConditionsTest() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,37,"super("""");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,40,@Override
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,41,public void setUp() throws Exception {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,42,late = true;
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,43,super.setUp();
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,44,enableLineNumberCheck(true);
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,45,disableNormalize();
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,48,@Override
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,49,public CompilerPass getProcessor(final Compiler compiler) {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,50,PeepholeOptimizationsPass peepholePass = new PeepholeOptimizationsPass(
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,51,"compiler, new PeepholeMinimizeConditions(late));"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,52,peepholePass.setRetraverseOnChange(false);
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,53,return peepholePass;
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,56,@Override
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,57,protected int getNumRepetitions() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,58,return 1;
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,61,private void foldSame(String js) {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,62,testSame(js);
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,65,"private void fold(String js, String expected) {"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,66,"test(js, expected);"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,69,"void assertResultString(String js, String expected) {"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,70,"assertResultString(js, expected, false);"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,73,// TODO(user): This is same as fold() except it uses string comparison. Any
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,74,// test that needs tell us where a folding is constructing an invalid AST.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,75,"void assertResultString(String js, String expected, boolean normalize) {"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,76,PeepholeMinimizeConditionsTest scTest
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,77,= new PeepholeMinimizeConditionsTest(false);
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,79,if (normalize) {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,80,scTest.enableNormalize();
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,81,} else {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,82,scTest.disableNormalize();
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,85,"scTest.test(js, expected);"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,88,/** Check that removing blocks with 1 child works */
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,89,public void testFoldOneChildBlocks() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,90,late = false;
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,91,"fold(""function f(){if(x)a();x=3}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,92,"""function f(){x&&a();x=3}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,93,"fold(""function f(){if(x){a()}x=3}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,94,"""function f(){x&&a();x=3}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,95,"fold(""function f(){if(x){return 3}}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,96,"""function f(){if(x)return 3}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,97,"fold(""function f(){if(x){a()}}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,98,"""function f(){x&&a()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,99,"fold(""function f(){if(x){throw 1}}"", ""function f(){if(x)throw 1;}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,101,// Try it out with functions
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,102,"fold(""function f(){if(x){foo()}}"", ""function f(){x&&foo()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,103,"fold(""function f(){if(x){foo()}else{bar()}}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,104,"""function f(){x?foo():bar()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,106,// Try it out with properties and methods
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,107,"fold(""function f(){if(x){a.b=1}}"", ""function f(){if(x)a.b=1}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,108,"fold(""function f(){if(x){a.b*=1}}"", ""function f(){x&&(a.b*=1)}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,109,"fold(""function f(){if(x){a.b+=1}}"", ""function f(){x&&(a.b+=1)}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,110,"fold(""function f(){if(x){++a.b}}"", ""function f(){x&&++a.b}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,111,"fold(""function f(){if(x){a.foo()}}"", ""function f(){x&&a.foo()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,113,// Try it out with throw/catch/finally [which should not change]
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,114,"fold(""function f(){try{foo()}catch(e){bar(e)}finally{baz()}}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,115,"""function f(){try{foo()}catch(e){bar(e)}finally{baz()}}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,117,// Try it out with switch statements
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,118,"fold(""function f(){switch(x){case 1:break}}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,119,"""function f(){switch(x){case 1:break}}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,121,// Do while loops stay in a block if that's where they started
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,122,"fold(""function f(){if(e1){do foo();while(e2)}else foo2()}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,123,"""function f(){if(e1){do foo();while(e2)}else foo2()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,124,// Test an obscure case with do and while
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,125,"fold(""if(x){do{foo()}while(y)}else bar()"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,126,"""if(x){do foo();while(y)}else bar()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,128,// Play with nested IFs
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,129,"fold(""function f(){if(x){if(y)foo()}}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,130,"""function f(){x&&y&&foo()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,131,"fold(""function f(){if(x){if(y)foo();else bar()}}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,132,"""function f(){x&&(y?foo():bar())}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,133,"fold(""function f(){if(x){if(y)foo()}else bar()}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,134,"""function f(){x?y&&foo():bar()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,135,"fold(""function f(){if(x){if(y)foo();else bar()}else{baz()}}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,136,"""function f(){x?y?foo():bar():baz()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,138,"fold(""if(e1){while(e2){if(e3){foo()}}}else{bar()}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,139,"""if(e1)while(e2)e3&&foo();else bar()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,141,"fold(""if(e1){with(e2){if(e3){foo()}}}else{bar()}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,142,"""if(e1)with(e2)e3&&foo();else bar()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,144,"fold(""if(a||b){if(c||d){var x;}}"", ""if(a||b)if(c||d)var x"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,145,"fold(""if(x){ if(y){var x;}else{var z;} }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,146,"""if(x)if(y)var x;else var z"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,148,// NOTE - technically we can remove the blocks since both the parent
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,149,// and child have elses. But we don't since it causes ambiguities in
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,150,// some cases where not all descendent ifs having elses
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,151,"fold(""if(x){ if(y){var x;}else{var z;} }else{var w}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,152,"""if(x)if(y)var x;else var z;else var w"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,153,"fold(""if (x) {var x;}else { if (y) { var y;} }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,154,"""if(x)var x;else if(y)var y"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,156,// Here's some of the ambiguous cases
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,157,"fold(""if(a){if(b){f1();f2();}else if(c){f3();}}else {if(d){f4();}}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,158,"""if(a)if(b){f1();f2()}else c&&f3();else d&&f4()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,160,"fold(""function f(){foo()}"", ""function f(){foo()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,161,"fold(""switch(x){case y: foo()}"", ""switch(x){case y:foo()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,162,"fold(""try{foo()}catch(ex){bar()}finally{baz()}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,163,"""try{foo()}catch(ex){bar()}finally{baz()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,166,/** Try to minimize returns */
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,167,public void testFoldReturns() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,168,"fold(""function f(){if(x)return 1;else return 2}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,169,"""function f(){return x?1:2}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,170,"fold(""function f(){if(x)return 1;return 2}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,171,"""function f(){return x?1:2}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,172,"fold(""function f(){if(x)return;return 2}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,173,"""function f(){return x?void 0:2}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,174,"fold(""function f(){if(x)return 1+x;else return 2-x}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,175,"""function f(){return x?1+x:2-x}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,176,"fold(""function f(){if(x)return 1+x;return 2-x}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,177,"""function f(){return x?1+x:2-x}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,178,"fold(""function f(){if(x)return y += 1;else return y += 2}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,179,"""function f(){return x?(y+=1):(y+=2)}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,181,"fold(""function f(){if(x)return;else return 2-x}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,182,"""function f(){if(x);else return 2-x}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,183,"fold(""function f(){if(x)return;return 2-x}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,184,"""function f(){return x?void 0:2-x}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,185,"fold(""function f(){if(x)return x;else return}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,186,"""function f(){if(x)return x;{}}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,187,"fold(""function f(){if(x)return x;return}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,188,"""function f(){if(x)return x}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,190,"foldSame(""function f(){for(var x in y) { return x.y; } return k}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,193,public void testCombineIfs1() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,194,"fold(""function f() {if (x) return 1; if (y) return 1}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,195,"""function f() {if (x||y) return 1;}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,196,"fold(""function f() {if (x) return 1; if (y) foo(); else return 1}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,197,"""function f() {if ((!x)&&y) foo(); else return 1;}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,200,public void testCombineIfs2() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,201,// combinable but not yet done
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,202,"foldSame(""function f() {if (x) throw 1; if (y) throw 1}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,203,"// Can't combine, side-effect"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,204,"fold(""function f(){ if (x) g(); if (y) g() }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,205,"""function f(){ x&&g(); y&&g() }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,206,"// Can't combine, side-effect"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,207,"fold(""function f(){ if (x) y = 0; if (y) y = 0; }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,208,"""function f(){ x&&(y = 0); y&&(y = 0); }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,211,public void testCombineIfs3() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,212,"foldSame(""function f() {if (x) return 1; if (y) {g();f()}}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,216,/** Try to minimize assignments */
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,217,public void testFoldAssignments() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,218,"fold(""function f(){if(x)y=3;else y=4;}"", ""function f(){y=x?3:4}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,219,"fold(""function f(){if(x)y=1+a;else y=2+a;}"", ""function f(){y=x?1+a:2+a}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,221,// and operation assignments
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,222,"fold(""function f(){if(x)y+=1;else y+=2;}"", ""function f(){y+=x?1:2}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,223,"fold(""function f(){if(x)y-=1;else y-=2;}"", ""function f(){y-=x?1:2}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,224,"fold(""function f(){if(x)y%=1;else y%=2;}"", ""function f(){y%=x?1:2}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,225,"fold(""function f(){if(x)y|=1;else y|=2;}"", ""function f(){y|=x?1:2}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,227,"// sanity check, don't fold if the 2 ops don't match"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,228,"foldSame(""function f(){x ? y-=1 : y+=2}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,230,"// sanity check, don't fold if the 2 LHS don't match"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,231,"foldSame(""function f(){x ? y-=1 : z-=1}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,233,"// sanity check, don't fold if there are potential effects"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,234,"foldSame(""function f(){x ? y().a=3 : y().a=4}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,237,public void testRemoveDuplicateStatements() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,238,"fold(""if (a) { x = 1; x++ } else { x = 2; x++ }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,239,"""x=(a) ? 1 : 2; x++"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,240,"fold(""if (a) { x = 1; x++; y += 1; z = pi; }"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,241,""" else  { x = 2; x++; y += 1; z = pi; }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,242,"""x=(a) ? 1 : 2; x++; y += 1; z = pi;"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,243,"fold(""function z() {"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,244,"""if (a) { foo(); return !0 } else { goo(); return !0 }"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,246,"""function z() {(a) ? foo() : goo(); return !0}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,247,"fold(""function z() {if (a) { foo(); x = true; return true "" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,248,"""} else { goo(); x = true; return true }}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,249,"""function z() {(a) ? foo() : goo(); x = true; return true}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,251,"fold(""function z() {"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,252,"""  if (a) { bar(); foo(); return true }"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,253,"""    else { bar(); goo(); return true }"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,255,"""function z() {"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,256,"""  if (a) { bar(); foo(); }"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,257,"""    else { bar(); goo(); }"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,258,"""  return true;"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,262,public void testNotCond() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,263,"fold(""function f(){if(!x)foo()}"", ""function f(){x||foo()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,264,"fold(""function f(){if(!x)b=1}"", ""function f(){x||(b=1)}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,265,"fold(""if(!x)z=1;else if(y)z=2"", ""if(x){y&&(z=2);}else{z=1;}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,266,"fold(""if(x)y&&(z=2);else z=1;"", ""x ? y&&(z=2) : z=1"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,267,"foldSame(""function f(){if(!(x=1))a.b=1}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,270,public void testAndParenthesesCount() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,271,"fold(""function f(){if(x||y)a.foo()}"", ""function f(){(x||y)&&a.foo()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,272,"fold(""function f(){if(x.a)x.a=0}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,273,"""function f(){x.a&&(x.a=0)}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,274,"foldSame(""function f(){if(x()||y()){x()||y()}}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,277,public void testFoldLogicalOpStringCompare() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,278,// side-effects
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,279,// There is two way to parse two &&'s and both are correct.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,280,"assertResultString(""if(foo() && false) z()"", ""foo()&&0&&z()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,283,public void testFoldNot() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,284,"fold(""while(!(x==y)){a=b;}"" , ""while(x!=y){a=b;}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,285,"fold(""while(!(x!=y)){a=b;}"" , ""while(x==y){a=b;}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,286,"fold(""while(!(x===y)){a=b;}"", ""while(x!==y){a=b;}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,287,"fold(""while(!(x!==y)){a=b;}"", ""while(x===y){a=b;}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,288,// Because !(x<NaN) != x>=NaN don't fold < and > cases.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,289,"foldSame(""while(!(x>y)){a=b;}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,290,"foldSame(""while(!(x>=y)){a=b;}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,291,"foldSame(""while(!(x<y)){a=b;}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,292,"foldSame(""while(!(x<=y)){a=b;}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,293,"foldSame(""while(!(x<=NaN)){a=b;}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,295,// NOT forces a boolean context
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,296,"fold(""x = !(y() && true)"", ""x = !y()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,297,// This will be further optimized by PeepholeFoldConstants.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,298,"fold(""x = !true"", ""x = !1"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,301,public void testMinimizeExprCondition() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,302,"fold(""(x ? true : false) && y()"", ""x&&y()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,303,"fold(""(x ? false : true) && y()"", ""(!x)&&y()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,304,"fold(""(x ? true : y) && y()"", ""(x || y)&&y()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,305,"fold(""(x ? y : false) && y()"", ""(x && y)&&y()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,306,"fold(""(x && true) && y()"", ""x && y()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,307,"fold(""(x && false) && y()"", ""0&&y()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,308,"fold(""(x || true) && y()"", ""1&&y()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,309,"fold(""(x || false) && y()"", ""x&&y()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,312,public void testMinimizeWhileCondition() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,313,"// This test uses constant folding logic, so is only here for completeness."
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,314,"fold(""while(!!true) foo()"", ""while(1) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,315,// These test tryMinimizeCondition
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,316,"fold(""while(!!x) foo()"", ""while(x) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,317,"fold(""while(!(!x&&!y)) foo()"", ""while(x||y) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,318,"fold(""while(x||!!y) foo()"", ""while(x||y) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,319,"fold(""while(!(!!x&&y)) foo()"", ""while(!x||!y) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,320,"fold(""while(!(!x&&y)) foo()"", ""while(x||!y) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,321,"fold(""while(!(x||!y)) foo()"", ""while(!x&&y) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,322,"fold(""while(!(x||y)) foo()"", ""while(!x&&!y) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,323,"fold(""while(!(!x||y-z)) foo()"", ""while(x&&!(y-z)) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,324,"fold(""while(!(!(x/y)||z+w)) foo()"", ""while(x/y&&!(z+w)) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,325,"foldSame(""while(!(x+y||z)) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,326,"foldSame(""while(!(x&&y*z)) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,327,"fold(""while(!(!!x&&y)) foo()"", ""while(!x||!y) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,328,"fold(""while(x&&!0) foo()"", ""while(x) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,329,"fold(""while(x||!1) foo()"", ""while(x) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,330,"fold(""while(!((x,y)&&z)) foo()"", ""while(!(x,y)||!z) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,333,public void testMinimizeDemorganRemoveLeadingNot() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,334,"fold(""if(!(!a||!b)&&c) foo()"", ""((a&&b)&&c)&&foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,335,"fold(""if(!(x&&y)) foo()"", ""x&&y||foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,336,"fold(""if(!(x||y)) foo()"", ""(x||y)||foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,339,public void testMinimizeDemorgan1() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,340,"fold(""if(!a&&!b)foo()"", ""(a||b)||foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,343,public void testMinimizeDemorgan3() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,344,"fold(""if((!a||!b)&&(c||d)) foo()"", ""(a&&b||!c&&!d)||foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,347,public void testMinimizeDemorgan5() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,348,"fold(""if((!a||!b)&&c) foo()"", ""(a&&b||!c)||foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,351,public void testMinimizeDemorgan11() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,352,"fold(""if (x && (y===2 || !f()) && (y===3 || !h())) foo()"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,353,"""(!x || y!==2 && f() || y!==3 && h()) || foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,356,public void testMinimizeDemorgan20() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,357,"fold(""if (0===c && (2===a || 1===a)) f(); else g()"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,358,"""if (0!==c || 2!==a && 1!==a) g(); else f()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,359,"fold(""if (0!==c || 2!==a && 1!==a) g(); else f()"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,360,"""(0!==c || 2!==a && 1!==a) ? g() : f()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,363,public void testSwapHook() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,364,"fold(""!x ? foo() : bar()"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,365,"""x ? bar() : foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,368,public void testMinimizeDemorgan21() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,369,"fold(""if (0===c && (2===a || 1===a)) f()"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,370,"""(0!==c || 2!==a && 1!==a) || f()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,373,public void testMinimizeAndOr1() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,374,"fold(""if ((!a || !b) && (d || e)) f()"", ""(a&&b || !d&&!e) || f()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,377,public Node parseExpr(String input) {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,378,Node block = parseExpectedJs(input);
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,379,Node script = block.getFirstChild();
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,380,Node exprResult = script.getFirstChild();
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,381,return exprResult.getFirstChild();
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,384,"public void minimizeCond(String input, String positive, String negative) {"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,385,Node inputNode = parseExpr(input);
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,386,MinimizedCondition result = PeepholeMinimizeConditions
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,387,.MinimizedCondition.fromConditionNode(inputNode);
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,388,Node positiveNode = parseExpr(positive);
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,389,Node negativeNode = parseExpr(negative);
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,390,if (!result.getNode().isEquivalentTo(positiveNode)) {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,391,"fail(""Not equal:\n"" + result.getNode().toStringTree()"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,392,"+ ""and:\n"" + positiveNode.toStringTree());"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,394,if (!result.getNegatedNode().isEquivalentTo(negativeNode)) {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,395,"fail(""Not equal:\n"" + result.getNegatedNode().toStringTree()"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,396,"+ ""and:\n"" + negativeNode.toStringTree());"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,400,public void testTryMinimizeCondition1() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,401,"minimizeCond(""x"", ""x"", ""!x"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,404,public void testTryMinimizeCondition2() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,405,"minimizeCond(""!x"", ""!x"", ""x"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,408,public void testTryMinimizeCondition3() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,409,"minimizeCond(""x || y"", ""x || y"", ""!x && !y"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,412,public void testTryMinimizeCondition4() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,413,"minimizeCond(""x && y"", ""x && y"", ""!x || !y"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,416,public void testTryMinimizeCondition5() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,417,"minimizeCond(""w && x && y && z"", ""w && x && y && z"", ""!(w && x && y && z)"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,420,public void testMinimizeCondDemorgan() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,421,"minimizeCond(""x && (y===2 || !f()) && (y===3 || !h())"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,422,"""x && !((y!==2 && f()) || (y!==3 && h()))"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,423,"""!x || (y!==2 && f()) || (y!==3 && h())"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,426,public void testMinimizeForCondition() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,427,"// This test uses constant folding logic, so is only here for completeness."
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,428,"// These could be simplified to ""for(;;) ..."""
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,429,"fold(""for(;!!true;) foo()"", ""for(;1;) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,430,// Don't bother with FOR inits as there are normalized out.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,431,"fold(""for(!!true;;) foo()"", ""for(!0;;) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,433,// These test tryMinimizeCondition
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,434,"fold(""for(;!!x;) foo()"", ""for(;x;) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,436,// sanity check
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,437,"foldSame(""for(a in b) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,438,"foldSame(""for(a in {}) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,439,"foldSame(""for(a in []) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,440,"fold(""for(a in !!true) foo()"", ""for(a in !0) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,443,public void testMinimizeCondition_example1() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,444,// Based on a real failing code sample.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,445,"fold(""if(!!(f() > 20)) {foo();foo()}"", ""if(f() > 20){foo();foo()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,448,public void testFoldLoopBreakLate() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,449,late = true;
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,450,"fold(""for(;;) if (a) break"", ""for(;!a;);"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,451,"foldSame(""for(;;) if (a) { f(); break }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,452,"fold(""for(;;) if (a) break; else f()"", ""for(;!a;) { { f(); } }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,453,"fold(""for(;a;) if (b) break"", ""for(;a && !b;);"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,454,"fold(""for(;a;) { if (b) break; if (c) break; }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,455,"""for(;(a && !b);) if (c) break;"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,456,"fold(""for(;(a && !b);) if (c) break;"", ""for(;(a && !b) && !c;);"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,458,// 'while' is normalized to 'for'
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,459,enableNormalize(true);
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,460,"fold(""while(true) if (a) break"", ""for(;1&&!a;);"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,463,public void testFoldLoopBreakEarly() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,464,late = false;
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,465,"foldSame(""for(;;) if (a) break"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,466,"foldSame(""for(;;) if (a) { f(); break }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,467,"foldSame(""for(;;) if (a) break; else f()"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,468,"foldSame(""for(;a;) if (b) break"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,469,"foldSame(""for(;a;) { if (b) break; if (c) break; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,471,"foldSame(""while(1) if (a) break"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,472,enableNormalize(true);
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,473,"foldSame(""while(1) if (a) break"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,476,public void testFoldConditionalVarDeclaration() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,477,"fold(""if(x) var y=1;else y=2"", ""var y=x?1:2"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,478,"fold(""if(x) y=1;else var y=2"", ""var y=x?1:2"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,480,"foldSame(""if(x) var y = 1; z = 2"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,481,"foldSame(""if(x||y) y = 1; var z = 2"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,483,"foldSame(""if(x) { var y = 1; print(y)} else y = 2 "");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,484,"foldSame(""if(x) var y = 1; else {y = 2; print(y)}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,487,public void testFoldIfWithLowerOperatorsInside() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,488,"fold(""if (x + (y=5)) z && (w,z);"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,489,"""x + (y=5) && z && (w,z)"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,490,"fold(""if (!(x+(y=5))) z && (w,z);"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,491,"""x + (y=5) || z && (w,z)"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,492,"fold(""if (x + (y=5)) if (z && (w,z)) for(;;) foo();"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,493,"""if (x + (y=5) && z && (w,z)) for(;;) foo();"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,496,public void testFoldReturnResult() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,497,"foldSame(""function f(){return false;}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,498,"foldSame(""function f(){return null;}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,499,"fold(""function f(){return void 0;}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,500,"""function f(){return}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,501,"fold(""function f(){return;}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,502,"""function f(){}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,503,"foldSame(""function f(){return void foo();}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,504,"fold(""function f(){return undefined;}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,505,"""function f(){return}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,506,"fold(""function f(){if(a()){return undefined;}}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,507,"""function f(){if(a()){return}}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,510,public void testSubsituteReturn() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,512,"fold(""function f() { while(x) { return }}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,513,"""function f() { while(x) { break }}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,515,"foldSame(""function f() { while(x) { return 5 } }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,517,"foldSame(""function f() { a: { return 5 } }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,519,"fold(""function f() { while(x) { return 5}  return 5}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,520,"""function f() { while(x) { break }    return 5}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,522,"fold(""function f() { while(x) { return x}  return x}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,523,"""function f() { while(x) { break }    return x}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,525,"fold(""function f() { while(x) { if (y) { return }}}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,526,"""function f() { while(x) { if (y) { break  }}}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,528,"fold(""function f() { while(x) { if (y) { return }} return}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,529,"""function f() { while(x) { if (y) { break  }}}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,531,"fold(""function f() { while(x) { if (y) { return 5 }} return 5}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,532,"""function f() { while(x) { if (y) { break    }} return 5}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,534,// It doesn't matter if x is changed between them. We are still returning
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,535,// x at whatever x value current holds. The whole x = 1 is skipped.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,536,"fold(""function f() { while(x) { if (y) { return x } x = 1} return x}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,537,"""function f() { while(x) { if (y) { break    } x = 1} return x}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,539,// RemoveUnreachableCode would take care of the useless breaks.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,540,"fold(""function f() { while(x) { if (y) { return x } return x} return x}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,541,"""function f() { while(x) { if (y) {} break }return x}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,543,// A break here only breaks out of the inner loop.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,544,"foldSame(""function f() { while(x) { while (y) { return } } }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,546,"foldSame(""function f() { while(1) { return 7}  return 5}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,549,"foldSame(""function f() {"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,550,"""  try { while(x) {return f()}} catch (e) { } return f()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,552,"foldSame(""function f() {"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,553,"""  try { while(x) {return f()}} finally {alert(1)} return f()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,556,// Both returns has the same handler
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,557,"fold(""function f() {"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,558,"""  try { while(x) { return f() } return f() } catch (e) { } }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,559,"""function f() {"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,560,"""  try { while(x) { break } return f() } catch (e) { } }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,562,// We can't fold this because it'll change the order of when foo is called.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,563,"foldSame(""function f() {"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,564,"""  try { while(x) { return foo() } } finally { alert(1) } ""  +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,565,"""  return foo()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,567,"// This is fine, we have no side effect in the return value."
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,568,"fold(""function f() {"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,569,"""  try { while(x) { return 1 } } finally { alert(1) } return 1}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,570,"""function f() {"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,571,"""  try { while(x) { break    } } finally { alert(1) } return 1}"""
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,574,"foldSame(""function f() { try{ return a } finally { a = 2 } return a; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,576,fold(
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,577,"""function f() { switch(a){ case 1: return a; default: g();} return a;}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,578,"""function f() { switch(a){ case 1: break; default: g();} return a; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,581,public void testSubsituteBreakForThrow() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,583,"foldSame(""function f() { while(x) { throw Error }}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,585,"fold(""function f() { while(x) { throw Error } throw Error }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,586,"""function f() { while(x) { break } throw Error}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,587,"foldSame(""function f() { while(x) { throw Error(1) } throw Error(2)}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,588,"foldSame(""function f() { while(x) { throw Error(1) } return Error(2)}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,590,"foldSame(""function f() { while(x) { throw 5 } }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,592,"foldSame(""function f() { a: { throw 5 } }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,594,"fold(""function f() { while(x) { throw 5}  throw 5}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,595,"""function f() { while(x) { break }   throw 5}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,597,"fold(""function f() { while(x) { throw x}  throw x}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,598,"""function f() { while(x) { break }   throw x}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,600,"foldSame(""function f() { while(x) { if (y) { throw Error }}}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,602,"fold(""function f() { while(x) { if (y) { throw Error }} throw Error}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,603,"""function f() { while(x) { if (y) { break }} throw Error}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,605,"fold(""function f() { while(x) { if (y) { throw 5 }} throw 5}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,606,"""function f() { while(x) { if (y) { break    }} throw 5}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,608,// It doesn't matter if x is changed between them. We are still throwing
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,609,// x at whatever x value current holds. The whole x = 1 is skipped.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,610,"fold(""function f() { while(x) { if (y) { throw x } x = 1} throw x}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,611,"""function f() { while(x) { if (y) { break    } x = 1} throw x}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,613,// RemoveUnreachableCode would take care of the useless breaks.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,614,"fold(""function f() { while(x) { if (y) { throw x } throw x} throw x}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,615,"""function f() { while(x) { if (y) {} break }throw x}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,617,// A break here only breaks out of the inner loop.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,618,"foldSame(""function f() { while(x) { while (y) { throw Error } } }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,620,"foldSame(""function f() { while(1) { throw 7}  throw 5}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,623,"foldSame(""function f() {"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,624,"""  try { while(x) {throw f()}} catch (e) { } throw f()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,626,"foldSame(""function f() {"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,627,"""  try { while(x) {throw f()}} finally {alert(1)} throw f()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,630,// Both throws has the same handler
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,631,"fold(""function f() {"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,632,"""  try { while(x) { throw f() } throw f() } catch (e) { } }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,633,"""function f() {"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,634,"""  try { while(x) { break } throw f() } catch (e) { } }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,636,// We can't fold this because it'll change the order of when foo is called.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,637,"foldSame(""function f() {"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,638,"""  try { while(x) { throw foo() } } finally { alert(1) } ""  +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,639,"""  throw foo()}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,641,"// This is fine, we have no side effect in the throw value."
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,642,"fold(""function f() {"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,643,"""  try { while(x) { throw 1 } } finally { alert(1) } throw 1}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,644,"""function f() {"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,645,"""  try { while(x) { break    } } finally { alert(1) } throw 1}"""
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,648,"foldSame(""function f() { try{ throw a } finally { a = 2 } throw a; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,650,fold(
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,651,"""function f() { switch(a){ case 1: throw a; default: g();} throw a;}"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,652,"""function f() { switch(a){ case 1: break; default: g();} throw a; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,656,public void testRemoveDuplicateReturn() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,657,"fold(""function f() { return; }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,658,"""function f(){}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,659,"foldSame(""function f() { return a; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,660,"fold(""function f() { if (x) { return a } return a; }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,661,"""function f() { if (x) {} return a; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,662,foldSame(
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,663,"""function f() { try { if (x) { return a } } catch(e) {} return a; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,664,foldSame(
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,665,"""function f() { try { if (x) {} } catch(e) {} return 1; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,667,// finally clauses may have side effects
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,668,foldSame(
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,669,"""function f() { try { if (x) { return a } } finally { a++ } return a; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,670,// but they don't matter if the result doesn't have side effects and can't
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,671,// be affect by side-effects.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,672,"fold(""function f() { try { if (x) { return 1 } } finally {} return 1; }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,673,"""function f() { try { if (x) {} } finally {} return 1; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,675,"fold(""function f() { switch(a){ case 1: return a; } return a; }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,676,"""function f() { switch(a){ case 1: } return a; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,678,"fold(""function f() { switch(a){ "" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,679,"""  case 1: return a; case 2: return a; } return a; }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,680,"""function f() { switch(a){ "" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,681,"""  case 1: break; case 2: } return a; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,684,public void testRemoveDuplicateThrow() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,685,"foldSame(""function f() { throw a; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,686,"fold(""function f() { if (x) { throw a } throw a; }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,687,"""function f() { if (x) {} throw a; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,688,foldSame(
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,689,"""function f() { try { if (x) {throw a} } catch(e) {} throw a; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,690,foldSame(
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,691,"""function f() { try { if (x) {throw 1} } catch(e) {f()} throw 1; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,692,foldSame(
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,693,"""function f() { try { if (x) {throw 1} } catch(e) {f()} throw 1; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,694,foldSame(
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,695,"""function f() { try { if (x) {throw 1} } catch(e) {throw 1}}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,696,fold(
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,697,"""function f() { try { if (x) {throw 1} } catch(e) {throw 1} throw 1; }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,698,"""function f() { try { if (x) {throw 1} } catch(e) {} throw 1; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,700,// finally clauses may have side effects
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,701,foldSame(
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,702,"""function f() { try { if (x) { throw a } } finally { a++ } throw a; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,703,// but they don't matter if the result doesn't have side effects and can't
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,704,// be affect by side-effects.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,705,"fold(""function f() { try { if (x) { throw 1 } } finally {} throw 1; }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,706,"""function f() { try { if (x) {} } finally {} throw 1; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,708,"fold(""function f() { switch(a){ case 1: throw a; } throw a; }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,709,"""function f() { switch(a){ case 1: } throw a; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,711,"fold(""function f() { switch(a){ "" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,712,"""case 1: throw a; case 2: throw a; } throw a; }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,713,"""function f() { switch(a){ case 1: break; case 2: } throw a; }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,716,public void testNestedIfCombine() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,717,"fold(""if(x)if(y){while(1){}}"", ""if(x&&y){while(1){}}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,718,"fold(""if(x||z)if(y){while(1){}}"", ""if((x||z)&&y){while(1){}}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,719,"fold(""if(x)if(y||z){while(1){}}"", ""if((x)&&(y||z)){while(1){}}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,720,"foldSame(""if(x||z)if(y||z){while(1){}}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,721,"fold(""if(x)if(y){if(z){while(1){}}}"", ""if(x&&y&&z){while(1){}}"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,724,public void testIssue291() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,725,"fold(""if (true) { f.onchange(); }"", ""if (1) f.onchange();"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,726,"foldSame(""if (f) { f.onchange(); }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,727,"foldSame(""if (f) { f.bar(); } else { f.onchange(); }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,728,"fold(""if (f) { f.bonchange(); }"", ""f && f.bonchange();"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,729,"foldSame(""if (f) { f['x'](); }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,732,public void testObjectLiteral() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,733,"test(""({})"", ""1"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,734,"test(""({a:1})"", ""1"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,735,"testSame(""({a:foo()})"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,736,"testSame(""({'a':foo()})"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,739,public void testArrayLiteral() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,740,"test(""([])"", ""1"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,741,"test(""([1])"", ""1"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,742,"test(""([a])"", ""1"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,743,"testSame(""([foo()])"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,746,public void testRemoveElseCause() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,747,"test(""function f() {"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,748,""" if(x) return 1;"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,749,""" else if(x) return 2;"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,750,""" else if(x) return 3 }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,751,"""function f() {"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,752,""" if(x) return 1;"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,753,"""{ if(x) return 2;"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,754,"""{ if(x) return 3 } } }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,757,public void testRemoveElseCause1() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,758,"test(""function f() { if (x) throw 1; else f() }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,759,"""function f() { if (x) throw 1; { f() } }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,762,public void testRemoveElseCause2() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,763,"test(""function f() { if (x) return 1; else f() }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,764,"""function f() { if (x) return 1; { f() } }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,765,"test(""function f() { if (x) return; else f() }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,766,"""function f() { if (x) {} else { f() } }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,767,// This case is handled by minimize exit points.
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,768,"testSame(""function f() { if (x) return; f() }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,771,public void testRemoveElseCause3() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,772,"testSame(""function f() { a:{if (x) break a; else f() } }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,773,"testSame(""function f() { if (x) { a:{ break a } } else f() }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,774,"testSame(""function f() { if (x) a:{ break a } else f() }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,777,public void testRemoveElseCause4() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,778,"testSame(""function f() { if (x) { if (y) { return 1; } } else f() }"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,781,public void testIssue925() {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,782,test(
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,783,"""if (x[--y] === 1) {\n"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,784,"""    x[y] = 0;\n"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,785,"""} else {\n"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,786,"""    x[y] = 1;\n"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,788,"""(x[--y] === 1) ? x[y] = 0 : x[y] = 1;"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,790,test(
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,791,"""if (x[--y]) {\n"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,792,"""    a = 0;\n"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,793,"""} else {\n"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,794,"""    a = 1;\n"" +"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,796,"""a = (x[--y]) ? 0 : 1;"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,798,"test(""if (x++) { x += 2 } else { x += 3 }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,799,"""x++ ? x += 2 : x += 3"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,801,"test(""if (x++) { x = x + 2 } else { x = x + 3 }"","
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,802,"""x = x++ ? x + 2 : x + 3"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,19,mport com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.MinimizedCondition;
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,20,mport com.google.javascript.rhino.Node;
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,96,** Check that removing blocks with 1 child works */
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,97,ublic void testFoldOneChildBlocks() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,98,ate = false;
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,99,"old(""function f(){if(x)a();x=3}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,100,"function f(){x&&a();x=3}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,101,"old(""function f(){if(x){a()}x=3}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,102,"function f(){x&&a();x=3}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,103,"old(""function f(){if(x){return 3}}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,104,"function f(){if(x)return 3}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,105,"old(""function f(){if(x){a()}}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,106,"function f(){x&&a()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,107,"old(""function f(){if(x){throw 1}}"", ""function f(){if(x)throw 1;}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,109,/ Try it out with functions
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,110,"old(""function f(){if(x){foo()}}"", ""function f(){x&&foo()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,111,"old(""function f(){if(x){foo()}else{bar()}}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,112,"function f(){x?foo():bar()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,114,/ Try it out with properties and methods
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,115,"old(""function f(){if(x){a.b=1}}"", ""function f(){if(x)a.b=1}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,116,"old(""function f(){if(x){a.b*=1}}"", ""function f(){x&&(a.b*=1)}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,117,"old(""function f(){if(x){a.b+=1}}"", ""function f(){x&&(a.b+=1)}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,118,"old(""function f(){if(x){++a.b}}"", ""function f(){x&&++a.b}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,119,"old(""function f(){if(x){a.foo()}}"", ""function f(){x&&a.foo()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,121,/ Try it out with throw/catch/finally [which should not change]
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,122,"old(""function f(){try{foo()}catch(e){bar(e)}finally{baz()}}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,123,"function f(){try{foo()}catch(e){bar(e)}finally{baz()}}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,125,/ Try it out with switch statements
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,126,"old(""function f(){switch(x){case 1:break}}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,127,"function f(){switch(x){case 1:break}}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,129,/ Do while loops stay in a block if that's where they started
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,130,"old(""function f(){if(e1){do foo();while(e2)}else foo2()}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,131,"function f(){if(e1){do foo();while(e2)}else foo2()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,132,/ Test an obscure case with do and while
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,133,"old(""if(x){do{foo()}while(y)}else bar()"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,134,"if(x){do foo();while(y)}else bar()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,136,/ Play with nested IFs
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,137,"old(""function f(){if(x){if(y)foo()}}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,138,"function f(){x&&y&&foo()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,139,"old(""function f(){if(x){if(y)foo();else bar()}}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,140,"function f(){x&&(y?foo():bar())}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,141,"old(""function f(){if(x){if(y)foo()}else bar()}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,142,"function f(){x?y&&foo():bar()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,143,"old(""function f(){if(x){if(y)foo();else bar()}else{baz()}}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,144,"function f(){x?y?foo():bar():baz()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,146,"old(""if(e1){while(e2){if(e3){foo()}}}else{bar()}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,147,"if(e1)while(e2)e3&&foo();else bar()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,149,"old(""if(e1){with(e2){if(e3){foo()}}}else{bar()}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,150,"if(e1)with(e2)e3&&foo();else bar()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,152,"old(""if(a||b){if(c||d){var x;}}"", ""if(a||b)if(c||d)var x"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,153,"old(""if(x){ if(y){var x;}else{var z;} }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,154,"if(x)if(y)var x;else var z"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,156,/ NOTE - technically we can remove the blocks since both the parent
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,157,/ and child have elses. But we don't since it causes ambiguities in
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,158,/ some cases where not all descendent ifs having elses
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,159,"old(""if(x){ if(y){var x;}else{var z;} }else{var w}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,160,"if(x)if(y)var x;else var z;else var w"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,161,"old(""if (x) {var x;}else { if (y) { var y;} }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,162,"if(x)var x;else if(y)var y"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,164,/ Here's some of the ambiguous cases
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,165,"old(""if(a){if(b){f1();f2();}else if(c){f3();}}else {if(d){f4();}}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,166,"if(a)if(b){f1();f2()}else c&&f3();else d&&f4()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,168,"old(""function f(){foo()}"", ""function f(){foo()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,169,"old(""switch(x){case y: foo()}"", ""switch(x){case y:foo()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,170,"old(""try{foo()}catch(ex){bar()}finally{baz()}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,171,"try{foo()}catch(ex){bar()}finally{baz()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,174,** Try to minimize returns */
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,175,ublic void testFoldReturns() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,176,"old(""function f(){if(x)return 1;else return 2}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,177,"function f(){return x?1:2}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,178,"old(""function f(){if(x)return 1;return 2}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,179,"function f(){return x?1:2}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,180,"old(""function f(){if(x)return;return 2}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,181,"function f(){return x?void 0:2}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,182,"old(""function f(){if(x)return 1+x;else return 2-x}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,183,"function f(){return x?1+x:2-x}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,184,"old(""function f(){if(x)return 1+x;return 2-x}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,185,"function f(){return x?1+x:2-x}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,186,"old(""function f(){if(x)return y += 1;else return y += 2}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,187,"function f(){return x?(y+=1):(y+=2)}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,189,"old(""function f(){if(x)return;else return 2-x}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,190,"function f(){if(x);else return 2-x}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,191,"old(""function f(){if(x)return;return 2-x}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,192,"function f(){return x?void 0:2-x}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,193,"old(""function f(){if(x)return x;else return}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,194,"function f(){if(x)return x;{}}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,195,"old(""function f(){if(x)return x;return}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,196,"function f(){if(x)return x}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,198,"oldSame(""function f(){for(var x in y) { return x.y; } return k}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,201,ublic void testCombineIfs1() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,202,"old(""function f() {if (x) return 1; if (y) return 1}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,203,"function f() {if (x||y) return 1;}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,204,"old(""function f() {if (x) return 1; if (y) foo(); else return 1}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,205,"function f() {if ((!x)&&y) foo(); else return 1;}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,208,ublic void testCombineIfs2() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,209,/ combinable but not yet done
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,210,"oldSame(""function f() {if (x) throw 1; if (y) throw 1}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,211,"/ Can't combine, side-effect"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,212,"old(""function f(){ if (x) g(); if (y) g() }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,213,"function f(){ x&&g(); y&&g() }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,214,"/ Can't combine, side-effect"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,215,"old(""function f(){ if (x) y = 0; if (y) y = 0; }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,216,"function f(){ x&&(y = 0); y&&(y = 0); }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,219,ublic void testCombineIfs3() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,220,"oldSame(""function f() {if (x) return 1; if (y) {g();f()}}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,224,** Try to minimize assignments */
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,225,ublic void testFoldAssignments() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,226,"old(""function f(){if(x)y=3;else y=4;}"", ""function f(){y=x?3:4}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,227,"old(""function f(){if(x)y=1+a;else y=2+a;}"", ""function f(){y=x?1+a:2+a}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,229,/ and operation assignments
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,230,"old(""function f(){if(x)y+=1;else y+=2;}"", ""function f(){y+=x?1:2}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,231,"old(""function f(){if(x)y-=1;else y-=2;}"", ""function f(){y-=x?1:2}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,232,"old(""function f(){if(x)y%=1;else y%=2;}"", ""function f(){y%=x?1:2}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,233,"old(""function f(){if(x)y|=1;else y|=2;}"", ""function f(){y|=x?1:2}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,235,"/ sanity check, don't fold if the 2 ops don't match"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,236,"oldSame(""function f(){x ? y-=1 : y+=2}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,238,"/ sanity check, don't fold if the 2 LHS don't match"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,239,"oldSame(""function f(){x ? y-=1 : z-=1}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,241,"/ sanity check, don't fold if there are potential effects"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,242,"oldSame(""function f(){x ? y().a=3 : y().a=4}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,245,ublic void testRemoveDuplicateStatements() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,246,"old(""if (a) { x = 1; x++ } else { x = 2; x++ }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,247,"x=(a) ? 1 : 2; x++"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,248,"old(""if (a) { x = 1; x++; y += 1; z = pi; }"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,249," else  { x = 2; x++; y += 1; z = pi; }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,250,"x=(a) ? 1 : 2; x++; y += 1; z = pi;"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,251,"old(""function z() {"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,252,"if (a) { foo(); return !0 } else { goo(); return !0 }"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,254,"function z() {(a) ? foo() : goo(); return !0}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,255,"old(""function z() {if (a) { foo(); x = true; return true "" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,256,"} else { goo(); x = true; return true }}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,257,"function z() {(a) ? foo() : goo(); x = !0; return !0}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,259,"old(""function z() {"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,260,"  if (a) { bar(); foo(); return true }"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,261,"    else { bar(); goo(); return true }"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,263,"function z() {"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,264,"  if (a) { bar(); foo(); }"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,265,"    else { bar(); goo(); }"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,266,"  return !0;"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,270,ublic void testNotCond() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,271,"old(""function f(){if(!x)foo()}"", ""function f(){x||foo()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,272,"old(""function f(){if(!x)b=1}"", ""function f(){x||(b=1)}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,273,"old(""if(!x)z=1;else if(y)z=2"", ""if(x){y&&(z=2);}else{z=1;}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,274,"old(""if(x)y&&(z=2);else z=1;"", ""x ? y&&(z=2) : z=1"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,275,"oldSame(""function f(){if(!(x=1))a.b=1}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,278,ublic void testAndParenthesesCount() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,279,"old(""function f(){if(x||y)a.foo()}"", ""function f(){(x||y)&&a.foo()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,280,"old(""function f(){if(x.a)x.a=0}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,281,"function f(){x.a&&(x.a=0)}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,282,"oldSame(""function f(){if(x()||y()){x()||y()}}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,285,ublic void testFoldLogicalOpStringCompare() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,286,/ side-effects
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,287,/ There is two way to parse two &&'s and both are correct.
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,288,"ssertResultString(""if(foo() && false) z()"", ""foo()&&0&&z()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,291,ublic void testFoldNot() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,292,"old(""while(!(x==y)){a=b;}"" , ""while(x!=y){a=b;}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,293,"old(""while(!(x!=y)){a=b;}"" , ""while(x==y){a=b;}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,294,"old(""while(!(x===y)){a=b;}"", ""while(x!==y){a=b;}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,295,"old(""while(!(x!==y)){a=b;}"", ""while(x===y){a=b;}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,296,/ Because !(x<NaN) != x>=NaN don't fold < and > cases.
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,297,"oldSame(""while(!(x>y)){a=b;}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,298,"oldSame(""while(!(x>=y)){a=b;}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,299,"oldSame(""while(!(x<y)){a=b;}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,300,"oldSame(""while(!(x<=y)){a=b;}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,301,"oldSame(""while(!(x<=NaN)){a=b;}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,303,/ NOT forces a boolean context
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,304,"old(""x = !(y() && true)"", ""x = !y()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,305,/ This will be further optimized by PeepholeFoldConstants.
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,306,"old(""x = !true"", ""x = !1"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,478,ublic void testMinimizeExprCondition() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,479,"old(""(x ? true : false) && y()"", ""x&&y()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,480,"old(""(x ? false : true) && y()"", ""(!x)&&y()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,481,"old(""(x ? true : y) && y()"", ""(x || y)&&y()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,482,"old(""(x ? y : false) && y()"", ""(x && y)&&y()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,483,"old(""(x && true) && y()"", ""x && y()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,484,"old(""(x && false) && y()"", ""0&&y()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,485,"old(""(x || true) && y()"", ""1&&y()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,486,"old(""(x || false) && y()"", ""x&&y()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,489,ublic void testMinimizeWhileCondition() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,490,"/ This test uses constant folding logic, so is only here for completeness."
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,491,"old(""while(!!true) foo()"", ""while(1) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,492,/ These test tryMinimizeCondition
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,493,"old(""while(!!x) foo()"", ""while(x) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,494,"old(""while(!(!x&&!y)) foo()"", ""while(x||y) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,495,"old(""while(x||!!y) foo()"", ""while(x||y) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,496,"old(""while(!(!!x&&y)) foo()"", ""while(!x||!y) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,497,"old(""while(!(!x&&y)) foo()"", ""while(x||!y) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,498,"old(""while(!(x||!y)) foo()"", ""while(!x&&y) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,499,"old(""while(!(x||y)) foo()"", ""while(!x&&!y) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,500,"old(""while(!(!x||y-z)) foo()"", ""while(x&&!(y-z)) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,501,"old(""while(!(!(x/y)||z+w)) foo()"", ""while(x/y&&!(z+w)) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,502,"oldSame(""while(!(x+y||z)) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,503,"oldSame(""while(!(x&&y*z)) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,504,"old(""while(!(!!x&&y)) foo()"", ""while(!x||!y) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,505,"old(""while(x&&!0) foo()"", ""while(x) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,506,"old(""while(x||!1) foo()"", ""while(x) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,507,"old(""while(!((x,y)&&z)) foo()"", ""while(!(x,y)||!z) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,510,ublic void testMinimizeDemorganRemoveLeadingNot() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,511,"old(""if(!(!a||!b)&&c) foo()"", ""((a&&b)&&c)&&foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,512,"old(""if(!(x&&y)) foo()"", ""x&&y||foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,513,"old(""if(!(x||y)) foo()"", ""(x||y)||foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,516,ublic void testMinimizeDemorgan1() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,517,"old(""if(!a&&!b)foo()"", ""(a||b)||foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,520,ublic void testMinimizeDemorgan3() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,521,"old(""if((!a||!b)&&(c||d)) foo()"", ""(a&&b||!c&&!d)||foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,524,ublic void testMinimizeDemorgan5() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,525,"old(""if((!a||!b)&&c) foo()"", ""(a&&b||!c)||foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,528,ublic void testMinimizeDemorgan11() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,529,"old(""if (x && (y===2 || !f()) && (y===3 || !h())) foo()"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,530,"(!x || y!==2 && f() || y!==3 && h()) || foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,533,ublic void testMinimizeDemorgan20() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,534,"old(""if (0===c && (2===a || 1===a)) f(); else g()"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,535,"if (0!==c || 2!==a && 1!==a) g(); else f()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,536,"old(""if (0!==c || 2!==a && 1!==a) g(); else f()"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,537,"(0!==c || 2!==a && 1!==a) ? g() : f()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,540,ublic void testSwapHook() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,541,"old(""!x ? foo() : bar()"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,542,"x ? bar() : foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,545,ublic void testMinimizeDemorgan21() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,546,"old(""if (0===c && (2===a || 1===a)) f()"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,547,"(0!==c || 2!==a && 1!==a) || f()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,550,ublic void testMinimizeAndOr1() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,551,"old(""if ((!a || !b) && (d || e)) f()"", ""(a&&b || !d&&!e) || f()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,554,ublic Node parseExpr(String input) {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,555,ode block = parseExpectedJs(input);
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,556,ode script = block.getFirstChild();
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,557,ode exprResult = script.getFirstChild();
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,558,eturn exprResult.getFirstChild();
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,561,"ublic void minimizeCond(String input, String positive, String negative) {"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,562,ode inputNode = parseExpr(input);
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,563,inimizedCondition result = PeepholeSubstituteAlternateSyntax
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,564,MinimizedCondition.fromConditionNode(inputNode);
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,565,ode positiveNode = parseExpr(positive);
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,566,ode negativeNode = parseExpr(negative);
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,567,f (!result.getNode().isEquivalentTo(positiveNode)) {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,568,"ail(""Not equal:\n"" + result.getNode().toStringTree()"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,569," ""and:\n"" + positiveNode.toStringTree());"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,571,f (!result.getNegatedNode().isEquivalentTo(negativeNode)) {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,572,"ail(""Not equal:\n"" + result.getNegatedNode().toStringTree()"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,573," ""and:\n"" + negativeNode.toStringTree());"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,577,ublic void testTryMinimizeCondition1() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,578,"inimizeCond(""x"", ""x"", ""!x"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,581,ublic void testTryMinimizeCondition2() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,582,"inimizeCond(""!x"", ""!x"", ""x"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,585,ublic void testTryMinimizeCondition3() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,586,"inimizeCond(""x || y"", ""x || y"", ""!x && !y"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,589,ublic void testTryMinimizeCondition4() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,590,"inimizeCond(""x && y"", ""x && y"", ""!x || !y"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,593,ublic void testTryMinimizeCondition5() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,594,"inimizeCond(""w && x && y && z"", ""w && x && y && z"", ""!(w && x && y && z)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,597,ublic void testMinimizeCondDemorgan() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,598,"inimizeCond(""x && (y===2 || !f()) && (y===3 || !h())"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,599,"x && !((y!==2 && f()) || (y!==3 && h()))"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,600,"!x || (y!==2 && f()) || (y!==3 && h())"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,603,ublic void testMinimizeForCondition() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,604,"/ This test uses constant folding logic, so is only here for completeness."
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,605,"/ These could be simplified to ""for(;;) ..."""
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,606,"old(""for(;!!true;) foo()"", ""for(;1;) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,607,/ Don't bother with FOR inits as there are normalized out.
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,608,"old(""for(!!true;;) foo()"", ""for(!0;;) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,610,/ These test tryMinimizeCondition
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,611,"old(""for(;!!x;) foo()"", ""for(;x;) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,613,/ sanity check
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,614,"oldSame(""for(a in b) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,615,"oldSame(""for(a in {}) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,616,"oldSame(""for(a in []) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,617,"old(""for(a in !!true) foo()"", ""for(a in !0) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,620,ublic void testMinimizeCondition_example1() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,621,/ Based on a real failing code sample.
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,622,"old(""if(!!(f() > 20)) {foo();foo()}"", ""if(f() > 20){foo();foo()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,625,ublic void testFoldLoopBreakLate() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,626,ate = true;
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,627,"old(""for(;;) if (a) break"", ""for(;!a;);"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,628,"oldSame(""for(;;) if (a) { f(); break }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,629,"old(""for(;;) if (a) break; else f()"", ""for(;!a;) { { f(); } }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,630,"old(""for(;a;) if (b) break"", ""for(;a && !b;);"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,631,"old(""for(;a;) { if (b) break; if (c) break; }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,632,"for(;(a && !b);) if (c) break;"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,633,"old(""for(;(a && !b);) if (c) break;"", ""for(;(a && !b) && !c;);"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,635,/ 'while' is normalized to 'for'
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,636,nableNormalize(true);
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,637,"old(""while(true) if (a) break"", ""for(;1&&!a;);"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,640,ublic void testFoldLoopBreakEarly() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,641,ate = false;
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,642,"oldSame(""for(;;) if (a) break"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,643,"oldSame(""for(;;) if (a) { f(); break }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,644,"oldSame(""for(;;) if (a) break; else f()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,645,"oldSame(""for(;a;) if (b) break"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,646,"oldSame(""for(;a;) { if (b) break; if (c) break; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,648,"oldSame(""while(1) if (a) break"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,649,nableNormalize(true);
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,650,"oldSame(""while(1) if (a) break"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,653,ublic void testFoldConditionalVarDeclaration() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,654,"old(""if(x) var y=1;else y=2"", ""var y=x?1:2"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,655,"old(""if(x) y=1;else var y=2"", ""var y=x?1:2"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,657,"oldSame(""if(x) var y = 1; z = 2"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,658,"oldSame(""if(x||y) y = 1; var z = 2"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,660,"oldSame(""if(x) { var y = 1; print(y)} else y = 2 "");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,661,"oldSame(""if(x) var y = 1; else {y = 2; print(y)}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,664,ublic void testFoldIfWithLowerOperatorsInside() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,665,"old(""if (x + (y=5)) z && (w,z);"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,666,"x + (y=5) && z && (w,z)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,667,"old(""if (!(x+(y=5))) z && (w,z);"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,668,"x + (y=5) || z && (w,z)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,669,"old(""if (x + (y=5)) if (z && (w,z)) for(;;) foo();"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,670,"if (x + (y=5) && z && (w,z)) for(;;) foo();"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,673,ublic void testFoldReturnResult() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,674,"old(""function f(){return false;}"", ""function f(){return !1}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,675,"oldSame(""function f(){return null;}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,676,"old(""function f(){return void 0;}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,677,"function f(){return}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,678,"old(""function f(){return;}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,679,"function f(){}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,680,"oldSame(""function f(){return void foo();}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,681,"old(""function f(){return undefined;}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,682,"function f(){return}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,683,"old(""function f(){if(a()){return undefined;}}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,684,"function f(){if(a()){return}}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,702,ublic void testSubsituteReturn() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,704,"old(""function f() { while(x) { return }}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,705,"function f() { while(x) { break }}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,707,"oldSame(""function f() { while(x) { return 5 } }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,709,"oldSame(""function f() { a: { return 5 } }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,711,"old(""function f() { while(x) { return 5}  return 5}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,712,"function f() { while(x) { break }    return 5}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,714,"old(""function f() { while(x) { return x}  return x}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,715,"function f() { while(x) { break }    return x}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,717,"old(""function f() { while(x) { if (y) { return }}}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,718,"function f() { while(x) { if (y) { break  }}}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,720,"old(""function f() { while(x) { if (y) { return }} return}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,721,"function f() { while(x) { if (y) { break  }}}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,723,"old(""function f() { while(x) { if (y) { return 5 }} return 5}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,724,"function f() { while(x) { if (y) { break    }} return 5}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,726,/ It doesn't matter if x is changed between them. We are still returning
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,727,/ x at whatever x value current holds. The whole x = 1 is skipped.
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,728,"old(""function f() { while(x) { if (y) { return x } x = 1} return x}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,729,"function f() { while(x) { if (y) { break    } x = 1} return x}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,731,/ RemoveUnreachableCode would take care of the useless breaks.
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,732,"old(""function f() { while(x) { if (y) { return x } return x} return x}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,733,"function f() { while(x) { if (y) {} break }return x}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,735,/ A break here only breaks out of the inner loop.
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,736,"oldSame(""function f() { while(x) { while (y) { return } } }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,738,"oldSame(""function f() { while(1) { return 7}  return 5}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,741,"oldSame(""function f() {"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,742,"  try { while(x) {return f()}} catch (e) { } return f()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,744,"oldSame(""function f() {"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,745,"  try { while(x) {return f()}} finally {alert(1)} return f()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,748,/ Both returns has the same handler
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,749,"old(""function f() {"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,750,"  try { while(x) { return f() } return f() } catch (e) { } }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,751,"function f() {"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,752,"  try { while(x) { break } return f() } catch (e) { } }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,754,/ We can't fold this because it'll change the order of when foo is called.
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,755,"oldSame(""function f() {"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,756,"  try { while(x) { return foo() } } finally { alert(1) } ""  +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,757,"  return foo()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,759,"/ This is fine, we have no side effect in the return value."
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,760,"old(""function f() {"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,761,"  try { while(x) { return 1 } } finally { alert(1) } return 1}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,762,"function f() {"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,763,"  try { while(x) { break    } } finally { alert(1) } return 1}"""
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,766,"oldSame(""function f() { try{ return a } finally { a = 2 } return a; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,768,old(
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,769,"function f() { switch(a){ case 1: return a; default: g();} return a;}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,770,"function f() { switch(a){ case 1: break; default: g();} return a; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,773,ublic void testSubsituteBreakForThrow() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,775,"oldSame(""function f() { while(x) { throw Error }}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,777,"old(""function f() { while(x) { throw Error } throw Error }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,778,"function f() { while(x) { break } throw Error}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,779,"oldSame(""function f() { while(x) { throw Error(1) } throw Error(2)}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,780,"oldSame(""function f() { while(x) { throw Error(1) } return Error(2)}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,782,"oldSame(""function f() { while(x) { throw 5 } }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,784,"oldSame(""function f() { a: { throw 5 } }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,786,"old(""function f() { while(x) { throw 5}  throw 5}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,787,"function f() { while(x) { break }   throw 5}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,789,"old(""function f() { while(x) { throw x}  throw x}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,790,"function f() { while(x) { break }   throw x}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,792,"oldSame(""function f() { while(x) { if (y) { throw Error }}}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,794,"old(""function f() { while(x) { if (y) { throw Error }} throw Error}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,795,"function f() { while(x) { if (y) { break }} throw Error}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,797,"old(""function f() { while(x) { if (y) { throw 5 }} throw 5}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,798,"function f() { while(x) { if (y) { break    }} throw 5}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,800,/ It doesn't matter if x is changed between them. We are still throwing
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,801,/ x at whatever x value current holds. The whole x = 1 is skipped.
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,802,"old(""function f() { while(x) { if (y) { throw x } x = 1} throw x}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,803,"function f() { while(x) { if (y) { break    } x = 1} throw x}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,805,/ RemoveUnreachableCode would take care of the useless breaks.
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,806,"old(""function f() { while(x) { if (y) { throw x } throw x} throw x}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,807,"function f() { while(x) { if (y) {} break }throw x}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,809,/ A break here only breaks out of the inner loop.
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,810,"oldSame(""function f() { while(x) { while (y) { throw Error } } }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,812,"oldSame(""function f() { while(1) { throw 7}  throw 5}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,815,"oldSame(""function f() {"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,816,"  try { while(x) {throw f()}} catch (e) { } throw f()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,818,"oldSame(""function f() {"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,819,"  try { while(x) {throw f()}} finally {alert(1)} throw f()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,822,/ Both throws has the same handler
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,823,"old(""function f() {"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,824,"  try { while(x) { throw f() } throw f() } catch (e) { } }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,825,"function f() {"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,826,"  try { while(x) { break } throw f() } catch (e) { } }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,828,/ We can't fold this because it'll change the order of when foo is called.
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,829,"oldSame(""function f() {"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,830,"  try { while(x) { throw foo() } } finally { alert(1) } ""  +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,831,"  throw foo()}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,833,"/ This is fine, we have no side effect in the throw value."
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,834,"old(""function f() {"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,835,"  try { while(x) { throw 1 } } finally { alert(1) } throw 1}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,836,"function f() {"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,837,"  try { while(x) { break    } } finally { alert(1) } throw 1}"""
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,840,"oldSame(""function f() { try{ throw a } finally { a = 2 } throw a; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,842,old(
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,843,"function f() { switch(a){ case 1: throw a; default: g();} throw a;}"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,844,"function f() { switch(a){ case 1: break; default: g();} throw a; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,848,ublic void testRemoveDuplicateReturn() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,849,"old(""function f() { return; }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,850,"function f(){}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,851,"oldSame(""function f() { return a; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,852,"old(""function f() { if (x) { return a } return a; }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,853,"function f() { if (x) {} return a; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,854,oldSame(
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,855,"function f() { try { if (x) { return a } } catch(e) {} return a; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,856,oldSame(
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,857,"function f() { try { if (x) {} } catch(e) {} return 1; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,859,/ finally clauses may have side effects
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,860,oldSame(
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,861,"function f() { try { if (x) { return a } } finally { a++ } return a; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,862,/ but they don't matter if the result doesn't have side effects and can't
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,863,/ be affect by side-effects.
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,864,"old(""function f() { try { if (x) { return 1 } } finally {} return 1; }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,865,"function f() { try { if (x) {} } finally {} return 1; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,867,"old(""function f() { switch(a){ case 1: return a; } return a; }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,868,"function f() { switch(a){ case 1: } return a; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,870,"old(""function f() { switch(a){ "" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,871,"  case 1: return a; case 2: return a; } return a; }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,872,"function f() { switch(a){ "" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,873,"  case 1: break; case 2: } return a; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,876,ublic void testRemoveDuplicateThrow() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,877,"oldSame(""function f() { throw a; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,878,"old(""function f() { if (x) { throw a } throw a; }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,879,"function f() { if (x) {} throw a; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,880,oldSame(
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,881,"function f() { try { if (x) {throw a} } catch(e) {} throw a; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,882,oldSame(
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,883,"function f() { try { if (x) {throw 1} } catch(e) {f()} throw 1; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,884,oldSame(
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,885,"function f() { try { if (x) {throw 1} } catch(e) {f()} throw 1; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,886,oldSame(
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,887,"function f() { try { if (x) {throw 1} } catch(e) {throw 1}}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,888,old(
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,889,"function f() { try { if (x) {throw 1} } catch(e) {throw 1} throw 1; }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,890,"function f() { try { if (x) {throw 1} } catch(e) {} throw 1; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,892,/ finally clauses may have side effects
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,893,oldSame(
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,894,"function f() { try { if (x) { throw a } } finally { a++ } throw a; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,895,/ but they don't matter if the result doesn't have side effects and can't
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,896,/ be affect by side-effects.
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,897,"old(""function f() { try { if (x) { throw 1 } } finally {} throw 1; }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,898,"function f() { try { if (x) {} } finally {} throw 1; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,900,"old(""function f() { switch(a){ case 1: throw a; } throw a; }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,901,"function f() { switch(a){ case 1: } throw a; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,903,"old(""function f() { switch(a){ "" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,904,"case 1: throw a; case 2: throw a; } throw a; }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,905,"function f() { switch(a){ case 1: break; case 2: } throw a; }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,908,ublic void testNestedIfCombine() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,909,"old(""if(x)if(y){while(1){}}"", ""if(x&&y){while(1){}}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,910,"old(""if(x||z)if(y){while(1){}}"", ""if((x||z)&&y){while(1){}}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,911,"old(""if(x)if(y||z){while(1){}}"", ""if((x)&&(y||z)){while(1){}}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,912,"oldSame(""if(x||z)if(y||z){while(1){}}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,913,"old(""if(x)if(y){if(z){while(1){}}}"", ""if(x&&y&&z){while(1){}}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,921,ublic void testIssue291() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,922,"old(""if (true) { f.onchange(); }"", ""if (1) f.onchange();"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,923,"oldSame(""if (f) { f.onchange(); }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,924,"oldSame(""if (f) { f.bar(); } else { f.onchange(); }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,925,"old(""if (f) { f.bonchange(); }"", ""f && f.bonchange();"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,926,"oldSame(""if (f) { f['x'](); }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,958,"old(""foo();true"", ""foo();1"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,312,"foldSame(""foo();true"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,960,"old(""function x(){foo(); !0}"", ""function x(){foo(); 1}"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,314,"foldSame(""function x(){foo(); !0}"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,966,"old(""1; 2"", ""1; 1"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,999,ublic void testObjectLiteral() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1000,"est(""({})"", ""1"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1001,"est(""({a:1})"", ""1"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1002,"estSame(""({a:foo()})"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1003,"estSame(""({'a':foo()})"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1006,ublic void testArrayLiteral() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1007,"est(""([])"", ""1"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1008,"est(""([1])"", ""1"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1009,"est(""([a])"", ""1"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1010,"estSame(""([foo()])"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1035,ublic void testRemoveElseCause() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1036,"est(""function f() {"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1037," if(x) return 1;"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1038," else if(x) return 2;"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1039," else if(x) return 3 }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1040,"function f() {"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1041," if(x) return 1;"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1042,"{ if(x) return 2;"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1043,"{ if(x) return 3 } } }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1047,ublic void testRemoveElseCause1() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1048,"est(""function f() { if (x) throw 1; else f() }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1049,"function f() { if (x) throw 1; { f() } }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1052,ublic void testRemoveElseCause2() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1053,"est(""function f() { if (x) return 1; else f() }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1054,"function f() { if (x) return 1; { f() } }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1055,"est(""function f() { if (x) return; else f() }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1056,"function f() { if (x) {} else { f() } }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1057,/ This case is handled by minimize exit points.
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1058,"estSame(""function f() { if (x) return; f() }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1061,ublic void testRemoveElseCause3() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1062,"estSame(""function f() { a:{if (x) break a; else f() } }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1063,"estSame(""function f() { if (x) { a:{ break a } } else f() }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1064,"estSame(""function f() { if (x) a:{ break a } else f() }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1067,ublic void testRemoveElseCause4() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1068,"estSame(""function f() { if (x) { if (y) { return 1; } } else f() }"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1071,ublic void testIssue925() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1072,est(
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1073,"if (x[--y] === 1) {\n"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1074,"    x[y] = 0;\n"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1075,"} else {\n"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1076,"    x[y] = 1;\n"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1078,"(x[--y] === 1) ? x[y] = 0 : x[y] = 1;"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1080,est(
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1081,"if (x[--y]) {\n"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1082,"    a = 0;\n"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1083,"} else {\n"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1084,"    a = 1;\n"" +"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1086,"a = (x[--y]) ? 0 : 1;"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1088,"est(""if (x++) { x += 2 } else { x += 3 }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1089,"x++ ? x += 2 : x += 3"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1091,"est(""if (x++) { x = x + 2 } else { x = x + 3 }"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,1092,"x = x++ ? x + 2 : x + 3"");"

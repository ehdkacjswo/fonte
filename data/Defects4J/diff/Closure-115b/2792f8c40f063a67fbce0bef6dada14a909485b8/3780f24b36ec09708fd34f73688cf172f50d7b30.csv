is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,359,eturn blindScope;
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,359,"// If we did create a more precise scope, blindScope has a child and"
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,360,// it is frozen. We can't just throw it away to return it. So we
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,361,// must create a child instead.
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,362,return blindScope == leftScope ?
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,363,blindScope : blindScope.createChildFlowScope();
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,367,eturn blindScope;
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,371,return blindScope == rightScope ?
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,372,blindScope : blindScope.createChildFlowScope();
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,372,public void testAssert11() {
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,373,JSType startType = createNullableType(OBJECT_TYPE);
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,374,"assuming(""x"", startType);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,375,"assuming(""y"", startType);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,376,"inFunction(""var z = goog.asserts.assert(x || y);"");"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,377,"verify(""x"", startType);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,378,"verify(""y"", startType);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,2,* Copyright 2004 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,21,import java.util.Arrays;
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,24,* Implements a few functionalities of a bit field.
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,25,* Copied (and re-written) in parts from 'com.google.testing.coverage.BitField'
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,28,class BitField {
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,30,private byte[] bytes;
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,32,public BitField() {
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,33,this.bytes = new byte[0];
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,37,* Sets or clears a bit at the given 0-based index.
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,39,* @param index 0-based bit position.
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,41,public void setBit(int index) {
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,42,if (index < 0) {
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,43,return;
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,46,int byteIndex = index / 8;
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,47,int newByteSize = byteIndex + 1;
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,49,if (bytes.length < newByteSize) {
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,50,"bytes = Arrays.copyOf(bytes, newByteSize);"
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,53,int bitIndex = index % 8;
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,54,int mask = 1 << bitIndex;
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,55,bytes[byteIndex] |= mask;
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,59,* Checks whether a bit at the given 0-based index is set.
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,61,* @param index 0-based bit position
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,62,"* @return true if set, false otherwise"
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,64,public boolean isBitSet(int index) {
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,65,int byteIndex = index / 8;
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,67,if (byteIndex >= bytes.length) {
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,68,return false;
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,71,int bitIndex = index % 8;
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,72,int mask = 1 << bitIndex;
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,73,return (bytes[byteIndex] & mask) != 0;
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,77,* Returns a byte-wise hex string representation of the BitField from
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,78,* MSB (Most Significant Byte) to LSB (Least Significant Byte).
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,79,"* Eg. Single byte: a setting of ""0001 1111"", returns ""1f"""
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,80,"* Eg. Multiple bytes: a setting of ""0000 0010 0001 1111"", returns ""1f02"""
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,82,* @return string representation of bits set
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,84,@Override
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,85,public String toString() {
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,86,StringBuilder result = new StringBuilder();
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,87,for (int i = 0; i < bytes.length; i++) {
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,88,int byteValue = 0;
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,89,for (int j = i * 8 + 7; j >= i * 8; j--) {
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,90,byteValue = 2 * byteValue + (isBitSet(j) ? 1 : 0);
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,92,result.append(getHexPair(byteValue));
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,94,return result.toString();
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,98,* Returns a hex pair string representation of the given int value.
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,100,* @param byteValue int value
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,101,* @return string representation of hex pair corresponding to the int value
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,103,public static String getHexPair(int byteValue) {
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,104,Preconditions.checkArgument((byteValue >= 0) && (byteValue < 256));
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,105,int firstHex = (int) Math.floor(byteValue / 16);
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,106,int secondHex = byteValue % 16;
True,src/com/google/javascript/jscomp/BitField.java,src/com/google/javascript/jscomp/BitField.java,107,return Integer.toHexString(firstHex) + Integer.toHexString(secondHex);
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,879,* Instrument code for the purpose of collecting coverage data.
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,881,public boolean instrumentForCoverage;
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1011,nstrumentationTemplate = null;
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1012,nstrumentMemoryAllocations = false;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1016,instrumentationTemplate = null;  // instrument functions
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1017,instrumentMemoryAllocations = false; // instrument allocations
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1018,instrumentForCoverage = false;  // instrument lines
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,2164,* Set whether or not code should be modified to provide coverage
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,2165,* information.
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,2167,public void setInstrumentForCoverage(boolean instrumentForCoverage) {
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,2168,this.instrumentForCoverage = instrumentForCoverage;
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,2,* Copyright 2009 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,20,import com.google.javascript.jscomp.CoverageInstrumentationPass.CoverageReach;
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,21,import com.google.javascript.rhino.IR;
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,22,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,24,import java.util.Map;
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,27,* This class implements a traversal to instrument an AST for code coverage.
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,30,class CoverageInstrumentationCallback extends
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,31,NodeTraversal.AbstractPostOrderCallback {
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,33,"private final Map<String, FileInstrumentationData> instrumentationData;"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,35,private CoverageReach reach;
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,37,"static final String ARRAY_NAME_PREFIX = ""JSCompiler_lcov_data_"";"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,40,public CoverageInstrumentationCallback(
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,41,"Map<String, FileInstrumentationData> instrumentationData,"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,42,CoverageReach reach) {
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,43,this.instrumentationData = instrumentationData;
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,44,this.reach = reach;
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,48,* Returns the name of the source file from which the given node originates.
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,49,* @param traversal the traversal
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,50,* @return the name of the file it originates from
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,52,private String getFileName(NodeTraversal traversal) {
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,53,return traversal.getSourceName();
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,57,* Returns a string that can be used as array name. The name is based on the
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,58,* source filename of the AST node.
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,60,private String createArrayName(NodeTraversal traversal) {
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,61,return ARRAY_NAME_PREFIX +
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,62,CoverageUtil.createIdentifierFromText(getFileName(traversal));
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,66,* Creates and return a new instrumentation node. The instrumentation Node is
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,67,"* of the form: ""arrayName[lineNumber] = true;"""
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,68,* Note 1: Node returns a 1-based line number.
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,69,* Note 2: Line numbers in instrumentation are made 0-based. This is done to
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,70,"* map to their bit representation in BitField. Thus, there's a one-to-one"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,71,* correspondence of the line number seen on instrumented files and their bit
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,72,* encodings.
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,74,* @param lineNumber the line number corresponding to which an instrumentation
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,75,*  node is needed
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,76,* @return an instrumentation node corresponding to the line number
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,78,"private Node newInstrumentationNode(NodeTraversal traversal, int lineNumber) {"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,79,String fileName = getFileName(traversal);
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,80,String arrayName = createArrayName(traversal);
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,82,// Create instrumentation Node
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,83,//   arr[line] = true;
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,84,Node nameNode = IR.name(arrayName);
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,85,Node numNode = IR.number(lineNumber - 1);  // Make line number 0-based
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,86,"Node getElemNode = IR.getelem(nameNode, numNode);"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,87,Node trueNode = IR.trueNode();
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,88,"Node assignNode = IR.assign(getElemNode, trueNode);"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,89,Node exprNode = IR.exprResult(assignNode);
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,91,// Note line as instrumented
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,92,if (!instrumentationData.containsKey(fileName)) {
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,93,"instrumentationData.put(fileName,"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,94,"new FileInstrumentationData(fileName, arrayName));"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,96,instrumentationData.get(fileName).setLineAsInstrumented(lineNumber);
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,98,return exprNode;
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,102,* Create and return a new array declaration node. The array name is
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,103,"* generated based on the source filename, and declaration is of the form:"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,104,"* ""var arrayNameUsedInFile = [];"""
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,106,private Node newArrayDeclarationNode(NodeTraversal traversal) {
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,107,Node arraylitNode = IR.arraylit();
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,108,Node nameNode = IR.name(createArrayName(traversal));
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,109,nameNode.addChildToFront(arraylitNode);
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,110,Node varNode = IR.var(nameNode);
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,111,return varNode;
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,115,* @returns a Node containing file specific setup logic.
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,117,private Node newHeaderNode(NodeTraversal traversal) {
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,118,String fileName = getFileName(traversal);
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,119,String arrayName = createArrayName(traversal);
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,120,FileInstrumentationData data = instrumentationData.get(fileName);
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,121,Preconditions.checkNotNull(data);
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,123,return IR.block(
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,124,"newArrayDeclarationNode(traversal),"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,125,IR.exprResult(IR.call(
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,126,IR.getprop(
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,127,"IR.name(""JSCompiler_lcov_executedLines""),"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,128,"IR.string(""push"")),"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,129,"IR.name(arrayName))),"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,130,IR.exprResult(IR.call(
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,131,IR.getprop(
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,132,"IR.name(""JSCompiler_lcov_instrumentedLines""),"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,133,"IR.string(""push"")),"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,134,"IR.string(data.getInstrumentedLinesAsHexString()))),"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,135,IR.exprResult(IR.call(
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,136,IR.getprop(
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,137,"IR.name(""JSCompiler_lcov_fileNames""),"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,138,"IR.string(""push"")),"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,139,IR.string(fileName))));
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,143,* Instruments the JS code by inserting appropriate nodes into the AST. The
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,144,"* instrumentation logic is tuned to collect ""line coverage"" data only."
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,146,@Override
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,147,"public void visit(NodeTraversal traversal, Node node, Node parent) {"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,148,// SCRIPT node is special - it is the root of the AST for code from a file.
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,149,// Append code to declare and initialize structures used in instrumentation.
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,150,if (node.isScript()) {
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,151,String fileName = getFileName(traversal);
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,152,if (instrumentationData.get(fileName) != null) {
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,153,node.addChildToFront(newHeaderNode(traversal));
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,155,return;
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,158,// Don't instrument global statements
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,159,if (reach == CoverageReach.CONDITIONAL
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,160,&& parent != null && parent.isScript()) {
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,161,return;
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,164,// Add instrumentation code just before a function block.
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,165,"// Similarly before other constructs: 'with', 'case', 'default', 'catch'"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,166,if (node.isFunction() ||
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,167,node.isWith() ||
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,168,node.isCase() ||
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,169,node.isDefaultCase() ||
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,170,node.isCatch()) {
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,171,Node codeBlock = node.getLastChild();
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,172,codeBlock.addChildToFront(
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,173,"newInstrumentationNode(traversal, node.getLineno()));"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,174,return;
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,177,// Add instrumentation code as the first child of a 'try' block.
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,178,if (node.isTry()) {
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,179,Node firstChild = node.getFirstChild();
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,180,firstChild.addChildToFront(
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,181,"newInstrumentationNode(traversal, node.getLineno()));"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,182,return;
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,185,"// For any other statement, add instrumentation code just before it."
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,186,if (parent != null && NodeUtil.isStatementBlock(parent)) {
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,187,parent.addChildBefore(
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,188,"newInstrumentationNode(traversal, node.getLineno()), node);"
True,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,src/com/google/javascript/jscomp/CoverageInstrumentationCallback.java,189,return;
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,2,* Copyright 2009 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,20,import com.google.common.collect.Maps;
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,21,import com.google.javascript.rhino.IR;
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,22,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,24,import java.util.Map;
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,27,* This code implements the instrumentation pass over the AST
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,28,* (returned by JSCompiler).
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,31,class CoverageInstrumentationPass implements CompilerPass {
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,33,final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,34,"private Map<String, FileInstrumentationData> instrumentationData;"
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,35,private CoverageReach reach;
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,37,private static final String JS_INSTRUMENTATION_EXTERNS_CODE =
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,38,"""var JSCompiler_lcov_executedLines;\n"" +"
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,39,"""var JSCompiler_lcov_instrumentedLines;\n"" +"
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,40,"""var JSCompiler_lcov_fileNames;\n"";"
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,42,public enum CoverageReach {
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,43,"ALL,"
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,44,CONDITIONAL
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,49,* @param compiler the compiler which generates the AST.
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,51,"public CoverageInstrumentationPass(AbstractCompiler compiler,"
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,52,CoverageReach reach) {
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,53,this.compiler = compiler;
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,54,this.reach = reach;
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,55,instrumentationData = Maps.newLinkedHashMap();
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,59,* Creates the js code to be added to source. This code declares and
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,60,* initializes the variables required for collection of coverage data.
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,62,private void addHeaderCode(Node script) {
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,63,script.addChildToFront(
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,64,"createConditionalVarDecl(""JSCompiler_lcov_executedLines""));"
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,65,script.addChildToFront(
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,66,"createConditionalVarDecl(""JSCompiler_lcov_instrumentedLines""));"
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,67,script.addChildToFront(
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,68,"createConditionalVarDecl(""JSCompiler_lcov_fileNames""));"
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,72,* Creates a node of externs code required for the arrays used for
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,73,* instrumentation.
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,75,private Node getInstrumentationExternsNode() {
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,76,Node externsNode = compiler.parseSyntheticCode(
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,77,"""ExternsCodeForCoverageInstrumentation"","
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,78,JS_INSTRUMENTATION_EXTERNS_CODE);
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,80,return externsNode;
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,83,@Override
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,84,"public void process(Node externsNode, Node rootNode) {"
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,85,if (rootNode.hasChildren()) {
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,86,"NodeTraversal.traverse(compiler, rootNode,"
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,87,"new CoverageInstrumentationCallback(instrumentationData, reach));"
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,89,Node firstScript = rootNode.getFirstChild();
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,90,Preconditions.checkState(firstScript.isScript());
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,91,addHeaderCode(firstScript);
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,94,externsNode.addChildToBack(getInstrumentationExternsNode());
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,97,private Node createConditionalVarDecl(String name) {
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,98,Node var = IR.var(
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,99,"IR.name(name),"
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,100,IR.or(
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,101,"IR.name(name),"
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,102,IR.arraylit()));
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,103,"var.addSuppression(""duplicate"");"
True,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,src/com/google/javascript/jscomp/CoverageInstrumentationPass.java,104,return var;
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,2,* Copyright 2009 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,20,* This class contains all general purpose static methods that are used by
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,21,"* coverage instrumentation related classes - not limited to them, though."
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,23,class CoverageUtil {
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,25,* Utility Class: do not instantiate.
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,27,private CoverageUtil() {}
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,30,* Returns a string with all non-alphanumeric characters in the given string
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,31,* replaced with underscrores. This is to create a valid identifier based on
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,32,* the given text.
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,33,* @param inputText the text to create an identifier from
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,34,* @return the new string that can be used as in identifier
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,36,static String createIdentifierFromText(String inputText) {
True,src/com/google/javascript/jscomp/CoverageUtil.java,src/com/google/javascript/jscomp/CoverageUtil.java,37,"return inputText.replaceAll(""[^\\p{Alnum}]"", ""_"");"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,28,import com.google.javascript.jscomp.CoverageInstrumentationPass.CoverageReach;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,375,if (options.instrumentForCoverage) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,376,passes.add(instrumentForCodeCoverage);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2293,final PassFactory instrumentForCodeCoverage =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2294,"new PassFactory(""instrumentForCodeCoverage"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2295,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2296,protected CompilerPass create(final AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2297,// TODO(johnlenz): make global instrumentation an option
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2298,return new CoverageInstrumentationPass(
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2299,"compiler, CoverageReach.CONDITIONAL);"
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,2,* Copyright 2009 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,22,"* Holds instrumentation details related to a file, namely, the filename,"
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,23,"* the array name used in instrumentation, and the lines which were"
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,24,* instrumented (in encoded form).
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,26,class FileInstrumentationData {
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,27,private final BitField instrumentedBits;
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,28,private final String arrayName;
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,29,private final String fileName;
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,32,"FileInstrumentationData(String fileName, String arrayName) {"
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,33,this.fileName = fileName;
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,34,this.arrayName = arrayName;
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,35,instrumentedBits = new BitField();
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,38,String getArrayName() {
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,39,return arrayName;
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,42,String getFileName() {
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,43,return fileName;
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,47,* Returns instrumented bits represented as a BitField.
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,49,* @return BitField representation of bits set
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,51,BitField getInstrumentedLinesAsBitField() {
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,52,return instrumentedBits;
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,56,* Returns a byte-wise hex string representation of the BitField from
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,57,* MSB (Most Significant Byte) to LSB (Least Significant Byte).
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,58,"* Eg. Single byte: a setting of ""0001 1111"", returns ""1f"""
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,59,"* Eg. Multiple bytes: a setting of ""0000 0010 0001 1111"", returns ""1f02"""
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,61,* @return string representation of bits set
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,63,String getInstrumentedLinesAsHexString() {
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,64,return instrumentedBits.toString();
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,68,"* Mark given 1-based line number as instrumented. Zero, Negative numbers"
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,69,* are not allowed.
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,70,* @param lineNumber the line number which was instrumented
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,72,void setLineAsInstrumented(int lineNumber) {
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,73,"Preconditions.checkArgument(lineNumber > 0,"
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,74,"""Expected non-zero positive integer as line "" +"
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,75,"""number."");"
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,77,// Map the 1-based line number to 0-based bit position
True,src/com/google/javascript/jscomp/FileInstrumentationData.java,src/com/google/javascript/jscomp/FileInstrumentationData.java,78,instrumentedBits.setBit(lineNumber - 1);

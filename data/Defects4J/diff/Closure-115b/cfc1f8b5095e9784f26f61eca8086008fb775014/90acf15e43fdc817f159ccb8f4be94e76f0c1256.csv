is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,151,// Don't worry about global exprs.
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,152,boolean isGlobalExpr = ref.getNode().getParent().isExprResult();
False,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,152,"eportRefToUndefinedName(name, ref);"
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,155,if (!isGlobalExpr) {
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,156,"reportRefToUndefinedName(name, ref);"
False,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,225,"/ If an object literal in the global namespace is never aliased,"
False,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,226,/ then all of its properties must be defined using its full qualified
False,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,227,/ name. This implies that its properties must all be in the global
False,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,228,/ namespace as well.
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,230,// If an object or function literal in the global namespace is never
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,231,"// aliased, then its properties can only come from one of 2 places:"
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,232,"// 1) From its prototype chain, or"
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,233,// 2) From an assignment to its fully qualified name.
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,234,"// If we assume #1 is not the case, then #2 implies that its"
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,235,// properties must all be modeled in the GlobalNamespace as well.
False,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,230,"/ The same is not true for FUNCTION and OTHER types, because their"
False,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,231,/ implicit prototypes have properties that are not captured by the global
False,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,232,/ namespace.
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,237,// We assume that for global object literals and types (constructors and
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,238,"// interfaces), we can find all the properties inherited from the prototype"
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,239,// chain of functions and objects.
False,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,234,/ This comment will be fixed in a subsequent cl.
False,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,235,eturn name.parent != null && name.parent.aliasingGets == 0 &&
False,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,236,ame.parent.type == Name.Type.OBJECTLIT &&
False,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,237,objectPrototypeProps.contains(name.getBaseName());
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,241,"// We could improve this check by classifying aliasing gets. For example,"
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,242,// goog.inherits is an aliasing get that adds a known set of properties.
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,243,if (name.parent == null || name.parent.aliasingGets > 0) {
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,244,return false;
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,247,if (objectPrototypeProps.contains(name.getBaseName())) {
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,248,return false;
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,251,if (name.parent.type == Name.Type.OBJECTLIT) {
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,252,return true;
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,255,if (name.parent.type == Name.Type.FUNCTION &&
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,256,name.parent.isDeclaredType() &&
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,257,!functionPrototypeProps.contains(name.getBaseName())) {
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,258,return true;
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,261,return false;
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,566," else if (isConstructorOrEnumDeclaration(n, parent)) {"
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,566,"} else if (isTypeDeclaration(n, parent)) {"
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,568,ameObj.setIsClassOrEnum();
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,568,nameObj.setDeclaredType();
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,574," declaration. The set operation may either be an assignment to a name,"
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,575," a variable declaration, or an object literal key mapping."
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,574,* or interface declaration. The set operation may either be an assignment
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,575,"* to a name, a variable declaration, or an object literal key mapping."
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,582,"rivate boolean isConstructorOrEnumDeclaration(Node n, Node parent) {"
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,583,SDocInfo info;
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,584,nt valueNodeType;
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,585,witch (parent.getType()) {
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,586,ase Token.ASSIGN:
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,587,nfo = parent.getJSDocInfo();
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,588,alueNodeType = n.getNext().getType();
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,589,reak;
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,590,ase Token.VAR:
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,591,nfo = n.getJSDocInfo();
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,592,f (info == null) {
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,593,nfo = parent.getJSDocInfo();
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,595,ode valueNode = n.getFirstChild();
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,596,alueNodeType = valueNode != null ? valueNode.getType() : Token.VOID;
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,597,reak;
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,598,efault:
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,599,f (NodeUtil.isFunctionDeclaration(parent)) {
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,600,nfo = parent.getJSDocInfo();
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,601,alueNodeType = Token.FUNCTION;
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,602,reak;
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,604,eturn false;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,582,"private boolean isTypeDeclaration(Node n, Node parent) {"
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,583,Node valueNode = NodeUtil.getRValueOfLValue(n);
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,584,JSDocInfo info = NodeUtil.getBestJSDocInfo(n);
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,607,eturn info != null &&
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,608,info.isConstructor() && valueNodeType == Token.FUNCTION ||
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,609,nfo.hasEnumParameterType() && valueNodeType == Token.OBJECTLIT);
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,586,return info != null && valueNode != null &&
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,587,(info.isConstructor() && valueNode.isFunction() ||
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,588,info.isInterface() && valueNode.isFunction() ||
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,589,info.hasEnumParameterType() && valueNode.isObjectLit());
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,892,rivate boolean isClassOrEnum = false;
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,893,rivate boolean hasClassOrEnumDescendant = false;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,872,private boolean declaredType = false;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,873,private boolean hasDeclaredTypeDescendant = false;
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1062,eturn !inExterns && !isGetOrSetDefinition() && (isClassOrEnum ||
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1042,return !inExterns && !isGetOrSetDefinition() && (declaredType ||
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1086,f (isClassOrEnum) {
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1066,if (declaredType) {
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1113,oid setIsClassOrEnum() {
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1114,sClassOrEnum = true;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1093,void setDeclaredType() {
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1094,declaredType = true;
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1117,ncestor.hasClassOrEnumDescendant = true;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1097,ancestor.hasDeclaredTypeDescendant = true;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1101,boolean isDeclaredType() {
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1102,return declaredType;
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1130,eturn hasClassOrEnumDescendant && type == Type.OBJECTLIT;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1114,return hasDeclaredTypeDescendant && type == Type.OBJECTLIT;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3061,/** Gets the r-value of a node returned by getBestLValue. */
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3062,static Node getRValueOfLValue(Node n) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3063,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3064,switch (parent.getType()) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3065,case Token.ASSIGN:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3066,return n.getNext();
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3067,case Token.VAR:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3068,return n.getFirstChild();
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3069,case Token.FUNCTION:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3070,return parent;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3072,return null;
False,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,37,"Object.prototype.hasOwnProperty = function() {};"");"
True,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,37,"""Object.prototype.hasOwnProperty = function() {};"" +"
True,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,38,"""/** @constructor */ function Function(){}"" +"
True,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,39,"""Function.prototype.call = function() {};"");"
True,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,275,public void testOkGlobalDeclExpr() {
True,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,276,"testSame(""var x = {}; /** @type {string} */ x.foo;"");"
True,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,279,public void testBadInterfacePropRef() {
True,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,280,testSame(
True,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,281,"""/** @interface */ function F() {}"" +"
True,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,282,"""F.bar();"","
True,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,283,UNDEFINED_NAME_WARNING);
True,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,286,public void testInterfaceFunctionPropRef() {
True,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,287,testSame(
True,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,288,"""/** @interface */ function F() {}"" +"
True,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,289,"""F.call(); F.hasOwnProperty('z');"");"
True,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,301,public void testFunctionPrototypeProperties() {
True,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,302,"testSame(""var x = {}; var y = x.hasOwnProperty('z');"");"
True,test/com/google/javascript/jscomp/CollapsePropertiesTest.java,test/com/google/javascript/jscomp/CollapsePropertiesTest.java,1281,public void testPropertyOnGlobalInterface() {
True,test/com/google/javascript/jscomp/CollapsePropertiesTest.java,test/com/google/javascript/jscomp/CollapsePropertiesTest.java,1282,"test(""/** @interface */ function Map() {} Map.foo = 3; Map;"","
True,test/com/google/javascript/jscomp/CollapsePropertiesTest.java,test/com/google/javascript/jscomp/CollapsePropertiesTest.java,1283,"""function Map() {} var Map$foo = 3; Map;"");"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,124,/ adds `something.$inject = [...]` node after the annotated node.
False,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,125,ode target = entry.getTarget();
False,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,126,"arget.getParent().addChildAfter(statement, target);"
True,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,124,// adds `something.$inject = [...]` node after the annotated node or the following
True,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,125,// goog.inherits call.
True,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,126,Node insertionPoint = entry.getTarget();
True,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,127,Node next = insertionPoint.getNext();
True,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,128,while (next != null &&
True,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,129,NodeUtil.isExprCall(next) &&
True,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,130,convention.getClassesDefinedByCall(
True,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,131,next.getFirstChild()) != null) {
True,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,132,insertionPoint = next;
True,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,133,next = insertionPoint.getNext();
True,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,136,"insertionPoint.getParent().addChildAfter(statement, insertionPoint);"
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,19,mport com.google.common.base.Preconditions;
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,22,mport com.google.javascript.jscomp.CheckLevel;
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,23,import com.google.javascript.rhino.JSTypeExpression;
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,26,import com.google.javascript.rhino.jstype.JSType;
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,111,SDocInfo info;
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,114,nfo = (JSDocInfo) n.getProp(Node.JSDOC_INFO_PROP);
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,115,f (info != null && info.isConstructor()) {
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,116,tring qualifiedName = n.getFirstChild().getQualifiedName();
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,117,onstructors.add(qualifiedName);
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,113,case Token.VAR:
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,114,"maybeAddConstructor(t, n);"
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,121,f (NodeUtil.isFunctionExpression(n)) {
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,122,f (parent.isName()) {
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,123,tring functionName = parent.getString();
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,124,nfo = (JSDocInfo) parent.getProp(Node.JSDOC_INFO_PROP);
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,125,f (info != null && info.isConstructor()) {
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,126,onstructors.add(functionName);
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,127, else {
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,128,ode gramps = parent.getParent();
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,129,reconditions.checkState(
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,130,ramps != null && gramps.isVar());
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,131,nfo = (JSDocInfo) gramps.getProp(Node.JSDOC_INFO_PROP);
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,132,f (info != null && info.isConstructor()) {
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,133,onstructors.add(functionName);
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,137, else {
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,138,nfo = (JSDocInfo) n.getProp(Node.JSDOC_INFO_PROP);
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,139,f (info != null && info.isConstructor()) {
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,140,tring functionName = n.getFirstChild().getString();
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,141,onstructors.add(functionName);
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,117,// Exclude function expressions.
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,118,if (NodeUtil.isStatement(n)) {
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,119,"maybeAddConstructor(t, n);"
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,190,"private void maybeAddConstructor(NodeTraversal t, Node n) {"
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,191,JSDocInfo info = (JSDocInfo) n.getProp(Node.JSDOC_INFO_PROP);
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,192,if (info != null) {
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,193,String ctorName = n.getFirstChild().getQualifiedName();
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,194,if (info.isConstructor()) {
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,195,constructors.add(ctorName);
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,196,} else {
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,197,JSTypeExpression typeExpr = info.getType();
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,198,if (typeExpr != null) {
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,199,"JSType type = typeExpr.evaluate(t.getScope(), compiler.getTypeRegistry());"
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,200,if (type.isConstructor()) {
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,201,constructors.add(ctorName);
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,93, more and more passes need more than 200000 steps before finding a
True,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,93,* more and more passes need more than 400000 steps before finding a
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,97,ublic static final int MAX_STEPS = 200000;
True,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,97,public static final int MAX_STEPS = 400000;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2325,* Creates a node representing a qualified name.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2327,"* @param name A qualified name (e.g. ""foo"" or ""foo.bar.baz"")"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2328,* @return A NAME or GETPROP node
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2330,public static Node newQualifiedNameNodeDeclaration(
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2331,"CodingConvention convention, String name, Node value, JSDocInfo info) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2332,Node result;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2333,"Node nameNode = newQualifiedNameNode(convention, name);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2334,if (nameNode.isName()) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2335,"result = IR.var(nameNode, value);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2336,result.setJSDocInfo(info);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2337,} else {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2338,"result = IR.exprResult(IR.assign(nameNode, value));"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2339,result.getFirstChild().setJSDocInfo(info);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2341,return result;
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,87,"\""{0}\"" is not a valid JS property name"");"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,87,"""\""{0}\"" is not a valid JS identifier name"");"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,89,static final DiagnosticType INVALID_DEFINE_NAME_ERROR = DiagnosticType.error(
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,90,"""JSC_INVALID_DEFINE_NAME_ERROR"","
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,91,"""\""{0}\"" is not a valid JS identifier name"");"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,93,static final DiagnosticType MISSING_DEFINE_ANNOTATION = DiagnosticType.error(
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,94,"""JSC_INVALID_MISSING_DEFINE_ANNOTATION"","
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,95,"""Missing @define annotation"");"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,130,private final List<Node> defineCalls = Lists.newArrayList();
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,153,for (Node n : defineCalls) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,154,replaceGoogDefines(n);
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,179,* @param n
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,181,private void replaceGoogDefines(Node n) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,182,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,183,Preconditions.checkState(parent.isExprResult());
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,184,String name = n.getChildAtIndex(1).getString();
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,185,Node value = n.getChildAtIndex(2).detachFromParent();
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,187,Node replacement = NodeUtil.newQualifiedNameNodeDeclaration(
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,188,"compiler.getCodingConvention(), name, value, n.getJSDocInfo());"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,189,replacement.useSourceInfoIfMissingFromForTree(n);
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,190,"parent.getParent().replaceChild(parent, replacement);"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,191,compiler.reportCodeChange();
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,220,"} else if (""define"".equals(methodName)) {"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,221,"processDefineCall(t, n, parent);"
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,267,"f (verifyArgument(t, left, arg)) {"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,298,"if (verifyLastArgumentIsString(t, left, arg)) {"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,366,* Handles a goog.define call.
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,368,"private void processDefineCall(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,369,Node left = n.getFirstChild();
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,370,Node args = left.getNext();
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,371,"if (verifyDefine(t, parent, left, args)) {"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,372,Node nameNode = args;
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,373,String name = args.getString();
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,374,Node value = args.getNext();
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,376,maybeAddToSymbolTable(left);
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,377,maybeAddStringNodeToSymbolTable(nameNode);
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,379,this.defineCalls.add(n);
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,658,"f (!verifyArgument(t, methodName, arg)) {"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,707,"if (!verifyLastArgumentIsString(t, methodName, arg)) {"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,721,"* Verifies that a provide method call has exactly one argument,"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,722,* and that it's a string literal and that the contents of the string are
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,723,* valid JS tokens. Reports a compile error if it doesn't.
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,725,* @return Whether the argument checked out okay
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,727,"private boolean verifyDefine(NodeTraversal t,"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,728,"Node expr,"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,729,"Node methodName, Node args) {"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,731,// Verify first arg
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,732,Node arg = args;
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,733,"if (!verifyNotNull(t, methodName, arg) ||"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,734,"!verifyOfType(t, methodName, arg, Token.STRING)) {"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,735,return false;
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,738,// Verify second arg
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,739,arg = arg.getNext();
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,740,"if (!verifyNotNull(t, methodName, arg) ||"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,741,"!verifyIsLast(t, methodName, arg)) {"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,742,return false;
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,745,String name = args.getString();
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,746,"for (String part : name.split(""\\."")) {"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,747,if (!NodeUtil.isValidQualifiedName(part)) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,748,"compiler.report(t.makeError(args, INVALID_DEFINE_NAME_ERROR, name));"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,749,return false;
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,753,JSDocInfo info = expr.getFirstChild().getJSDocInfo();
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,754,if (info == null || !info.isDefine()) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,755,"compiler.report(t.makeError(expr, MISSING_DEFINE_ANNOTATION));"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,756,return false;
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,758,return true;
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,677,"rivate boolean verifyArgument(NodeTraversal t, Node methodName, Node arg) {"
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,678,"eturn verifyArgument(t, methodName, arg, Token.STRING);"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,767,private boolean verifyLastArgumentIsString(
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,768,"NodeTraversal t, Node methodName, Node arg) {"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,769,"return verifyNotNull(t, methodName, arg) &&"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,770,"verifyOfType(t, methodName, arg, Token.STRING) &&"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,771,"verifyIsLast(t, methodName, arg);"
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,682," Verifies that a method call has exactly one argument, and that it is of the"
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,683, desired type. Reports a compile error if it doesn't.
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,687,"rivate boolean verifyArgument(NodeTraversal t, Node methodName, Node arg,"
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,688,nt desiredType) {
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,689,iagnosticType diagnostic = null;
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,777,"private boolean verifyNotNull(NodeTraversal t, Node methodName, Node arg) {"
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,691,iagnostic = NULL_ARGUMENT_ERROR;
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,692, else if (arg.getType() != desiredType) {
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,693,iagnostic = INVALID_ARGUMENT_ERROR;
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,694, else if (arg.getNext() != null) {
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,695,iagnostic = TOO_MANY_ARGUMENTS_ERROR;
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,779,compiler.report(
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,780,"t.makeError(methodName,"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,781,"NULL_ARGUMENT_ERROR, methodName.getQualifiedName()));"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,782,return false;
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,697,f (diagnostic != null) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,784,return true;
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,788,* @return Whether the argument checked out okay
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,790,"private boolean verifyOfType(NodeTraversal t, Node methodName,"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,791,"Node arg, int desiredType) {"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,792,if (arg.getType() != desiredType) {
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,700,"iagnostic, methodName.getQualifiedName()));"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,795,"INVALID_ARGUMENT_ERROR, methodName.getQualifiedName()));"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,796,return false;
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,798,return true;
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,802,* @return Whether the argument checked out okay
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,804,"private boolean verifyIsLast(NodeTraversal t, Node methodName, Node arg) {"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,805,if (arg.getNext() != null) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,806,compiler.report(
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,807,"t.makeError(methodName,"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,808,"TOO_MANY_ARGUMENTS_ERROR, methodName.getQualifiedName()));"
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1539,ymbol symbol = scope.getSlot(n.getString());
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1540,f (symbol == null) {
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1541,"/ If we can't find this type, it might be a reference to a"
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1542,/ primitive type (like {string}). Autobox it to check.
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1543,SType type = typeRegistry.getType(n.getString());
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1544,SType autobox = type == null ? null : type.autoboxesTo();
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1545,ymbol = autobox == null
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1546," null : getSymbolForTypeHelper(autobox, true);"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1539,"Symbol symbol = lookupPossiblyDottedName(scope, n.getString());"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1542,} else {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1543,"logger.warning(""Could not find symbol for type: "" + n.getString());"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1553,// TODO(peterhal): @template types.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1554,"private Symbol lookupPossiblyDottedName(SymbolScope scope, String dottedName) {"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1555,// Try the dotted name to start.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1556,"String[] names = dottedName.split(""\\."");"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1557,Symbol result = null;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1558,SymbolScope currentScope = scope;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1559,for (int i = 0; i < names.length; i++) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1560,String name = names[i];
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1561,result = currentScope.getSlot(name);
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1562,if (result == null) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1563,break;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1565,if (i < (names.length - 1)) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1566,currentScope = result.getPropertyScope();
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1567,if (currentScope == null) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1568,result = null;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1569,break;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1574,if (result == null) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1575,"// If we can't find this type, it might be a reference to a"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1576,// primitive type (like {string}). Autobox it to check.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1577,JSType type = typeRegistry.getType(dottedName);
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1578,JSType autobox = type == null ? null : type.autoboxesTo();
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1579,result = autobox == null
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1580,"? null : getSymbolForTypeHelper(autobox, true);"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1582,return result;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,334,case com.google.javascript.rhino.head.Token.CALL:
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,335,valid = info.isDefine();
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,336,break;
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,939,reak;
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,939,return recordDescription(token);
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,947,reak;
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,947,return recordDescription(token);
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,955,reak;
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,955,return recordDescription(token);
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,963,reak;
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,963,return recordDescription(token);
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1019,* Records a marker's description if there is one available and record it in
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1020,* the current marker.
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1022,private JsDocToken recordDescription(JsDocToken token) {
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1023,// Find marker's description (if applicable).
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1024,if (jsdocBuilder.shouldParseDocumentation()) {
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1025,ExtractionInfo descriptionInfo = extractMultilineTextualBlock(token);
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1026,token = descriptionInfo.token;
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1027,} else {
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1028,token = eatTokensUntilEOL(token);
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1030,return token;
True,test/com/google/javascript/jscomp/AngularPassTest.java,test/com/google/javascript/jscomp/AngularPassTest.java,62,public void testNgInjectAddsInjectAfterGoogInherits() throws Exception {
True,test/com/google/javascript/jscomp/AngularPassTest.java,test/com/google/javascript/jscomp/AngularPassTest.java,63,test(
True,test/com/google/javascript/jscomp/AngularPassTest.java,test/com/google/javascript/jscomp/AngularPassTest.java,64,"""/** @ngInject \n @constructor */"" +"
True,test/com/google/javascript/jscomp/AngularPassTest.java,test/com/google/javascript/jscomp/AngularPassTest.java,65,"""function fn(a, b) {}"" +"
True,test/com/google/javascript/jscomp/AngularPassTest.java,test/com/google/javascript/jscomp/AngularPassTest.java,66,"""goog.inherits(fn, parent);"","
True,test/com/google/javascript/jscomp/AngularPassTest.java,test/com/google/javascript/jscomp/AngularPassTest.java,68,"""function fn(a, b) {}\n"" +"
True,test/com/google/javascript/jscomp/AngularPassTest.java,test/com/google/javascript/jscomp/AngularPassTest.java,69,"""goog.inherits(fn, parent);"" +"
True,test/com/google/javascript/jscomp/AngularPassTest.java,test/com/google/javascript/jscomp/AngularPassTest.java,70,"""fn['$inject']=['a', 'b']"""
True,test/com/google/javascript/jscomp/AngularPassTest.java,test/com/google/javascript/jscomp/AngularPassTest.java,73,test(
True,test/com/google/javascript/jscomp/AngularPassTest.java,test/com/google/javascript/jscomp/AngularPassTest.java,74,"""/** @ngInject \n @constructor */"" +"
True,test/com/google/javascript/jscomp/AngularPassTest.java,test/com/google/javascript/jscomp/AngularPassTest.java,75,"""function fn(a, b) {}"" +"
True,test/com/google/javascript/jscomp/AngularPassTest.java,test/com/google/javascript/jscomp/AngularPassTest.java,76,"""goog.inherits(fn, parent);"" +"
True,test/com/google/javascript/jscomp/AngularPassTest.java,test/com/google/javascript/jscomp/AngularPassTest.java,77,"""var foo = 42;"","
True,test/com/google/javascript/jscomp/AngularPassTest.java,test/com/google/javascript/jscomp/AngularPassTest.java,79,"""function fn(a, b) {}\n"" +"
True,test/com/google/javascript/jscomp/AngularPassTest.java,test/com/google/javascript/jscomp/AngularPassTest.java,80,"""goog.inherits(fn, parent);"" +"
True,test/com/google/javascript/jscomp/AngularPassTest.java,test/com/google/javascript/jscomp/AngularPassTest.java,81,"""fn['$inject']=['a', 'b'];"" +"
True,test/com/google/javascript/jscomp/AngularPassTest.java,test/com/google/javascript/jscomp/AngularPassTest.java,82,"""var foo = 42;"""
False,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,22,mport com.google.javascript.jscomp.CheckLevel;
False,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,23,mport com.google.javascript.jscomp.Result;
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,257,public void testVarConstructorName() {
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,258,"String js = ""/** @type {function(new:Date)} */var bar = Date;"" +"
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,259,"""new bar();"";"
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,260,testSame(js);
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,263,public void testVarConstructorFunction() {
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,264,"String js = ""/** @type {function(new:Date)} */var bar = function() {};"" +"
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,265,"""new bar();"";"
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,266,testSame(js);
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,269,public void testAssignConstructorName() {
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,270,"String js = ""var foo = {};"" +"
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,271,"""/** @type {function(new:Date)} */foo.bar = Date;"" +"
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,272,"""new foo.bar();"";"
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,273,testSame(js);
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,276,public void testAssignConstructorFunction() {
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,277,"String js = ""var foo = {};"" +"
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,278,"""/** @type {function(new:Date)} */foo.bar = function() {};"" +"
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,279,"""new foo.bar();"";"
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,280,testSame(js);
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,283,public void testConstructorFunctionReference() {
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,284,"String js = ""/** @type {function(new:Date)} */function bar() {}"" +"
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,285,"""new bar();"";"
True,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java,286,testSame(js);
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,558,public void testGoogDefine1() {
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,559,String code = CLOSURE_BOILERPLATE +
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,560,"""/** @define {boolean} */ goog.define('FLAG', true);"";"
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,562,CompilerOptions options = createCompilerOptions();
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,564,options.closurePass = true;
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,565,options.collapseProperties = true;
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,566,"options.setDefineToBooleanLiteral(""FLAG"", false);"
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,568,"test(options, code, CLOSURE_COMPILED + "" var FLAG = false;"");"
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,571,public void testGoogDefine2() {
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,572,String code = CLOSURE_BOILERPLATE +
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,573,"""goog.provide('ns');"" +"
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,574,"""/** @define {boolean} */ goog.define('ns.FLAG', true);"";"
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,576,CompilerOptions options = createCompilerOptions();
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,578,options.closurePass = true;
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,579,options.collapseProperties = true;
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,580,"options.setDefineToBooleanLiteral(""ns.FLAG"", false);"
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,581,"test(options, code, CLOSURE_COMPILED + ""var ns$FLAG = false;"");"
False,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,19,mport com.google.javascript.rhino.Node;
False,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,20,mport com.google.javascript.jscomp.CheckLevel;
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,24,import static com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_CSS_RENAMING_MAP;
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,25,import static com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_DEFINE_NAME_ERROR;
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,29,import static com.google.javascript.jscomp.ProcessClosurePrimitives.MISSING_DEFINE_ANNOTATION;
False,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,34,mport static com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_CSS_RENAMING_MAP;
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,36,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,862,public void testDefineCases() {
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,863,"String jsdoc = ""/** @define {number} */\n"";"
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,864,"test(jsdoc + ""goog.define('name', 1);"", jsdoc + ""var name = 1"");"
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,865,"test(jsdoc + ""goog.define('ns.name', 1);"", jsdoc + ""ns.name = 1"");"
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,868,public void testDefineErrorCases() {
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,869,"String jsdoc = ""/** @define {number} */\n"";"
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,870,"test(""goog.define('name', 1);"", """", MISSING_DEFINE_ANNOTATION);"
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,871,"test(jsdoc + ""goog.define('name.2', 1);"", """", INVALID_DEFINE_NAME_ERROR);"
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,872,"test(jsdoc + ""goog.define();"", """", NULL_ARGUMENT_ERROR);"
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,873,"test(jsdoc + ""goog.define('value');"", """", NULL_ARGUMENT_ERROR);"
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,874,"test(jsdoc + ""goog.define(5);"", """", INVALID_ARGUMENT_ERROR);"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,587,public void testDottedReferencesInJSDocType() {
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,588,SymbolTable table = createSymbolTable(
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,589,"""var goog = {};\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,590,"""/** @constructor */ goog.Foo = function() {}\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,591,"""/** @type {goog.Foo} */ var x;\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,592,"""/** @param {goog.Foo} x */ function f(x) {}\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,593,"""/** @return {function(): goog.Foo} */ function g() {}\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,594,"""/**\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,595,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,596,""" * @extends {goog.Foo}\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,597,""" */ function Sub() {}"");"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,598,"Symbol foo = getGlobalVar(table, ""goog.Foo"");"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,599,assertNotNull(foo);
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,601,List<Reference> refs = table.getReferenceList(foo);
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,602,"assertEquals(5, refs.size());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,604,"assertEquals(2, refs.get(0).getNode().getLineno());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,605,"assertEquals(20, refs.get(0).getNode().getCharno());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,606,"assertEquals(8, refs.get(0).getNode().getLength());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,608,"assertEquals(3, refs.get(1).getNode().getLineno());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,609,"assertEquals(11, refs.get(1).getNode().getCharno());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,611,"assertEquals(4, refs.get(2).getNode().getLineno());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,612,"assertEquals(12, refs.get(2).getNode().getCharno());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,614,"assertEquals(5, refs.get(3).getNode().getLineno());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,615,"assertEquals(25, refs.get(3).getNode().getCharno());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,617,"assertEquals(8, refs.get(4).getNode().getLineno());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,618,"assertEquals(13, refs.get(4).getNode().getCharno());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,27,import com.google.javascript.rhino.JSDocInfo.Marker;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1415,public void testParseDefineDescription() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1416,JSDocInfo doc = parse(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1417,"""@define {string} description of element \n next line*/"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1418,Marker defineMarker = doc.getMarkers().iterator().next();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1419,"assertEquals(""define"", defineMarker.getAnnotation().getItem());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1420,"assertTrue(defineMarker.getDescription().getItem().contains(""description of element""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1421,"assertTrue(defineMarker.getDescription().getItem().contains(""next line""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1424,public void testParsePrivateDescription() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1425,JSDocInfo doc =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1426,"parse(""@private {string} description \n next line*/"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1427,Marker defineMarker = doc.getMarkers().iterator().next();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1428,"assertEquals(""private"", defineMarker.getAnnotation().getItem());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1429,"assertTrue(defineMarker.getDescription().getItem().contains(""description ""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1430,"assertTrue(defineMarker.getDescription().getItem().contains(""next line""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1433,public void testParseProtectedDescription() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1434,JSDocInfo doc =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1435,"parse(""@protected {string} description \n next line*/"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1436,Marker defineMarker = doc.getMarkers().iterator().next();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1437,"assertEquals(""protected"", defineMarker.getAnnotation().getItem());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1438,"assertTrue(defineMarker.getDescription().getItem().contains(""description ""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1439,"assertTrue(defineMarker.getDescription().getItem().contains(""next line""));"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,83,"internetExplorerChecks, invalidCasts, missingProperties, "" +"
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,83,"""internetExplorerChecks, invalidCasts, misplacedTypeAnnotation, "" +"
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,84,"""missingProperties, "" +"
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,233,public static DiagnosticGroup MISPLACED_TYPE_ANNOTATION =
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,234,"DiagnosticGroups.registerGroup(""misplacedTypeAnnotation"","
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,235,RhinoErrorReporter.MISPLACED_TYPE_ANNOTATION);
False,src/com/google/javascript/jscomp/RhinoErrorReporter.java,src/com/google/javascript/jscomp/RhinoErrorReporter.java,53,"iagnosticType.warning(""JSC_BAD_JSDOC_ANNOTATION"", ""Parse error. {0}"");"
True,src/com/google/javascript/jscomp/RhinoErrorReporter.java,src/com/google/javascript/jscomp/RhinoErrorReporter.java,53,"DiagnosticType.warning(""JSC_BAD_JSDOC_ANNOTATION"", ""Parse error. {0}"");"
True,src/com/google/javascript/jscomp/RhinoErrorReporter.java,src/com/google/javascript/jscomp/RhinoErrorReporter.java,55,static final DiagnosticType MISPLACED_TYPE_ANNOTATION =
True,src/com/google/javascript/jscomp/RhinoErrorReporter.java,src/com/google/javascript/jscomp/RhinoErrorReporter.java,56,"DiagnosticType.disabled(""JSC_MISPLACED_TYPE_ANNOTATION"","
True,src/com/google/javascript/jscomp/RhinoErrorReporter.java,src/com/google/javascript/jscomp/RhinoErrorReporter.java,57,"""Type annotations are not allowed here. "" +"
True,src/com/google/javascript/jscomp/RhinoErrorReporter.java,src/com/google/javascript/jscomp/RhinoErrorReporter.java,58,"""Are you missing parentheses?"");"
True,src/com/google/javascript/jscomp/RhinoErrorReporter.java,src/com/google/javascript/jscomp/RhinoErrorReporter.java,94,"Pattern.compile(""^Type annotations are not allowed here.*""),"
True,src/com/google/javascript/jscomp/RhinoErrorReporter.java,src/com/google/javascript/jscomp/RhinoErrorReporter.java,95,"MISPLACED_TYPE_ANNOTATION,"
False,src/com/google/javascript/jscomp/RhinoErrorReporter.java,src/com/google/javascript/jscomp/RhinoErrorReporter.java,91,YPE_PARSE_ERROR);
True,src/com/google/javascript/jscomp/RhinoErrorReporter.java,src/com/google/javascript/jscomp/RhinoErrorReporter.java,99,TYPE_PARSE_ERROR
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,97,static final String MISPLACED_TYPE_ANNOTATION =
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,98,"""Type annotations are not allowed here. Are you missing parentheses?"";"
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,276,eturn jsDocParser.retrieveAndResetParsedJSDocInfo();
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,279,JSDocInfo info = jsDocParser.retrieveAndResetParsedJSDocInfo();
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,280,if (info != null) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,281,"validateTypeAnnotations(info, node, irNode);"
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,283,return info;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,289,private void validateTypeAnnotations(
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,290,"JSDocInfo info, AstNode node, Node irNode) {"
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,291,if (info.getType() != null) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,292,boolean valid = false;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,293,switch (node.getType()) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,294,// Casts are valid
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,295,case com.google.javascript.rhino.head.Token.LP:
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,296,valid = node instanceof ParenthesizedExpression;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,297,break;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,298,// Variable declarations are valid
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,299,case com.google.javascript.rhino.head.Token.VAR:
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,300,valid = true;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,301,break;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,302,// Function declarations are valid
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,303,case com.google.javascript.rhino.head.Token.FUNCTION:
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,304,FunctionNode fnNode = (FunctionNode)node;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,305,valid = fnNode.getFunctionType() == FunctionNode.FUNCTION_STATEMENT;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,306,break;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,307,// Object literal properties are valid
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,308,case com.google.javascript.rhino.head.Token.GET:
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,309,case com.google.javascript.rhino.head.Token.SET:
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,310,case com.google.javascript.rhino.head.Token.NAME:
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,311,case com.google.javascript.rhino.head.Token.NUMBER:
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,312,case com.google.javascript.rhino.head.Token.STRING:
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,313,valid = node.getParent() instanceof ObjectProperty;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,314,break;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,316,"// Property assignments are valid, if at the root of an expression."
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,317,case com.google.javascript.rhino.head.Token.ASSIGN:
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,318,if (node instanceof Assignment) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,319,valid = isExprStmt(node.getParent())
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,320,&& isPropAccess(((Assignment)node).getLeft());
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,322,break;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,324,"// Property definitions are valid, if at the root of an expression."
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,325,case com.google.javascript.rhino.head.Token.GETPROP:
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,326,case com.google.javascript.rhino.head.Token.GETELEM:
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,327,valid = isExprStmt(node.getParent());
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,328,break;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,330,if (!valid) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,331,"errorReporter.warning(MISPLACED_TYPE_ANNOTATION,"
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,332,"sourceName,"
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,333,"node.getLineno(), """", 0);"
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,338,private boolean isPropAccess(AstNode node) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,339,return node.getType() == com.google.javascript.rhino.head.Token.GETPROP
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,340,|| node.getType() == com.google.javascript.rhino.head.Token.GETELEM;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,343,private boolean isExprStmt(AstNode node) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,344,return node.getType() == com.google.javascript.rhino.head.Token.EXPR_RESULT
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,345,|| node.getType() == com.google.javascript.rhino.head.Token.EXPR_VOID;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,796,"ode node = newNode(transformTokenType(exprNode.getType()), transform(exprNode.getTarget()));"
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,862,Node node = newNode(
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,863,"transformTokenType(exprNode.getType()),"
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,864,transform(exprNode.getTarget()));
True,test/com/google/javascript/jscomp/CompilerTypeTestCase.java,test/com/google/javascript/jscomp/CompilerTypeTestCase.java,87,options.setWarningLevel(
True,test/com/google/javascript/jscomp/CompilerTypeTestCase.java,test/com/google/javascript/jscomp/CompilerTypeTestCase.java,88,"DiagnosticGroups.MISPLACED_TYPE_ANNOTATION, CheckLevel.WARNING);"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,4266,"""Type annotations are not allowed here. Are you missing parentheses?"");"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,5048,"/** @type {Foo} */ var x = (/** @type {Foo} */ {})"");"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,5050,/ Not really encourage because of possible ambiguity but it works.
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,5051,"estTypes(""/** @constructor */ function Foo() {} \n"" +"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,5052,"/** @type {Foo} */ var x = /** @type {Foo} */ {}"");"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,5049,"""/** @type {Foo} */ var x = (/** @type {Foo} */ y)"");"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,5264,"estTypes(""function g(f) { return /** @type Array */ new f(); }"");"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,5261,"testTypes(""function g(f) { return /** @type Array */ (new f()); }"");"
False,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,22,mport com.google.javascript.rhino.Node;
False,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,34,ublic CompilerPass getProcessor(Compiler compiler) {
False,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,35,eturn new CompilerPass() {
False,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,36,Override
False,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,37,"ublic void process(Node externs, Node root) {}"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,32,private boolean reportMisplacedTypeAnnotations;
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,34,@Override
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,35,protected void setUp() throws Exception {
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,36,reportMisplacedTypeAnnotations = false;
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,37,super.setUp();
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,64,public void testMisplacedTypeAnnotation() throws Exception {
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,65,reportMisplacedTypeAnnotations = false;
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,67,"assertNoWarningOrError(""var x = /** @type {string} */ y;"");"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,69,reportMisplacedTypeAnnotations = true;
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,71,String message =
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,72,"""Type annotations are not allowed here. "" +"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,73,"""Are you missing parentheses?"";"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,74,assertWarning(
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,75,"""var x = /** @type {string} */ y;"","
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,76,"RhinoErrorReporter.MISPLACED_TYPE_ANNOTATION,"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,77,message);
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,78,JSError error = assertWarning(
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,79,"""var x = /** @type {string} */ y;"","
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,80,"RhinoErrorReporter.MISPLACED_TYPE_ANNOTATION,"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,81,message);
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,83,"assertEquals(1, error.getLineNumber());"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,85,"// Rhino uses the ""beginning"" of the line where the comma appears,"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,86,// for some odd reason.
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,87,"assertEquals(0, error.getCharno());"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,91,* Verifies that the compiler emits an error for the given code.
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,93,private void assertNoWarningOrError(String code) {
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,94,Compiler compiler = parseCode(code);
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,95,"assertEquals(""Expected error"", 0, compiler.getErrorCount());"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,96,"assertEquals(""Expected warning"", 0, compiler.getErrorCount());"
False,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,70,ompiler compiler = new Compiler();
False,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,71,ist<SourceFile> externs = ImmutableList.of();
False,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,72,ist<SourceFile> inputs = ImmutableList.of(
False,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,73,"ourceFile.fromCode(""input"", code));"
False,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,74,"ompiler.init(externs, inputs, new CompilerOptions());"
False,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,75,ompiler.parseInputs();
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,104,Compiler compiler = parseCode(code);
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,115,* Verifies that the compiler emits an error for the given code.
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,117,private JSError assertWarning(
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,118,"String code, DiagnosticType type, String description) {"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,119,Compiler compiler = parseCode(code);
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,120,"assertEquals(""Expected warning"", 1, compiler.getWarningCount());"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,122,JSError error =
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,123,Iterables.getOnlyElement(Lists.newArrayList(compiler.getWarnings()));
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,124,"assertEquals(type, error.getType());"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,125,"assertEquals(description, error.description);"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,126,return error;
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,129,private Compiler parseCode(String code) {
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,130,Compiler compiler = new Compiler();
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,131,CompilerOptions options = new CompilerOptions();
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,132,if (reportMisplacedTypeAnnotations) {
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,133,options.setWarningLevel(
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,134,"DiagnosticGroups.MISPLACED_TYPE_ANNOTATION,"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,135,CheckLevel.WARNING);
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,138,List<SourceFile> externs = ImmutableList.of();
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,139,List<SourceFile> inputs = ImmutableList.of(
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,140,"SourceFile.fromCode(""input"", code));"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,141,"compiler.init(externs, inputs, options);"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,142,compiler.parseInputs();
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,143,return compiler;
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6209,"/** @type { function(string): {innerHTML: string} } */"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6210,"document.getElementById;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6209,"""/** @type { function(string): {innerHTML: string} } */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6210,"""document.getElementById;\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6213,"document.getElementById('node').innerHTML = list.toString();"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6213,"""document.getElementById('node').innerHTML = list.toString();"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6214,"// Parse warning, but still applied."
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6215,"""Type annotations are not allowed here. "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6216,"""Are you missing parentheses?"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6519,"""Type annotations are not allowed here. Are you missing parentheses?"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7520,// Mostly verifying that rhino actually understands these JsDocs.
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7521,"testTypes(""/** @constructor */ function Foo() {} \n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7522,"""/** @type {Foo} */ var x = /** @type {Foo} */ (y)"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7524,"testTypes(""/** @constructor */ function Foo() {} \n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7525,"""/** @type {Foo} */ var x = (/** @type {Foo} */ y)"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7532,public void testCast18() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7533,// Mostly verifying that legacy annotations are applied
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7534,// despite the parser warning.
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7521,"/** @type {Foo} */ var x = (/** @type {Foo} */ {})"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7536,"""/** @type {Foo} */ var x = (/** @type {Foo} */ {})"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7537,"""Type annotations are not allowed here. "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7538,"""Are you missing parentheses?"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7525,"/** @type {Foo} */ var x = /** @type {Foo} */ {}"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7542,"""/** @type {Foo} */ var x = /** @type {Foo} */ {}"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7543,"""Type annotations are not allowed here. "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7544,"""Are you missing parentheses?"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7861,"estTypes(""function g(f) { return /** @type Array */ new f(); }"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7880,"testTypes(""function g(f) { return /** @type Array */(new f()); }"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8512,"/** @type {Int} */ foo;\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8531,"""/** @type {Int} */ var foo;\n"" +"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,49,private static final String MISPLACED_TYPE_ANNOTATION =
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,50,IRFactory.MISPLACED_TYPE_ANNOTATION;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,979,public void testMisplacedTypeAnnotation1() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,980,// misuse with COMMA
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,981,parse(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,982,"""var o = {};"" +"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,983,"""/** @type {string} */ o.prop1 = 1, o.prop2 = 2;"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,984,MISPLACED_TYPE_ANNOTATION);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,987,public void testMisplacedTypeAnnotation2() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,988,// missing parenthese for the cast.
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,989,parse(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,990,"""var o = /** @type {string} */ getValue();"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,991,MISPLACED_TYPE_ANNOTATION);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,994,public void testMisplacedTypeAnnotation3() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,995,// missing parenthese for the cast.
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,996,parse(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,997,"""var o = 1 + /** @type {string} */ value;"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,998,MISPLACED_TYPE_ANNOTATION);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1001,public void testMisplacedTypeAnnotation4() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1002,// missing parenthese for the cast.
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1003,parse(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1004,"""var o = /** @type {!Array.<string>} */ ['hello', 'you'];"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1005,MISPLACED_TYPE_ANNOTATION);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1008,public void testMisplacedTypeAnnotation5() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1009,// missing parenthese for the cast.
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1010,parse(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1011,"""var o = (/** @type {!Foo} */ {});"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1012,MISPLACED_TYPE_ANNOTATION);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1015,public void testMisplacedTypeAnnotation6() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1016,"parse(""var o = /** @type {function():string} */ function() {return 'str';}"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1017,MISPLACED_TYPE_ANNOTATION);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1020,public void testMisplacedTypeAnnotation7() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1021,// TODO(johnlenz): handle this case
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1022,"parse(""function f(/** @type {string} */ a) {}"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1025,public void testValidTypeAnnotation1() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1026,"parse(""/** @type {string} */ var o = 'str';"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1027,"parse(""var /** @type {string} */ o = 'str', /** @type {number} */ p = 0;"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1028,"parse(""/** @type {function():string} */ function o() { return 'str'; }"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1029,"parse(""var o = {}; /** @type {string} */ o.prop = 'str';"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1030,"parse(""var o = {}; /** @type {string} */ o['prop'] = 'str';"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1031,"parse(""var o = { /** @type {string} */ prop : 'str' };"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1032,"parse(""var o = { /** @type {string} */ 'prop' : 'str' };"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1033,"parse(""var o = { /** @type {string} */ 1 : 'str' };"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1036,public void testValidTypeAnnotation2() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1037,mode = LanguageMode.ECMASCRIPT5;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1038,"parse(""var o = { /** @type {string} */ get prop() { return 'str' }};"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,1039,"parse(""var o = { /** @type {string} */ set prop(s) {}};"");"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AnalyzeNameReferences.java,src/com/google/javascript/jscomp/AnalyzeNameReferences.java,31, <li>If the name is reachable from the {@link NameReferenceGraph#MAIN}.</li>
True,src/com/google/javascript/jscomp/AnalyzeNameReferences.java,src/com/google/javascript/jscomp/AnalyzeNameReferences.java,31,* <li>If the name is reachable from the {@link NameReferenceGraph#main}.</li>
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,199,rivate Stack<NameContext> symbolStack = new Stack<NameContext>();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,199,private final Stack<NameContext> symbolStack = new Stack<NameContext>();
False,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,75,rivate List<NodeContext> injectables = new ArrayList<NodeContext>();
True,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,75,private final List<NodeContext> injectables = new ArrayList<NodeContext>();
False,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,268,rivate String name;
True,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,268,private final String name;
False,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,270,rivate Node node;
True,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,270,private final Node node;
False,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,272,rivate Node functionNode;
True,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,272,private final Node functionNode;
False,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,274,rivate Node target;
True,src/com/google/javascript/jscomp/AngularPass.java,src/com/google/javascript/jscomp/AngularPass.java,274,private final Node target;
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,25,mport com.google.javascript.jscomp.NameReferenceGraph.Name;
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,62,rivate AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,61,private final AbstractCompiler compiler;
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,67,"rivate Map<Node, Callsite> callsitesByNode;"
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,66,"private final Map<Node, Callsite> callsitesByNode;"
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,70,"rivate Map<Node, Function> functionsByNode;"
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,69,"private final Map<Node, Function> functionsByNode;"
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,76,rivate boolean computeBackwardGraph;
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,75,private final boolean computeBackwardGraph;
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,82,rivate boolean computeForwardGraph;
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,85," If true, then the callgraph will use NameReferenceGraph as a"
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,86," definition provider; otherwise, use the faster SimpleDefinitionProvider."
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,88,rivate boolean useNameReferenceGraph = false;
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,81,private final boolean computeForwardGraph;
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,353,f (useNameReferenceGraph) {
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,354,ameReferenceGraph referenceGraph = (NameReferenceGraph) provider;
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,346,SimpleDefinitionFinder finder = (SimpleDefinitionFinder) provider;
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,356,or (Function function : getAllFunctions()) {
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,357,f (!function.isMain()) {
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,358,tring functionName = function.getName();
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,348,for (DefinitionSite definitionSite : finder.getDefinitionSites()) {
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,349,Definition definition = definitionSite.definition;
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,360,f (functionName != null) {
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,361,ame symbol = referenceGraph.getSymbol(functionName);
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,362,"pdateFunctionForName(function, symbol);"
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,366, else {
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,367,impleDefinitionFinder finder = (SimpleDefinitionFinder) provider;
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,351,Function function = lookupFunctionForDefinition(definition);
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,369,or (DefinitionSite definitionSite : finder.getDefinitionSites()) {
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,370,efinition definition = definitionSite.definition;
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,372,unction function = lookupFunctionForDefinition(definition);
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,374,f (function != null) {
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,375,or (UseSite useSite : finder.getUseSites(definition)) {
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,376,"pdateFunctionForUse(function, useSite.node);"
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,353,if (function != null) {
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,354,for (UseSite useSite : finder.getUseSites(definition)) {
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,355,"updateFunctionForUse(function, useSite.node);"
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,384, Updates {@link Function} information (such as whether is is aliased
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,385, or exposed to .apply or .call from a {@link NameReferenceGraph.Name}.
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,387," Note: this method may be called multiple times per Function, each time"
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,388, with a different name.
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,390,"rivate void updateFunctionForName(Function function, Name name) {"
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,391,f (name.isAliased()) {
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,392,unction.isAliased = true;
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,395,f (name.exposedToCallOrApply()) {
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,396,unction.isExposedToCallOrApply = true;
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,541," This construction is the main cost of building the callgraph, so we offer"
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,542," the client a choice of NameReferenceGraph, which is slow and hopefully more"
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,543," precise, and SimpleDefinitionFinder, which is fast and perhaps not as"
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,544, precise.
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,546, We use SimpleNameFinder as the default because in practice it does
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,502,* We use SimpleNameFinder because in practice it does
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,552,f (useNameReferenceGraph) {
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,553,"/ Name reference graph is very, very slow"
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,554,ameReferenceGraphConstruction graphConstruction
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,555, new NameReferenceGraphConstruction(compiler);
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,557,"raphConstruction.process(externsRoot, jsRoot);"
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,559,eturn graphConstruction.getNameReferenceGraph();
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,560, else {
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,561,impleDefinitionFinder defFinder = new SimpleDefinitionFinder(compiler);
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,562,"efFinder.process(externsRoot, jsRoot);"
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,563,eturn defFinder;
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,508,SimpleDefinitionFinder defFinder = new SimpleDefinitionFinder(compiler);
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,509,"defFinder.process(externsRoot, jsRoot);"
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,510,return defFinder;
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,582,/ NameReferenceGraph throws an exception unless the node is
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,583,/ a GETPROP or a NAME
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,584,f (!useNameReferenceGraph
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,585,| (targetExpression.isGetProp()
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,586,|  targetExpression.isName())) {
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,588,ollection<Definition> definitions =
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,528,Collection<Definition> definitions =
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,591,f (definitions != null && !definitions.isEmpty()) {
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,592,eturn definitions;
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,531,if (definitions != null && !definitions.isEmpty()) {
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,532,return definitions;
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,606,rivate Node astNode;
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,545,private final Node astNode;
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,733,rivate Node astNode;
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,672,private final Node astNode;
False,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,822,ptions.jqueryPass = flags.processJqueryPrimitives &&
False,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,823,ompilationLevel.ADVANCED_OPTIMIZATIONS == level;
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,822,options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&
True,src/com/google/javascript/jscomp/CommandLineRunner.java,src/com/google/javascript/jscomp/CommandLineRunner.java,823,flags.processJqueryPrimitives;
False,src/com/google/javascript/jscomp/DotFormatter.java,src/com/google/javascript/jscomp/DotFormatter.java,50,"rivate HashMap<Node, Integer> assignments = new HashMap<Node, Integer>();"
True,src/com/google/javascript/jscomp/DotFormatter.java,src/com/google/javascript/jscomp/DotFormatter.java,50,"private final HashMap<Node, Integer> assignments = new HashMap<Node, Integer>();"
False,src/com/google/javascript/jscomp/DotFormatter.java,src/com/google/javascript/jscomp/DotFormatter.java,56,rivate Appendable builder;
True,src/com/google/javascript/jscomp/DotFormatter.java,src/com/google/javascript/jscomp/DotFormatter.java,56,private final Appendable builder;
True,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,364,@Override
True,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,365,public int hashCode() {
True,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,366,throw new UnsupportedOperationException();
True,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,93,@Override
True,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,94,public int hashCode() {
True,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,95,return node.hashCode();
True,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,156,@Override
True,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,157,public int hashCode() {
True,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,158,return reachingDef.hashCode();
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,48,rivate List<Node> removedNodes = Lists.newArrayList();
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,48,private final List<Node> removedNodes = Lists.newArrayList();
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,441,reconditions.checkState(
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,442,revUsedRenameMap.getNewNameToOriginalNameMap() instanceof Map);
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,441,Preconditions.checkNotNull(prevUsedRenameMap.getNewNameToOriginalNameMap());
False,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,441,reconditions.checkState(
False,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,442,revUsedRenameMap.getNewNameToOriginalNameMap() instanceof Map);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,441,Preconditions.checkNotNull(prevUsedRenameMap.getNewNameToOriginalNameMap());
False,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,306, @param digits_column_width The desired with of the string.
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,306,* @param digitsColumnWidth The desired with of the string.
False,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,402, @param silence_threshold Traces for time less than silence_threshold
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,402,* @param silenceThreshold Traces for time less than silence_threshold
False,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1033,"rivate ConcurrentMap<String, Long> map ="
True,src/com/google/javascript/jscomp/Tracer.java,src/com/google/javascript/jscomp/Tracer.java,1033,"private final ConcurrentMap<String, Long> map ="
False,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,40,rivate Scope topScope;
False,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,41,rivate MemoizedScopeCreator scopeCreator;
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,40,private final Scope topScope;
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,41,private final MemoizedScopeCreator scopeCreator;
False,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,105,reconditions.checkState(scopeCreator instanceof MemoizedScopeCreator);
False,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,106,or (Scope s :
False,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,107,(MemoizedScopeCreator) scopeCreator).getAllMemoizedScopes()) {
True,src/com/google/javascript/jscomp/TypeInferencePass.java,src/com/google/javascript/jscomp/TypeInferencePass.java,105,for (Scope s : scopeCreator.getAllMemoizedScopes()) {
True,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,104,@Override
True,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,105,public int hashCode() {
True,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,106,int hash = 1;
True,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,107,hash = hash * 3 + (srcPathRelativeToClosure == null ?
True,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,108,0 : srcPathRelativeToClosure.hashCode());
True,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,109,hash = hash * 5 + (pathOfDefiningFile == null ?
True,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,110,0 : pathOfDefiningFile.hashCode());
True,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,111,hash = hash * 7 + (requires == null ? 0 : requires.hashCode());
True,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,112,hash = hash * 11 + (provides == null ? 0 : provides.hashCode());
True,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java,113,return hash;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,133,rivate Node templateNode;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,133,private final Node templateNode;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,383, @see http://code.google.com/p/jsdoc-toolkit/wiki/InlineDocs
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,383,"* @see <a href=""http://code.google.com/p/jsdoc-toolkit/wiki/InlineDocs"">"
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,384,*   Using Inline Doc Comments</a>
False,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,81,rivate String name;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,81,private final String name;
False,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,120,rivate int value;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,120,private final int value;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,387,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,388,public int hashCode() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,389,return constMap.hashCode();
False,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,28, Tests for {@link Rename2Vars}.
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,28,* Tests for {@link RenameVars2}.
False,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,140,ublic void testReverseThrowsErrorOnDuplicate() throws ParseException {
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,140,public void testReverseThrowsErrorOnDuplicate() {
False,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,149,ublic void testReverseLookupOfNullFindsNoName() throws ParseException {
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,149,public void testReverseLookupOfNullFindsNoName() {
False,test/com/google/javascript/rhino/JSDocInfoTest.java,test/com/google/javascript/rhino/JSDocInfoTest.java,59,"rivate TestErrorReporter errorReporter = new TestErrorReporter(null, null);"
False,test/com/google/javascript/rhino/JSDocInfoTest.java,test/com/google/javascript/rhino/JSDocInfoTest.java,60,rivate JSTypeRegistry registry = new JSTypeRegistry(errorReporter);
True,test/com/google/javascript/rhino/JSDocInfoTest.java,test/com/google/javascript/rhino/JSDocInfoTest.java,59,"private final TestErrorReporter errorReporter = new TestErrorReporter(null, null);"
True,test/com/google/javascript/rhino/JSDocInfoTest.java,test/com/google/javascript/rhino/JSDocInfoTest.java,60,private final JSTypeRegistry registry = new JSTypeRegistry(errorReporter);

is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,25,import com.google.javascript.rhino.InputId;
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,52,ublic abstract CompilerInput getInput(String sourceName);
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,53,public abstract CompilerInput getInput(InputId inputId);
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,32,import com.google.javascript.rhino.jstype.StaticSourceFile;
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,339,f (visibility == Visibility.PRIVATE &&
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,340,t.getInput().getName().equals(docInfo.getSourceName())) {
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,341,f (docInfo.isConstructor() &&
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,342,sValidPrivateConstructorAccess(parent)) {
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,343,eturn;
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,340,if (visibility == Visibility.PRIVATE) {
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,341,StaticSourceFile varSrc = var.getSourceFile();
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,342,StaticSourceFile refSrc = name.getStaticSourceFile();
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,343,if (varSrc != null &&
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,344,refSrc != null &&
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,345,!varSrc.getName().equals(refSrc.getName())) {
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,346,if (docInfo.isConstructor() &&
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,347,isValidPrivateConstructorAccess(parent)) {
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,348,return;
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,346,ompiler.report(
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,347,".makeError(name, BAD_PRIVATE_GLOBAL_ACCESS,"
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,348,"ame.getString(), docInfo.getSourceName()));"
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,351,compiler.report(
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,352,"t.makeError(name, BAD_PRIVATE_GLOBAL_ACCESS,"
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,353,"name.getString(), varSrc.getName()));"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,35,import com.google.javascript.rhino.InputId;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,107,"rivate Map<String, CompilerInput> inputsByName;"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,108,"private Map<InputId, CompilerInput> inputsById;"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,357,nitInputsByNameMap();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,358,initInputsByIdMap();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,421,nitInputsByNameMap();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,422,initInputsByIdMap();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,456,oid initInputsByNameMap() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,457,"nputsByName = new HashMap<String, CompilerInput>();"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,457,void initInputsByIdMap() {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,458,"inputsById = new HashMap<InputId, CompilerInput>();"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,459,tring name = input.getName();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,460,f (!inputsByName.containsKey(name)) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,461,"nputsByName.put(name, input);"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,462, else {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,463,"eport(JSError.make(DUPLICATE_EXTERN_INPUT, name));"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,460,InputId id = input.getInputId();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,461,"CompilerInput previous = inputsById.put(id, input);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,462,if (previous != null) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,463,"report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,467,tring name = input.getName();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,468,f (!inputsByName.containsKey(name)) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,469,"nputsByName.put(name, input);"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,470, else {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,471,"eport(JSError.make(DUPLICATE_INPUT, name));"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,467,InputId id = input.getInputId();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,468,"CompilerInput previous = inputsById.put(id, input);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,469,if (previous != null) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,470,"report(JSError.make(DUPLICATE_INPUT, input.getName()));"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,966,ublic CompilerInput getInput(String name) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,967,eturn inputsByName.get(name);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,965,public CompilerInput getInput(InputId id) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,966,return inputsById.get(id);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,972, @param name The name of the file to be removed.
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,971,* @param id The id of the input to be removed.
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,974,rotected void removeExternInput(String name) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,975,ompilerInput input = getInput(name);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,973,protected void removeExternInput(InputId id) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,974,CompilerInput input = getInput(id);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,981,nputsByName.remove(name);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,980,inputsById.remove(id);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,991,f (inputsByName.containsKey(name)) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,990,SourceAst ast = new SyntheticAst(name);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,991,if (inputsById.containsKey(ast.getInputId())) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,994,ourceAst ast = new SyntheticAst(name);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,995,"ompilerInput input = new CompilerInput(ast, name, true);"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,996,"nputsByName.put(name, input);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,994,"CompilerInput input = new CompilerInput(ast, true);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,995,"inputsById.put(input.getInputId(), input);"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1004,tring intputName = ast.getSourceFile().getName();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1003,InputId id = ast.getInputId();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1006,"etInput(intputName) == null,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1007,"Duplicate input of name "" + intputName);"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1008,"nputsByName.put(intputName, new CompilerInput(ast));"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1005,"getInput(id) == null,"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1006,"""Duplicate input "" + id.getIdName());"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1007,"inputsById.put(id, new CompilerInput(ast));"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1021,tring inputName = ast.getSourceFile().getName();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1022,ompilerInput oldInput =
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1023,reconditions.checkNotNull(
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1024,"etInput(inputName),"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1025,"No input to replace: "" + inputName);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1020,CompilerInput oldInput = getInput(ast.getInputId());
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1021,Preconditions.checkNotNull(
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1022,"oldInput,"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1023,"""No input to replace: "" + ast.getInputId().getIdName());"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1039,"nputsByName.put(inputName, newInput);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1037,"inputsById.put(ast.getInputId(), newInput);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1045,// Verify the input id is set properly.
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1046,Preconditions.checkState(
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1047,newInput.getInputId().equals(oldInput.getInputId()));
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1048,InputId inputIdOnAst = newInput.getAstRoot(this).getInputId();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1049,Preconditions.checkState(newInput.getInputId().equals(inputIdOnAst));
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1290,private int syntheticCodeId = 0;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1288,"SSourceFile.fromCode("" [synthetic] "", js));"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1289,"nputsByName.put(input.getName(), input);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1295,"JSSourceFile.fromCode("" [synthetic:"" + (++syntheticCodeId) + ""] "", js));"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1296,"inputsById.put(input.getInputId(), input);"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1312,f (inputsByName == null) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1313,nputsByName = Maps.newHashMap();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1319,if (inputsById == null) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1320,inputsById = Maps.newHashMap();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1315,"nputsByName.put(input.getName(), input);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1322,"inputsById.put(input.getInputId(), input);"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1870,f (inputsByName.containsKey(sourceName)) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1871,eturn inputsByName.get(sourceName).getSourceFile();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1877,"// Here we assume that the source name is the input name, this"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1878,// is try of javascript parsed from source.
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1879,if (sourceName != null) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1880,CompilerInput input = inputsById.get(new InputId(sourceName));
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1881,if (input != null) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1882,return input.getSourceFile();
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,28,mport com.google.javascript.rhino.jstype.StaticSourceFile;
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,43,"mplements SourceAst, DependencyInfo, StaticSourceFile {"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,42,"implements SourceAst, DependencyInfo {"
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,48,inal private String name;
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,71,"his(ast, ast.getSourceFile().getName(), isExtern);"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,70,"this(ast, ast.getInputId(), isExtern);"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,73,"public CompilerInput(SourceAst ast, String inputId, boolean isExtern) {"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,74,"this(ast, new InputId(inputId), isExtern);"
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,74,"ublic CompilerInput(SourceAst ast, String inputName, boolean isExtern) {"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,77,"public CompilerInput(SourceAst ast, InputId inputId, boolean isExtern) {"
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,76,his.id = ast.getInputId();
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,77,his.name = inputName;
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,79,this.id = inputId;
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,91,"his(new JsAst(file), file.getName(), isExtern);"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,93,"this(new JsAst(file), isExtern);"
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,94,** Returns a id for this input. Must be unique across all inputs. */
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,96,/** Returns a name for this input. Must be unique across all inputs. */
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,103,eturn name;
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,105,return id.getIdName();
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,108,public SourceAst getAst() {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,109,return ast;
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,312,Override
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,327,Override
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,315,f (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,315,if (functionBlock == null || functionBlock.isFromExterns()) {
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1181,inal CompilerInput source;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1181,final JSModule module;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1182,final StaticSourceFile source;
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1202,his.source = t.getInput();
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1203,this.module = t.getInput() == null ? null : t.getInput().getModule();
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1204,this.source = node.getStaticSourceFile();
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1213,this.module = original.module;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1222,this.module = null;
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1241,eturn source == null ? null : source.getModule();
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1245,return module;
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,26,import com.google.javascript.rhino.InputId;
False,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,47,"rivate final Map<String, Integer> inputOrder;"
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,48,"private final Map<InputId, Integer> inputOrder;"
False,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,52,"lobalVarReferenceMap(List<CompilerInput> inputs,"
False,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,53,ist<CompilerInput> externs) {
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,53,"GlobalVarReferenceMap(List<CompilerInput> inputs, List<CompilerInput> externs) {"
False,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,57,"nputOrder.put(extern.getName(), ind);"
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,57,"inputOrder.put(extern.getInputId(), ind);"
False,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,61,"nputOrder.put(input.getName(), ind);"
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,61,"inputOrder.put(input.getInputId(), ind);"
False,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,108,tring sourceName = NodeUtil.getSourceName(root);
False,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,109,reconditions.checkNotNull(sourceName);
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,109,InputId inputId = root.getInputId();
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,110,Preconditions.checkNotNull(inputId);
False,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,113,emoveScriptReferences(sourceName);
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,114,removeScriptReferences(inputId);
False,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,117,"eplaceReferences(var.getName(), sourceName, entry.getValue());"
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,118,"replaceReferences(var.getName(), inputId, entry.getValue());"
False,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,122,rivate void removeScriptReferences(String sourceName) {
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,123,private void removeScriptReferences(InputId inputId) {
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,124,Preconditions.checkNotNull(inputId);
False,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,130,"ourceRefRange range = findSourceRefRange(oldRefs, sourceName);"
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,133,"SourceRefRange range = findSourceRefRange(oldRefs, inputId);"
False,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,137,"rivate void replaceReferences(String varName, String sourceName,"
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,140,"private void replaceReferences(String varName, InputId inputId,"
False,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,149,ourceName);
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,152,inputId);
False,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,161,tring sourceName) {
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,164,InputId inputId) {
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,165,Preconditions.checkNotNull(inputId);
False,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,167,nt sourceInputOrder = inputOrder.get(sourceName);
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,173,"Preconditions.checkState(inputOrder.containsKey(inputId), inputId.getIdName());"
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,174,int sourceInputOrder = inputOrder.get(inputId);
False,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,169,nt order = inputOrder.get(ref.getSourceFile().getName());
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,176,Preconditions.checkNotNull(ref.getInputId());
True,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,src/com/google/javascript/jscomp/GlobalVarReferenceMap.java,177,int order = inputOrder.get(ref.getInputId());
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,21,import com.google.javascript.rhino.InputId;
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,74,/** The current input */
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,75,private InputId inputId;
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,218,this.inputId = null;
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,226,f (!sourceName.isEmpty()) {
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,231,if (inputId != null) {
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,255,inputId = NodeUtil.getInputId(root);
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,279,inputId = NodeUtil.getInputId(scopeRoot);
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,320,inputId = null;
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,337,if (inputId == null) {
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,338,inputId = NodeUtil.getInputId(n);
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,404,eturn compiler.getInput(sourceName);
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,415,return compiler.getInput(inputId);
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,456,inputId = n.getInputId();
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,634,InputId getInputId() {
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,635,return inputId;
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,28,import com.google.javascript.rhino.InputId;
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,31,mport com.google.javascript.rhino.jstype.SimpleSourceFile;
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,494,private final InputId inputId;
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,498,"his(nameNode, basicBlock, t.getScope(), t.getInput());"
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,499,"this(nameNode, basicBlock, t.getScope(), t.getInput().getInputId());"
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,506,"asicBlock, t.getScope(), t.getInput());"
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,507,"basicBlock, t.getScope(), t.getInput().getInputId());"
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,512, @param sourceName The name of the script file.
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,516,tatic Reference createRefForTest(String sourceName) {
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,516,static Reference createRefForTest(CompilerInput input) {
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,518,"ew SimpleSourceFile(sourceName, false));"
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,518,input.getInputId());
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,522,"asicBlock basicBlock, Scope scope, StaticSourceFile sourceFile) {"
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,522,"BasicBlock basicBlock, Scope scope, InputId inputId) {"
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,526,his.sourceFile = sourceFile;
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,526,this.inputId = inputId;
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,527,this.sourceFile = nameNode.getStaticSourceFile();
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,540,public InputId getInputId() {
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,541,return inputId;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,30,import com.google.javascript.rhino.jstype.StaticSourceFile;
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,350,tring sourceName =
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,351,odeUtil.getSourceName(objType.getConstructor().getSource());
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,352,ompilerInput sourceInput = compiler.getInput(sourceName);
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,353,f (sourceInput == null || sourceInput.isExtern()) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,351,StaticSourceFile sourceFile =
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,352,NodeUtil.getSourceFile(objType.getConstructor().getSource());
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,353,if (sourceFile == null || sourceFile.isExtern()) {
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,159,CompilerInput getInput() {
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,160,return input;
False,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,161,eturn input;
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,165,return nameNode.getStaticSourceFile();
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,20,import com.google.javascript.rhino.InputId;
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,35,rivate String sourceName;
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,36,private InputId inputId;
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,68,ourceName = null;
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,69,inputId = null;
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,77,ourceName = null;
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,78,inputId = null;
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,85,ourceName = n.getSourceFileName();
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,86,if (inputId == null) {
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,87,inputId = NodeUtil.getInputId(n);
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,88,Preconditions.checkNotNull(inputId);
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,157,ourceName = n.getSourceFileName();
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,161,inputId = n.getInputId();
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,162,Preconditions.checkNotNull(inputId);
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,204,"SError.make(sourceName, n,"
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,209,"JSError.make(NodeUtil.getSourceName(n), n,"
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,215,"SError.make(sourceName, n,"
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,220,"JSError.make(NodeUtil.getSourceName(n), n,"
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,229,ompilerInput input = compiler.getInput(sourceName);
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,234,CompilerInput input = compiler.getInput(inputId);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,60,import com.google.javascript.rhino.InputId;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,398,* The InputId of the current node.
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,400,private InputId inputId;
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,422,"ublic final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,428,"public final boolean shouldTraverse(NodeTraversal t, Node n,"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,430,inputId = t.getInputId();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,433,Preconditions.checkNotNull(inputId);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,461,inputId = t.getInputId();
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,733,ompilerInput input = compiler.getInput(sourceName);
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,734,"reconditions.checkNotNull(input, sourceName);"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,735,ype = input.isExtern() ?
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,742,type = name.isFromExterns() ?
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1062,ompilerInput input = compiler.getInput(sourceName);
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1063,oolean isExtern = input.isExtern();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1070,CompilerInput input = compiler.getInput(inputId);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1071,// The input may be null if we are working with a AST snippet.
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1072,boolean isExtern = n.isFromExterns();
False,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,167,f (!reference.getSourceFile().isExtern()) {
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,167,if (!reference.getNode().isFromExterns()) {
False,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,26,mport com.google.javascript.rhino.InputId;
False,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,42,rivate static final CompilerInput INPUT1 =
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,41,private final CompilerInput INPUT1 =
False,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,44,rivate static final CompilerInput INPUT2 =
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,43,private final CompilerInput INPUT2 =
False,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,46,rivate static final CompilerInput INPUT3 =
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,45,private final CompilerInput INPUT3 =
False,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,48,rivate static final CompilerInput EXTERN1 =
False,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,49,"ew CompilerInput(JSSourceFile.fromCode(""externs1"", """"), true);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,47,private final CompilerInput EXTERN1 =
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,48,"new CompilerInput(JSSourceFile.fromCode(""extern1"", """"), true);"
False,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,67,rivate final Reference var1In1Ref =  createRefForTest(INPUT1.getName());
False,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,68,rivate final Reference var1In2Ref =  createRefForTest(INPUT2.getName());
False,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,69,rivate final Reference var1In3Ref =  createRefForTest(INPUT3.getName());
False,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,70,rivate final Reference var2In1Ref =  createRefForTest(INPUT1.getName());
False,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,71,rivate final Reference var2In3Ref =  createRefForTest(INPUT3.getName());
False,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,72,rivate final Reference var3In2Ref =  createRefForTest(INPUT2.getName());
False,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,73,rivate final Reference var3In1Ext =  createRefForTest(EXTERN1.getName());
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,66,private final Reference var1In1Ref = createRefForTest(INPUT1);
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,67,private final Reference var1In2Ref = createRefForTest(INPUT2);
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,68,private final Reference var1In3Ref = createRefForTest(INPUT3);
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,69,private final Reference var2In1Ref = createRefForTest(INPUT1);
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,70,private final Reference var2In3Ref = createRefForTest(INPUT3);
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,71,private final Reference var3In2Ref = createRefForTest(INPUT2);
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,72,private final Reference var3In1Ext = createRefForTest(EXTERN1);
False,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,98,criptRoot.setInputId(new InputId(INPUT2.getName()));
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,97,scriptRoot.setInputId(INPUT2.getInputId());
False,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,136,eference newVar1In2Ref = createRefForTest(INPUT2.getName());
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,135,Reference newVar1In2Ref = createRefForTest(INPUT2);
False,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,140,eference newVar2In2Ref = createRefForTest(INPUT2.getName());
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,139,Reference newVar2In2Ref = createRefForTest(INPUT2);
False,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,144,eference newVar3In2Ref = createRefForTest(INPUT2.getName());
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,143,Reference newVar3In2Ref = createRefForTest(INPUT2);
False,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,173,eference newVar3In2Ref = createRefForTest(INPUT2.getName());
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,172,Reference newVar3In2Ref = createRefForTest(INPUT2);
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,7057,"ode n = compiler.getInput(""[testcode]"").getAstRoot(compiler);"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,7058,"ode externsNode = compiler.getInput(""[externs]"").getAstRoot(compiler);"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,7057,"Node n = compiler.getInput(new InputId(""[testcode]"")).getAstRoot(compiler);"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,7058,"Node externsNode = compiler.getInput(new InputId(""[externs]""))"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,7059,.getAstRoot(compiler);
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9077,"ode n = compiler.getInput(""[testcode]"").getAstRoot(compiler);"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9078,"ode externsNode = compiler.getInput(""[externs]"").getAstRoot(compiler);"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9077,"Node n = compiler.getInput(new InputId(""[testcode]"")).getAstRoot(compiler);"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9078,"Node externsNode = compiler.getInput(new InputId(""[externs]""))"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9079,.getAstRoot(compiler);

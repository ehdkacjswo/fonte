is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,2,* Copyright 2013 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,20,import com.google.common.collect.ImmutableList;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,21,import com.google.javascript.rhino.IR;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,22,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,23,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,25,import java.util.Collections;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,26,import java.util.Comparator;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,28,/** A class that represents a minimized conditional expression.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,29,"*  Depending on the context, a leading NOT node in front of the conditional"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,30,"*  may or may not be counted as a cost, so this class provides ways to"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,31,*  access minimized versions of both of those ASTs.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,33,*  @author blickly@google.com (Ben Lickly)
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,35,class MinimizedCondition {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,37,/** Definitions of the style of minimization preferred. */
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,38,enum MinimizationStyle {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,39,/** Compute the length of the minimized condition as including
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,40,"*  any leading NOT node, if present. */"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,41,"PREFER_UNNEGATED,"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,42,/** Compute the length of the minimized condition without penalizing
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,43,"*  a leading NOT node, if present. */"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,44,ALLOW_LEADING_NOT;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,47,/** A representation equivalent to the original condition. */
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,48,private final MeasuredNode positive;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,49,/** A representation equivalent to the negation of the original condition. */
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,50,private final MeasuredNode negative;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,52,/** A placeholder at the same AST location as the original condition */
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,53,private Node placeholder;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,55,"private MinimizedCondition(MeasuredNode p, MeasuredNode n) {"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,56,Preconditions.checkArgument(p.node.getParent() == null);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,57,Preconditions.checkArgument(n.node.getParent() == null);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,58,positive = p;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,59,negative = n.change();
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,62,Node getPlaceholder() {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,63,return placeholder;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,66,MinimizedCondition setPlaceholder(Node placeholder) {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,67,this.placeholder = placeholder;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,68,return this;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,71,"/** Remove the passed condition node from the AST, and then return a"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,72,*  MinimizedCondition that represents the condition node after
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,73,*  minimization.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,75,static MinimizedCondition fromConditionNode(Node n) {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,76,MinimizedCondition minCond;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,77,switch (n.getType()) {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,78,case Token.NOT:
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,79,case Token.AND:
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,80,case Token.OR:
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,81,case Token.HOOK:
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,82,case Token.COMMA:
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,83,Node placeholder = swapWithPlaceholderNode(n);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,84,return computeMinimizedCondition(n).setPlaceholder(placeholder);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,85,default:
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,86,return unoptimized(n);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,90,/** Return the shorter representation of the original condition node.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,92,* @param style Whether to count a leading NOT in doing the minimization.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,93,*  i.e. Prefer the right side in cases such as:
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,94,*    !x || !y || z  ==>  !(x && y && !z)
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,95,*  This is useful in contexts such as IFs or HOOKs where subsequent
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,96,*  optimizations can efficiently deal with leading NOTs.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,98,"*  @return The minimized condition MeasuredNode, with equivalent semantics"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,99,*    to that passed to #fromConditionNode().
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,101,MeasuredNode getMinimized(MinimizationStyle style) {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,102,if (style == MinimizationStyle.PREFER_UNNEGATED
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,103,|| positive.node.isNot()
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,104,|| positive.length <= negative.length) {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,105,return positive;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,106,} else {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,107,return negative.addNot();
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,111,"/** Return a MeasuredNode of the given condition node, without minimizing"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,112,* the result.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,114,*  @param n The conditional expression tree to minimize.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,115,*   This must be removed from the tree before being passed in connected.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,116,*  @return A MinimizedCondition object representing that tree.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,118,static MinimizedCondition unoptimized(Node n) {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,119,Preconditions.checkNotNull(n.getParent());
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,120,Node placeholder = swapWithPlaceholderNode(n);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,121,"MeasuredNode pos = new MeasuredNode(n, 0, false);"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,122,"// In the unoptimized case, we want to always return the positive side,"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,123,// so we set the negative side to a SCRIPT node (never valid inside an
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,124,// expression) with an unreasonably high length so that it's never chosen.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,125,"MeasuredNode neg = new MeasuredNode(IR.script(), Integer.MAX_VALUE, true);"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,126,"return new MinimizedCondition(pos, neg).setPlaceholder(placeholder);"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,129,"/** Remove the given node from the AST, and replace it with a placeholder"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,130,*  SCRIPT node.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,131,*  @return The new placeholder node.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,133,private static Node swapWithPlaceholderNode(Node n) {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,134,Preconditions.checkNotNull(n.getParent());
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,135,Node placeholder = IR.script();
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,136,"n.getParent().replaceChild(n, placeholder);"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,137,return placeholder;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,140,/** Minimize the condition at the given node.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,142,*  @param n The conditional expression tree to minimize.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,143,*   This must be removed from the tree before being passed in connected.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,144,*  @return A MinimizedCondition object representing that tree.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,146,private static MinimizedCondition computeMinimizedCondition(Node n) {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,147,Preconditions.checkArgument(n.getParent() == null);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,148,switch (n.getType()) {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,149,case Token.NOT: {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,150,MinimizedCondition subtree =
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,151,computeMinimizedCondition(n.getFirstChild().detachFromParent());
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,152,ImmutableList<MeasuredNode> positiveAsts = ImmutableList.of(
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,153,"subtree.positive.cloneTree().addNot(),"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,154,subtree.negative.cloneTree());
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,155,ImmutableList<MeasuredNode> negativeAsts = ImmutableList.of(
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,156,"subtree.negative.negate(),"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,157,subtree.positive);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,158,return new MinimizedCondition(
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,159,"Collections.min(positiveAsts, AST_LENGTH_COMPARATOR),"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,160,"Collections.min(negativeAsts, AST_LENGTH_COMPARATOR));"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,162,case Token.AND:
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,163,case Token.OR: {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,164,int opType = n.getType();
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,165,int complementType = opType == Token.AND ? Token.OR : Token.AND;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,166,MinimizedCondition leftSubtree =
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,167,computeMinimizedCondition(n.getFirstChild().detachFromParent());
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,168,MinimizedCondition rightSubtree =
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,169,computeMinimizedCondition(n.getLastChild().detachFromParent());
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,170,ImmutableList<MeasuredNode> positiveAsts = ImmutableList.of(
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,171,"MeasuredNode.addNode(new Node(opType).srcref(n),"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,172,"leftSubtree.positive.cloneTree(),"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,173,"rightSubtree.positive.cloneTree()),"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,174,"MeasuredNode.addNode(new Node(complementType).srcref(n),"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,175,"leftSubtree.negative.cloneTree(),"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,176,rightSubtree.negative.cloneTree()).negate());
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,177,ImmutableList<MeasuredNode> negativeAsts = ImmutableList.of(
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,178,"MeasuredNode.addNode(new Node(opType).srcref(n),"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,179,"leftSubtree.positive,"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,180,"rightSubtree.positive).negate(),"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,181,"MeasuredNode.addNode(new Node(complementType).srcref(n),"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,182,"leftSubtree.negative,"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,183,rightSubtree.negative));
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,184,return new MinimizedCondition(
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,185,"Collections.min(positiveAsts, AST_LENGTH_COMPARATOR),"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,186,"Collections.min(negativeAsts, AST_LENGTH_COMPARATOR));"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,188,case Token.HOOK: {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,189,Node cond = n.getFirstChild();
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,190,Node thenNode = cond.getNext();
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,191,Node elseNode = thenNode.getNext();
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,192,MinimizedCondition thenSubtree =
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,193,computeMinimizedCondition(thenNode.detachFromParent());
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,194,MinimizedCondition elseSubtree =
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,195,computeMinimizedCondition(elseNode.detachFromParent());
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,196,MeasuredNode posTree = MeasuredNode.addNode(
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,197,"new Node(Token.HOOK, cond.cloneTree()).srcref(n),"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,198,"thenSubtree.positive,"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,199,elseSubtree.positive);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,200,MeasuredNode negTree = MeasuredNode.addNode(
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,201,"new Node(Token.HOOK, cond.cloneTree()).srcref(n),"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,202,"thenSubtree.negative,"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,203,elseSubtree.negative);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,204,"return new MinimizedCondition(posTree, negTree);"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,206,case Token.COMMA: {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,207,Node lhs = n.getFirstChild();
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,208,MinimizedCondition rhsSubtree =
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,209,computeMinimizedCondition(lhs.getNext().detachFromParent());
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,210,MeasuredNode posTree = MeasuredNode.addNode(
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,211,"new Node(Token.COMMA, lhs.cloneTree()).srcref(n),"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,212,rhsSubtree.positive);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,213,MeasuredNode negTree = MeasuredNode.addNode(
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,214,"new Node(Token.COMMA, lhs.cloneTree()).srcref(n),"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,215,rhsSubtree.negative);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,216,"return new MinimizedCondition(posTree, negTree);"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,218,default: {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,219,"MeasuredNode pos = new MeasuredNode(n, 0, false);"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,220,MeasuredNode neg = pos.cloneTree().negate();
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,221,"return new MinimizedCondition(pos, neg);"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,226,private static final Comparator<MeasuredNode> AST_LENGTH_COMPARATOR =
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,227,new Comparator<MeasuredNode>() {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,228,@Override
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,229,"public int compare(MeasuredNode o1, MeasuredNode o2) {"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,230,return o1.length - o2.length;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,234,/** An AST-node along with some additional metadata. */
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,235,static class MeasuredNode {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,236,private Node node;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,237,private int length;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,238,private boolean changed;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,240,Node getNode() {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,241,return node;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,244,boolean isChanged() {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,245,return changed;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,248,"MeasuredNode(Node n, int len, boolean ch) {"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,249,node = n;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,250,length = len;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,251,changed = ch;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,254,private MeasuredNode negate() {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,255,this.change();
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,256,int complementOperator;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,257,switch (node.getType()) {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,258,default:
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,259,return this.addNot();
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,260,// Otherwise a binary operator with a complement.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,261,case Token.EQ:
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,262,complementOperator = Token.NE;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,263,break;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,264,case Token.NE:
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,265,complementOperator = Token.EQ;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,266,break;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,267,case Token.SHEQ:
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,268,complementOperator = Token.SHNE;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,269,break;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,270,case Token.SHNE:
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,271,complementOperator = Token.SHEQ;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,272,break;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,274,// Clone entire tree and just change operator.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,275,node.setType(complementOperator);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,276,return this;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,279,private MeasuredNode change() {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,280,this.changed = true;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,281,return this;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,284,private MeasuredNode addNot() {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,285,"node = new Node(Token.NOT, node).srcref(node);"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,286,length += estimateCostOneLevel(node);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,287,return this;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,290,/** Estimate the number of characters in the textual representation of
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,291,*  the given node and that will be devoted to negation or parentheses.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,292,*  Since these are the only characters that flipping a condition
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,293,"*  according to De Morgan's rule can affect, these are the only ones"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,294,*  we count.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,295,"*  Not nodes are counted by the NOT node itself, whereas"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,296,*  parentheses around an expression are counted by the parent node.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,297,*  @param n The node to be checked.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,298,*  @return The number of negations and parentheses in the node.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,300,private static int estimateCostOneLevel(Node n) {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,301,int cost = 0;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,302,if (n.isNot()) {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,303,cost++;  // A negation is needed.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,305,int parentPrecedence = NodeUtil.precedence(n.getType());
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,306,for (Node child = n.getFirstChild();
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,307,child != null; child = child.getNext()) {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,308,"if (PeepholeMinimizeConditions.isLowerPrecedence(child, parentPrecedence)) {"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,309,cost += 2;  // A pair of parenthesis is needed.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,312,return cost;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,315,private MeasuredNode cloneTree() {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,316,"return new MeasuredNode(node.cloneTree(), length, changed);"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,319,"private static MeasuredNode addNode(Node parent, MeasuredNode... children) {"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,320,int cost = 0;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,321,boolean changed = false;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,322,for (MeasuredNode child : children) {
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,323,parent.addChildrenToBack(child.node);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,324,cost += child.length;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,325,changed = changed || child.changed;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,327,cost += estimateCostOneLevel(parent);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,328,"return new MeasuredNode(parent, cost, changed);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,21,mport com.google.common.collect.ImmutableList;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,21,import com.google.javascript.jscomp.MinimizedCondition.MinimizationStyle;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,27,mport java.util.Collections;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,28,mport java.util.Comparator;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,456,rivate Node tryMinimizeExprResult(Node node) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,457,ode originalCond = node.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,458,ode placeholder = IR.script();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,459,"ode.replaceChild(originalCond, placeholder);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,453,private Node tryMinimizeExprResult(Node n) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,461,inimizedCondition.fromConditionNode(originalCond) :
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,462,inimizedCondition.unoptimized(originalCond);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,455,MinimizedCondition.fromConditionNode(n.getFirstChild()) :
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,456,MinimizedCondition.unoptimized(n.getFirstChild());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,464,inCond.getShorterRepresentation(false);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,465,f (mNode.node.isNot()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,458,minCond.getMinimized(MinimizationStyle.ALLOW_LEADING_NOT);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,459,Node placeholder = minCond.getPlaceholder();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,460,if (mNode.getNode().isNot()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,467,"ode.replaceChild(placeholder, mNode.node.removeFirstChild());"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,462,"n.replaceChild(placeholder, mNode.getNode().removeFirstChild());"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,472,eturn node;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,467,return n;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,482,ode originalCond = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,483,ode placeholder = IR.script();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,484,".replaceChild(originalCond, placeholder);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,486,inimizedCondition.fromConditionNode(originalCond) :
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,487,inimizedCondition.unoptimized(originalCond);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,478,MinimizedCondition.fromConditionNode(n.getFirstChild()) :
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,479,MinimizedCondition.unoptimized(n.getFirstChild());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,489,inCond.getShorterRepresentation(false);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,490,f (mNode.node.isNot()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,481,minCond.getMinimized(MinimizationStyle.ALLOW_LEADING_NOT);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,482,Node placeholder = minCond.getPlaceholder();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,483,if (mNode.getNode().isNot()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,493,".replaceChild(placeholder, mNode.node.removeFirstChild());"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,486,"n.replaceChild(placeholder, mNode.getNode().removeFirstChild());"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,525,ode placeholder = IR.script().srcref(originalCond);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,526,".replaceChild(originalCond, placeholder);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,518,MinimizedCondition minCond = (aggressiveMinimization) ?
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,519,MinimizedCondition.fromConditionNode(originalCond) :
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,520,MinimizedCondition.unoptimized(originalCond);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,521,originalCond = null;  // originalCond was mutated and should not be used.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,523,Node placeholder = minCond.getPlaceholder();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,530,f (aggressiveMinimization) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,531,inimizedCondition minCond = MinimizedCondition
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,532,fromConditionNode(originalCond);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,533,/ Compute two minimized representations. The first representation counts
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,534,"/ a leading NOT node, and the second ignores a leading NOT node."
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,535,"/ If we can fold the if statement into a HOOK or boolean operation,"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,536,"/ then the NOT node does not matter, and we prefer the second condition."
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,537,"/ If we cannot fold the if statement, then we prefer the first condition."
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,538,nnegatedCond = minCond.getShorterRepresentation(true);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,539,hortCond = minCond.getShorterRepresentation(false);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,540, else {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,541,nnegatedCond = new MinimizedCondition.MeasuredNode(
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,542,"riginalCond, 0, false);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,543,hortCond = unnegatedCond;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,545,riginalCond = null;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,527,// Compute two minimized representations. The first representation counts
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,528,"// a leading NOT node, and the second ignores a leading NOT node."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,529,"// If we can fold the if statement into a HOOK or boolean operation,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,530,"// then the NOT node does not matter, and we prefer the second condition."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,531,"// If we cannot fold the if statement, then we prefer the first condition."
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,532,unnegatedCond = minCond.getMinimized(MinimizationStyle.PREFER_UNNEGATED);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,533,shortCond = minCond.getMinimized(MinimizationStyle.ALLOW_LEADING_NOT);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,558,f (shortCond.node.isNot()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,546,if (shortCond.getNode().isNot()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,561,"hortCond.node.removeFirstChild(),"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,549,"shortCond.getNode().removeFirstChild(),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,573,"f (isLowerPrecedence(shortCond.node, AND_PRECEDENCE) &&"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,561,"if (isLowerPrecedence(shortCond.getNode(), AND_PRECEDENCE) &&"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,585,"ode and = IR.and(shortCond.node, expr.removeFirstChild()).srcref(n);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,573,"Node and = IR.and(shortCond.getNode(), expr.removeFirstChild()).srcref(n);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,604,"(isLowerPrecedence(unnegatedCond.node, AND_PRECEDENCE) &&"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,592,"!(isLowerPrecedence(unnegatedCond.getNode(), AND_PRECEDENCE) &&"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,609,"nnegatedCond.node,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,597,"unnegatedCond.getNode(),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,632,f (shortCond.node.isNot() && !consumesDanglingElse(elseBranch)) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,633,".replaceChild(placeholder, shortCond.node.removeFirstChild());"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,620,if (shortCond.getNode().isNot() && !consumesDanglingElse(elseBranch)) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,621,"n.replaceChild(placeholder, shortCond.getNode().removeFirstChild());"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,652,"R.hook(shortCond.node, thenExpr, elseExpr)"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,640,"IR.hook(shortCond.getNode(), thenExpr, elseExpr)"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,675,!mayHaveSideEffects(unnegatedCond.node) ||
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,663,(!mayHaveSideEffects(unnegatedCond.getNode()) ||
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,684,"ode hookNode = IR.hook(shortCond.node, thenExpr, elseExpr).srcref(n);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,672,"Node hookNode = IR.hook(shortCond.getNode(), thenExpr, elseExpr)"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,673,.srcref(n);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,700,"R.hook(shortCond.node, thenOp, elseOp).srcref(n));"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,689,"IR.hook(shortCond.getNode(), thenOp, elseOp).srcref(n));"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,725,"ode hookNode = IR.hook(shortCond.node, thenExpr, elseExpr)"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,714,"Node hookNode = IR.hook(shortCond.getNode(), thenExpr, elseExpr)"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,750,"ode hookNode = IR.hook(shortCond.node, thenExpr, elseExpr)"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,739,"Node hookNode = IR.hook(shortCond.getNode(), thenExpr, elseExpr)"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,973,"rivate static boolean isLowerPrecedence(Node n, final int precedence) {"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,962,"static boolean isLowerPrecedence(Node n, final int precedence) {"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1011,ode placeholder = IR.script();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1012,".getParent().replaceChild(n, placeholder);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1014,"eturn replaceNode(placeholder,"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1015,inCond.getShorterRepresentation(true));
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1001,return replaceNode(
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1002,"minCond.getPlaceholder(),"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1003,minCond.getMinimized(MinimizationStyle.PREFER_UNNEGATED));
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1023,"arent.replaceChild(lhs, rhs.node);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1024,f (rhs.changed) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1011,"parent.replaceChild(lhs, rhs.getNode());"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1012,if (rhs.isChanged()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1027,eturn rhs.node;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1030,** A class that represents a minimized conditional expression.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1031,"  Depending on the context, either the original conditional, or the"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1032,"  negation of the original conditional may be needed, so this class"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1033,  provides ways to access minimized versions of both of those ASTs.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1035,tatic class MinimizedCondition {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1036,tatic class MeasuredNode {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1037,ode node;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1038,nt length;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1039,oolean changed;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1041,"easuredNode(Node n, int len, boolean ch) {"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1042,ode = n;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1043,ength = len;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1044,hanged = ch;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1047,rivate MeasuredNode negate() {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1048,his.change();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1049,nt complementOperator;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1050,witch (node.getType()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1051,efault:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1052,eturn this.addNot();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1053,/ Otherwise a binary operator with a complement.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1054,ase Token.EQ:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1055,omplementOperator = Token.NE;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1056,reak;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1057,ase Token.NE:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1058,omplementOperator = Token.EQ;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1059,reak;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1060,ase Token.SHEQ:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1061,omplementOperator = Token.SHNE;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1062,reak;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1063,ase Token.SHNE:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1064,omplementOperator = Token.SHEQ;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1065,reak;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1067,/ Clone entire tree and just change operator.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1068,ode.setType(complementOperator);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1069,eturn this;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1072,rivate MeasuredNode change() {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1073,his.changed = true;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1074,eturn this;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1077,rivate MeasuredNode addNot() {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1078,"ode = new Node(Token.NOT, node).srcref(node);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1079,ength += estimateCostOneLevel(node);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1080,eturn this;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1083,** Estimate the number of characters in the textual representation of
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1084,  the given node and that will be devoted to negation or parentheses.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1085,  Since these are the only characters that flipping a condition
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1086,"  according to De Morgan's rule can affect, these are the only ones"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1087,  we count.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1088,"  Not nodes are counted by the NOT node itself, whereas"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1089,  parentheses around an expression are counted by the parent node.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1090,  @param n The node to be checked.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1091,  @return The number of negations and parentheses in the node.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1093,rivate static int estimateCostOneLevel(Node n) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1094,nt cost = 0;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1095,f (n.isNot()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1096,ost++;  // A negation is needed.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1098,nt parentPrecedence = NodeUtil.precedence(n.getType());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1099,or (Node child = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1100,hild != null; child = child.getNext()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1101,"f (isLowerPrecedence(child, parentPrecedence)) {"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1102,ost += 2;  // A pair of parenthesis is needed.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1105,eturn cost;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1108,easuredNode cloneTree() {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1109,"eturn new MeasuredNode(node.cloneTree(), length, changed);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1112,"tatic MeasuredNode addNode(Node parent, MeasuredNode... children) {"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1113,nt cost = 0;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1114,oolean changed = false;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1115,or (MeasuredNode child : children) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1116,arent.addChildrenToBack(child.node);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1117,ost += child.length;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1118,hanged = changed || child.changed;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1120,ost += estimateCostOneLevel(parent);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1121,"eturn new MeasuredNode(parent, cost, changed);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1125,rivate final MeasuredNode positive;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1126,rivate final MeasuredNode negative;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1128,"rivate MinimizedCondition(MeasuredNode p, MeasuredNode n) {"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1129,reconditions.checkArgument(p.node.getParent() == null);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1130,reconditions.checkArgument(n.node.getParent() == null);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1131,ositive = p;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1132,egative = n.change();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1135,tatic MinimizedCondition fromConditionNode(Node n) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1136,witch (n.getType()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1137,ase Token.NOT:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1138,ase Token.AND:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1139,ase Token.OR:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1140,ase Token.HOOK:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1141,ase Token.COMMA:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1142,eturn computeMinimizedCondition(n);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1143,efault:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1144,eturn unoptimized(n);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1148,** Minimize the condition at the given node.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1150,  @param n The conditional expression tree to minimize.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1151,   This must be removed from the tree before being passed in connected.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1152,  @return A MinimizedCondition object representing that tree.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1154,rivate static MinimizedCondition computeMinimizedCondition(Node n) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1155,reconditions.checkArgument(n.getParent() == null);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1156,witch (n.getType()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1157,ase Token.NOT: {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1158,inimizedCondition subtree =
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1159,omputeMinimizedCondition(n.getFirstChild().detachFromParent());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1160,mmutableList<MeasuredNode> positiveAsts = ImmutableList.of(
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1161,"ubtree.positive.cloneTree().addNot(),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1162,ubtree.negative.cloneTree());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1163,mmutableList<MeasuredNode> negativeAsts = ImmutableList.of(
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1164,"ubtree.negative.negate(),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1165,ubtree.positive);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1166,eturn new MinimizedCondition(
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1167,"ollections.min(positiveAsts, AST_LENGTH_COMPARATOR),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1168,"ollections.min(negativeAsts, AST_LENGTH_COMPARATOR));"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1170,ase Token.AND:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1171,ase Token.OR: {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1172,nt opType = n.getType();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1173,nt complementType = opType == Token.AND ? Token.OR : Token.AND;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1174,inimizedCondition leftSubtree =
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1175,omputeMinimizedCondition(n.getFirstChild().detachFromParent());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1176,inimizedCondition rightSubtree =
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1177,omputeMinimizedCondition(n.getLastChild().detachFromParent());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1178,mmutableList<MeasuredNode> positiveAsts = ImmutableList.of(
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1179,"easuredNode.addNode(new Node(opType).srcref(n),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1180,"eftSubtree.positive.cloneTree(),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1181,"ightSubtree.positive.cloneTree()),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1182,"easuredNode.addNode(new Node(complementType).srcref(n),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1183,"eftSubtree.negative.cloneTree(),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1184,ightSubtree.negative.cloneTree()).negate());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1185,mmutableList<MeasuredNode> negativeAsts = ImmutableList.of(
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1186,"easuredNode.addNode(new Node(opType).srcref(n),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1187,"eftSubtree.positive,"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1188,"ightSubtree.positive).negate(),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1189,"easuredNode.addNode(new Node(complementType).srcref(n),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1190,"eftSubtree.negative,"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1191,ightSubtree.negative));
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1192,eturn new MinimizedCondition(
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1193,"ollections.min(positiveAsts, AST_LENGTH_COMPARATOR),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1194,"ollections.min(negativeAsts, AST_LENGTH_COMPARATOR));"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1196,ase Token.HOOK: {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1197,ode cond = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1198,ode thenNode = cond.getNext();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1199,ode elseNode = thenNode.getNext();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1200,inimizedCondition thenSubtree =
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1201,omputeMinimizedCondition(thenNode.detachFromParent());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1202,inimizedCondition elseSubtree =
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1203,omputeMinimizedCondition(elseNode.detachFromParent());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1204,easuredNode posTree = MeasuredNode.addNode(
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1205,"ew Node(Token.HOOK, cond.cloneTree()).srcref(n),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1206,"henSubtree.positive,"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1207,lseSubtree.positive);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1208,easuredNode negTree = MeasuredNode.addNode(
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1209,"ew Node(Token.HOOK, cond.cloneTree()).srcref(n),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1210,"henSubtree.negative,"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1211,lseSubtree.negative);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1212,"eturn new MinimizedCondition(posTree, negTree);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1214,ase Token.COMMA: {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1215,ode lhs = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1216,inimizedCondition rhsSubtree =
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1217,omputeMinimizedCondition(lhs.getNext().detachFromParent());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1218,easuredNode posTree = MeasuredNode.addNode(
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1219,"ew Node(Token.COMMA, lhs.cloneTree()).srcref(n),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1220,hsSubtree.positive);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1221,easuredNode negTree = MeasuredNode.addNode(
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1222,"ew Node(Token.COMMA, lhs.cloneTree()).srcref(n),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1223,hsSubtree.negative);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1224,"eturn new MinimizedCondition(posTree, negTree);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1226,efault: {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1227,"easuredNode pos = new MeasuredNode(n, 0, false);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1228,easuredNode neg = pos.cloneTree().negate();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1229,"eturn new MinimizedCondition(pos, neg);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1234,"** Return a MeasuredNode of the given condition node, without minimizing"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1235, the result.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1237,  @param n The conditional expression tree to minimize.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1238,   This must be removed from the tree before being passed in connected.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1239,  @return A MinimizedCondition object representing that tree.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1241,tatic MinimizedCondition unoptimized(Node n) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1242,reconditions.checkArgument(n.getParent() == null);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1243,"easuredNode pos = new MeasuredNode(n, 0, false);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1244,"/ In the unoptimized case, we want to always return the positive side,"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1245,/ so we set the negative side to a SCRIPT node (never valid inside an
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1246,/ expression) with an unreasonably high length so that it's never chosen.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1247,"easuredNode neg = new MeasuredNode(IR.script(), Integer.MAX_VALUE, true);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1248,"eturn new MinimizedCondition(pos, neg);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1251,** Return the shorter representation of the original condition node.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1253," @param countLeadingNot When this is false, do not count a leading"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1254,  NOT in doing the minimization.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1255,  i.e. Prefer the right side in cases such as:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1256,    !x || !y || z  ==>  !(x && y && !z)
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1257,  This is useful in contexts such as IFs or HOOKs where subsequent
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1258,  optimizations can efficiently deal with leading NOTs.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1260,"  @return The minimized condition MeasuredNode, with equivalent value"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1261,    to that passed to #fromConditionNode().
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1263,easuredNode getShorterRepresentation(boolean countLeadingNot) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1264,f (countLeadingNot || positive.node.isNot()
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1265,| positive.length <= negative.length) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1266,eturn positive;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1267, else {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1268,eturn negative.addNot();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1272,rivate static final Comparator<MeasuredNode> AST_LENGTH_COMPARATOR =
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1273,ew Comparator<MeasuredNode>() {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1274,Override
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1275,"ublic int compare(MeasuredNode o1, MeasuredNode o2) {"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1276,eturn o1.length - o2.length;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1015,return rhs.getNode();
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,2,* Copyright 2013 The Closure Compiler Authors.
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,19,import com.google.common.base.Joiner;
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,20,import com.google.common.collect.Lists;
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,21,import com.google.javascript.jscomp.MinimizedCondition.MinimizationStyle;
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,22,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,24,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,26,import java.util.List;
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,29,* Tests for {@link MinimizedCondition} in isolation.
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,30,* Tests for the containing PeepholeMinimizeConditions pass are in
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,31,* PeepholeMinimizeConditionsTest.
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,33,* @author blickly@google.com (Ben Lickly)
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,35,public class MinimizedConditionTest extends TestCase {
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,37,private static Node parseExpr(String code) {
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,38,Compiler compiler = new Compiler();
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,39,List<SourceFile> input =
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,40,"Lists.newArrayList(SourceFile.fromCode(""code"", code));"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,41,List<SourceFile> externs = Lists.newArrayList();
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,42,"compiler.init(externs, input, new CompilerOptions());"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,43,Node root = compiler.parseInputs();
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,44,"assertTrue(""Unexpected parse error(s): "" +"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,45,"Joiner.on(""\n"").join(compiler.getErrors()), root != null);"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,46,Node externsRoot = root.getFirstChild();
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,47,Node mainRoot = externsRoot.getNext();
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,48,Node script = mainRoot.getFirstChild();
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,49,Node exprResult = script.getFirstChild();
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,50,return exprResult.getFirstChild();
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,53,"private static void minCond(String input, String positive, String negative) {"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,54,Node inputNode = parseExpr(input);
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,55,MinimizedCondition result = MinimizedCondition.fromConditionNode(inputNode);
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,56,Node positiveNode = parseExpr(positive);
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,57,Node negativeNode = parseExpr(negative);
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,58,// With counting the leading NOT node:
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,59,Node positiveResult =
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,60,result.getMinimized(MinimizationStyle.PREFER_UNNEGATED).getNode();
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,61,// Without counting the leading NOT node:
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,62,Node negativeResult =
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,63,result.getMinimized(MinimizationStyle.ALLOW_LEADING_NOT).getNode();
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,64,if (!positiveResult.isEquivalentTo(positiveNode)) {
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,65,"fail(""Not equal:\n"" + positiveResult.toStringTree()"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,66,"+ ""and:\n"" + positiveNode.toStringTree());"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,68,if (!negativeResult.isEquivalentTo(negativeNode)) {
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,69,"fail(""Not equal:\n"" + negativeResult.toStringTree()"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,70,"+ ""and:\n"" + negativeNode.toStringTree());"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,74,public void testTryMinimizeCondSimple() {
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,75,"minCond(""x"", ""x"", ""x"");"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,76,"minCond(""!x"", ""!x"", ""!x"");"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,77,"minCond(""!!x"", ""x"", ""x"");"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,78,"minCond(""!(x && y)"", ""!x || !y"", ""!(x && y)"");"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,81,public void testMinimizeDemorgan() {
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,82,"minCond(""!(x&&y)"", ""!x||!y"", ""!(x&&y)"");"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,83,"minCond(""!(x||y)"", ""!x&&!y"", ""!(x||y)"");"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,84,"minCond(""!x||!y"", ""!x||!y"", ""!(x&&y)"");"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,85,"minCond(""!x&&!y"", ""!x&&!y"", ""!(x||y)"");"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,86,"minCond(""!(x && y && z)"", ""!(x && y && z)"", ""!(x && y && z)"");"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,89,public void testMinimizeDemorgan2() {
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,90,"minCond(""(!a||!b)&&c"", ""(!a||!b)&&c"", ""!(a&&b||!c)"");"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,93,public void testMinimizeDemorgan3() {
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,94,"minCond(""(!a||!b)&&(c||d)"", ""!(a&&b||!c&&!d)"", ""!(a&&b||!c&&!d)"");"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,97,public void testMinimizeDemorgan4() {
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,98,minCond(
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,99,"""x && (y===2 || !f()) && (y===3 || !h())"","
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,100,"""x && !((y!==2 && f()) || (y!==3 && h()))"","
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,101,"""!(!x || (y!==2 && f()) || (y!==3 && h()))"");"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,104,public void testMinimizeDemorgan5() {
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,105,minCond(
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,106,"""0===c && (2===a || 1===a)"","
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,107,"""0===c && (2===a || 1===a)"","
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,108,"""!(0!==c || 2!==a && 1!==a)"");"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,111,public void testMinimizeDemorgan6() {
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,112,"minCond(""!((x,y)&&z)"", ""(x,!y)||!z"", ""!((x,y)&&z)"");"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,115,public void testMinimizeHook() {
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,116,"minCond(""!(x ? y : z)"", ""(x ? !y : !z)"",  ""!(x ? y : z)"");"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,119,public void testMinimizeComma() {
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,120,"minCond(""!(inc(), test())"", ""inc(), !test()"", ""!(inc(), test())"");"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,19,mport com.google.javascript.jscomp.PeepholeMinimizeConditions.MinimizedCondition;
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,20,mport com.google.javascript.rhino.Node;
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,71,"oid assertResultString(String js, String expected) {"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,68,"private static void assertResultString(String js, String expected) {"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,77,"oid assertResultString(String js, String expected, boolean normalize) {"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,74,"private static void assertResultString(String js, String expected,"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,75,boolean normalize) {
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,406,ublic Node parseExpr(String input) {
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,407,ode block = parseExpectedJs(input);
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,408,ode script = block.getFirstChild();
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,409,ode exprResult = script.getFirstChild();
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,410,eturn exprResult.getFirstChild();
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,413,"ublic void minimizeCond(String input, String positive, String negative) {"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,414,ode inputNode = parseExpr(input);
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,415,inimizedCondition result = PeepholeMinimizeConditions
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,416,MinimizedCondition.fromConditionNode(inputNode.detachFromParent());
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,417,ode positiveNode = parseExpr(positive);
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,418,ode negativeNode = parseExpr(negative);
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,419,/ With counting the leading NOT node:
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,420,ode positiveResult = result.getShorterRepresentation(true).node;
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,421,/ Without counting the leading NOT node:
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,422,ode negativeResult = result.getShorterRepresentation(false).node;
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,423,f (!positiveResult.isEquivalentTo(positiveNode)) {
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,424,"ail(""Not equal:\n"" + positiveResult.toStringTree()"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,425," ""and:\n"" + positiveNode.toStringTree());"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,427,f (!negativeResult.isEquivalentTo(negativeNode)) {
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,428,"ail(""Not equal:\n"" + negativeResult.toStringTree()"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,429," ""and:\n"" + negativeNode.toStringTree());"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,433,ublic void testTryMinimizeCondition1() {
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,434,"inimizeCond(""x"", ""x"", ""x"");"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,437,ublic void testTryMinimizeCondition2() {
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,438,"inimizeCond(""!x"", ""!x"", ""!x"");"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,441,ublic void testTryMinimizeCondition3() {
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,442,"inimizeCond(""!(x || y)"", ""!x && !y"", ""!(x || y)"");"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,445,ublic void testTryMinimizeCondition4() {
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,446,"inimizeCond(""!(x && y)"", ""!x || !y"", ""!(x && y)"");"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,449,ublic void testTryMinimizeCondition5() {
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,450,"inimizeCond(""!(x && y && z)"", ""!(x && y && z)"", ""!(x && y && z)"");"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,453,ublic void testMinimizeCondDemorgan() {
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,454,"inimizeCond(""x && (y===2 || !f()) && (y===3 || !h())"","
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,455,"x && !((y!==2 && f()) || (y!==3 && h()))"","
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,456,"!(!x || (y!==2 && f()) || (y!==3 && h()))"");"

is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,104,"// If the function has exactly 2 params, mark them as escaped. This is"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,105,// a work-around for an IE bug where it throws an exception if you
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,106,// write to the parameters of the callback in a sort(). See:
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,107,// http://code.google.com/p/closure-compiler/issues/detail?id=58
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,108,if (scope.getRootNode().getFirstChild().getNext().getChildCount() == 2) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,109,liveness.markAllParametersEscaped();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,22,import com.google.common.collect.ImmutableList;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,68,rivate CompilerInput[] externs;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,69,private List<CompilerInput> externs;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,71,rivate JSModule[] modules;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,72,private List<JSModule> modules;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,77,rivate CompilerInput[] inputs;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,78,private List<CompilerInput> inputs;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,241,"init(Lists.<JSSourceFile>newArrayList(externs),"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,242,"Lists.<JSSourceFile>newArrayList(inputs), options);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,246,* Initializes the instance state needed for a compile job.
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,248,"public void init(List<JSSourceFile> externs, List<JSSourceFile> inputs,"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,249,CompilerOptions options) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,257, Initializes the instance state needed for a compile job.
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,267,* Initializes the instance state needed for a compile job if the sources
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,268,* are in modules.
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,272,"initModules(Lists.<JSSourceFile>newArrayList(externs),"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,273,"Lists.<JSModule>newArrayList(modules), options);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,277,* Initializes the instance state needed for a compile job if the sources
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,278,* are in modules.
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,280,public void initModules(
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,281,"List<JSSourceFile> externs, List<JSModule> modules,"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,282,CompilerOptions options) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,295,rivate CompilerInput[] makeCompilerInput(
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,296,"SSourceFile[] files, boolean isExtern) {"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,297,ompilerInput [] inputs = new CompilerInput[files.length];
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,298,or (int i = 0; i < files.length; ++i) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,299,"nputs[i] = new CompilerInput(files[i], isExtern);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,317,private List<CompilerInput> makeCompilerInput(
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,318,"List<JSSourceFile> files, boolean isExtern) {"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,319,List<CompilerInput> inputs = Lists.newArrayList();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,320,for (JSSourceFile file : files) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,321,"inputs.add(new CompilerInput(file, isExtern));"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,316,rivate void checkFirstModule(JSModule[] modules) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,317,f (modules.length == 0) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,338,private void checkFirstModule(List<JSModule> modules) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,339,if (modules.isEmpty()) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,319, else if (modules[0].getInputs().isEmpty()) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,341,} else if (modules.get(0).getInputs().isEmpty()) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,321,odules[0].getName()));
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,343,modules.get(0).getName()));
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,329,rivate void fillEmptyModules(JSModule[] modules) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,330,or (int i = 1; i < modules.length; i ++) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,331,SModule module = modules[i];
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,351,private void fillEmptyModules(List<JSModule> modules) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,352,for (JSModule module : modules) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,357,rivate CompilerInput[] getAllInputsFromModules() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,358,ist<CompilerInput> inputs = new ArrayList<CompilerInput>();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,359,"ap<String, JSModule> inputMap = new HashMap<String, JSModule>();"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,378,private List<CompilerInput> getAllInputsFromModules() {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,379,List<CompilerInput> inputs = Lists.newArrayList();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,380,"Map<String, JSModule> inputMap = Maps.newHashMap();"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,376,eturn new CompilerInput[0];
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,397,return ImmutableList.of();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,379,eturn inputs.toArray(new CompilerInput[inputs.size()]);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,400,return inputs;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,454,"return compile(Lists.<JSSourceFile>newArrayList(externs),"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,455,"Lists.<JSSourceFile>newArrayList(inputs),"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,456,options);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,460,* Compiles a list of inputs.
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,462,"public Result compile(List<JSSourceFile> externs,"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,463,"List<JSSourceFile> inputs, CompilerOptions options) {"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,486,"return compileModules(Lists.<JSSourceFile>newArrayList(externs),"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,487,"Lists.<JSModule>newArrayList(modules),"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,488,options);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,492,* Compiles a list of modules.
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,494,"public Result compileModules(List<JSSourceFile> externs,"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,495,"List<JSModule> modules, CompilerOptions options) {"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,460,"nit(externs, modules, options);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,500,"initModules(externs, modules, options);"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1133,nt numInputs = inputs.length;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1173,int numInputs = inputs.size();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1137,ode scriptNode = inputs[i].getAstRoot(Compiler.this);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1177,Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1580,f (inputs.length == 0) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1620,if (inputs.isEmpty()) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1584,eturn inputs[0].getAstRoot(this);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1624,return inputs.get(0).getAstRoot(this);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1587,ist<CompilerInput> inputs = module.getInputs();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1588,f (inputs.size() > 0) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1589,eturn inputs.get(0).getAstRoot(this);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1627,List<CompilerInput> moduleInputs = module.getInputs();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1628,if (moduleInputs.size() > 0) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1629,return moduleInputs.get(0).getAstRoot(this);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1656,rivate CompilerInput[] externs;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1657,rivate CompilerInput[] inputs;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1658,rivate JSModule[] modules;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1696,private List<CompilerInput> externs;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1697,private List<CompilerInput> inputs;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1698,private List<JSModule> modules;
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,46,rivate final boolean isExtern;
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,46,private boolean isExtern;
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,298,void setIsExtern(boolean isExtern) {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,299,this.isExtern = isExtern;
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,21,import com.google.common.collect.Lists;
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,73,"oduleDepths = new HashMap<JSModule, Integer>(modulesInDepOrder.length);"
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,74,odulesByDepth = new ArrayList<List<JSModule>>();
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,74,this(Lists.<JSModule>newArrayList(modulesInDepOrder));
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,78,* Creates a module graph from a list of modules in dependency order.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,80,public JSModuleGraph(List<JSModule> modulesInDepOrder) {
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,81,moduleDepths = Maps.newHashMapWithExpectedSize(modulesInDepOrder.size());
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,82,modulesByDepth = Lists.newArrayList();
False,src/com/google/javascript/jscomp/LiveVariablesAnalysis.java,src/com/google/javascript/jscomp/LiveVariablesAnalysis.java,282,rivate void markAllParametersEscaped() {
True,src/com/google/javascript/jscomp/LiveVariablesAnalysis.java,src/com/google/javascript/jscomp/LiveVariablesAnalysis.java,282,void markAllParametersEscaped() {
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1112,"@SuppressWarnings(""fallthrough"")"
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1141,ase ANNOTATION:
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1142,ase EOC:
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1143,ase EOF:
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1144,tring multilineText = builder.toString();
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1146,f (option != WhitespaceOption.PRESERVE) {
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1147,ultilineText = multilineText.trim();
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1150,nt endLineno = stream.getLineno();
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1151,nt endCharno = stream.getCharno();
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1153,f (multilineText.length() > 0) {
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1154,"sdocBuilder.markText(multilineText, startLineno, startCharno,"
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1155,"ndLineno, endCharno);"
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1158,"eturn new ExtractionInfo(multilineText, token);"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1163,case ANNOTATION:
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1164,case EOC:
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1165,case EOF:
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1166,"// When we're capturing a license block, annotations"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1167,// in the block are ok.
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1168,if (!(option == WhitespaceOption.PRESERVE &&
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1169,token == JsDocToken.ANNOTATION)) {
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1170,String multilineText = builder.toString();
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1172,if (option != WhitespaceOption.PRESERVE) {
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1173,multilineText = multilineText.trim();
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1176,int endLineno = stream.getLineno();
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1177,int endCharno = stream.getCharno();
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1179,if (multilineText.length() > 0) {
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1180,"jsdocBuilder.markText(multilineText, startLineno, startCharno,"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1181,"endLineno, endCharno);"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1184,"return new ExtractionInfo(multilineText, token);"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1187,// FALL THROUGH
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,189,/ Make sure that we are taking advantage of correct merge opportunities.
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,189,// Make sure that we do not merge two-arg functions because of the
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,190,// IE sort bug (see comments in computeEscaped)
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,191,"function FUNC(x, y) {         y; y=0; y; x; x=0; x}"");"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,192,"""function FUNC(x, y) {var a; y; a=0; a; x; a=0; a}"");"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,195,public void testParameter4b() {
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,196,// Merge parameters
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,197,"test(""function FUNC(x, y, z) {var a,b; y; a=0; a; x; b=0; b}"","
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,198,"""function FUNC(x, y, z) {         y; y=0; y; x; x=0; x}"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,42,private Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = null;
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1056,/public void testParsePreserveWithNoBuilderGivesWarning() throws Exception {
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1057,"/  String comment = ""@preserve Foo\nBar\n*/"";"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1058,"/  parse(comment,"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1059,"/      ""@preserve or @license annotation without file to associate it with"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1057,public void testParsePreserve() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1058,Node node = new Node(1);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1059,this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1060,"String comment = ""@preserve Foo\nBar\n\nBaz*/"";"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1061,parse(comment);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1062,"assertEquals("" Foo\n Bar\n\n Baz"", node.getJSDocInfo().getLicense());"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1062,/public void testParsePreserve() throws Exception {
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1063,/  Node node = new Node(1);
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1064,/  this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1065,"/  String comment = ""@preserve Foo\nBar\n\nBaz*/"";"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1066,/  parse(comment);
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1067,"/  assertEquals("" Foo\n Bar\n\n Baz"", node.getJSDocInfo().getLicense());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1065,public void testParseLicense() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1066,Node node = new Node(1);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1067,this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1068,"String comment = ""@license Foo\nBar\n\nBaz*/"";"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1069,parse(comment);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1070,"assertEquals("" Foo\n Bar\n\n Baz"", node.getJSDocInfo().getLicense());"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1070,/public void testParseLicense() throws Exception {
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1071,/  Node node = new Node(1);
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1072,/  this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1073,"/  String comment = ""@license Foo\nBar\n\nBaz*/"";"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1074,/  parse(comment);
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1075,"/  assertEquals("" Foo\n Bar\n\n Baz"", node.getJSDocInfo().getLicense());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1073,public void testParseLicenseWithAnnotation() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1074,Node node = new Node(1);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1075,this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1076,"String comment = ""@license Foo \n * @author Charlie Brown */"";"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1077,parse(comment);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1078,"assertEquals("" Foo \n @author Charlie Brown "","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1079,node.getJSDocInfo().getLicense());
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2303,/if (fileLevelJsDocBuilder != null) {
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2304,/  jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2307,if (fileLevelJsDocBuilder != null) {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2308,jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);

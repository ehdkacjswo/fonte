is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,20,import java.lang.reflect.InvocationTargetException;
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,23,import java.util.Iterator;
False,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,41, Learn whether two annotations are equivalent as defined by
False,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,42, {@link Annotation#equals(Object)}. This method is useful because
False,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,43, dynamically created {@link Annotation} instances are always proxy
False,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,44," objects, which, though dependent upon implementation, very often cannot"
False,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,45," be depended upon to behave ""normally"" in terms of {@link #equals(Object)}"
False,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,46, implementation.
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,43,* Learn whether two annotations are equivalent; dynamically created
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,44,* {@link Annotation} instances are always proxy objects which cannot be
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,45,* depended upon to know how to implement {@link Annotation#equals(Object)}
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,46,* per spec.
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,82,* Generate a hashcode for the given annotation; dynamically created
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,83,* {@link Annotation} instances are always proxy objects which cannot be
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,84,* depended upon to know how to implement {@link Annotation#hashCode()} per
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,85,* spec.
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,87,* @param a the Annotation for a hashcode calculation is desired
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,88,* @return the calculated hashcode
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,89,* @throws InvocationTargetException
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,90,* @throws IllegalAccessException
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,91,* @throws IllegalArgumentException
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,93,"public static int hashCode(Annotation a) throws IllegalArgumentException,"
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,94,"IllegalAccessException, InvocationTargetException {"
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,95,int result = 0;
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,96,Class<? extends Annotation> type = a.annotationType();
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,97,for (Method m : type.getDeclaredMethods()) {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,98,"result += hashMember(m.getName(), m.invoke(a));"
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,100,return result;
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,104,"* Generate a string representation of an Annotation, as suggested by"
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,105,* {@link Annotation#toString()}.
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,106,* @param a the annotation of which a string representation is desired
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,107,* @return String
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,109,public static String toString(final Annotation a) {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,110,"return new StringBuilder(a.annotationType().getName()).insert(0, '@').append('(')"
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,111,.append(StringUtils.join(new Iterable<String>() {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,113,public Iterator<String> iterator() {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,114,final Method[] methods = a.annotationType().getDeclaredMethods();
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,115,return new Iterator<String>() {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,116,int pos = 0;
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,118,public boolean hasNext() {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,119,return pos < methods.length;
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,122,public String next() {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,123,Method m = methods[pos++];
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,124,try {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,125,return new StringBuilder(m.getName()).append('=')
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,126,.append(m.invoke(a)).toString();
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,127,} catch (Exception e) {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,128,throw new RuntimeException(e);
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,132,public void remove() {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,133,throw new UnsupportedOperationException();
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,139,"}, "", "")).append(')').toString();"
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,142,"//besides modularity, this has the advantage of autoboxing primitives:"
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,143,"private static int hashMember(String name, Object value) throws IllegalArgumentException,"
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,144,"IllegalAccessException, InvocationTargetException {"
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,145,int part1 = name.hashCode() * 127;
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,146,if (value == null) {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,147,return part1;
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,149,if (value.getClass().isArray()) {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,150,"return part1 ^ arrayMemberHash(value.getClass().getComponentType(), value);"
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,152,if (value instanceof Annotation) {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,153,return part1 ^ hashCode((Annotation) value);
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,155,return part1 ^ value.hashCode();
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,235,"private static int arrayMemberHash(Class<?> componentType, Object o) {"
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,236,if (componentType.equals(Byte.TYPE)) {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,237,return Arrays.hashCode((byte[]) o);
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,239,if (componentType.equals(Short.TYPE)) {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,240,return Arrays.hashCode((short[]) o);
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,242,if (componentType.equals(Integer.TYPE)) {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,243,return Arrays.hashCode((int[]) o);
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,245,if (componentType.equals(Character.TYPE)) {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,246,return Arrays.hashCode((char[]) o);
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,248,if (componentType.equals(Long.TYPE)) {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,249,return Arrays.hashCode((long[]) o);
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,251,if (componentType.equals(Float.TYPE)) {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,252,return Arrays.hashCode((float[]) o);
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,254,if (componentType.equals(Double.TYPE)) {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,255,return Arrays.hashCode((double[]) o);
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,257,if (componentType.equals(Boolean.TYPE)) {
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,258,return Arrays.hashCode((boolean[]) o);
True,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,src/main/java/org/apache/commons/lang3/AnnotationUtils.java,260,return Arrays.hashCode((Object[]) o);
True,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,474,@Test(timeout = 666)
True,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,475,public void testHashCode() throws Exception {
True,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,476,"final Test testAnno = getClass().getDeclaredMethod(""testHashCode"")"
True,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,477,.getAnnotation(Test.class);
True,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,478,"assertEquals(testAnno.hashCode(), AnnotationUtils.hashCode(testAnno));"
True,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,481,@Test(timeout = 666)
True,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,482,public void testToString() throws Exception {
True,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,483,"final Test testAnno = getClass().getDeclaredMethod(""testToString"")"
True,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,484,.getAnnotation(Test.class);
True,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,485,String toString = AnnotationUtils.toString(testAnno);
True,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,486,"assertTrue(toString.startsWith(""@org.junit.Test(""));"
True,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,487,"assertTrue(toString.endsWith("")""));"
True,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,488,"assertTrue(toString.contains(""expected=class org.junit.Test$None""));"
True,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,489,"assertTrue(toString.contains(""timeout=666""));"
True,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java,490,"assertTrue(toString.contains("", ""));"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,47, (non-Javadoc)
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,49," @see java.text.Format#format(java.lang.Object, java.lang.StringBuffer,"
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,50,      java.text.FieldPosition)
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,47,* {@inheritDoc}
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,61, (non-Javadoc)
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,63," @see java.text.Format#parseObject(java.lang.String,"
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,64,      java.text.ParsePosition)
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,58,* {@inheritDoc}
False,src/java/org/apache/commons/lang/text/CompositeFormat.java,src/java/org/apache/commons/lang/text/CompositeFormat.java,59, Uses the formatter Format instance.
True,src/java/org/apache/commons/lang/text/CompositeFormat.java,src/java/org/apache/commons/lang/text/CompositeFormat.java,59,* Uses the formatter Format instance.
True,src/java/org/apache/commons/lang/text/CompositeFormat.java,src/java/org/apache/commons/lang/text/CompositeFormat.java,61,* @param obj
True,src/java/org/apache/commons/lang/text/CompositeFormat.java,src/java/org/apache/commons/lang/text/CompositeFormat.java,62,*            the object to format
True,src/java/org/apache/commons/lang/text/CompositeFormat.java,src/java/org/apache/commons/lang/text/CompositeFormat.java,63,* @param toAppendTo
True,src/java/org/apache/commons/lang/text/CompositeFormat.java,src/java/org/apache/commons/lang/text/CompositeFormat.java,64,*            the {@link StringBuffer} to append to
True,src/java/org/apache/commons/lang/text/CompositeFormat.java,src/java/org/apache/commons/lang/text/CompositeFormat.java,65,* @param pos
True,src/java/org/apache/commons/lang/text/CompositeFormat.java,src/java/org/apache/commons/lang/text/CompositeFormat.java,66,*            the FieldPosition to use (or ignore).
True,src/java/org/apache/commons/lang/text/CompositeFormat.java,src/java/org/apache/commons/lang/text/CompositeFormat.java,67,* @return <code>toAppendTo</code>
False,src/java/org/apache/commons/lang/text/CompositeFormat.java,src/java/org/apache/commons/lang/text/CompositeFormat.java,68, Uses the parser Format instance.
True,src/java/org/apache/commons/lang/text/CompositeFormat.java,src/java/org/apache/commons/lang/text/CompositeFormat.java,75,* Uses the parser Format instance.
True,src/java/org/apache/commons/lang/text/CompositeFormat.java,src/java/org/apache/commons/lang/text/CompositeFormat.java,77,* @param source
True,src/java/org/apache/commons/lang/text/CompositeFormat.java,src/java/org/apache/commons/lang/text/CompositeFormat.java,78,*            the String source
True,src/java/org/apache/commons/lang/text/CompositeFormat.java,src/java/org/apache/commons/lang/text/CompositeFormat.java,79,* @param pos
True,src/java/org/apache/commons/lang/text/CompositeFormat.java,src/java/org/apache/commons/lang/text/CompositeFormat.java,80,"*            the ParsePosition containing the position to parse from, will"
True,src/java/org/apache/commons/lang/text/CompositeFormat.java,src/java/org/apache/commons/lang/text/CompositeFormat.java,81,*            be updated according to parsing success (index) or failure
True,src/java/org/apache/commons/lang/text/CompositeFormat.java,src/java/org/apache/commons/lang/text/CompositeFormat.java,82,*            (error index)
True,src/java/org/apache/commons/lang/text/CompositeFormat.java,src/java/org/apache/commons/lang/text/CompositeFormat.java,83,* @return the parsed Object
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,43, @param locale
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,43,* @param locale the Locale to use
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,50, (non-Javadoc)
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,52, @see org.apache.commons.lang.text.AbstractDateMetaFormat#createSubformatInstance(int)
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,49,/** {@inheritDoc} */
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,73, @param locale
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,74,* @param locale Locale
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,81, (non-Javadoc)
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,83," @see java.text.Format#format(java.lang.Object, java.lang.StringBuffer,"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,84,      java.text.FieldPosition)
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,82,* {@inheritDoc}
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,100,* Get the subformat name for the given object.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,102,* @param subformat Object
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,103,* @return subformat name.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,111, (non-Javadoc)
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,113," @see java.text.Format#parseObject(java.lang.String,"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,114,      java.text.ParsePosition)
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,115,* {@inheritDoc}
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,136,* Get the named subformat.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,138,* @param subformat name
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,139,"* @return Format designated by <code>name</code>, if any"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,144, Get the locale in use by this {@link DateMetaFormatSupport}.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,151,* Get the locale in use by this DateMetaFormatSupport.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,160,* Initialize this DateMetaFormatSupport.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,178, @param style
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,188,* @param style DateFormat style constant
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,197, @param handlePatterns
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,198,            the boolean handlePatterns to set.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,207,* @param handlePatterns the boolean handlePatterns to set.
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,37, @version $Id$
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,37,* @version $Id: DefaultMetaFormatFactory.java 592077 2007-11-05 16:47:10Z
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,38,*          mbenson $
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,64,* Ordered NameKeyedMetaFormat
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,72,* Construct a new OrderedNameKeyedMetaFormat.
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,74,* @param names String[]
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,75,* @param formats Format[]
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,83,* Create a map from the specified key/value parameters.
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,85,* @param names keys
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,86,* @param formats values
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,87,* @return Map
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,99,* {@inheritDoc}
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,89, @param locale
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,90,            the Locale for the resulting Format instance.
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,109,* @param locale the Locale for the resulting Format instance.
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,129,* Get the default format supported by a given metaformat.
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,131,* @param metaformat Format to handle parsing.
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,132,"* @return the default format, if any."
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,25,import org.apache.commons.lang.StringUtils;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,31, <code>Format</code>s.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,32,* <code>Format</code>s. One shortcoming is that recursive choice formats do
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,33,* not inherit knowledge of the extended formatters and are limited to those
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,34,* available with <code>java.text.MessageFormat</code> (patches welcome).
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,56, @param locale
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,57,            the Locale for the resulting Format instance.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,59,* @param locale the Locale for the resulting Format instance.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,67,* Conceptual demarcation of methods to parse the pattern.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,77,* Strip all formats from the pattern.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,79,* @param pattern String to strip
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,80,* @return stripped pattern
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,113,* Insert formats back into the pattern for toPattern() support.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,115,* @param pattern source
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,116,* @param formats the Formats to insert
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,117,* @param metaFormat Format to format the Formats
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,118,* @return full pattern
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,120,b.append(START_FMT).append(
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,121,etaFormat.format(formats[fe]));
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,139,String formatName = metaFormat.format(formats[fe]);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,140,if (StringUtils.isNotEmpty(formatName)) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,141,sb.append(START_FMT).append(formatName);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,154,* Parse the formats from the given pattern.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,156,* @param pattern String to parse
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,157,* @param metaFormat Format to parse the Formats
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,158,* @return array of parsed Formats
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,145,"esult.add(metaFormat.parseObject(pattern, pos));"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,174,"result.add(metaFormat.parseObject(pattern, pos));"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,190,* Consume whitespace from the current parse position.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,192,* @param pattern String to read
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,193,* @param pos current position
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,205,* Convenience method to advance parse position by 1
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,207,* @param pos ParsePosition
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,208,* @return <code>pos</code>
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,216,* Read the argument index from the current format element
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,218,* @param pattern pattern to parse
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,219,* @param pos current parse position
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,220,* @return argument index as string
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,240,"* Consume a quoted string, adding it to <code>appendTo</code> if"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,241,* specified.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,243,* @param pattern pattern to parse
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,244,* @param pos current parse position
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,245,* @param appendTo optional StringBuffer to append
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,246,* @param escapingOn whether to process escaped quotes
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,247,* @return <code>appendTo</code>
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,203,"ppendTo.append(c, lastHold, pos.getIndex() - lastHold).append("
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,204,UOTE);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,260,"appendTo.append(c, lastHold, pos.getIndex() - lastHold)"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,261,.append(QUOTE);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,280,* Consume quoted string only
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,282,* @param pattern pattern to parse
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,283,* @param pos current parse position
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,284,* @param escapingOn whether to process escaped quotes
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,292,* Consume the entire format found at the current position.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,294,* @param pattern string to parse
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,295,* @param pos current parse position
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,257, Create a new ExtendedMessageFormat.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,327,* Create a new ExtendedMessageFormat for the default locale.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,259, @param pattern
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,260, @param metaFormat
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,261, @throws IllegalArgumentException
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,262,             if <code>metaFormat</code> is <code>null</code> or in
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,263,             case of a bad pattern.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,329,* @param pattern String
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,330,* @param metaFormat Format
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,331,* @throws IllegalArgumentException if <code>metaFormat</code> is
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,332,*             <code>null</code> or in case of a bad pattern.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,335,"this(pattern, Locale.getDefault(), metaFormat);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,339,* Create a new ExtendedMessageFormat.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,341,* @param pattern String
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,342,* @param locale Locale
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,343,* @param metaFormat Format
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,344,* @throws IllegalArgumentException if <code>metaFormat</code> is
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,345,*             <code>null</code> or in case of a bad pattern.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,347,"public ExtendedMessageFormat(String pattern, Locale locale,"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,348,Format metaFormat) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,273,uper(pattern);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,356,"super(pattern, locale);"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,281, @param pattern
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,282,            pattern String
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,364,* @param pattern String
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,296, Pre-execution hook that allows subclasses to customize the behavior of
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,297, the final applyPattern implementation.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,378,* Pre-execution hook by means of which a subclass can customize the
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,379,* behavior of the final applyPattern implementation.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,299, @param pattern
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,381,* @param pattern String
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,306, Post-execution hook that allows subclasses to customize the behavior of
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,307, the final applyPattern implementation.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,388,* Post-execution hook by means of which a subclass can customize the
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,389,* behavior of the final applyPattern implementation.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,309, @param pattern
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,391,* @param pattern String
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,338, @param metaFormat
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,339,            the Format metaFormat to set.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,420,* @param metaFormat the Format metaFormat to set.
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,27, metaFormat support.
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,27,"* Support class for implementing Formats that parse/format other Formats, with"
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,28,* specific support for interoperability with ExtendedMessageFormat.
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,43, @param map
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,44,            the Map to invert.
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,44,* @param map the Map to invert.
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,46, @throws NullPointerException
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,47,             if <code>map</code> is <code>null</code>.
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,46,* @throws NullPointerException if <code>map</code> is <code>null</code>.
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,61, @param source
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,62, @param pos
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,60,* @param source String
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,61,* @param pos current parse position
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,88, @param pos
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,89,            the ParsePosition to advance.
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,87,* @param pos the ParsePosition to advance.
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,103, @param source
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,104,            String to parse
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,105, @param pos
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,106,            ParsePosition marking index into <code>source</code>
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,101,* @param source String to parse
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,102,* @param pos ParsePosition marking index into <code>source</code>
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,115, @param obj
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,116,            the object to format
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,117, @param toAppendTo
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,118,            the StringBuffer to which the formatted object should be
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,119,            appended
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,120, @param pos
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,121,            FieldPosition associated with <code>obj</code>
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,111,* @param obj the object to format
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,112,* @param toAppendTo the StringBuffer to which the formatted object should
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,113,*            be appended
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,114,* @param pos FieldPosition associated with <code>obj</code>
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,123, @throws NullPointerException
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,124,             if <code>toAppendTo</code> or <code>pos</code> is
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,125,             <code>null</code>
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,126, @throws IllegalArgumentException
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,127,             if unable to format <code>obj</code>
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,116,* @throws NullPointerException if <code>toAppendTo</code> or
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,117,*             <code>pos</code> is <code>null</code>
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,118,* @throws IllegalArgumentException if unable to format <code>obj</code>
False,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,53, @param delegate
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,53,* @param delegate Format
False,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,85, @param delegates
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,85,* @param delegates Formats
False,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,92, (non-Javadoc)
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,92,* Format <code>obj</code>; append to <code>toAppendTo</code>.
False,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,94," @see java.text.Format#format(java.lang.Object, java.lang.StringBuffer,"
False,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,95,      java.text.FieldPosition)
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,94,* @param obj Object to format
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,95,* @param toAppendTo StringBuffer to append to
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,96,* @param pos FieldPosition
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,97,* @return <code>toAppendTo</code>
False,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,112, (non-Javadoc)
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,114,* Parse an object by trying each delegate.
False,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,114," @see java.text.Format#parseObject(java.lang.String,"
False,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,115,      java.text.ParsePosition)
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,116,* @param source string
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,117,* @param pos current parse position
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,118,* @return value returned from first delegate that does not encounter an
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,119,*         error.
False,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,136, @param delegates
False,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,137,            the Format[] delegates to set.
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,140,* @param delegates the Format[] delegates to set.
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,158,* Validate and return our delegates.
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,160,"* @return delegate Formats, not null"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,60, @param key
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,61, @param format
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,60,* @param key String
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,61,* @param format Format
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,84,* @param keyedFormats String->Format map.
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,89, (non-Javadoc)
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,91," @see org.apache.commons.lang.text.MetaFormatSupport#format(java.lang.Object,"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,92,"      java.lang.StringBuffer, java.text.FieldPosition)"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,91,* {@inheritDoc}
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,121, (non-Javadoc)
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,123," @see org.apache.commons.lang.text.MetaFormatSupport#parseObject(java.lang.String,"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,124,      java.text.ParsePosition)
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,120,* {@inheritDoc}
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,59, @param locale
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,59,* @param locale Locale
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,67, (non-Javadoc)
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,69," @see org.apache.commons.lang.text.AbstractMetaFormat#format(java.lang.Object,"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,70,"      java.lang.StringBuffer, java.text.FieldPosition)"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,67,* {@inheritDoc}
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,89, (non-Javadoc)
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,91," @see java.text.Format#parseObject(java.lang.String,"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,92,      java.text.ParsePosition)
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,86,* {@inheritDoc}
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,113,* Initialize this NumberMetaFormat.
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,44, @param locale
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,44,* @param locale Locale
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,51, (non-Javadoc)
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,53, @see org.apache.commons.lang.text.AbstractDateMetaFormat#createSubformatInstance(int)
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,50,/** {@inheritDoc} */
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,60, (non-Javadoc)
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,62, @see org.apache.commons.lang.text.AbstractDateMetaFormat#createReverseStyleMap()
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,55,/** {@inheritDoc} */
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,67,nvertMe.remove(FULL);
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,59,"DateFormat longDf = DateFormat.getTimeInstance(DateFormat.LONG,"
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,60,getLocale());
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,61,"DateFormat fullDf = DateFormat.getTimeInstance(DateFormat.FULL,"
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,62,getLocale());
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,63,if (fullDf.equals(longDf)) {
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,64,invertMe.remove(FULL);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,19,import java.text.ChoiceFormat;
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,21,import java.text.DecimalFormat;
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,22,import java.text.DecimalFormatSymbols;
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,23,import java.text.FieldPosition;
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,24,import java.text.Format;
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,26,import java.text.NumberFormat;
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,27,import java.text.SimpleDateFormat;
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,30,import java.util.Locale;
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,35,"rotected static final Object[] NUMBERS = { new Double(0.1),"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,43,"protected static final Double[] NUMBERS = { new Double(0.1),"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,47, (non-Javadoc)
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,49, @see junit.framework.TestCase#setUp()
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,54,protected Locale locale;
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,57,* {@inheritDoc}
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,53,/ tests depend on Locale.US
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,54,ava.util.Locale.setDefault(java.util.Locale.US);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,61,this.locale = getLocale();
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,57,rotected abstract MessageFormat createMessageFormat(String pattern);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,65,* Create a MessageFormat.
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,66,* @param pattern
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,67,* @param locale
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,68,* @return
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,70,"protected abstract MessageFormat createMessageFormat(String pattern,"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,71,Locale locale);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,74,* Get the Locale to use.
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,75,* @return
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,77,protected abstract Locale getLocale();
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,65,essageFormat f = createMessageFormat(pattern);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,85,"MessageFormat f = createMessageFormat(pattern, locale);"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,70,ublic void testPlain() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,90,"protected void doAssertions(Format format, Object[] args) {"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,91,"doAssertions(format, args, null);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,94,"protected void doAssertions(Format format, Object[] args, String formatName) {"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,95,"doAssertions(format, args, formatName, null);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,98,"protected void doAssertions(Format format, Object[] args,"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,99,"String formatName, String decodeFormatName) {"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,100,StringBuffer pattern = new StringBuffer();
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,101,StringBuffer expected = new StringBuffer();
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,102,StringBuffer decodePattern = new StringBuffer();
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,103,for (int i = 0; i < args.length; i++) {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,104,"pattern.append(i).append("": {"").append(i);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,105,if (formatName != null) {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,106,"pattern.append(',').append(formatName);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,108,"pattern.append(""}; "");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,109,"expected.append(i).append("": "");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,110,if (format != null) {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,111,"format.format(args[i], expected, new FieldPosition(0));"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,112,} else {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,113,expected.append(String.valueOf(args[i]));
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,115,"expected.append(""; "");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,116,"decodePattern.append(i).append("": {"").append(i);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,117,if (decodeFormatName != null || formatName != null) {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,118,"decodePattern.append(',').append("
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,119,decodeFormatName == null ? formatName
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,120,: decodeFormatName);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,122,"decodePattern.append(""}; "");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,124,"doAssertions(expected.toString(), pattern.toString(), args,"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,125,decodePattern.toString());
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,128,public void testNoFormatElements() {
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,76,"attern.append(""Object "").append(i).append("": "").append(NUMBERS[i]);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,134,"pattern.append(i).append("": "").append(NUMBERS[i]);"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,79,"oAssertions(p, p, NUMBERS);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,137,"doAssertions(p, p, null);"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,82,ublic void testSimple() {
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,83,"oAssertions(""Object 0: 0.1; Object 1: 1.1; Object 2: 2.1"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,84,"Object 0: {0}; Object 1: {1}; Object 2: {2}"", NUMBERS);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,140,public void testSimpleStrings() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,141,"doAssertions(null, new Object[] { ""foo"", ""bar"", ""baz""}, null);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,144,public void testSimpleNumbers() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,145,"doAssertions(NumberFormat.getInstance(locale), NUMBERS, null);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,148,public void testSimpleDates() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,149,"doAssertions(DateFormat.getDateTimeInstance(DateFormat.SHORT,"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,150,"DateFormat.SHORT, locale), DATES, null);"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,88,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,89,"Number 0: 0.1; Number 1: 1.1; Number 2: 2.1"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,90,"Number 0: {0,number}; Number 1: {1,number}; Number 2: {2,number}"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,91,UMBERS);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,154,"doAssertions(NumberFormat.getInstance(locale), NUMBERS, ""number"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,95,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,96,"Number 0: 0.1; Number 1: 1.1; Number 2: 2.1"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,97,"Number 0: {0, number }; Number 1: {1, number }; Number 2: {2, number }"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,98,"UMBERS,"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,99,"Number 0: {0,number}; Number 1: {1,number}; Number 2: {2,number}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,158,"doAssertions(NumberFormat.getInstance(locale), NUMBERS, "" number "","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,159,"""number"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,103,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,104,"Number 0: 0; Number 1: 1; Number 2: 2"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,105,"Number 0: {0,number,integer}; Number 1: {1,number,integer}; Number 2: {2,number,integer}"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,106,UMBERS);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,163,"doAssertions(NumberFormat.getIntegerInstance(locale), NUMBERS,"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,164,"""number,integer"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,110,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,111,"Number 0: 0; Number 1: 1; Number 2: 2"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,112,"Number 0: {0, number , integer }; Number 1: {1, number , integer }; Number 2: {2, number , integer }"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,113,"UMBERS,"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,114,"Number 0: {0,number,integer}; Number 1: {1,number,integer}; Number 2: {2,number,integer}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,168,"doAssertions(NumberFormat.getIntegerInstance(locale), NUMBERS,"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,169,""" number , integer "", ""number,integer"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,118,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,119,"Number 0: $0.10; Number 1: $1.10; Number 2: $2.10"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,120,"Number 0: {0,number,currency}; Number 1: {1,number,currency}; Number 2: {2,number,currency}"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,121,UMBERS);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,173,"doAssertions(NumberFormat.getCurrencyInstance(locale), NUMBERS,"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,174,"""number,currency"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,125,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,126,"Number 0: 10%; Number 1: 110%; Number 2: 210%"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,127,"Number 0: {0,number,percent}; Number 1: {1,number,percent}; Number 2: {2,number,percent}"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,128,UMBERS);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,178,"doAssertions(NumberFormat.getPercentInstance(locale), NUMBERS,"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,179,"""number,percent"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,132,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,133,"Number 0: 000.100; Number 1: 001.100; Number 2: 002.100"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,134,"Number 0: {0,number,#000.000}; Number 1: {1,number,#000.000}; Number 2: {2,number,#000.000}"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,135,UMBERS);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,183,"doAssertions(new DecimalFormat(""#000.000"", new DecimalFormatSymbols("
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,184,"locale)), NUMBERS, ""number,#000.000"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,139,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,140,"Date 0: Jan 1, 1970; Date 1: Feb 2, 1970; Date 2: Mar 3, 1970"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,141,"Date 0: {0,date}; Date 1: {1,date}; Date 2: {2,date}"", DATES);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,188,"doAssertions(DateFormat.getDateInstance(DateFormat.DEFAULT, locale),"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,189,"DATES, ""date"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,145,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,146,"Date 0: Jan 1, 1970; Date 1: Feb 2, 1970; Date 2: Mar 3, 1970"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,147,"Date 0: {0, date }; Date 1: {1, date }; Date 2: {2,  date  }"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,148,"ATES, ""Date 0: {0,date}; Date 1: {1,date}; Date 2: {2,date}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,193,"doAssertions(DateFormat.getDateInstance(DateFormat.DEFAULT, locale),"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,194,"DATES, "" date "", ""date"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,152,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,153,"Date 0: 1/1/70; Date 1: 2/2/70; Date 2: 3/3/70"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,154,"Date 0: {0,date,short}; Date 1: {1,date,short}; Date 2: {2,date,short}"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,155,ATES);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,198,"DateFormat shortDf = DateFormat.getDateInstance(DateFormat.SHORT, locale);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,199,"DateFormat defaultDf = DateFormat.getDateInstance(DateFormat.DEFAULT, locale);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,200,"doAssertions(shortDf, DATES, ""date,short"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,201,"shortDf.equals(defaultDf) ? ""date"" : ""date,short"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,159,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,160,"Date 0: 1/1/70; Date 1: 2/2/70; Date 2: 3/3/70"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,161,"Date 0: {0, date , short }; Date 1: {1,  date  , short }; Date 2: {2, date ,  short  }"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,162,"ATES,"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,163,"Date 0: {0,date,short}; Date 1: {1,date,short}; Date 2: {2,date,short}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,205,"DateFormat shortDf = DateFormat.getDateInstance(DateFormat.SHORT, locale);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,206,"DateFormat defaultDf = DateFormat.getDateInstance(DateFormat.DEFAULT, locale);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,207,"doAssertions(shortDf, DATES, "" date , short "","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,208,"shortDf.equals(defaultDf) ? ""date"" : ""date,short"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,167,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,168,"Date 0: Jan 1, 1970; Date 1: Feb 2, 1970; Date 2: Mar 3, 1970"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,169,"Date 0: {0,date,medium}; Date 1: {1,date,medium}; Date 2: {2,date,medium}"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,170,"ATES, ""Date 0: {0,date}; Date 1: {1,date}; Date 2: {2,date}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,212,"doAssertions(DateFormat.getDateInstance(DateFormat.MEDIUM, locale),"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,213,"DATES, ""date,medium"", ""date"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,174,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,175,"Date 0: January 1, 1970; Date 1: February 2, 1970; Date 2: March 3, 1970"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,176,"Date 0: {0,date,long}; Date 1: {1,date,long}; Date 2: {2,date,long}"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,177,ATES);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,217,"DateFormat longDf = DateFormat.getDateInstance(DateFormat.LONG, locale);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,218,"DateFormat defaultDf = DateFormat.getDateInstance(DateFormat.DEFAULT,"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,219,locale);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,220,"doAssertions(longDf, DATES, ""date,long"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,221,"longDf.equals(defaultDf) ? ""date"" : ""date,long"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,181,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,182,"Date 0: Thursday, January 1, 1970; Date 1: Monday, February 2, 1970; Date 2: Tuesday, March 3, 1970"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,183,"Date 0: {0,date,full}; Date 1: {1,date,full}; Date 2: {2,date,full}"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,184,ATES);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,225,"DateFormat fullDf = DateFormat.getDateInstance(DateFormat.FULL, locale);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,226,"DateFormat longDf = DateFormat.getDateInstance(DateFormat.LONG, locale);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,227,"doAssertions(fullDf, DATES, ""date,full"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,228,"fullDf.equals(longDf) ? ""date,long"" : ""date,full"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,188,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,189,"Date 0: AD1970.1; Date 1: AD1970.33; Date 2: AD1970.62"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,190,"Date 0: {0,date,Gyyyy.D}; Date 1: {1,date,Gyyyy.D}; Date 2: {2,date,Gyyyy.D}"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,191,ATES);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,232,"doAssertions(new SimpleDateFormat(""Gyyyy.D"", locale), DATES,"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,233,"""date,Gyyyy.D"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,195,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,196,"Time 0: 12:15:20 AM; Time 1: 12:30:35 PM; Time 2: 6:45:50 PM"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,197,"Time 0: {0,time}; Time 1: {1,time}; Time 2: {2,time}"", DATES);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,237,"doAssertions(DateFormat.getTimeInstance(DateFormat.DEFAULT, locale),"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,238,"DATES, ""time"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,201,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,202,"Time 0: 12:15 AM; Time 1: 12:30 PM; Time 2: 6:45 PM"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,203,"Time 0: {0,time,short}; Time 1: {1,time,short}; Time 2: {2,time,short}"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,204,ATES);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,242,"doAssertions(DateFormat.getTimeInstance(DateFormat.SHORT, locale),"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,243,"DATES, ""time,short"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,208,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,209,"Time 0: 12:15:20 AM; Time 1: 12:30:35 PM; Time 2: 6:45:50 PM"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,210,"Time 0: {0,time,medium}; Time 1: {1,time,medium}; Time 2: {2,time,medium}"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,211,"ATES, ""Time 0: {0,time}; Time 1: {1,time}; Time 2: {2,time}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,247,"doAssertions(DateFormat.getTimeInstance(DateFormat.MEDIUM, locale),"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,248,"DATES, ""time,medium"", ""time"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,215,ateFormat df = DateFormat.getTimeInstance(DateFormat.LONG);
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,216,tringBuffer expected = new StringBuffer();
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,217,or (int i = 0; i < DATES.length; i++) {
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,218,f (i > 0) {
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,219,"xpected.append(""; "");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,221,"xpected.append(""Time "").append(i).append("": "").append("
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,222,f.format(DATES[i]));
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,224,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,225,"xpected.toString(),"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,226,"Time 0: {0,time,long}; Time 1: {1,time,long}; Time 2: {2,time,long}"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,227,ATES);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,252,"doAssertions(DateFormat.getTimeInstance(DateFormat.LONG, locale),"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,253,"DATES, ""time,long"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,231,ateFormat df = DateFormat.getTimeInstance(DateFormat.FULL);
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,232,tringBuffer expected = new StringBuffer();
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,233,or (int i = 0; i < DATES.length; i++) {
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,234,f (i > 0) {
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,235,"xpected.append(""; "");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,237,"xpected.append(""Time "").append(i).append("": "").append("
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,238,f.format(DATES[i]));
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,240,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,241,"xpected.toString(),"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,242,"Time 0: {0,time,full}; Time 1: {1,time,full}; Time 2: {2,time,full}"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,243,"ATES,"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,244,"Time 0: {0,time,long}; Time 1: {1,time,long}; Time 2: {2,time,long}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,257,"DateFormat fullDf = DateFormat.getTimeInstance(DateFormat.FULL, locale);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,258,"DateFormat longDf = DateFormat.getTimeInstance(DateFormat.LONG, locale);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,259,"doAssertions(fullDf, DATES, ""time,full"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,260,"fullDf.equals(longDf) ? ""time,long"" : ""time,full"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,248,oAssertions(
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,249,"Time 0: AM01520; Time 1: PM123035; Time 2: PM184550"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,250,"Time 0: {0,time,aHms}; Time 1: {1,time,aHms}; Time 2: {2,time,aHms}"","
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,251,"ATES,"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,252,"Time 0: {0,date,aHms}; Time 1: {1,date,aHms}; Time 2: {2,date,aHms}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,264,"doAssertions(new SimpleDateFormat(""aHms"", locale), DATES, ""date,aHms"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,256,"tring choice = ""0.0#x|1.0#y|2.0#z"";"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,257,tringBuffer pattern = new StringBuffer();
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,258,or (int i = 0; i < 3; i++) {
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,259,f (i > 0) {
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,260,"attern.append(""; "");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,262,"attern.append(""Choice "").append(i).append("": {"").append(i).append("
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,263,",choice,"").append(choice).append(""}"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,265,"oAssertions(""Choice 0: x; Choice 1: y; Choice 2: z"", pattern"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,266,"toString(), NUMBERS);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,268,"doAssertions(new ChoiceFormat(""0.0#x|1.0#y|2.0#z""), NUMBERS,"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,269,"""choice,0.0#x|1.0#y|2.0#z"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,270,"tring choice = ""0.0#x |1.0#y |2.0#z "";"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,271,tringBuffer pattern = new StringBuffer();
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,272,or (int i = 0; i < 3; i++) {
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,273,f (i > 0) {
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,274,"attern.append(""; "");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,276,"attern.append(""Choice "").append(i).append("": {"").append(i).append("
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,277,",choice,"").append(choice).append(""}"");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,279,"oAssertions(""Choice 0: x ; Choice 1: y ; Choice 2: z "", pattern"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,280,"toString(), NUMBERS);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,273,"doAssertions(new ChoiceFormat(""0.0#x |1.0#y |2.0#z ""), NUMBERS,"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,274,"""choice,0.0#x |1.0#y |2.0#z "");"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,284,"tring choice = ""0.0#{0}|1.0#{1}|2.0#{2}"";"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,285,tringBuffer pattern = new StringBuffer();
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,286,or (int i = 0; i < 3; i++) {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,278,NumberFormat nf = NumberFormat.getInstance(locale);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,279,StringBuffer choice = new StringBuffer();
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,280,"StringBuffer format = new StringBuffer(""choice,"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,281,for (int i = 0; i < NUMBERS.length; i++) {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,282,Double d = new Double(Math.floor(NUMBERS[i].doubleValue()));
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,288,"attern.append(""; "");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,284,choice.append('|');
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,285,format.append('|');
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,290,"attern.append(""Choice "").append(i).append("": {"").append(i).append("
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,291,",choice,"").append(choice).append(""}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,287,choice.append(d).append('#').append(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,288,nf.format(NUMBERS[i].doubleValue()));
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,289,format.append(d).append('#').append('{').append(i).append('}');
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,293,"oAssertions(""Choice 0: 0.1; Choice 1: 1.1; Choice 2: 2.1"", pattern"
False,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,294,"toString(), NUMBERS);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,291,"doAssertions(new ChoiceFormat(choice.toString()), NUMBERS, format"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,292,.toString());
False,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,23, Baseline tests for {@link ExtendedMessageFormat}
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,23,* Baseline tests for ExtendedMessageFormat
False,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,29,ublic class ExtendedMessageFormatBaselineTest extends AbstractMessageFormatTest {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,29,public abstract class ExtendedMessageFormatBaselineTest extends
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,30,AbstractMessageFormatTest {
False,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,32, (non-Javadoc)
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,33,* Tests for <code>Locale.US</code>
False,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,34, @see org.apache.commons.lang.text.AbstractMessageFormatTest#createMessageFormat(java.lang.String)
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,35,* @author mbenson
False,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,36,rotected MessageFormat createMessageFormat(String pattern) {
False,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,37,"eturn new ExtendedMessageFormat(pattern, ExtendedMessageFormat.createDefaultMetaFormat(Locale.US));"
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,37,public static class US extends ExtendedMessageFormatBaselineTest {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,39,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,41,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,42,return Locale.US;
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,47,* Tests for <code>Locale.UK</code>
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,49,* @author mbenson
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,51,public static class UK extends ExtendedMessageFormatBaselineTest {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,53,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,55,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,56,return Locale.UK;
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,61,* Tests for <code>Locale.GERMANY</code>
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,63,* @author mbenson
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,65,public static class DE extends ExtendedMessageFormatBaselineTest {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,67,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,69,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,70,return Locale.GERMANY;
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,75,* Tests for <code>Locale.ITALY</code>
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,77,* @author mbenson
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,79,public static class IT extends ExtendedMessageFormatBaselineTest {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,81,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,83,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,84,return Locale.ITALY;
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,89,* Tests for <code>Locale.JAPAN</code>
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,91,* @author mbenson
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,93,public static class JP extends ExtendedMessageFormatBaselineTest {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,95,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,97,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,98,return Locale.JAPAN;
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,103,* Tests for <code>Locale.CHINA</code>
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,105,* @author mbenson
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,107,public static class CN extends ExtendedMessageFormatBaselineTest {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,109,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,111,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,112,return Locale.CHINA;
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,117,* Tests for <code>Locale.CANADA</code>
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,119,* @author mbenson
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,121,public static class CA extends ExtendedMessageFormatBaselineTest {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,123,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,125,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,126,return Locale.CANADA;
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,131,* Tests for <code>Locale.FRANCE</code>
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,133,* @author mbenson
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,135,public static class FR extends ExtendedMessageFormatBaselineTest {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,137,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,139,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,140,return Locale.FRANCE;
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,145,* Tests for <code>Locale.KOREA</code>
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,147,* @author mbenson
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,149,public static class KR extends ExtendedMessageFormatBaselineTest {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,151,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,153,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,154,return Locale.KOREA;
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,159,* Tests for <code>Locale.TAIWAN</code>
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,161,* @author mbenson
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,163,public static class TW extends ExtendedMessageFormatBaselineTest {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,165,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,167,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,168,return Locale.TAIWAN;
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,173,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,175,"protected MessageFormat createMessageFormat(String pattern, Locale locale) {"
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,176,"return new ExtendedMessageFormat(pattern, locale, ExtendedMessageFormat"
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,177,.createDefaultMetaFormat(locale));
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,19,import java.text.DateFormat;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,25,import java.util.Date;
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,34,ublic class MessageFormatExtensionTest extends AbstractMessageFormatTest {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,36,public abstract class MessageFormatExtensionTest extends
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,37,AbstractMessageFormatTest {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,39,* Tests for <code>Locale.US</code>
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,41,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,43,public static class US extends MessageFormatExtensionTest {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,45,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,47,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,48,return Locale.US;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,53,* Tests for <code>Locale.UK</code>
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,55,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,57,public static class UK extends MessageFormatExtensionTest {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,59,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,61,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,62,return Locale.UK;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,67,* Tests for <code>Locale.GERMANY</code>
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,69,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,71,public static class DE extends MessageFormatExtensionTest {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,73,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,75,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,76,return Locale.GERMANY;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,81,* Tests for <code>Locale.ITALY</code>
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,83,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,85,public static class IT extends MessageFormatExtensionTest {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,87,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,89,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,90,return Locale.ITALY;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,95,* Tests for <code>Locale.JAPAN</code>
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,97,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,99,public static class JP extends MessageFormatExtensionTest {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,101,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,103,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,104,return Locale.JAPAN;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,109,* Tests for <code>Locale.CHINA</code>
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,111,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,113,public static class CN extends MessageFormatExtensionTest {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,115,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,117,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,118,return Locale.CHINA;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,123,* Tests for <code>Locale.CANADA</code>
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,125,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,127,public static class CA extends MessageFormatExtensionTest {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,129,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,131,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,132,return Locale.CANADA;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,137,* Tests for <code>Locale.FRANCE</code>
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,139,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,141,public static class FR extends MessageFormatExtensionTest {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,143,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,145,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,146,return Locale.FRANCE;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,151,* Tests for <code>Locale.KOREA</code>
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,153,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,155,public static class KR extends MessageFormatExtensionTest {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,157,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,159,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,160,return Locale.KOREA;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,165,* Tests for <code>Locale.TAIWAN</code>
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,167,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,169,public static class TW extends MessageFormatExtensionTest {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,171,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,173,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,174,return Locale.TAIWAN;
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,42, (non-Javadoc)
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,44," @see java.text.Format#format(java.lang.Object,"
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,45,"      java.lang.StringBuffer, java.text.FieldPosition)"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,184,* {@inheritDoc}
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,49,har[] buffer = String.valueOf(obj).toCharArray();
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,188,if (!(obj instanceof String)) {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,189,throw new IllegalArgumentException();
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,191,char[] buffer = ((String) obj).toCharArray();
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,95, (non-Javadoc)
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,97, @see org.apache.commons.lang.text.AbstractMessageFormatTest#createMessageFormat(java.lang.String)
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,237,* {@inheritDoc}
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,99,rotected MessageFormat createMessageFormat(String pattern) {
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,100,"eturn new ExtendedMessageFormat(pattern, new MultiFormat.Builder()"
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,101,add(ExtendedMessageFormat.createDefaultMetaFormat(Locale.US)).add(
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,239,"protected MessageFormat createMessageFormat(String pattern, Locale locale) {"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,240,"return new ExtendedMessageFormat(pattern, locale,"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,241,new MultiFormat.Builder().add(
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,104,toNameKeyedMetaFormat()).toMultiFormat());
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,244,.toNameKeyedMetaFormat()).add(
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,245,ExtendedMessageFormat.createDefaultMetaFormat(locale))
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,246,.toMultiFormat());
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,114,"oAssertions(""John Q. Public was born on Thursday, January 1, 1970."","
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,115,"{0,properName} was born on {1,date,full}."", new Object[] {"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,256,"StringBuffer expected = new StringBuffer(""John Q. Public was born on "");"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,257,"Date dob = new GregorianCalendar(1970, Calendar.JANUARY, 01, 0, 15, 20)"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,258,.getTime();
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,259,"DateFormat longDf = DateFormat.getDateInstance(DateFormat.LONG, locale);"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,260,"longDf.format(dob, expected, new FieldPosition(0));"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,261,expected.append('.');
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,262,"String pattern = ""{0,properName} was born on {1,date,long}."";"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,263,StringBuffer toPattern = new StringBuffer(pattern);
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,264,"if (longDf.equals(DateFormat.getDateInstance(DateFormat.DEFAULT, locale))) {"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,265,"int idx = pattern.indexOf("",long"");"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,266,"toPattern.delete(idx, idx + "",long"".length());"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,268,"doAssertions(expected.toString(),"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,269,"pattern, new Object[] {"
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,118,"5, 20).getTime() });"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,272,"15, 20).getTime() }, toPattern.toString());"
False,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,13,ublic class MessageFormatTest extends AbstractMessageFormatTest {
False,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,15, (non-Javadoc)
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,13,public abstract class MessageFormatTest extends AbstractMessageFormatTest {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,16,* Tests for <code>Locale.US</code>
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,18,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,20,public static class US extends MessageFormatTest {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,22,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,24,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,25,return Locale.US;
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,30,* Tests for <code>Locale.UK</code>
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,32,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,34,public static class UK extends MessageFormatTest {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,36,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,38,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,39,return Locale.UK;
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,44,* Tests for <code>Locale.GERMANY</code>
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,46,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,48,public static class DE extends MessageFormatTest {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,50,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,52,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,53,return Locale.GERMANY;
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,58,* Tests for <code>Locale.ITALY</code>
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,60,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,62,public static class IT extends MessageFormatTest {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,64,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,66,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,67,return Locale.ITALY;
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,72,* Tests for <code>Locale.JAPAN</code>
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,74,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,76,public static class JP extends MessageFormatTest {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,78,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,80,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,81,return Locale.JAPAN;
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,86,* Tests for <code>Locale.CHINA</code>
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,88,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,90,public static class CN extends MessageFormatTest {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,92,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,94,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,95,return Locale.CHINA;
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,100,* Tests for <code>Locale.CANADA</code>
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,102,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,104,public static class CA extends MessageFormatTest {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,106,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,108,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,109,return Locale.CANADA;
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,114,* Tests for <code>Locale.FRANCE</code>
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,116,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,118,public static class FR extends MessageFormatTest {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,120,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,122,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,123,return Locale.FRANCE;
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,128,* Tests for <code>Locale.KOREA</code>
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,130,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,132,public static class KR extends MessageFormatTest {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,134,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,136,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,137,return Locale.KOREA;
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,142,* Tests for <code>Locale.TAIWAN</code>
False,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,17, @see org.apache.commons.lang.text.AbstractMessageFormatTest#createMessageFormat(java.lang.String)
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,144,* @author mbenson
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,146,public static class TW extends MessageFormatTest {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,148,* {@inheritDoc}
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,150,protected Locale getLocale() {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,151,return Locale.TAIWAN;
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,156,* {@inheritDoc}
False,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,19,rotected MessageFormat createMessageFormat(String pattern) {
False,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,20,"eturn new MessageFormat(pattern, Locale.US);"
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,158,"protected MessageFormat createMessageFormat(String pattern, Locale locale) {"
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,159,"return new MessageFormat(pattern, locale);"
False,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,60,uite.addTestSuite(MessageFormatTest.class);
False,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,61,uite.addTestSuite(ExtendedMessageFormatBaselineTest.class);
False,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,62,uite.addTestSuite(MessageFormatExtensionTest.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,60,suite.addTestSuite(MessageFormatTest.US.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,61,suite.addTestSuite(MessageFormatTest.UK.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,62,suite.addTestSuite(MessageFormatTest.DE.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,63,suite.addTestSuite(MessageFormatTest.IT.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,64,suite.addTestSuite(MessageFormatTest.JP.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,65,suite.addTestSuite(MessageFormatTest.CA.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,66,suite.addTestSuite(MessageFormatTest.CN.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,67,suite.addTestSuite(MessageFormatTest.FR.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,68,suite.addTestSuite(MessageFormatTest.KR.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,69,suite.addTestSuite(MessageFormatTest.TW.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,70,suite.addTestSuite(ExtendedMessageFormatBaselineTest.US.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,71,suite.addTestSuite(ExtendedMessageFormatBaselineTest.UK.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,72,suite.addTestSuite(ExtendedMessageFormatBaselineTest.DE.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,73,suite.addTestSuite(ExtendedMessageFormatBaselineTest.IT.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,74,suite.addTestSuite(ExtendedMessageFormatBaselineTest.JP.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,75,suite.addTestSuite(ExtendedMessageFormatBaselineTest.CA.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,76,suite.addTestSuite(ExtendedMessageFormatBaselineTest.CN.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,77,suite.addTestSuite(ExtendedMessageFormatBaselineTest.FR.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,78,suite.addTestSuite(ExtendedMessageFormatBaselineTest.KR.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,79,suite.addTestSuite(ExtendedMessageFormatBaselineTest.TW.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,80,suite.addTestSuite(MessageFormatExtensionTest.US.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,81,suite.addTestSuite(MessageFormatExtensionTest.UK.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,82,suite.addTestSuite(MessageFormatExtensionTest.DE.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,83,suite.addTestSuite(MessageFormatExtensionTest.IT.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,84,suite.addTestSuite(MessageFormatExtensionTest.JP.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,85,suite.addTestSuite(MessageFormatExtensionTest.CA.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,86,suite.addTestSuite(MessageFormatExtensionTest.CN.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,87,suite.addTestSuite(MessageFormatExtensionTest.FR.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,88,suite.addTestSuite(MessageFormatExtensionTest.KR.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,89,suite.addTestSuite(MessageFormatExtensionTest.TW.class);

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,17,package org.apache.commons.lang3.concurrent;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,19,import java.util.concurrent.ScheduledExecutorService;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,20,import java.util.concurrent.ScheduledFuture;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,21,import java.util.concurrent.ScheduledThreadPoolExecutor;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,22,import java.util.concurrent.TimeUnit;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,25,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,26,* A specialized <em>semaphore</em> implementation that provides a number of
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,27,* permits in a given time frame.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,28,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,29,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,30,* This class is similar to the {@code java.util.concurrent.Semaphore} class
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,31,* provided by the JDK in that it manages a configurable number of permits.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,32,* Using the {@link #acquire()} method a permit can be requested by a thread.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,33,"* However, there is an additional timing dimension: there is no {@code"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,34,"* release()} method for freeing a permit, but all permits are automatically"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,35,* released at the end of a configurable time frame. If a thread calls
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,36,* {@link #acquire()} and the available permits are already exhausted for this
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,37,"* time frame, the thread is blocked. When the time frame ends all permits"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,38,"* requested so far are restored, and blocking threads are waked up again, so"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,39,* that they can try to acquire a new permit. This basically means that in the
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,40,* specified time frame only the given number of operations is possible.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,41,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,42,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,43,* A use case for this class is to artificially limit the load produced by a
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,44,* process. As an example consider an application that issues database queries
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,45,* on a production system in a background process to gather statistical
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,46,* information. This background processing should not produce so much database
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,47,* load that the functionality and the performance of the production system are
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,48,* impacted. Here a {@code TimedSemaphore} could be installed to guarantee that
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,49,* only a given number of database queries are issued per second.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,50,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,51,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,52,* A thread class for performing database queries could look as follows:
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,54,* <pre>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,55,* public class StatisticsThread extends Thread {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,56,*     // The semaphore for limiting database load.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,57,*     private final TimedSemaphore semaphore;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,58,*     // Create an instance and set the semaphore
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,59,*     public StatisticsThread(TimedSemaphore timedSemaphore) {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,60,*         semaphore = timedSemaphore;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,62,*     // Gather statistics
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,63,*     public void run() {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,64,*         try {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,65,*             while(true) {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,66,*                 semaphore.acquire();   // limit database load
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,67,*                 performQuery();        // issue a query
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,69,*         } catch(InterruptedException) {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,70,*             // fall through
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,75,* </pre>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,77,* The following code fragment shows how a {@code TimedSemaphore} is created
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,78,* that allows only 10 operations per second and passed to the statistics
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,79,* thread:
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,81,* <pre>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,82,"* TimedSemaphore sem = new TimedSemaphore(1, TimeUnit.SECOND, 10);"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,83,* StatisticsThread thread = new StatisticsThread(sem);
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,84,* thread.start();
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,85,* </pre>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,87,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,88,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,89,* When creating an instance the time period for the semaphore must be
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,90,* specified. {@code TimedSemaphore} uses an executor service with a
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,91,* corresponding period to monitor this interval. The {@code
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,92,* ScheduledExecutorService} to be used for this purpose can be provided at
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,93,* construction time. Alternatively the class creates an internal executor
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,94,* service.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,95,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,96,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,97,* Client code that uses {@code TimedSemaphore} has to call the
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,98,* {@link #acquire()} method in aach processing step. {@code TimedSemaphore}
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,99,* keeps track of the number of invocations of the {@link #acquire()} method and
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,100,* blocks the calling thread if the counter exceeds the limit specified. When
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,101,* the timer signals the end of the time period the counter is reset and all
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,102,* waiting threads are released. Then another cycle can start.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,103,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,104,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,105,* It is possible to modify the limit at any time using the
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,106,* {@link #setLimit(int)} method. This is useful if the load produced by an
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,107,* operation has to be adapted dynamically. In the example scenario with the
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,108,* thread collecting statistics it may make sense to specify a low limit during
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,109,* day time while allowing a higher load in the night time. Reducing the limit
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,110,* takes effect immediately by blocking incoming callers. If the limit is
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,111,"* increased, waiting threads are not released immediately, but wake up when the"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,112,"* timer runs out. Then, in the next period more processing steps can be"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,113,* performed without blocking. By setting the limit to 0 the semaphore can be
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,114,"* switched off: in this mode the {@link #acquire()} method never blocks, but"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,115,* lets all callers pass directly.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,116,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,117,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,118,* When the {@code TimedSemaphore} is no more needed its {@link #shutdown()}
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,119,* method should be called. This causes the periodic task that monitors the time
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,120,* interval to be canceled. If the {@code ScheduledExecutorService} has been
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,121,"* created by the semaphore at construction time, it is also shut down."
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,122,* resources. After that {@link #acquire()} must not be called any more.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,123,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,125,* @version $Id:$
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,127,public class TimedSemaphore {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,129,* Constant for a value representing no limit. If the limit is set to a
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,130,"* value less or equal this constant, the {@code TimedSemaphore} will be"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,131,* effectively switched off.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,133,public static final int NO_LIMIT = 0;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,135,/** Constant for the thread pool size for the executor. */
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,136,private static final int THREAD_POOL_SIZE = 1;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,138,/** The executor service for managing the timer thread. */
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,139,private final ScheduledExecutorService executorService;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,141,/** Stores the period for this timed semaphore. */
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,142,private final long period;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,144,/** The time unit for the period. */
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,145,private final TimeUnit unit;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,147,/** A flag whether the executor service was created by this object. */
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,148,private final boolean ownExecutor;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,150,/** A future object representing the timer task. */
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,151,private ScheduledFuture<?> task;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,153,/** Stores the total number of invocations of the acquire() method. */
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,154,private long totalAcquireCount;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,157,* The counter for the periods. This counter is increased every time a
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,158,* period ends.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,160,private long periodCount;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,162,/** The limit. */
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,163,private int limit;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,165,/** The current counter. */
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,166,private int acquireCount;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,168,/** The number of invocations of acquire() in the last period. */
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,169,private int lastCallsPerPeriod;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,171,/** A flag whether shutdown() was called. */
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,172,private boolean shutdown;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,175,* Creates a new instance of {@link TimedSemaphore} and initializes it with
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,176,* the given time period and the limit.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,178,* @param timePeriod the time period
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,179,* @param timeUnit the unit for the period
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,180,* @param limit the limit for the semaphore
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,181,* @throws IllegalArgumentException if the period is less or equals 0
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,183,"public TimedSemaphore(long timePeriod, TimeUnit timeUnit, int limit) {"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,184,"this(null, timePeriod, timeUnit, limit);"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,188,* Creates a new instance of {@link TimedSemaphore} and initializes it with
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,189,"* an executor service, the given time period, and the limit. The executor"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,190,* service will be used for creating a periodic task for monitoring the time
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,191,"* period. It can be <b>null</b>, then a default service will be created."
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,193,* @param service the executor service
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,194,* @param timePeriod the time period
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,195,* @param timeUnit the unit for the period
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,196,* @param limit the limit for the semaphore
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,197,* @throws IllegalArgumentException if the period is less or equals 0
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,199,"public TimedSemaphore(ScheduledExecutorService service, long timePeriod,"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,200,"TimeUnit timeUnit, int limit) {"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,201,if (timePeriod <= 0) {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,202,"throw new IllegalArgumentException(""Time period must be greater 0!"");"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,205,period = timePeriod;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,206,unit = timeUnit;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,208,if (service != null) {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,209,executorService = service;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,210,ownExecutor = false;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,211,} else {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,212,ScheduledThreadPoolExecutor s = new ScheduledThreadPoolExecutor(
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,213,THREAD_POOL_SIZE);
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,214,s.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,215,s.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,216,executorService = s;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,217,ownExecutor = true;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,220,setLimit(limit);
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,224,* Returns the limit enforced by this semaphore. The limit determines how
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,225,* many invocations of {@link #acquire()} are allowed within the monitored
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,226,* period.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,228,* @return the limit
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,230,public final synchronized int getLimit() {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,231,return limit;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,235,* Sets the limit. This is the number of times the {@link #acquire()} method
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,236,"* can be called within the time period specified. If this limit is reached,"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,237,* further invocations of {@link #acquire()} will block. Setting the limit
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,238,"* to a value &lt;= {@link #NO_LIMIT} will cause the limit to be disabled,"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,239,* i.e. an arbitrary number of{@link #acquire()} invocations is allowed in
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,240,* the time period.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,242,* @param limit the limit
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,244,public final synchronized void setLimit(int limit) {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,245,this.limit = limit;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,249,* Initializes a shutdown. After that the object cannot be used any more.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,250,* This method can be invoked an arbitrary number of times. All invocations
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,251,* after the first one do not have any effect.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,253,public synchronized void shutdown() {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,254,if (!shutdown) {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,256,if (ownExecutor) {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,257,"// if the executor was created by this instance, it has"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,258,// to be shutdown
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,259,getExecutorService().shutdownNow();
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,261,if (task != null) {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,262,task.cancel(false);
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,265,shutdown = true;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,270,* Tests whether the {@link #shutdown()} method has been called on this
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,271,"* object. If this method returns <b>true</b>, this instance cannot be used"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,272,* any longer.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,274,* @return a flag whether a shutdown has been performed
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,276,public synchronized boolean isShutdown() {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,277,return shutdown;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,281,* Tries to acquire a permit from this semaphore. This method will block if
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,282,* the limit for the current period has already been reached. If
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,283,"* {@link #shutdown()} has already been invoked, calling this method will"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,284,* cause an exception. The very first call of this method starts the timer
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,285,* task which monitors the time period set for this {@code TimedSemaphore}.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,286,* From now on the semaphore is active.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,288,* @throws InterruptedException if the thread gets interrupted
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,289,* @throws IllegalStateException if this semaphore is already shut down
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,291,public synchronized void acquire() throws InterruptedException {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,292,if (isShutdown()) {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,293,"throw new IllegalStateException(""TimedSemaphore is shut down!"");"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,296,if (task == null) {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,297,task = startTimer();
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,300,boolean canPass = false;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,301,do {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,302,canPass = getLimit() <= NO_LIMIT || acquireCount < getLimit();
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,303,if (!canPass) {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,304,wait();
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,305,} else {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,306,acquireCount++;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,308,} while (!canPass);
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,312,* Returns the number of (successful) acquire invocations during the last
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,313,* period. This is the number of times the {@link #acquire()} method was
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,314,* called without blocking. This can be useful for testing or debugging
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,315,"* purposes or to determine a meaningful threshold value. If a limit is set,"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,316,* the value returned by this method won't be greater than this limit.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,318,* @return the number of non-blocking invocations of the {@link #acquire()}
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,319,* method
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,321,public synchronized int getLastAcquiresPerPeriod() {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,322,return lastCallsPerPeriod;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,326,* Returns the number of invocations of the {@link #acquire()} method for
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,327,* the current period. This may be useful for testing or debugging purposes.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,329,* @return the current number of {@link #acquire()} invocations
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,331,public synchronized int getAcquireCount() {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,332,return acquireCount;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,336,* Returns the number of calls to the {@link #acquire()} method that can
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,337,* still be performed in the current period without blocking. This method
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,338,* can give an indication whether it is safe to call the {@link #acquire()}
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,339,"* method without risking to be suspended. However, there is no guarantee"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,340,* that a subsequent call to {@link #acquire()} actually is not-blocking
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,341,* because in the mean time other threads may have invoked the semaphore.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,343,* @return the current number of available {@link #acquire()} calls in the
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,344,* current period
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,346,public synchronized int getAvailablePermits() {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,347,return getLimit() - getAcquireCount();
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,351,* Returns the average number of successful (i.e. non-blocking)
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,352,* {@link #acquire()} invocations for the entire life-time of this {@code
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,353,* TimedSemaphore}. This method can be used for instance for statistical
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,354,* calculations.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,356,* @return the average number of {@link #acquire()} invocations per time
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,357,* unit
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,359,public synchronized double getAverageCallsPerPeriod() {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,360,return (periodCount == 0) ? 0 : (double) totalAcquireCount
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,361,/ (double) periodCount;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,365,* Returns the time period. This is the time monitored by this semaphore.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,366,* Only a given number of invocations of the {@link #acquire()} method is
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,367,* possible in this period.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,369,* @return the time period
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,371,public long getPeriod() {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,372,return period;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,376,* Returns the time unit. This is the unit used by {@link #getPeriod()}.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,378,* @return the time unit
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,380,public TimeUnit getUnit() {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,381,return unit;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,385,* Returns the executor service used by this instance.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,387,* @return the executor service
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,389,protected ScheduledExecutorService getExecutorService() {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,390,return executorService;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,394,* Starts the timer. This method is called when {@link #acquire()} is called
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,395,* for the first time. It schedules a task to be executed at fixed rate to
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,396,* monitor the time period specified.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,398,* @return a future object representing the task scheduled
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,400,protected ScheduledFuture<?> startTimer() {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,401,return getExecutorService().scheduleAtFixedRate(new Runnable() {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,402,public void run() {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,403,endOfPeriod();
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,405,"}, getPeriod(), getPeriod(), getUnit());"
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,409,* The current time period is finished. This method is called by the timer
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,410,* used internally to monitor the time period. It resets the counter and
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,411,* releases the threads waiting for this barrier.
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,413,synchronized void endOfPeriod() {
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,414,lastCallsPerPeriod = acquireCount;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,415,totalAcquireCount += acquireCount;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,416,periodCount++;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,417,acquireCount = 0;
True,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java,418,notifyAll();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,17,package org.apache.commons.lang3.concurrent;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,19,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,20,import static org.junit.Assert.assertFalse;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,21,import static org.junit.Assert.assertNotNull;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,22,import static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,23,import static org.junit.Assert.fail;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,25,import java.util.concurrent.CountDownLatch;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,26,import java.util.concurrent.ScheduledExecutorService;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,27,import java.util.concurrent.ScheduledFuture;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,28,import java.util.concurrent.ScheduledThreadPoolExecutor;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,29,import java.util.concurrent.TimeUnit;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,31,import org.apache.commons.lang3.concurrent.TimedSemaphore;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,32,import org.easymock.EasyMock;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,33,import org.junit.Test;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,36,* Test class for TimedSemaphore.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,38,* @version $Id$
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,40,public class TimedSemaphoreTest {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,41,/** Constant for the time period. */
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,42,private static final long PERIOD = 500;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,44,/** Constant for the time unit. */
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,45,private static final TimeUnit UNIT = TimeUnit.MILLISECONDS;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,47,/** Constant for the default limit. */
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,48,private static final int LIMIT = 10;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,51,* Tests creating a new instance.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,53,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,54,public void testInit() {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,55,ScheduledExecutorService service = EasyMock
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,56,.createMock(ScheduledExecutorService.class);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,57,EasyMock.replay(service);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,58,"TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT,"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,59,LIMIT);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,60,EasyMock.verify(service);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,61,"assertEquals(""Wrong service"", service, semaphore.getExecutorService());"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,62,"assertEquals(""Wrong period"", PERIOD, semaphore.getPeriod());"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,63,"assertEquals(""Wrong unit"", UNIT, semaphore.getUnit());"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,64,"assertEquals(""Statistic available"", 0, semaphore"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,65,.getLastAcquiresPerPeriod());
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,66,"assertEquals(""Average available"", 0.0, semaphore"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,67,".getAverageCallsPerPeriod(), .05);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,68,"assertFalse(""Already shutdown"", semaphore.isShutdown());"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,69,"assertEquals(""Wrong limit"", LIMIT, semaphore.getLimit());"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,73,* Tries to create an instance with a negative period. This should cause an
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,74,* exception.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,76,@Test(expected = IllegalArgumentException.class)
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,77,public void testInitInvalidPeriod() {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,78,"new TimedSemaphore(0L, UNIT, LIMIT);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,82,* Tests whether a default executor service is created if no service is
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,83,* provided.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,85,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,86,public void testInitDefaultService() {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,87,"TimedSemaphore semaphore = new TimedSemaphore(PERIOD, UNIT, LIMIT);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,88,ScheduledThreadPoolExecutor exec = (ScheduledThreadPoolExecutor) semaphore
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,89,.getExecutorService();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,90,"assertFalse(""Wrong periodic task policy"", exec"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,91,.getContinueExistingPeriodicTasksAfterShutdownPolicy());
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,92,"assertFalse(""Wrong delayed task policy"", exec"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,93,.getExecuteExistingDelayedTasksAfterShutdownPolicy());
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,94,"assertFalse(""Already shutdown"", exec.isShutdown());"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,95,semaphore.shutdown();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,99,* Tests starting the timer.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,101,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,102,public void testStartTimer() throws InterruptedException {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,103,"TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD,"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,104,"UNIT, LIMIT);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,105,ScheduledFuture<?> future = semaphore.startTimer();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,106,"assertNotNull(""No future returned"", future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,107,Thread.sleep(PERIOD);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,108,final int trials = 10;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,109,int count = 0;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,110,do {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,111,Thread.sleep(PERIOD);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,112,if (count++ > trials) {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,113,"fail(""endOfPeriod() not called!"");"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,115,} while (semaphore.getPeriodEnds() <= 0);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,116,semaphore.shutdown();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,120,* Tests the shutdown() method if the executor belongs to the semaphore. In
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,121,* this case it has to be shut down.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,123,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,124,public void testShutdownOwnExecutor() {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,125,"TimedSemaphore semaphore = new TimedSemaphore(PERIOD, UNIT, LIMIT);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,126,semaphore.shutdown();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,127,"assertTrue(""Not shutdown"", semaphore.isShutdown());"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,128,"assertTrue(""Executor not shutdown"", semaphore.getExecutorService()"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,129,.isShutdown());
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,133,* Tests the shutdown() method for a shared executor service before a task
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,134,* was started. This should do pretty much nothing.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,136,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,137,public void testShutdownSharedExecutorNoTask() {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,138,ScheduledExecutorService service = EasyMock
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,139,.createMock(ScheduledExecutorService.class);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,140,EasyMock.replay(service);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,141,"TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT,"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,142,LIMIT);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,143,semaphore.shutdown();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,144,"assertTrue(""Not shutdown"", semaphore.isShutdown());"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,145,EasyMock.verify(service);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,149,* Prepares an executor service mock to expect the start of the timer.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,151,* @param service the mock
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,152,* @param future the future
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,154,"private void prepareStartTimer(ScheduledExecutorService service,"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,155,ScheduledFuture<?> future) {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,156,"service.scheduleAtFixedRate((Runnable) EasyMock.anyObject(), EasyMock"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,157,".eq(PERIOD), EasyMock.eq(PERIOD), EasyMock.eq(UNIT));"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,158,EasyMock.expectLastCall().andReturn(future);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,162,* Tests the shutdown() method for a shared executor after the task was
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,163,* started. In this case the task must be canceled.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,165,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,166,public void testShutdownSharedExecutorTask() throws InterruptedException {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,167,ScheduledExecutorService service = EasyMock
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,168,.createMock(ScheduledExecutorService.class);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,169,ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,170,"prepareStartTimer(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,171,EasyMock.expect(future.cancel(false)).andReturn(true);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,172,"EasyMock.replay(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,173,"TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service,"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,174,"PERIOD, UNIT, LIMIT);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,175,semaphore.acquire();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,176,semaphore.shutdown();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,177,"assertTrue(""Not shutdown"", semaphore.isShutdown());"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,178,"EasyMock.verify(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,182,* Tests multiple invocations of the shutdown() method.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,184,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,185,public void testShutdownMultipleTimes() throws InterruptedException {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,186,ScheduledExecutorService service = EasyMock
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,187,.createMock(ScheduledExecutorService.class);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,188,ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,189,"prepareStartTimer(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,190,EasyMock.expect(future.cancel(false)).andReturn(true);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,191,"EasyMock.replay(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,192,"TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service,"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,193,"PERIOD, UNIT, LIMIT);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,194,semaphore.acquire();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,195,for (int i = 0; i < 10; i++) {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,196,semaphore.shutdown();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,198,"EasyMock.verify(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,202,* Tests the acquire() method if a limit is set.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,204,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,205,public void testAcquireLimit() throws InterruptedException {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,206,ScheduledExecutorService service = EasyMock
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,207,.createMock(ScheduledExecutorService.class);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,208,ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,209,"prepareStartTimer(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,210,"EasyMock.replay(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,211,final int count = 10;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,212,CountDownLatch latch = new CountDownLatch(count - 1);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,213,"TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, 1);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,214,"SemaphoreThread t = new SemaphoreThread(semaphore, latch, count,"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,215,count - 1);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,216,semaphore.setLimit(count - 1);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,218,// start a thread that calls the semaphore count times
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,219,t.start();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,220,latch.await();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,221,// now the semaphore's limit should be reached and the thread blocked
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,222,"assertEquals(""Wrong semaphore count"", count - 1, semaphore"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,223,.getAcquireCount());
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,225,"// this wakes up the thread, it should call the semaphore once more"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,226,semaphore.endOfPeriod();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,227,t.join();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,228,"assertEquals(""Wrong semaphore count (2)"", 1, semaphore"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,229,.getAcquireCount());
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,230,"assertEquals(""Wrong acquire() count"", count - 1, semaphore"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,231,.getLastAcquiresPerPeriod());
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,232,"EasyMock.verify(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,236,* Tests the acquire() method if more threads are involved than the limit.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,237,* This method starts a number of threads that all invoke the semaphore. The
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,238,"* semaphore's limit is set to 1, so in each period only a single thread can"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,239,* acquire the semaphore.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,241,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,242,public void testAcquireMultipleThreads() throws InterruptedException {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,243,ScheduledExecutorService service = EasyMock
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,244,.createMock(ScheduledExecutorService.class);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,245,ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,246,"prepareStartTimer(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,247,"EasyMock.replay(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,248,"TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service,"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,249,"PERIOD, UNIT, 1);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,250,semaphore.latch = new CountDownLatch(1);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,251,final int count = 10;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,252,SemaphoreThread[] threads = new SemaphoreThread[count];
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,253,for (int i = 0; i < count; i++) {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,254,"threads[i] = new SemaphoreThread(semaphore, null, 1, 0);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,255,threads[i].start();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,257,for (int i = 0; i < count; i++) {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,258,semaphore.latch.await();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,259,"assertEquals(""Wrong count"", 1, semaphore.getAcquireCount());"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,260,semaphore.latch = new CountDownLatch(1);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,261,semaphore.endOfPeriod();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,262,"assertEquals(""Wrong acquire count"", 1, semaphore"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,263,.getLastAcquiresPerPeriod());
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,265,for (int i = 0; i < count; i++) {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,266,threads[i].join();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,268,"EasyMock.verify(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,272,* Tests the acquire() method if no limit is set. A test thread is started
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,273,* that calls the semaphore a large number of times. Even if the semaphore's
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,274,"* period does not end, the thread should never block."
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,276,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,277,public void testAcquireNoLimit() throws InterruptedException {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,278,ScheduledExecutorService service = EasyMock
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,279,.createMock(ScheduledExecutorService.class);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,280,ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,281,"prepareStartTimer(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,282,"EasyMock.replay(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,283,"TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service,"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,284,"PERIOD, UNIT, TimedSemaphore.NO_LIMIT);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,285,final int count = 1000;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,286,CountDownLatch latch = new CountDownLatch(count);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,287,"SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,288,t.start();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,289,latch.await();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,290,"EasyMock.verify(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,294,* Tries to call acquire() after shutdown(). This should cause an exception.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,296,@Test(expected = IllegalStateException.class)
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,297,public void testPassAfterShutdown() throws InterruptedException {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,298,"TimedSemaphore semaphore = new TimedSemaphore(PERIOD, UNIT, LIMIT);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,299,semaphore.shutdown();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,300,semaphore.acquire();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,304,* Tests a bigger number of invocations that span multiple periods. The
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,305,* period is set to a very short time. A background thread calls the
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,306,* semaphore a large number of times. While it runs at last one end of a
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,307,* period should be reached.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,309,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,310,public void testAcquireMultiplePeriods() throws InterruptedException {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,311,final int count = 1000;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,312,TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,313,"PERIOD / 10, TimeUnit.MILLISECONDS, 1);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,314,semaphore.setLimit(count / 4);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,315,CountDownLatch latch = new CountDownLatch(count);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,316,"SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,317,t.start();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,318,latch.await();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,319,semaphore.shutdown();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,320,"assertTrue(""End of period not reached"", semaphore.getPeriodEnds() > 0);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,324,* Tests the methods for statistics.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,326,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,327,public void testGetAverageCallsPerPeriod() throws InterruptedException {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,328,ScheduledExecutorService service = EasyMock
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,329,.createMock(ScheduledExecutorService.class);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,330,ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,331,"prepareStartTimer(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,332,"EasyMock.replay(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,333,"TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT,"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,334,LIMIT);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,335,semaphore.acquire();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,336,semaphore.endOfPeriod();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,337,"assertEquals(""Wrong average (1)"", 1.0, semaphore"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,338,".getAverageCallsPerPeriod(), .005);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,339,semaphore.acquire();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,340,semaphore.acquire();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,341,semaphore.endOfPeriod();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,342,"assertEquals(""Wrong average (2)"", 1.5, semaphore"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,343,".getAverageCallsPerPeriod(), .005);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,344,"EasyMock.verify(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,348,* Tests whether the available non-blocking calls can be queried.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,350,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,351,public void testGetAvailablePermits() throws InterruptedException {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,352,ScheduledExecutorService service = EasyMock
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,353,.createMock(ScheduledExecutorService.class);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,354,ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,355,"prepareStartTimer(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,356,"EasyMock.replay(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,357,"TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT,"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,358,LIMIT);
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,359,for (int i = 0; i < LIMIT; i++) {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,360,"assertEquals(""Wrong available count at "" + i, LIMIT - i, semaphore"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,361,.getAvailablePermits());
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,362,semaphore.acquire();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,364,semaphore.endOfPeriod();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,365,"assertEquals(""Wrong available count in new period"", LIMIT, semaphore"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,366,.getAvailablePermits());
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,367,"EasyMock.verify(service, future);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,371,* A specialized implementation of {@code TimedSemaphore} that is easier to
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,372,* test.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,374,private static class TimedSemaphoreTestImpl extends TimedSemaphore {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,375,/** A mock scheduled future. */
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,376,ScheduledFuture<?> schedFuture;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,378,/** A latch for synchronizing with the main thread. */
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,379,volatile CountDownLatch latch;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,381,/** Counter for the endOfPeriod() invocations. */
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,382,private int periodEnds;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,384,"public TimedSemaphoreTestImpl(long timePeriod, TimeUnit timeUnit,"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,385,int limit) {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,386,"super(timePeriod, timeUnit, limit);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,389,"public TimedSemaphoreTestImpl(ScheduledExecutorService service,"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,390,"long timePeriod, TimeUnit timeUnit, int limit) {"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,391,"super(service, timePeriod, timeUnit, limit);"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,395,* Returns the number of invocations of the endOfPeriod() method.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,397,* @return the endOfPeriod() invocations
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,399,public int getPeriodEnds() {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,400,synchronized (this) {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,401,return periodEnds;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,406,* Invokes the latch if one is set.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,408,@Override
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,409,public void acquire() throws InterruptedException {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,410,super.acquire();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,411,if (latch != null) {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,412,latch.countDown();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,417,* Counts the number of invocations.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,419,@Override
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,420,protected void endOfPeriod() {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,421,super.endOfPeriod();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,422,synchronized (this) {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,423,periodEnds++;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,428,* Either returns the mock future or calls the super method.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,430,@Override
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,431,protected ScheduledFuture<?> startTimer() {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,432,return (schedFuture != null) ? schedFuture : super.startTimer();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,437,* A test thread class that will be used by tests for triggering the
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,438,* semaphore. The thread calls the semaphore a configurable number of times.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,439,"* When this is done, it can notify the main thread."
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,441,private static class SemaphoreThread extends Thread {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,442,/** The semaphore. */
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,443,private final TimedSemaphore semaphore;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,445,/** A latch for communication with the main thread. */
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,446,private final CountDownLatch latch;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,448,/** The number of acquire() calls. */
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,449,private final int count;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,451,/** The number of invocations of the latch. */
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,452,private final int latchCount;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,454,"public SemaphoreThread(TimedSemaphore b, CountDownLatch l, int c, int lc) {"
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,455,semaphore = b;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,456,latch = l;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,457,count = c;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,458,latchCount = lc;
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,462,* Calls acquire() on the semaphore for the specified number of times.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,463,* Optionally the latch will also be triggered to synchronize with the
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,464,* main test thread.
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,466,@Override
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,467,public void run() {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,468,try {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,469,for (int i = 0; i < count; i++) {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,470,semaphore.acquire();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,472,if (i < latchCount) {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,473,latch.countDown();
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,476,} catch (InterruptedException iex) {
True,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java,477,Thread.currentThread().interrupt();

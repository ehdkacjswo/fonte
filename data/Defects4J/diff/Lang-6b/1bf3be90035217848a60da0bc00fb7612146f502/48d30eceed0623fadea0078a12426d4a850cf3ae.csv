is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,19,import java.util.concurrent.ConcurrentMap;
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,210,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,211,* Puts a value in the specified {@code ConcurrentMap} if the key is not yet
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,212,* present. This method works similar to the {@code putIfAbsent()} method of
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,213,"* the {@code ConcurrentMap} interface, but the value returned is different."
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,214,"* Basically, this method is equivalent to the following code fragment:"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,216,* <pre>
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,217,* if (!map.containsKey(key)) {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,218,"*     map.put(key, value);"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,219,*     return value;
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,220,* } else {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,221,*     return map.get(key);
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,223,* </pre>
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,225,* except that the action is performed atomically. So this method always
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,226,* returns the value which is stored in the map.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,227,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,228,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,229,* This method is <b>null</b>-safe: It accepts a <b>null</b> map as input
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,230,* without throwing an exception. In this case the return value is
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,231,"* <b>null</b>, too."
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,232,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,234,* @param <K> the type of the keys of the map
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,235,* @param <V> the type of the values of the map
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,236,* @param map the map to be modified
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,237,* @param key the key of the value to be added
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,238,* @param value the value to be added
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,239,* @return the value stored in the map after this operation
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,241,"public static <K, V> V putIfAbsent(ConcurrentMap<K, V> map, K key, V value) {"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,242,if (map == null) {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,243,return null;
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,246,"V result = map.putIfAbsent(key, value);"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,247,return (result != null) ? result : value;
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,251,* Checks if a concurrent map contains a key and creates a corresponding
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,252,* value if not. This method first checks the presence of the key in the
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,253,"* given map. If it is already contained, its value is returned. Otherwise"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,254,* the {@code get()} method of the passed in {@link ConcurrentInitializer}
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,255,* is called. With the resulting object
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,256,"* {@link #putIfAbsent(ConcurrentMap, Object, Object)} is called. This"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,257,* handles the case that in the meantime another thread has added the key to
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,258,* the map. Both the map and the initializer can be <b>null</b>; in this
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,259,* case this method simply returns <b>null</b>.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,261,* @param <K> the type of the keys of the map
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,262,* @param <V> the type of the values of the map
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,263,* @param map the map to be modified
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,264,* @param key the key of the value to be added
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,265,* @param init the {@link ConcurrentInitializer} for creating the value
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,266,* @return the value stored in the map after this operation; this may or may
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,267,* not be the object created by the {@link ConcurrentInitializer}
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,268,* @throws ConcurrentException if the initializer throws an exception
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,270,"public static <K, V> V createIfAbsent(ConcurrentMap<K, V> map, K key,"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,271,ConcurrentInitializer<V> init) throws ConcurrentException {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,272,if (map == null || init == null) {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,273,return null;
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,276,V value = map.get(key);
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,277,if (value == null) {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,278,"return putIfAbsent(map, key, init.get());"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,280,return value;
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,284,* Checks if a concurrent map contains a key and creates a corresponding
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,285,"* value if not, suppressing checked exceptions. This method calls"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,286,"* {@code createIfAbsent()}. If a {@link ConcurrentException} is thrown, it"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,287,* is caught and re-thrown as a {@link ConcurrentRuntimeException}.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,289,* @param <K> the type of the keys of the map
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,290,* @param <V> the type of the values of the map
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,291,* @param map the map to be modified
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,292,* @param key the key of the value to be added
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,293,* @param init the {@link ConcurrentInitializer} for creating the value
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,294,* @return the value stored in the map after this operation; this may or may
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,295,* not be the object created by the {@link ConcurrentInitializer}
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,296,* @throws ConcurrentRuntimeException if the initializer throws an exception
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,298,"public static <K, V> V createIfAbsentUnchecked(ConcurrentMap<K, V> map,"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,299,"K key, ConcurrentInitializer<V> init) {"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,300,try {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,301,"return createIfAbsent(map, key, init);"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,302,} catch (ConcurrentException cex) {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,303,throw new ConcurrentRuntimeException(cex.getCause());
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,26,import java.util.concurrent.ConcurrentHashMap;
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,27,import java.util.concurrent.ConcurrentMap;
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,412,* Tests putIfAbsent() if the map contains the key in question.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,414,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,415,public void testPutIfAbsentKeyPresent() {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,416,"final String key = ""testKey"";"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,417,final Integer value = 42;
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,418,"ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>();"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,419,"map.put(key, value);"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,420,"assertEquals(""Wrong result"", value,"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,421,"ConcurrentUtils.putIfAbsent(map, key, 0));"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,422,"assertEquals(""Wrong value in map"", value, map.get(key));"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,426,* Tests putIfAbsent() if the map does not contain the key in question.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,428,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,429,public void testPutIfAbsentKeyNotPresent() {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,430,"final String key = ""testKey"";"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,431,final Integer value = 42;
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,432,"ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>();"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,433,"assertEquals(""Wrong result"", value,"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,434,"ConcurrentUtils.putIfAbsent(map, key, value));"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,435,"assertEquals(""Wrong value in map"", value, map.get(key));"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,439,* Tests putIfAbsent() if a null map is passed in.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,441,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,442,public void testPutIfAbsentNullMap() {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,443,"assertNull(""Wrong result"","
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,444,"ConcurrentUtils.putIfAbsent(null, ""test"", 100));"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,448,* Tests createIfAbsent() if the key is found in the map.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,450,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,451,public void testCreateIfAbsentKeyPresent() throws ConcurrentException {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,452,"@SuppressWarnings(""unchecked"")"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,453,ConcurrentInitializer<Integer> init = EasyMock
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,454,.createMock(ConcurrentInitializer.class);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,455,EasyMock.replay(init);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,456,"final String key = ""testKey"";"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,457,final Integer value = 42;
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,458,"ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>();"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,459,"map.put(key, value);"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,460,"assertEquals(""Wrong result"", value,"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,461,"ConcurrentUtils.createIfAbsent(map, key, init));"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,462,"assertEquals(""Wrong value in map"", value, map.get(key));"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,463,EasyMock.verify(init);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,467,* Tests createIfAbsent() if the map does not contain the key in question.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,469,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,470,public void testCreateIfAbsentKeyNotPresent() throws ConcurrentException {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,471,"@SuppressWarnings(""unchecked"")"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,472,ConcurrentInitializer<Integer> init = EasyMock
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,473,.createMock(ConcurrentInitializer.class);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,474,"final String key = ""testKey"";"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,475,final Integer value = 42;
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,476,EasyMock.expect(init.get()).andReturn(value);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,477,EasyMock.replay(init);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,478,"ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>();"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,479,"assertEquals(""Wrong result"", value,"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,480,"ConcurrentUtils.createIfAbsent(map, key, init));"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,481,"assertEquals(""Wrong value in map"", value, map.get(key));"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,482,EasyMock.verify(init);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,486,* Tests createIfAbsent() if a null map is passed in.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,488,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,489,public void testCreateIfAbsentNullMap() throws ConcurrentException {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,490,"@SuppressWarnings(""unchecked"")"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,491,ConcurrentInitializer<Integer> init = EasyMock
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,492,.createMock(ConcurrentInitializer.class);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,493,EasyMock.replay(init);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,494,"assertNull(""Wrong result"","
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,495,"ConcurrentUtils.createIfAbsent(null, ""test"", init));"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,496,EasyMock.verify(init);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,500,* Tests createIfAbsent() if a null initializer is passed in.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,502,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,503,public void testCreateIfAbsentNullInit() throws ConcurrentException {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,504,"ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>();"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,505,"final String key = ""testKey"";"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,506,final Integer value = 42;
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,507,"map.put(key, value);"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,508,"assertNull(""Wrong result"","
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,509,"ConcurrentUtils.createIfAbsent(map, key, null));"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,510,"assertEquals(""Map was changed"", value, map.get(key));"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,514,* Tests createIfAbsentUnchecked() if no exception is thrown.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,516,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,517,public void testCreateIfAbsentUncheckedSuccess() {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,518,"final String key = ""testKey"";"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,519,final Integer value = 42;
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,520,"ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>();"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,521,"assertEquals(""Wrong result"", value,"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,522,"ConcurrentUtils.createIfAbsentUnchecked(map, key,"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,523,new ConstantInitializer<Integer>(value)));
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,524,"assertEquals(""Wrong value in map"", value, map.get(key));"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,528,* Tests createIfAbsentUnchecked() if an exception is thrown.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,530,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,531,public void testCreateIfAbsentUncheckedException()
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,532,throws ConcurrentException {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,533,"@SuppressWarnings(""unchecked"")"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,534,ConcurrentInitializer<Integer> init = EasyMock
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,535,.createMock(ConcurrentInitializer.class);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,536,Exception ex = new Exception();
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,537,EasyMock.expect(init.get()).andThrow(new ConcurrentException(ex));
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,538,EasyMock.replay(init);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,539,try {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,540,ConcurrentUtils.createIfAbsentUnchecked(
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,541,"new ConcurrentHashMap<String, Integer>(), ""test"", init);"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,542,"fail(""Exception not thrown!"");"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,543,} catch (ConcurrentRuntimeException crex) {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,544,"assertEquals(""Wrong cause"", ex, crex.getCause());"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,546,EasyMock.verify(init);

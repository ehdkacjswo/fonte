is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,17,ackage org.apache.commons.lang;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,19,mport java.math.BigDecimal;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,20,mport java.math.BigInteger;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,23, <p>Provides extra functionality for Java Number classes.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,25," @author <a href=""mailto:rand_mcneely@yahoo.com"">Rand McNeely</a>"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,26, @author Stephen Colebourne
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,27," @author <a href=""mailto:steve.downey@netfolio.com"">Steve Downey</a>"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,28, @author Eric Pugh
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,29, @author Phil Steitz
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,30, @since 1.0
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,31, @version $Id$
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,33, @deprecated Moved to org.apache.commons.lang.math.
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,34,             Class will be removed in Commons Lang 3.0.
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,36,ublic final class NumberUtils {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,37,/ DEPRECATED CLASS !!!
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,40, <p><code>NumberUtils</code> instances should NOT be constructed in standard programming.
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,41," Instead, the class should be used as <code>NumberUtils.stringToInt(""6"");</code>.</p>"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,43, <p>This constructor is public to permit tools that require a JavaBean instance
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,44, to operate.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,46,ublic NumberUtils() {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,47,uper();
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,53," <p>Convert a <code>String</code> to an <code>int</code>, returning"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,54, <code>zero</code> if the conversion fails.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,56, @param str  the string to convert
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,57," @return the int represented by the string, or <code>zero</code> if"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,58,  conversion fails
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,60,ublic static int stringToInt(String str) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,61,"eturn stringToInt(str, 0);"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,65," <p>Convert a <code>String</code> to an <code>int</code>, returning a"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,66, default value if the conversion fails.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,68, @param str  the string to convert
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,69, @param defaultValue  the default value
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,70," @return the int represented by the string, or the default if conversion fails"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,72,"ublic static int stringToInt(String str, int defaultValue) {"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,73,ry {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,74,eturn Integer.parseInt(str);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,75, catch (NumberFormatException nfe) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,76,eturn defaultValue;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,82,"/ must handle Long, Float, Integer, Float, Short,"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,83,"/                  BigDecimal, BigInteger and Byte"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,84,/ useful methods:
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,85,/ Byte.decode(String)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,86,"/ Byte.valueOf(String,int radix)"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,87,/ Byte.valueOf(String)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,88,/ Double.valueOf(String)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,89,/ Float.valueOf(String)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,90,/ new Float(String)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,91,"/ Integer.valueOf(String,int radix)"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,92,/ Integer.valueOf(String)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,93,/ Integer.decode(String)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,94,/ Integer.getInteger(String)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,95,"/ Integer.getInteger(String,int val)"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,96,"/ Integer.getInteger(String,Integer val)"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,97,/ new Integer(String)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,98,/ new Double(String)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,99,/ new Byte(String)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,100,/ new Long(String)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,101,/ Long.getLong(String)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,102,"/ Long.getLong(String,int)"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,103,"/ Long.getLong(String,Integer)"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,104,"/ Long.valueOf(String,int)"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,105,/ Long.valueOf(String)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,106,/ new Short(String)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,107,/ Short.decode(String)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,108,"/ Short.valueOf(String,int)"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,109,/ Short.valueOf(String)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,110,/ new BigDecimal(String)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,111,/ new BigInteger(String)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,112,"/ new BigInteger(String,int radix)"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,113,/ Possible inputs:
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,114,/ 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,115,/ plus minus everything. Prolly more. A lot are not separable.
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,118, <p>Turns a string value into a java.lang.Number.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,120," <p>First, the value is examined for a type qualifier on the end"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,121," (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,122, trying to create successively larger types from the type specified
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,123, until one is found that can hold the value.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,125," <p>If a type specifier is not found, it will check for a decimal point"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,126, and then try successively larger types from <code>Integer</code> to
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,127, <code>BigInteger</code> and from <code>Float</code> to
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,128, <code>BigDecimal</code>.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,130," <p>If the string starts with <code>0x</code> or <code>-0x</code>, it"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,131, will be interpreted as a hexadecimal integer.  Values with leading
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,132, <code>0</code>'s will not be interpreted as octal.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,134, @param val String containing a number
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,135, @return Number created from the string
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,136, @throws NumberFormatException if the value cannot be converted
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,138,ublic static Number createNumber(String val) throws NumberFormatException {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,139,f (val == null) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,140,eturn null;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,142,f (val.length() == 0) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,143,"hrow new NumberFormatException(""\""\"" is not a valid number."");"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,145,f (val.length() == 1 && !Character.isDigit(val.charAt(0))) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,146,"hrow new NumberFormatException(val + "" is not a valid number."");"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,148,"f (val.startsWith(""--"")) {"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,149,/ this is protection for poorness in java.lang.BigDecimal.
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,150,"/ it accepts this as a legal value, but it does not appear"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,151,/ to be in specification of class. OS X Java parses it to
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,152,/ a wrong value.
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,153,eturn null;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,155,"f (val.startsWith(""0x"") || val.startsWith(""-0x"")) {"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,156,eturn createInteger(val);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,158,har lastChar = val.charAt(val.length() - 1);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,159,tring mant;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,160,tring dec;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,161,tring exp;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,162,nt decPos = val.indexOf('.');
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,163,nt expPos = val.indexOf('e') + val.indexOf('E') + 1;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,165,f (decPos > -1) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,167,f (expPos > -1) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,168,f (expPos < decPos) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,169,"hrow new NumberFormatException(val + "" is not a valid number."");"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,171,"ec = val.substring(decPos + 1, expPos);"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,172, else {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,173,ec = val.substring(decPos + 1);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,175,"ant = val.substring(0, decPos);"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,176, else {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,177,f (expPos > -1) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,178,"ant = val.substring(0, expPos);"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,179, else {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,180,ant = val;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,182,ec = null;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,184,f (!Character.isDigit(lastChar)) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,185,f (expPos > -1 && expPos < val.length() - 1) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,186,"xp = val.substring(expPos + 1, val.length() - 1);"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,187, else {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,188,xp = null;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,190,/Requesting a specific type..
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,191,"tring numeric = val.substring(0, val.length() - 1);"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,192,oolean allZeros = isAllZeros(mant) && isAllZeros(exp);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,193,witch (lastChar) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,194,ase 'l' :
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,195,ase 'L' :
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,196,f (dec == null
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,197,& exp == null
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,198,& (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,199,ry {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,200,eturn createLong(numeric);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,201, catch (NumberFormatException nfe) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,202,/Too big for a long
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,204,eturn createBigInteger(numeric);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,207,"hrow new NumberFormatException(val + "" is not a valid number."");"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,208,ase 'f' :
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,209,ase 'F' :
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,210,ry {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,211,loat f = NumberUtils.createFloat(numeric);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,212,f (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,213,/If it's too big for a float or the float value = 0 and the string
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,214,"/has non-zeros in it, then float does not have the precision we want"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,215,eturn f;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,218, catch (NumberFormatException e) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,219,/ ignore the bad number
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,221,/Fall through
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,222,ase 'd' :
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,223,ase 'D' :
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,224,ry {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,225,ouble d = NumberUtils.createDouble(numeric);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,226,f (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,227,eturn d;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,229, catch (NumberFormatException nfe) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,230,/ empty catch
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,232,ry {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,233,eturn createBigDecimal(numeric);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,234, catch (NumberFormatException e) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,235,/ empty catch
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,237,/Fall through
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,238,efault :
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,239,"hrow new NumberFormatException(val + "" is not a valid number."");"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,242, else {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,243,"/User doesn't have a preference on the return type, so let's start"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,244,/small and go from there...
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,245,f (expPos > -1 && expPos < val.length() - 1) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,246,"xp = val.substring(expPos + 1, val.length());"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,247, else {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,248,xp = null;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,250,f (dec == null && exp == null) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,251,"/Must be an int,long,bigint"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,252,ry {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,253,eturn createInteger(val);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,254, catch (NumberFormatException nfe) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,255,/ empty catch
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,257,ry {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,258,eturn createLong(val);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,259, catch (NumberFormatException nfe) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,260,/ empty catch
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,262,eturn createBigInteger(val);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,264, else {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,265,"/Must be a float,double,BigDec"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,266,oolean allZeros = isAllZeros(mant) && isAllZeros(exp);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,267,ry {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,268,loat f = createFloat(val);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,269,f (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,270,eturn f;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,272, catch (NumberFormatException nfe) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,273,/ empty catch
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,275,ry {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,276,ouble d = createDouble(val);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,277,f (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,278,eturn d;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,280, catch (NumberFormatException nfe) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,281,/ empty catch
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,284,eturn createBigDecimal(val);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,292, <p>Utility method for {@link #createNumber(java.lang.String)}.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,294, <p>Returns <code>true</code> if s is <code>null</code>.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,296, @param s the String to check
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,297, @return if it is all zeros or <code>null</code>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,299,rivate static boolean isAllZeros(String s) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,300,f (s == null) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,301,eturn true;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,303,or (int i = s.length() - 1; i >= 0; i--) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,304,f (s.charAt(i) != '0') {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,305,eturn false;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,308,eturn s.length() > 0;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,314, <p>Convert a <code>String</code> to a <code>Float</code>.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,316, @param val  a <code>String</code> to convert
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,317, @return converted <code>Float</code>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,318, @throws NumberFormatException if the value cannot be converted
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,320,ublic static Float createFloat(String val) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,321,eturn Float.valueOf(val);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,325, <p>Convert a <code>String</code> to a <code>Double</code>.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,327, @param val  a <code>String</code> to convert
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,328, @return converted <code>Double</code>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,329, @throws NumberFormatException if the value cannot be converted
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,331,ublic static Double createDouble(String val) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,332,eturn Double.valueOf(val);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,336," <p>Convert a <code>String</code> to a <code>Integer</code>, handling"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,337, hex and octal notations.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,339, @param val  a <code>String</code> to convert
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,340, @return converted <code>Integer</code>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,341, @throws NumberFormatException if the value cannot be converted
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,343,ublic static Integer createInteger(String val) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,344,/ decode() handles 0xAABD and 0777 (hex and octal) as well.
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,345,eturn Integer.decode(val);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,349, <p>Convert a <code>String</code> to a <code>Long</code>.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,351, @param val  a <code>String</code> to convert
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,352, @return converted <code>Long</code>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,353, @throws NumberFormatException if the value cannot be converted
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,355,ublic static Long createLong(String val) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,356,eturn Long.valueOf(val);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,360, <p>Convert a <code>String</code> to a <code>BigInteger</code>.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,362, @param val  a <code>String</code> to convert
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,363, @return converted <code>BigInteger</code>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,364, @throws NumberFormatException if the value cannot be converted
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,366,ublic static BigInteger createBigInteger(String val) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,367,igInteger bi = new BigInteger(val);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,368,eturn bi;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,372, <p>Convert a <code>String</code> to a <code>BigDecimal</code>.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,374, @param val  a <code>String</code> to convert
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,375, @return converted <code>BigDecimal</code>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,376, @throws NumberFormatException if the value cannot be converted
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,378,ublic static BigDecimal createBigDecimal(String val) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,379,igDecimal bd = new BigDecimal(val);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,380,eturn bd;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,386, <p>Gets the minimum of three <code>long</code> values.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,388, @param a  value 1
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,389, @param b  value 2
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,390, @param c  value 3
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,391, @return  the smallest of the values
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,393,"ublic static long minimum(long a, long b, long c) {"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,394,f (b < a) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,395, = b;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,397,f (c < a) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,398, = c;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,400,eturn a;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,404, <p>Gets the minimum of three <code>int</code> values.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,406, @param a  value 1
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,407, @param b  value 2
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,408, @param c  value 3
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,409, @return  the smallest of the values
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,411,"ublic static int minimum(int a, int b, int c) {"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,412,f (b < a) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,413, = b;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,415,f (c < a) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,416, = c;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,418,eturn a;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,422, <p>Gets the maximum of three <code>long</code> values.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,424, @param a  value 1
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,425, @param b  value 2
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,426, @param c  value 3
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,427, @return  the largest of the values
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,429,"ublic static long maximum(long a, long b, long c) {"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,430,f (b > a) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,431, = b;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,433,f (c > a) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,434, = c;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,436,eturn a;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,440, <p>Gets the maximum of three <code>int</code> values.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,442, @param a  value 1
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,443, @param b  value 2
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,444, @param c  value 3
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,445, @return  the largest of the values
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,447,"ublic static int maximum(int a, int b, int c) {"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,448,f (b > a) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,449, = b;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,451,f (c > a) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,452, = c;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,454,eturn a;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,460, <p>Compares two <code>doubles</code> for order.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,462, <p>This method is more comprehensive than the standard Java greater
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,463," than, less than and equals operators.</p>"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,464, <ul>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,465,  <li>It returns <code>-1</code> if the first value is less than the second.
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,466,  <li>It returns <code>+1</code> if the first value is greater than the second.
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,467,  <li>It returns <code>0</code> if the values are equal.
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,468, </ul>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,470, <p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,471," The ordering is as follows, largest to smallest:"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,472, <ul>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,473,  <li>NaN
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,474,  <li>Positive infinity
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,475,  <li>Maximum double
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,476,  <li>Normal positive numbers
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,477,  <li>+0.0
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,478,  <li>-0.0
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,479,  <li>Normal negative numbers
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,480,  <li>Minimum double (-Double.MAX_VALUE)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,481,  <li>Negative infinity
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,482, </ul>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,483, </p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,485, <p>Comparing <code>NaN</code> with <code>NaN</code> will
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,486, return <code>0</code>.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,488, @param lhs  the first <code>double</code>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,489, @param rhs  the second <code>double</code>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,490," @return <code>-1</code> if lhs is less, <code>+1</code> if greater,"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,491,  <code>0</code> if equal to rhs
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,493,"ublic static int compare(double lhs, double rhs) {"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,494,f (lhs < rhs) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,495,eturn -1;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,497,f (lhs > rhs) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,498,eturn +1;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,500,/ Need to compare bits to handle 0.0 == -0.0 being true
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,501,/ compare should put -0.0 < +0.0
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,502,/ Two NaNs are also == for compare purposes
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,503,/ where NaN == NaN is false
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,504,ong lhsBits = Double.doubleToLongBits(lhs);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,505,ong rhsBits = Double.doubleToLongBits(rhs);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,506,f (lhsBits == rhsBits) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,507,eturn 0;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,509,/ Something exotic! A comparison to NaN or 0.0 vs -0.0
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,510,/ Fortunately NaN's long is > than everything else
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,511,/ Also negzeros bits < poszero
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,512,/ NAN: 9221120237041090560
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,513,/ MAX: 9218868437227405311
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,514,/ NEGZERO: -9223372036854775808
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,515,f (lhsBits < rhsBits) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,516,eturn -1;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,517, else {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,518,eturn +1;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,523, <p>Compares two floats for order.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,525," <p>This method is more comprehensive than the standard Java greater than,"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,526, less than and equals operators.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,527, <ul>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,528,  <li>It returns <code>-1</code> if the first value is less than the second.
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,529,  <li>It returns <code>+1</code> if the first value is greater than the second.
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,530,  <li>It returns <code>0</code> if the values are equal.
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,531, </ul>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,533," <p> The ordering is as follows, largest to smallest:"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,534, <ul>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,535, <li>NaN
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,536, <li>Positive infinity
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,537, <li>Maximum float
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,538, <li>Normal positive numbers
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,539, <li>+0.0
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,540, <li>-0.0
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,541, <li>Normal negative numbers
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,542, <li>Minimum float (-Float.MAX_VALUE)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,543, <li>Negative infinity
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,544, </ul>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,546, <p>Comparing <code>NaN</code> with <code>NaN</code> will return
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,547, <code>0</code>.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,549, @param lhs  the first <code>float</code>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,550, @param rhs  the second <code>float</code>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,551," @return <code>-1</code> if lhs is less, <code>+1</code> if greater,"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,552,  <code>0</code> if equal to rhs
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,554,"ublic static int compare(float lhs, float rhs) {"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,555,f (lhs < rhs) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,556,eturn -1;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,558,f (lhs > rhs) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,559,eturn +1;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,561,/Need to compare bits to handle 0.0 == -0.0 being true
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,562,/ compare should put -0.0 < +0.0
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,563,/ Two NaNs are also == for compare purposes
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,564,/ where NaN == NaN is false
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,565,nt lhsBits = Float.floatToIntBits(lhs);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,566,nt rhsBits = Float.floatToIntBits(rhs);
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,567,f (lhsBits == rhsBits) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,568,eturn 0;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,570,/Something exotic! A comparison to NaN or 0.0 vs -0.0
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,571,/Fortunately NaN's int is > than everything else
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,572,/Also negzeros bits < poszero
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,573,/NAN: 2143289344
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,574,/MAX: 2139095039
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,575,/NEGZERO: -2147483648
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,576,f (lhsBits < rhsBits) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,577,eturn -1;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,578, else {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,579,eturn +1;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,586, <p>Checks whether the <code>String</code> contains only
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,587, digit characters.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,589, <p><code>Null</code> and empty String will return
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,590, <code>false</code>.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,592, @param str  the <code>String</code> to check
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,593, @return <code>true</code> if str contains only unicode numeric
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,595,ublic static boolean isDigits(String str) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,596,f ((str == null) || (str.length() == 0)) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,597,eturn false;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,599,or (int i = 0; i < str.length(); i++) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,600,f (!Character.isDigit(str.charAt(i))) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,601,eturn false;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,604,eturn true;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,608, <p>Checks whether the String a valid Java number.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,610, <p>Valid numbers include hexadecimal marked with the <code>0x</code>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,611," qualifier, scientific notation and numbers marked with a type"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,612, qualifier (e.g. 123L).</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,614, <p><code>Null</code> and empty String will return
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,615, <code>false</code>.</p>
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,617, @param str  the <code>String</code> to check
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,618, @return <code>true</code> if the string is a correctly formatted number
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,620,ublic static boolean isNumber(String str) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,621,f (StringUtils.isEmpty(str)) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,622,eturn false;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,624,har[] chars = str.toCharArray();
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,625,nt sz = chars.length;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,626,oolean hasExp = false;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,627,oolean hasDecPoint = false;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,628,oolean allowSigns = false;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,629,oolean foundDigit = false;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,630,/ deal with any possible sign up front
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,631,nt start = (chars[0] == '-') ? 1 : 0;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,632,f (sz > start + 1) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,633,f (chars[start] == '0' && chars[start + 1] == 'x') {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,634,nt i = start + 2;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,635,f (i == sz) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,636,"eturn false; // str == ""0x"""
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,638,/ checking hex (it can't be anything else)
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,639,or (; i < chars.length; i++) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,640,f ((chars[i] < '0' || chars[i] > '9')
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,641,& (chars[i] < 'a' || chars[i] > 'f')
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,642,& (chars[i] < 'A' || chars[i] > 'F')) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,643,eturn false;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,646,eturn true;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,649,"z--; // don't want to loop to the last char, check it afterwords"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,650,/ for type qualifiers
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,651,nt i = start;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,652,/ loop to the next to last char or to the last char if we need another digit to
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,653,"/ make a valid number (e.g. chars[0..5] = ""1234E"")"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,654,hile (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,655,f (chars[i] >= '0' && chars[i] <= '9') {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,656,oundDigit = true;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,657,llowSigns = false;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,659, else if (chars[i] == '.') {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,660,f (hasDecPoint || hasExp) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,661,/ two decimal points or dec in exponent
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,662,eturn false;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,664,asDecPoint = true;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,665, else if (chars[i] == 'e' || chars[i] == 'E') {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,666,/ we've already taken care of hex.
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,667,f (hasExp) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,668,/ two E's
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,669,eturn false;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,671,f (!foundDigit) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,672,eturn false;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,674,asExp = true;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,675,llowSigns = true;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,676, else if (chars[i] == '+' || chars[i] == '-') {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,677,f (!allowSigns) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,678,eturn false;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,680,llowSigns = false;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,681,oundDigit = false; // we need a digit after the E
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,682, else {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,683,eturn false;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,685,++;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,687,f (i < chars.length) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,688,f (chars[i] >= '0' && chars[i] <= '9') {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,689,"/ no type qualifier, OK"
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,690,eturn true;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,692,f (chars[i] == 'e' || chars[i] == 'E') {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,693,/ can't have an E at the last byte
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,694,eturn false;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,696,f (!allowSigns
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,697,& (chars[i] == 'd'
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,698,| chars[i] == 'D'
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,699,| chars[i] == 'f'
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,700,| chars[i] == 'F')) {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,701,eturn foundDigit;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,703,f (chars[i] == 'l'
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,704,| chars[i] == 'L') {
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,705,/ not allowing L with an exponent
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,706,eturn foundDigit && !hasExp;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,708,/ last character is illegal
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,709,eturn false;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,711,/ allowSigns is true iff the val ends in 'E'
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,712,/ found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,713,eturn !allowSigns && foundDigit;
False,src/test/org/apache/commons/lang/LangTestSuite.java,src/test/org/apache/commons/lang/LangTestSuite.java,74,uite.addTest(NumberUtilsTest.suite());
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,15, limitations under the License.
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,17,ackage org.apache.commons.lang;
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,19,mport java.math.BigDecimal;
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,20,mport java.math.BigInteger;
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,22,mport junit.framework.Test;
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,23,mport junit.framework.TestCase;
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,24,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,27, Unit tests {@link org.apache.commons.lang.NumberUtils}.
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,29," @author <a href=""mailto:rand_mcneely@yahoo.com"">Rand McNeely</a>"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,30," @author <a href=""mailto:ridesmet@users.sourceforge.net"">Ringo De Smet</a>"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,31, @author Eric Pugh
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,32, @author Phil Steitz
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,33, @author Stephen Colebourne
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,34, @version $Id$
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,36,ublic class NumberUtilsTest extends TestCase {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,38,ublic NumberUtilsTest(String name) {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,39,uper(name);
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,42,ublic static Test suite() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,43,estSuite suite = new TestSuite(NumberUtilsTest.class);
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,44,"uite.setName(""NumberUtils Tests"");"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,45,eturn suite;
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,51, Test for int stringToInt(String)
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,53,ublic void testStringToIntString() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,54,"ssertTrue(""stringToInt(String) 1 failed"", NumberUtils.stringToInt(""12345"") == 12345);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,55,"ssertTrue(""stringToInt(String) 2 failed"", NumberUtils.stringToInt(""abc"") == 0);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,59," Test for int stringToInt(String, int)"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,61,ublic void testStringToIntStringI() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,62,"ssertTrue(""stringToInt(String,int) 1 failed"", NumberUtils.stringToInt(""12345"", 5) == 12345);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,63,"ssertTrue(""stringToInt(String,int) 2 failed"", NumberUtils.stringToInt(""1234.5"", 5) == 5);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,66,ublic void testCreateNumber() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,67,/a lot of things can go wrong
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,68,"ssertEquals(""createNumber(String) 1 failed"", new Float(""1234.5""), NumberUtils.createNumber(""1234.5""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,69,"ssertEquals(""createNumber(String) 2 failed"", new Integer(""12345""), NumberUtils.createNumber(""12345""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,70,"ssertEquals(""createNumber(String) 3 failed"", new Double(""1234.5""), NumberUtils.createNumber(""1234.5D""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,71,"ssertEquals(""createNumber(String) 4 failed"", new Float(""1234.5""), NumberUtils.createNumber(""1234.5F""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,72,"ssertEquals(""createNumber(String) 5 failed"", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber("""" + (Integer.MAX_VALUE + 1L)));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,73,"ssertEquals(""createNumber(String) 6 failed"", new BigInteger(Long.MAX_VALUE + ""0""), NumberUtils.createNumber(Long.MAX_VALUE + ""0L""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,74,"ssertEquals(""createNumber(String) 7 failed"", new Long(12345), NumberUtils.createNumber(""12345L""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,75,"ssertEquals(""createNumber(String) 8 failed"", new Float(""-1234.5""), NumberUtils.createNumber(""-1234.5""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,76,"ssertEquals(""createNumber(String) 9 failed"", new Integer(""-12345""), NumberUtils.createNumber(""-12345""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,77,"ssertTrue(""createNumber(String) 10 failed"", 0xFADE == NumberUtils.createNumber(""0xFADE"").intValue());"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,78,"ssertTrue(""createNumber(String) 11 failed"", -0xFADE == NumberUtils.createNumber(""-0xFADE"").intValue());"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,79,"ssertEquals(""createNumber(String) 12 failed"", new Double(""1.1E200""), NumberUtils.createNumber(""1.1E200""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,80,"ssertEquals(""createNumber(String) 13 failed"", new Float(""1.1E20""), NumberUtils.createNumber(""1.1E20""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,81,"ssertEquals(""createNumber(String) 14 failed"", new Double(""-1.1E200""), NumberUtils.createNumber(""-1.1E200""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,82,"ssertEquals(""createNumber(String) 15 failed"", new Double(""1.1E-200""), NumberUtils.createNumber(""1.1E-200""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,83,"ssertEquals(""createNumber(String) 16 failed"", new Double(""1.1E-200""), NumberUtils.createNumber(""1.1E-200""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,85,/ jdk 1.2 doesn't support this. unsure about jdk 1.2.2
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,86,f(SystemUtils.isJavaVersionAtLeast(1.3f)) {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,87,"ssertEquals(""createNumber(String) 15 failed"", new BigDecimal(""1.1E-700""), NumberUtils.createNumber(""1.1E-700F""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,89,ssertEquals(
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,90,"createNumber(String) 16 failed"","
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,91,"ew Long(""10"" + Integer.MAX_VALUE),"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,92,"umberUtils.createNumber(""10"" + Integer.MAX_VALUE + ""L""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,93,ssertEquals(
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,94,"createNumber(String) 17 failed"","
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,95,"ew Long(""10"" + Integer.MAX_VALUE),"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,96,"umberUtils.createNumber(""10"" + Integer.MAX_VALUE));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,97,ssertEquals(
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,98,"createNumber(String) 18 failed"","
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,99,"ew BigInteger(""10"" + Long.MAX_VALUE),"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,100,"umberUtils.createNumber(""10"" + Long.MAX_VALUE));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,104,ublic void testCreateFloat() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,105,"ssertEquals(""createFloat(String) failed"", new Float(""1234.5""), NumberUtils.createFloat(""1234.5""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,108,ublic void testCreateDouble() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,109,"ssertEquals(""createDouble(String) failed"", new Double(""1234.5""), NumberUtils.createDouble(""1234.5""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,112,ublic void testCreateInteger() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,113,"ssertEquals(""createInteger(String) failed"", new Integer(""12345""), NumberUtils.createInteger(""12345""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,116,ublic void testCreateLong() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,117,"ssertEquals(""createInteger(String) failed"", new Long(""12345""), NumberUtils.createLong(""12345""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,120,ublic void testCreateBigInteger() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,121,"ssertEquals(""createBigInteger(String) failed"", new BigInteger(""12345""), NumberUtils.createBigInteger(""12345""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,124,ublic void testCreateBigDecimal() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,125,"ssertEquals(""createBigDecimal(String) failed"", new BigDecimal(""1234.5""), NumberUtils.createBigDecimal(""1234.5""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,128,ublic void testMinimumLong() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,129,"ssertEquals(""minimum(long,long,long) 1 failed"", 12345L, NumberUtils.minimum(12345L, 12345L + 1L, 12345L + 2L));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,130,"ssertEquals(""minimum(long,long,long) 2 failed"", 12345L, NumberUtils.minimum(12345L + 1L, 12345L, 12345 + 2L));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,131,"ssertEquals(""minimum(long,long,long) 3 failed"", 12345L, NumberUtils.minimum(12345L + 1L, 12345L + 2L, 12345L));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,132,"ssertEquals(""minimum(long,long,long) 4 failed"", 12345L, NumberUtils.minimum(12345L + 1L, 12345L, 12345L));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,133,"ssertEquals(""minimum(long,long,long) 5 failed"", 12345L, NumberUtils.minimum(12345L, 12345L, 12345L));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,137,ublic void testMinimumInt() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,138,"ssertEquals(""minimum(int,int,int) 1 failed"", 12345, NumberUtils.minimum(12345, 12345 + 1, 12345 + 2));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,139,"ssertEquals(""minimum(int,int,int) 2 failed"", 12345, NumberUtils.minimum(12345 + 1, 12345, 12345 + 2));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,140,"ssertEquals(""minimum(int,int,int) 3 failed"", 12345, NumberUtils.minimum(12345 + 1, 12345 + 2, 12345));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,141,"ssertEquals(""minimum(int,int,int) 4 failed"", 12345, NumberUtils.minimum(12345 + 1, 12345, 12345));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,142,"ssertEquals(""minimum(int,int,int) 5 failed"", 12345, NumberUtils.minimum(12345, 12345, 12345));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,146,ublic void testMaximumLong() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,147,"ssertEquals(""maximum(long,long,long) 1 failed"", 12345L, NumberUtils.maximum(12345L, 12345L - 1L, 12345L - 2L));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,148,"ssertEquals(""maximum(long,long,long) 2 failed"", 12345L, NumberUtils.maximum(12345L - 1L, 12345L, 12345L - 2L));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,149,"ssertEquals(""maximum(long,long,long) 3 failed"", 12345L, NumberUtils.maximum(12345L - 1L, 12345L - 2L, 12345L));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,150,"ssertEquals(""maximum(long,long,long) 4 failed"", 12345L, NumberUtils.maximum(12345L - 1L, 12345L, 12345L));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,151,"ssertEquals(""maximum(long,long,long) 5 failed"", 12345L, NumberUtils.maximum(12345L, 12345L, 12345L));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,155,ublic void testMaximumInt() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,156,"ssertEquals(""maximum(int,int,int) 1 failed"", 12345, NumberUtils.maximum(12345, 12345 - 1, 12345 - 2));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,157,"ssertEquals(""maximum(int,int,int) 2 failed"", 12345, NumberUtils.maximum(12345 - 1, 12345, 12345 - 2));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,158,"ssertEquals(""maximum(int,int,int) 3 failed"", 12345, NumberUtils.maximum(12345 - 1, 12345 - 2, 12345));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,159,"ssertEquals(""maximum(int,int,int) 4 failed"", 12345, NumberUtils.maximum(12345 - 1, 12345, 12345));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,160,"ssertEquals(""maximum(int,int,int) 5 failed"", 12345, NumberUtils.maximum(12345, 12345, 12345));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,164,ublic void testCompareDouble() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,165,"ssertTrue(NumberUtils.compare(Double.NaN, Double.NaN) == 0);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,166,"ssertTrue(NumberUtils.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,167,"ssertTrue(NumberUtils.compare(Double.NaN, Double.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,168,"ssertTrue(NumberUtils.compare(Double.NaN, 1.2d) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,169,"ssertTrue(NumberUtils.compare(Double.NaN, 0.0d) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,170,"ssertTrue(NumberUtils.compare(Double.NaN, -0.0d) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,171,"ssertTrue(NumberUtils.compare(Double.NaN, -1.2d) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,172,"ssertTrue(NumberUtils.compare(Double.NaN, -Double.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,173,"ssertTrue(NumberUtils.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,175,"ssertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,176,"ssertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,177,"ssertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,178,"ssertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,179,"ssertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,180,"ssertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,181,"ssertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,182,"ssertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,183,"ssertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,185,"ssertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NaN) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,186,"ssertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,187,"ssertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,188,"ssertTrue(NumberUtils.compare(Double.MAX_VALUE, 1.2d) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,189,"ssertTrue(NumberUtils.compare(Double.MAX_VALUE, 0.0d) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,190,"ssertTrue(NumberUtils.compare(Double.MAX_VALUE, -0.0d) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,191,"ssertTrue(NumberUtils.compare(Double.MAX_VALUE, -1.2d) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,192,"ssertTrue(NumberUtils.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,193,"ssertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,195,"ssertTrue(NumberUtils.compare(1.2d, Double.NaN) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,196,"ssertTrue(NumberUtils.compare(1.2d, Double.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,197,"ssertTrue(NumberUtils.compare(1.2d, Double.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,198,"ssertTrue(NumberUtils.compare(1.2d, 1.2d) == 0);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,199,"ssertTrue(NumberUtils.compare(1.2d, 0.0d) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,200,"ssertTrue(NumberUtils.compare(1.2d, -0.0d) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,201,"ssertTrue(NumberUtils.compare(1.2d, -1.2d) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,202,"ssertTrue(NumberUtils.compare(1.2d, -Double.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,203,"ssertTrue(NumberUtils.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,205,"ssertTrue(NumberUtils.compare(0.0d, Double.NaN) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,206,"ssertTrue(NumberUtils.compare(0.0d, Double.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,207,"ssertTrue(NumberUtils.compare(0.0d, Double.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,208,"ssertTrue(NumberUtils.compare(0.0d, 1.2d) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,209,"ssertTrue(NumberUtils.compare(0.0d, 0.0d) == 0);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,210,"ssertTrue(NumberUtils.compare(0.0d, -0.0d) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,211,"ssertTrue(NumberUtils.compare(0.0d, -1.2d) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,212,"ssertTrue(NumberUtils.compare(0.0d, -Double.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,213,"ssertTrue(NumberUtils.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,215,"ssertTrue(NumberUtils.compare(-0.0d, Double.NaN) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,216,"ssertTrue(NumberUtils.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,217,"ssertTrue(NumberUtils.compare(-0.0d, Double.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,218,"ssertTrue(NumberUtils.compare(-0.0d, 1.2d) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,219,"ssertTrue(NumberUtils.compare(-0.0d, 0.0d) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,220,"ssertTrue(NumberUtils.compare(-0.0d, -0.0d) == 0);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,221,"ssertTrue(NumberUtils.compare(-0.0d, -1.2d) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,222,"ssertTrue(NumberUtils.compare(-0.0d, -Double.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,223,"ssertTrue(NumberUtils.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,225,"ssertTrue(NumberUtils.compare(-1.2d, Double.NaN) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,226,"ssertTrue(NumberUtils.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,227,"ssertTrue(NumberUtils.compare(-1.2d, Double.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,228,"ssertTrue(NumberUtils.compare(-1.2d, 1.2d) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,229,"ssertTrue(NumberUtils.compare(-1.2d, 0.0d) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,230,"ssertTrue(NumberUtils.compare(-1.2d, -0.0d) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,231,"ssertTrue(NumberUtils.compare(-1.2d, -1.2d) == 0);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,232,"ssertTrue(NumberUtils.compare(-1.2d, -Double.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,233,"ssertTrue(NumberUtils.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,235,"ssertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NaN) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,236,"ssertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,237,"ssertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,238,"ssertTrue(NumberUtils.compare(-Double.MAX_VALUE, 1.2d) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,239,"ssertTrue(NumberUtils.compare(-Double.MAX_VALUE, 0.0d) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,240,"ssertTrue(NumberUtils.compare(-Double.MAX_VALUE, -0.0d) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,241,"ssertTrue(NumberUtils.compare(-Double.MAX_VALUE, -1.2d) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,242,"ssertTrue(NumberUtils.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,243,"ssertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,245,"ssertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,246,"ssertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,247,"ssertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,248,"ssertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,249,"ssertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,250,"ssertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,251,"ssertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,252,"ssertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,253,"ssertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,256,ublic void testCompareFloat() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,257,"ssertTrue(NumberUtils.compare(Float.NaN, Float.NaN) == 0);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,258,"ssertTrue(NumberUtils.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,259,"ssertTrue(NumberUtils.compare(Float.NaN, Float.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,260,"ssertTrue(NumberUtils.compare(Float.NaN, 1.2f) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,261,"ssertTrue(NumberUtils.compare(Float.NaN, 0.0f) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,262,"ssertTrue(NumberUtils.compare(Float.NaN, -0.0f) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,263,"ssertTrue(NumberUtils.compare(Float.NaN, -1.2f) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,264,"ssertTrue(NumberUtils.compare(Float.NaN, -Float.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,265,"ssertTrue(NumberUtils.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,267,"ssertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,268,"ssertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,269,"ssertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,270,"ssertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 1.2f) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,271,"ssertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 0.0f) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,272,"ssertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -0.0f) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,273,"ssertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,274,"ssertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,275,"ssertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,277,"ssertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NaN) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,278,"ssertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,279,"ssertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,280,"ssertTrue(NumberUtils.compare(Float.MAX_VALUE, 1.2f) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,281,"ssertTrue(NumberUtils.compare(Float.MAX_VALUE, 0.0f) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,282,"ssertTrue(NumberUtils.compare(Float.MAX_VALUE, -0.0f) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,283,"ssertTrue(NumberUtils.compare(Float.MAX_VALUE, -1.2f) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,284,"ssertTrue(NumberUtils.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,285,"ssertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,287,"ssertTrue(NumberUtils.compare(1.2f, Float.NaN) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,288,"ssertTrue(NumberUtils.compare(1.2f, Float.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,289,"ssertTrue(NumberUtils.compare(1.2f, Float.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,290,"ssertTrue(NumberUtils.compare(1.2f, 1.2f) == 0);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,291,"ssertTrue(NumberUtils.compare(1.2f, 0.0f) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,292,"ssertTrue(NumberUtils.compare(1.2f, -0.0f) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,293,"ssertTrue(NumberUtils.compare(1.2f, -1.2f) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,294,"ssertTrue(NumberUtils.compare(1.2f, -Float.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,295,"ssertTrue(NumberUtils.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,297,"ssertTrue(NumberUtils.compare(0.0f, Float.NaN) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,298,"ssertTrue(NumberUtils.compare(0.0f, Float.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,299,"ssertTrue(NumberUtils.compare(0.0f, Float.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,300,"ssertTrue(NumberUtils.compare(0.0f, 1.2f) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,301,"ssertTrue(NumberUtils.compare(0.0f, 0.0f) == 0);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,302,"ssertTrue(NumberUtils.compare(0.0f, -0.0f) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,303,"ssertTrue(NumberUtils.compare(0.0f, -1.2f) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,304,"ssertTrue(NumberUtils.compare(0.0f, -Float.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,305,"ssertTrue(NumberUtils.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,307,"ssertTrue(NumberUtils.compare(-0.0f, Float.NaN) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,308,"ssertTrue(NumberUtils.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,309,"ssertTrue(NumberUtils.compare(-0.0f, Float.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,310,"ssertTrue(NumberUtils.compare(-0.0f, 1.2f) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,311,"ssertTrue(NumberUtils.compare(-0.0f, 0.0f) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,312,"ssertTrue(NumberUtils.compare(-0.0f, -0.0f) == 0);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,313,"ssertTrue(NumberUtils.compare(-0.0f, -1.2f) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,314,"ssertTrue(NumberUtils.compare(-0.0f, -Float.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,315,"ssertTrue(NumberUtils.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,317,"ssertTrue(NumberUtils.compare(-1.2f, Float.NaN) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,318,"ssertTrue(NumberUtils.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,319,"ssertTrue(NumberUtils.compare(-1.2f, Float.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,320,"ssertTrue(NumberUtils.compare(-1.2f, 1.2f) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,321,"ssertTrue(NumberUtils.compare(-1.2f, 0.0f) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,322,"ssertTrue(NumberUtils.compare(-1.2f, -0.0f) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,323,"ssertTrue(NumberUtils.compare(-1.2f, -1.2f) == 0);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,324,"ssertTrue(NumberUtils.compare(-1.2f, -Float.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,325,"ssertTrue(NumberUtils.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,327,"ssertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NaN) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,328,"ssertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,329,"ssertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,330,"ssertTrue(NumberUtils.compare(-Float.MAX_VALUE, 1.2f) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,331,"ssertTrue(NumberUtils.compare(-Float.MAX_VALUE, 0.0f) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,332,"ssertTrue(NumberUtils.compare(-Float.MAX_VALUE, -0.0f) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,333,"ssertTrue(NumberUtils.compare(-Float.MAX_VALUE, -1.2f) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,334,"ssertTrue(NumberUtils.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,335,"ssertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,337,"ssertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,338,"ssertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,339,"ssertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,340,"ssertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,341,"ssertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,342,"ssertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,343,"ssertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,344,"ssertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,345,"ssertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,348,ublic void testIsDigits() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,349,"ssertEquals(""isDigits(null) failed"", false, NumberUtils.isDigits(null));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,350,"ssertEquals(""isDigits('') failed"", false, NumberUtils.isDigits(""""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,351,"ssertEquals(""isDigits(String) failed"", true, NumberUtils.isDigits(""12345""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,352,"ssertEquals(""isDigits(String) neg 1 failed"", false, NumberUtils.isDigits(""1234.5""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,353,"ssertEquals(""isDigits(String) neg 3 failed"", false, NumberUtils.isDigits(""1ab""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,354,"ssertEquals(""isDigits(String) neg 4 failed"", false, NumberUtils.isDigits(""abc""));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,358, Tests isNumber(String) and tests that createNumber(String) returns
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,359, a valid number iff isNumber(String) returns false.
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,361,ublic void testIsNumber() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,362,"tring val = ""12345"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,363,"ssertTrue(""isNumber(String) 1 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,364,"ssertTrue(""isNumber(String)/createNumber(String) 1 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,365,"al = ""1234.5"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,366,"ssertTrue(""isNumber(String) 2 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,367,"ssertTrue(""isNumber(String)/createNumber(String) 2 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,368,"al = "".12345"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,369,"ssertTrue(""isNumber(String) 3 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,370,"ssertTrue(""isNumber(String)/createNumber(String) 3 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,371,"al = ""1234E5"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,372,"ssertTrue(""isNumber(String) 4 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,373,"ssertTrue(""isNumber(String)/createNumber(String) 4 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,374,"al = ""1234E+5"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,375,"ssertTrue(""isNumber(String) 5 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,376,"ssertTrue(""isNumber(String)/createNumber(String) 5 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,377,"al = ""1234E-5"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,378,"ssertTrue(""isNumber(String) 6 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,379,"ssertTrue(""isNumber(String)/createNumber(String) 6 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,380,"al = ""123.4E5"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,381,"ssertTrue(""isNumber(String) 7 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,382,"ssertTrue(""isNumber(String)/createNumber(String) 7 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,383,"al = ""-1234"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,384,"ssertTrue(""isNumber(String) 8 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,385,"ssertTrue(""isNumber(String)/createNumber(String) 8 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,386,"al = ""-1234.5"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,387,"ssertTrue(""isNumber(String) 9 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,388,"ssertTrue(""isNumber(String)/createNumber(String) 9 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,389,"al = ""-.12345"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,390,"ssertTrue(""isNumber(String) 10 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,391,"ssertTrue(""isNumber(String)/createNumber(String) 10 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,392,"al = ""-1234E5"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,393,"ssertTrue(""isNumber(String) 11 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,394,"ssertTrue(""isNumber(String)/createNumber(String) 11 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,395,"al = ""0"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,396,"ssertTrue(""isNumber(String) 12 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,397,"ssertTrue(""isNumber(String)/createNumber(String) 12 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,398,"al = ""-0"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,399,"ssertTrue(""isNumber(String) 13 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,400,"ssertTrue(""isNumber(String)/createNumber(String) 13 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,401,"al = ""01234"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,402,"ssertTrue(""isNumber(String) 14 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,403,"ssertTrue(""isNumber(String)/createNumber(String) 14 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,404,"al = ""-01234"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,405,"ssertTrue(""isNumber(String) 15 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,406,"ssertTrue(""isNumber(String)/createNumber(String) 15 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,407,"al = ""0xABC123"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,408,"ssertTrue(""isNumber(String) 16 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,409,"ssertTrue(""isNumber(String)/createNumber(String) 16 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,410,"al = ""0x0"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,411,"ssertTrue(""isNumber(String) 17 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,412,"ssertTrue(""isNumber(String)/createNumber(String) 17 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,413,"al = ""123.4E21D"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,414,"ssertTrue(""isNumber(String) 19 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,415,"ssertTrue(""isNumber(String)/createNumber(String) 19 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,416,"al = ""-221.23F"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,417,"ssertTrue(""isNumber(String) 20 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,418,"ssertTrue(""isNumber(String)/createNumber(String) 20 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,419,"al = ""22338L"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,420,"ssertTrue(""isNumber(String) 21 failed"", NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,421,"ssertTrue(""isNumber(String)/createNumber(String) 21 failed"", checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,422,al = null;
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,423,"ssertTrue(""isNumber(String) 1 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,424,"ssertTrue(""isNumber(String)/createNumber(String) 1 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,425,"al = """";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,426,"ssertTrue(""isNumber(String) 2 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,427,"ssertTrue(""isNumber(String)/createNumber(String) 2 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,428,"al = ""--2.3"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,429,"ssertTrue(""isNumber(String) 3 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,430,"ssertTrue(""isNumber(String)/createNumber(String) 3 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,431,"al = "".12.3"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,432,"ssertTrue(""isNumber(String) 4 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,433,"ssertTrue(""isNumber(String)/createNumber(String) 4 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,434,"al = ""-123E"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,435,"ssertTrue(""isNumber(String) 5 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,436,"ssertTrue(""isNumber(String)/createNumber(String) 5 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,437,"al = ""-123E+-212"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,438,"ssertTrue(""isNumber(String) 6 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,439,"ssertTrue(""isNumber(String)/createNumber(String) 6 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,440,"al = ""-123E2.12"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,441,"ssertTrue(""isNumber(String) 7 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,442,"ssertTrue(""isNumber(String)/createNumber(String) 7 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,443,"al = ""0xGF"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,444,"ssertTrue(""isNumber(String) 8 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,445,"ssertTrue(""isNumber(String)/createNumber(String) 8 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,446,"al = ""0xFAE-1"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,447,"ssertTrue(""isNumber(String) 9 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,448,"ssertTrue(""isNumber(String)/createNumber(String) 9 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,449,"al = ""."";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,450,"ssertTrue(""isNumber(String) 10 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,451,"ssertTrue(""isNumber(String)/createNumber(String) 10 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,452,"al = ""-0ABC123"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,453,"ssertTrue(""isNumber(String) 11 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,454,"ssertTrue(""isNumber(String)/createNumber(String) 11 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,455,"al = ""123.4E-D"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,456,"ssertTrue(""isNumber(String) 12 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,457,"ssertTrue(""isNumber(String)/createNumber(String) 12 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,458,"al = ""123.4ED"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,459,"ssertTrue(""isNumber(String) 13 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,460,"ssertTrue(""isNumber(String)/createNumber(String) 13 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,461,"al = ""1234E5l"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,462,"ssertTrue(""isNumber(String) 14 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,463,"ssertTrue(""isNumber(String)/createNumber(String) 14 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,464,"al = ""11a"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,465,"ssertTrue(""isNumber(String) 15 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,466,"ssertTrue(""isNumber(String)/createNumber(String) 15 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,467,"al = ""1a"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,468,"ssertTrue(""isNumber(String) 16 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,469,"ssertTrue(""isNumber(String)/createNumber(String) 16 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,470,"al = ""a"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,471,"ssertTrue(""isNumber(String) 17 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,472,"ssertTrue(""isNumber(String)/createNumber(String) 17 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,473,"al = ""11g"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,474,"ssertTrue(""isNumber(String) 18 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,475,"ssertTrue(""isNumber(String)/createNumber(String) 18 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,476,"al = ""11z"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,477,"ssertTrue(""isNumber(String) 19 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,478,"ssertTrue(""isNumber(String)/createNumber(String) 19 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,479,"al = ""11def"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,480,"ssertTrue(""isNumber(String) 20 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,481,"ssertTrue(""isNumber(String)/createNumber(String) 20 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,482,"al = ""11d11"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,483,"ssertTrue(""isNumber(String) 21 Neg failed"", !NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,484,"ssertTrue(""isNumber(String)/createNumber(String) 21 Neg failed"", !checkCreateNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,488,ublic void testIsNumberInvalidInput() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,489,"tring val = ""0x"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,490,"ssertEquals(""isNumber() with 0x wasn't false"",  false, NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,491,"al = ""0x3x3"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,492,"ssertEquals(""isNumber() with 0x3x3 wasn't false"",  false, NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,493,"al = ""20EE-3"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,494,"ssertEquals(""isNumber() with 20EE-3 wasn't false"",  false, NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,495,"al = ""2435q"";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,496,"ssertEquals(""isNumber() with 2435q wasn't false"",  false, NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,497,"al = ""."";"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,498,"ssertEquals(""isNumber() with . wasn't false"",  false, NumberUtils.isNumber(val));"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,502,rivate boolean checkCreateNumber(String val) {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,503,ry {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,504,bject obj = NumberUtils.createNumber(val);
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,505,f (obj == null) {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,506,eturn false;
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,508,eturn true;
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,509, catch (NumberFormatException e) {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,510,eturn false;
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,511, catch (NullPointerException e) {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,512,eturn false;
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,516,ublic void testPublicNoArgConstructor() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,517,ry {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,518,umberUtils nu = new NumberUtils();
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,519, catch( Exception e ) {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,520,"ail( ""Error calling public no-arg constructor"" );"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,524,ublic void testLang457() {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,525,"tring[] badInputs = new String[] { ""l"", ""L"", ""f"", ""F"", ""junk"", ""bobL""};"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,526,or(int i=0; i<badInputs.length; i++) {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,527,ry {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,528,umberUtils.createNumber(badInputs[i]);
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,529,"ail(""NumberFormatException was expected for "" + badInputs[i]);"
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,530, catch (NumberFormatException e) {
False,src/test/org/apache/commons/lang/NumberUtilsTest.java,src/test/org/apache/commons/lang/NumberUtilsTest.java,531,eturn; // expected

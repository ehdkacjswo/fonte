is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,5,* reserved.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,9,* are met:
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,17,*    distribution.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,54,package org.apache.commons.lang.time;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,56,import java.util.Date;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,57,import java.util.Calendar;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,58,import java.util.GregorianCalendar;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,59,import java.util.Locale;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,60,import java.util.TimeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,61,import java.util.List;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,62,import java.util.ArrayList;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,63,import java.util.Map;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,64,import java.util.HashMap;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,65,import java.text.DateFormatSymbols;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,66,import java.text.DateFormat;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,67,import java.text.SimpleDateFormat;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,70,"* Similar to {@link java.text.SimpleDateFormat}, but faster and thread-safe."
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,71,"* Only formatting is supported, but all patterns are compatible with"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,72,* SimpleDateFormat. [Code originally taken from the open source TreeTrove
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,73,* project.]
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,75,* @author Brian S O'Neill
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,76,* @author Sean Schofield
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,77,* @since 2.0
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,78,"* @version $Id: FastDateFormat.java,v 1.1 2003/01/07 19:55:55 bayard Exp $"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,80,public class FastDateFormat {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,81,/** Style pattern */
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,82,public static final Object
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,83,"FULL = new Integer(SimpleDateFormat.FULL),"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,84,"LONG = new Integer(SimpleDateFormat.LONG),"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,85,"MEDIUM = new Integer(SimpleDateFormat.MEDIUM),"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,86,SHORT = new Integer(SimpleDateFormat.SHORT);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,88,private static final double LOG_10 = Math.log(10);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,90,private static String cDefaultPattern;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,91,private static TimeZone cDefaultTimeZone = TimeZone.getDefault();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,93,private static Map cTimeZoneDisplayCache = new HashMap();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,95,private static Map cInstanceCache = new HashMap(7);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,96,private static Map cDateInstanceCache = new HashMap(7);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,97,private static Map cTimeInstanceCache = new HashMap(7);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,98,private static Map cDateTimeInstanceCache = new HashMap(7);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,100,public static FastDateFormat getInstance() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,101,"//return getInstance(getDefaultPattern(), null, null, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,102,"return getInstance(getDefaultPattern(), null, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,106,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,108,public static FastDateFormat getInstance(String pattern) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,109,"//return getInstance(pattern, null, null, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,110,"return getInstance(pattern, null, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,114,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,115,"* @param timeZone optional time zone, overrides time zone of formatted"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,116,* date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,118,"public static FastDateFormat getInstance(String pattern, TimeZone timeZone) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,119,"//return getInstance(pattern, timeZone, null, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,120,"return getInstance(pattern, timeZone, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,124,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,125,"* @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,127,"public static FastDateFormat getInstance(String pattern, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,128,"//return getInstance(pattern, null, locale, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,129,"return getInstance(pattern, null, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,133,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,134,"* @param symbols optional date format symbols, overrides symbols for"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,135,* system locale
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,138,public static FastDateFormat getInstance
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,139,"(String pattern, DateFormatSymbols symbols)"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,140,throws IllegalArgumentException
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,142,"return getInstance(pattern, null, null, symbols);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,147,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,148,"* @param timeZone optional time zone, overrides time zone of formatted"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,149,* date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,150,"* @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,152,"public static FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,153,"//return getInstance(pattern, timeZone, locale, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,154,Object key = pattern;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,156,if (timeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,157,"key = new Pair(key, timeZone);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,159,if (locale != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,160,"key = new Pair(key, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,163,FastDateFormat format = (FastDateFormat)cInstanceCache.get(key);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,164,if (format == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,165,if (locale == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,166,locale = Locale.getDefault();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,169,"format = new FastDateFormat(pattern, timeZone, locale, new DateFormatSymbols(locale));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,170,"cInstanceCache.put(key, format);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,172,return format;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,176,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,177,"* @param timeZone optional time zone, overrides time zone of formatted"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,178,* date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,179,"* @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,180,"* @param symbols optional date format symbols, overrides symbols for"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,181,* provided locale
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,184,public static synchronized FastDateFormat getInstance
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,185,"(String pattern, TimeZone timeZone, Locale locale,"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,186,DateFormatSymbols symbols)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,187,throws IllegalArgumentException
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,189,Object key = pattern;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,191,if (timeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,192,"key = new Pair(key, timeZone);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,194,if (locale != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,195,"key = new Pair(key, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,197,if (symbols != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,198,"key = new Pair(key, symbols);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,201,FastDateFormat format = (FastDateFormat)cInstanceCache.get(key);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,202,if (format == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,203,if (locale == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,204,locale = Locale.getDefault();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,206,if (symbols == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,207,symbols = new DateFormatSymbols(locale);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,209,"format = new FastDateFormat(pattern, timeZone, locale, symbols);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,210,"cInstanceCache.put(key, format);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,212,return format;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,217,"* @param style date style: FULL, LONG, MEDIUM, or SHORT (corresponds to those in java.text.DateFormat)"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,218,"* @param timeZone optional time zone, overrides time zone of formatted"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,219,* date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,220,"* @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,222,"public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,223,Object key = new Integer(style);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,225,if (timeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,226,"key = new Pair(key, timeZone);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,228,if (locale == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,229,"key = new Pair(key, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,232,FastDateFormat format = (FastDateFormat)cDateInstanceCache.get(key);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,234,if (format == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,235,if (locale == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,236,locale = Locale.getDefault();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,239,try {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,240,"String pattern = ((SimpleDateFormat)DateFormat.getDateInstance(style, locale)).toPattern();"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,241,"format = getInstance(pattern, timeZone, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,242,"cDateInstanceCache.put(key, format);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,244,catch (ClassCastException e) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,245,throw new IllegalArgumentException
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,246,"(""No date pattern for locale: "" + locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,250,return format;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,254,"* @param style time style: FULL, LONG, MEDIUM, or SHORT"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,255,"* @param timeZone optional time zone, overrides time zone of formatted"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,256,* date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,257,"* @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,259,"public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,260,Object key = new Integer(style);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,262,if (timeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,263,"key = new Pair(key, timeZone);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,265,if (locale != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,266,"key = new Pair(key, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,269,FastDateFormat format = (FastDateFormat)cTimeInstanceCache.get(key);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,271,if (format == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,273,if (locale == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,274,locale = Locale.getDefault();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,277,try {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,278,"String pattern = ((SimpleDateFormat)DateFormat.getTimeInstance(style, locale)).toPattern();"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,279,"format = getInstance(pattern, timeZone, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,280,"cTimeInstanceCache.put(key, format);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,282,catch (ClassCastException e) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,283,throw new IllegalArgumentException
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,284,"(""No date pattern for locale: "" + locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,288,return format;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,292,"* @param dateStyle date style: FULL, LONG, MEDIUM, or SHORT"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,293,"* @param timeStyle time style: FULL, LONG, MEDIUM, or SHORT"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,294,"* @param timeZone optional time zone, overrides time zone of formatted"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,295,* date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,296,"* @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,298,"public static synchronized FastDateFormat getDateTimeInstance(Object dateStyle, Object timeStyle,"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,299,"TimeZone timeZone, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,301,"Object key = new Pair(dateStyle, timeStyle);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,303,if (timeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,304,"key = new Pair(key, timeZone);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,306,if (locale != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,307,"key = new Pair(key, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,310,FastDateFormat format =
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,311,(FastDateFormat)cDateTimeInstanceCache.get(key);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,313,if (format == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,314,int ds;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,315,try {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,316,ds = ((Integer)dateStyle).intValue();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,318,catch (ClassCastException e) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,319,throw new IllegalArgumentException
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,320,"(""Illegal date style: "" + dateStyle);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,323,int ts;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,324,try {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,325,ts = ((Integer)timeStyle).intValue();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,327,catch (ClassCastException e) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,328,throw new IllegalArgumentException
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,329,"(""Illegal time style: "" + timeStyle);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,332,if (locale == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,333,locale = Locale.getDefault();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,336,try {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,337,"String pattern = ((SimpleDateFormat)DateFormat.getDateTimeInstance(ds, ts, locale)).toPattern();"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,338,"format = getInstance(pattern, timeZone, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,339,"cDateTimeInstanceCache.put(key, format);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,341,catch (ClassCastException e) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,342,throw new IllegalArgumentException
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,343,"(""No date time pattern for locale: "" + locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,347,return format;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,350,"static synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,351,"Object key = new TimeZoneDisplayKey(tz, daylight, style, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,352,String value = (String)cTimeZoneDisplayCache.get(key);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,353,if (value == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,354,"// This is a very slow call, so cache the results."
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,355,"value = tz.getDisplayName(daylight, style, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,356,"cTimeZoneDisplayCache.put(key, value);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,358,return value;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,361,private static synchronized String getDefaultPattern() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,362,if (cDefaultPattern == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,363,cDefaultPattern = new SimpleDateFormat().toPattern();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,365,return cDefaultPattern;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,369,* Returns a list of Rules.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,371,"private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,372,List rules = new ArrayList();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,374,String[] ERAs = symbols.getEras();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,375,String[] months = symbols.getMonths();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,376,String[] shortMonths = symbols.getShortMonths();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,377,String[] weekdays = symbols.getWeekdays();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,378,String[] shortWeekdays = symbols.getShortWeekdays();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,379,String[] AmPmStrings = symbols.getAmPmStrings();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,381,int length = pattern.length();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,382,int[] indexRef = new int[1];
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,384,for (int i=0; i<length; i++) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,385,indexRef[0] = i;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,386,"String token = parseToken(pattern, indexRef);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,387,i = indexRef[0];
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,389,int tokenLen = token.length();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,390,if (tokenLen == 0) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,391,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,394,Rule rule;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,395,char c = token.charAt(0);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,397,switch (c) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,398,case 'G': // era designator (text)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,399,"rule = new TextField(Calendar.ERA, ERAs);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,400,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,401,case 'y': // year (number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,402,if (tokenLen >= 4) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,403,rule = new UnpaddedNumberField(Calendar.YEAR);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,405,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,406,rule = new TwoDigitYearField();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,408,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,409,case 'M': // month in year (text and number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,410,if (tokenLen >= 4) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,411,"rule = new TextField(Calendar.MONTH, months);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,413,else if (tokenLen == 3) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,414,"rule = new TextField(Calendar.MONTH, shortMonths);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,416,else if (tokenLen == 2) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,417,rule = new TwoDigitMonthField();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,419,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,420,rule = new UnpaddedMonthField();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,422,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,423,case 'd': // day in month (number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,424,"rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,425,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,426,"case 'h': // hour in am/pm (number, 1..12)"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,427,rule = new TwelveHourField
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,428,"(selectNumberRule(Calendar.HOUR, tokenLen));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,429,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,430,"case 'H': // hour in day (number, 0..23)"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,431,"rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,432,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,433,case 'm': // minute in hour (number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,434,"rule = selectNumberRule(Calendar.MINUTE, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,435,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,436,case 's': // second in minute (number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,437,"rule = selectNumberRule(Calendar.SECOND, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,438,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,439,case 'S': // millisecond (number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,440,"rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,441,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,442,case 'E': // day in week (text)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,443,rule = new TextField
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,444,"(Calendar.DAY_OF_WEEK,"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,445,tokenLen < 4 ? shortWeekdays : weekdays);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,446,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,447,case 'D': // day in year (number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,448,"rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,449,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,450,case 'F': // day of week in month (number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,451,rule = selectNumberRule
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,452,"(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,453,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,454,case 'w': // week in year (number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,455,"rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,456,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,457,case 'W': // week in month (number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,458,"rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,459,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,460,case 'a': // am/pm marker (text)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,461,"rule = new TextField(Calendar.AM_PM, AmPmStrings);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,462,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,463,case 'k': // hour in day (1..24)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,464,rule = new TwentyFourHourField
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,465,"(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,466,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,467,case 'K': // hour in am/pm (0..11)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,468,"rule = selectNumberRule(Calendar.HOUR, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,469,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,470,case 'z': // time zone (text)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,471,if (tokenLen >= 4) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,472,"rule = new TimeZoneRule(timeZone, locale, TimeZone.LONG);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,474,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,475,"rule = new TimeZoneRule(timeZone, locale, TimeZone.SHORT);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,477,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,478,case '\'': // literal text
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,479,String sub = token.substring(1);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,480,if (sub.length() == 1) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,481,rule = new CharacterLiteral(sub.charAt(0));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,483,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,484,rule = new StringLiteral(new String(sub));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,486,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,487,default:
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,488,throw new IllegalArgumentException
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,489,"(""Illegal pattern component: "" + token);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,492,rules.add(rule);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,495,return rules;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,498,"private static String parseToken(String pattern, int[] indexRef) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,499,StringBuffer buf = new StringBuffer();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,501,int i = indexRef[0];
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,502,int length = pattern.length();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,504,char c = pattern.charAt(i);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,505,if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,506,"// Scan a run of the same character, which indicates a time"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,507,// pattern.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,508,buf.append(c);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,510,while (i + 1 < length) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,511,char peek = pattern.charAt(i + 1);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,512,if (peek == c) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,513,buf.append(c);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,514,i++;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,516,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,517,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,521,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,522,// This will identify token as text.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,523,buf.append('\'');
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,525,boolean inLiteral = false;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,527,for (; i < length; i++) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,528,c = pattern.charAt(i);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,530,if (c == '\'') {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,531,if (i + 1 < length && pattern.charAt(i + 1) == '\'') {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,532,// '' is treated as escaped '
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,533,i++;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,534,buf.append(c);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,536,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,537,inLiteral = !inLiteral;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,540,else if (!inLiteral &&
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,541,(c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,542,i--;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,543,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,545,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,546,buf.append(c);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,551,indexRef[0] = i;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,552,return buf.toString();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,555,"private static NumberRule selectNumberRule(int field, int padding) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,556,switch (padding) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,557,case 1:
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,558,return new UnpaddedNumberField(field);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,559,case 2:
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,560,return new TwoDigitNumberField(field);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,561,default:
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,562,"return new PaddedNumberField(field, padding);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,566,private final String mPattern;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,567,private final TimeZone mTimeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,568,private final Locale mLocale;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,569,private final Rule[] mRules;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,570,private final int mMaxLengthEstimate;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,572,private FastDateFormat() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,573,"this(getDefaultPattern(), null, null, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,577,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,579,private FastDateFormat(String pattern) throws IllegalArgumentException {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,580,"this(pattern, null, null, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,584,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,585,"* @param timeZone optional time zone, overrides time zone of formatted"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,586,* date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,588,"private FastDateFormat(String pattern, TimeZone timeZone) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,589,"this(pattern, timeZone, null, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,593,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,594,"* @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,596,"private FastDateFormat(String pattern, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,597,"this(pattern, null, locale, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,601,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,602,"* @param symbols optional date format symbols, overrides symbols for"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,603,* system locale
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,605,"private FastDateFormat(String pattern, DateFormatSymbols symbols) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,606,"this(pattern, null, null, symbols);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,610,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,611,"* @param timeZone optional time zone, overrides time zone of formatted"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,612,* date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,613,"* @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,615,"private FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,616,"this(pattern, timeZone, locale, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,620,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,621,"* @param timeZone optional time zone, overrides time zone of formatted"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,622,* date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,623,"* @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,624,"* @param symbols optional date format symbols, overrides symbols for"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,625,* provided locale
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,627,"private FastDateFormat(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,628,if (locale == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,629,locale = Locale.getDefault();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,632,mPattern = pattern;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,633,mTimeZone = timeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,634,mLocale = locale;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,636,if (symbols == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,637,symbols = new DateFormatSymbols(locale);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,640,"List rulesList = parse(pattern, timeZone, locale, symbols);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,641,mRules = (Rule[])rulesList.toArray(new Rule[rulesList.size()]);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,643,int len = 0;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,644,for (int i=mRules.length; --i >= 0; ) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,645,len += mRules[i].estimateLength();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,648,mMaxLengthEstimate = len;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,651,public String format(Date date) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,652,Calendar c = new GregorianCalendar(cDefaultTimeZone);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,653,c.setTime(date);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,654,if (mTimeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,655,c.setTimeZone(mTimeZone);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,657,"return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,660,public String format(Calendar calendar) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,661,"return format(calendar, new StringBuffer(mMaxLengthEstimate))"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,662,.toString();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,665,"public StringBuffer format(Date date, StringBuffer buf) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,666,Calendar c = new GregorianCalendar(cDefaultTimeZone);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,667,c.setTime(date);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,668,if (mTimeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,669,c.setTimeZone(mTimeZone);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,671,"return applyRules(c, buf);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,674,"public StringBuffer format(Calendar calendar, StringBuffer buf) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,675,if (mTimeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,676,calendar = (Calendar)calendar.clone();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,677,calendar.setTimeZone(mTimeZone);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,679,"return applyRules(calendar, buf);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,682,"private StringBuffer applyRules(Calendar calendar, StringBuffer buf) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,683,Rule[] rules = mRules;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,684,int len = mRules.length;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,685,for (int i=0; i<len; i++) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,686,"rules[i].appendTo(buf, calendar);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,688,return buf;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,691,public String getPattern() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,692,return mPattern;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,696,"* Returns the time zone used by this formatter, or null if time zone of"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,697,* formatted dates is used instead.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,699,public TimeZone getTimeZone() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,700,return mTimeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,703,public Locale getLocale() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,704,return mLocale;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,708,* Returns an estimate for the maximum length date that this date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,709,* formatter will produce. The actual formatted length will almost always
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,710,* be less than or equal to this amount.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,712,public int getMaxLengthEstimate() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,713,return mMaxLengthEstimate;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,716,private interface Rule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,717,int estimateLength();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,719,"void appendTo(StringBuffer buffer, Calendar calendar);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,722,private interface NumberRule extends Rule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,723,"void appendTo(StringBuffer buffer, int value);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,726,private static class CharacterLiteral implements Rule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,727,private final char mValue;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,729,CharacterLiteral(char value) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,730,mValue = value;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,733,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,734,return 1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,737,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,738,buffer.append(mValue);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,742,private static class StringLiteral implements Rule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,743,private final String mValue;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,745,StringLiteral(String value) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,746,mValue = value;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,749,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,750,return mValue.length();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,753,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,754,buffer.append(mValue);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,758,private static class TextField implements Rule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,759,private final int mField;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,760,private final String[] mValues;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,762,"TextField(int field, String[] values) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,763,mField = field;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,764,mValues = values;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,767,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,768,int max = 0;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,769,for (int i=mValues.length; --i >= 0; ) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,770,int len = mValues[i].length();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,771,if (len > max) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,772,max = len;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,775,return max;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,778,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,779,buffer.append(mValues[calendar.get(mField)]);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,783,private static class UnpaddedNumberField implements NumberRule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,784,private final int mField;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,786,UnpaddedNumberField(int field) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,787,mField = field;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,790,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,791,return 4;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,794,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,795,"appendTo(buffer, calendar.get(mField));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,798,"public final void appendTo(StringBuffer buffer, int value) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,799,if (value < 10) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,800,buffer.append((char)(value + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,802,else if (value < 100) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,803,buffer.append((char)(value / 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,804,buffer.append((char)(value % 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,806,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,807,buffer.append(Integer.toString(value));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,812,private static class UnpaddedMonthField implements NumberRule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,813,UnpaddedMonthField() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,816,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,817,return 2;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,820,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,821,"appendTo(buffer, calendar.get(Calendar.MONTH) + 1);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,824,"public final void appendTo(StringBuffer buffer, int value) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,825,if (value < 10) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,826,buffer.append((char)(value + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,828,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,829,buffer.append((char)(value / 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,830,buffer.append((char)(value % 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,835,private static class PaddedNumberField implements NumberRule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,836,private final int mField;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,837,private final int mSize;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,839,"PaddedNumberField(int field, int size) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,840,if (size < 3) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,841,// Should use UnpaddedNumberField or TwoDigitNumberField.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,842,throw new IllegalArgumentException();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,844,mField = field;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,845,mSize = size;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,848,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,849,return 4;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,852,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,853,"appendTo(buffer, calendar.get(mField));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,856,"public final void appendTo(StringBuffer buffer, int value) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,857,if (value < 100) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,858,for (int i = mSize; --i >= 2; ) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,859,buffer.append('0');
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,861,buffer.append((char)(value / 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,862,buffer.append((char)(value % 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,864,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,865,int digits;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,866,if (value < 1000) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,867,digits = 3;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,869,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,870,digits = (int)(Math.log(value) / LOG_10) + 1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,872,for (int i = mSize; --i >= digits; ) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,873,buffer.append('0');
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,875,buffer.append(Integer.toString(value));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,880,private static class TwoDigitNumberField implements NumberRule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,881,private final int mField;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,883,TwoDigitNumberField(int field) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,884,mField = field;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,887,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,888,return 2;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,891,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,892,"appendTo(buffer, calendar.get(mField));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,895,"public final void appendTo(StringBuffer buffer, int value) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,896,if (value < 100) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,897,buffer.append((char)(value / 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,898,buffer.append((char)(value % 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,900,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,901,buffer.append(Integer.toString(value));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,906,private static class TwoDigitYearField implements NumberRule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,907,TwoDigitYearField() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,910,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,911,return 2;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,914,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,915,"appendTo(buffer, calendar.get(Calendar.YEAR) % 100);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,918,"public final void appendTo(StringBuffer buffer, int value) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,919,buffer.append((char)(value / 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,920,buffer.append((char)(value % 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,924,private static class TwoDigitMonthField implements NumberRule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,925,TwoDigitMonthField() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,928,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,929,return 2;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,932,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,933,"appendTo(buffer, calendar.get(Calendar.MONTH) + 1);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,936,"public final void appendTo(StringBuffer buffer, int value) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,937,buffer.append((char)(value / 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,938,buffer.append((char)(value % 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,942,private static class TwelveHourField implements NumberRule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,943,private final NumberRule mRule;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,945,TwelveHourField(NumberRule rule) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,946,mRule = rule;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,949,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,950,return mRule.estimateLength();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,953,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,954,int value = calendar.get(Calendar.HOUR);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,955,if (value == 0) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,956,value = calendar.getLeastMaximum(Calendar.HOUR) + 1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,958,"mRule.appendTo(buffer, value);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,961,"public void appendTo(StringBuffer buffer, int value) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,962,"mRule.appendTo(buffer, value);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,966,private static class TwentyFourHourField implements NumberRule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,967,private final NumberRule mRule;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,969,TwentyFourHourField(NumberRule rule) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,970,mRule = rule;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,973,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,974,return mRule.estimateLength();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,977,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,978,int value = calendar.get(Calendar.HOUR_OF_DAY);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,979,if (value == 0) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,980,value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,982,"mRule.appendTo(buffer, value);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,985,"public void appendTo(StringBuffer buffer, int value) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,986,"mRule.appendTo(buffer, value);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,990,private static class TimeZoneRule implements Rule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,991,private final TimeZone mTimeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,992,private final Locale mLocale;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,993,private final int mStyle;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,994,private final String mStandard;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,995,private final String mDaylight;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,997,"TimeZoneRule(TimeZone timeZone, Locale locale, int style) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,998,mTimeZone = timeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,999,mLocale = locale;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1000,mStyle = style;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1002,if (timeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1003,"mStandard = getTimeZoneDisplay(timeZone, false, style, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1004,"mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1006,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1007,mStandard = null;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1008,mDaylight = null;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1012,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1013,if (mTimeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1014,"return Math.max(mStandard.length(), mDaylight.length());"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1016,else if (mStyle == TimeZone.SHORT) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1017,return 4;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1019,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1020,return 40;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1024,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1025,TimeZone timeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1026,if ((timeZone = mTimeZone) != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1027,if (timeZone.useDaylightTime() &&
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1028,calendar.get(Calendar.DST_OFFSET) != 0) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1030,buffer.append(mDaylight);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1032,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1033,buffer.append(mStandard);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1036,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1037,timeZone = calendar.getTimeZone();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1038,if (timeZone.useDaylightTime() &&
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1039,calendar.get(Calendar.DST_OFFSET) != 0) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1041,buffer.append(getTimeZoneDisplay
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1042,"(timeZone, true, mStyle, mLocale));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1044,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1045,buffer.append(getTimeZoneDisplay
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1046,"(timeZone, false, mStyle, mLocale));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1052,private static class TimeZoneDisplayKey {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1053,private final TimeZone mTimeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1054,private final int mStyle;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1055,private final Locale mLocale;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1057,"TimeZoneDisplayKey(TimeZone timeZone,"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1058,"boolean daylight, int style, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1059,mTimeZone = timeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1060,if (daylight) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1061,style |= 0x80000000;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1063,mStyle = style;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1064,mLocale = locale;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1067,public int hashCode() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1068,return mStyle * 31 + mLocale.hashCode();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1071,public boolean equals(Object obj) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1072,if (this == obj) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1073,return true;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1075,if (obj instanceof TimeZoneDisplayKey) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1076,TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1077,return
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1078,mTimeZone.equals(other.mTimeZone) &&
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1079,mStyle == other.mStyle &&
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1080,mLocale.equals(other.mLocale);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1082,return false;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1086,// Pair
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1089,* Helper class for creating compound objects.  One use for this class is to create a
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1090,* hashtable key out of multiple objects.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1092,"private static class Pair implements Comparable, java.io.Serializable {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1093,private final Object mObj1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1094,private final Object mObj2;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1096,"public Pair(Object obj1, Object obj2) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1097,mObj1 = obj1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1098,mObj2 = obj2;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1101,public int compareTo(Object obj) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1102,if (this == obj) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1103,return 0;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1106,Pair other = (Pair)obj;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1108,Object a = mObj1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1109,Object b = other.mObj1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1111,firstTest: {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1112,if (a == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1113,if (b != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1114,return 1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1116,// Both a and b are null.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1117,break firstTest;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1119,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1120,if (b == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1121,return -1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1125,int result = ((Comparable)a).compareTo(b);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1127,if (result != 0) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1128,return result;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1132,a = mObj2;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1133,b = other.mObj2;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1135,if (a == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1136,if (b != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1137,return 1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1139,// Both a and b are null.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1140,return 0;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1142,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1143,if (b == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1144,return -1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1148,return ((Comparable)a).compareTo(b);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1151,public boolean equals(Object obj) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1152,if (this == obj) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1153,return true;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1156,if (!(obj instanceof Pair)) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1157,return false;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1160,Pair key = (Pair)obj;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1162,return
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1163,(mObj1 == null ?
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1164,key.mObj1 == null : mObj1.equals(key.mObj1)) &&
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1165,(mObj2 == null ?
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1166,key.mObj2 == null : mObj2.equals(key.mObj2));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1169,public int hashCode() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1170,return
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1171,(mObj1 == null ? 0 : mObj1.hashCode()) +
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1172,(mObj2 == null ? 0 : mObj2.hashCode());
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1175,public String toString() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1176,"return ""["" + mObj1 + ':' + mObj2 + ']';"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,5,* reserved.
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,9,* are met:
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,17,*    distribution.
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,54,package org.apache.commons.lang.time;
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,56,import junit.framework.*;
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,57,import junit.textui.TestRunner;
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,58,import java.util.*;
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,59,import java.text.*;
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,62,* Unit tests {@link org.apache.commons.lang.time.FastDateFormat}.
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,64,* @author Sean Schofield
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,65,* @since 2.0
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,66,"* @version $Id: FastDateFormatTest.java,v 1.1 2003/01/07 19:55:55 bayard Exp $"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,68,public class FastDateFormatTest extends TestCase {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,70,private FastDateFormat fastDateFormat = null;
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,72,public FastDateFormatTest(String name) {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,73,super(name);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,76,public static void main(String[] args) {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,77,TestRunner.run(suite());
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,80,public static Test suite() {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,81,TestSuite suite = new TestSuite(FastDateFormatTest.class);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,82,"suite.setName(""FastDateFormat Tests"");"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,84,return suite;
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,87,protected void setUp() throws Exception {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,88,super.setUp();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,91,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,92,super.tearDown();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,95,public void test_getInstance() {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,96,FastDateFormat format1 = FastDateFormat.getInstance();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,97,FastDateFormat format2 = FastDateFormat.getInstance();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,98,"assertSame(format1, format2);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,101,public void test_getInstance_String() {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,102,"FastDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"");"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,103,"FastDateFormat format2 = FastDateFormat.getInstance(""MM-DD-yyyy"");"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,104,assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,105,"assertSame(format1, FastDateFormat.getInstance(""MM/DD/yyyy""));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,108,public void test_getInstance_String_TimeZone() {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,109,Locale realDefaultLocale = Locale.getDefault();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,110,Locale.setDefault(Locale.US);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,111,TimeZone realDefaultZone = TimeZone.getDefault();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,112,"TimeZone.setDefault(TimeZone.getTimeZone(""America/New_York""));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,114,"FastDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"","
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,115,"TimeZone.getTimeZone(""Atlantic/Reykjavik""));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,116,"FastDateFormat format2 = FastDateFormat.getInstance(""MM/DD/yyyy"");"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,117,"FastDateFormat format3 = FastDateFormat.getInstance(""MM/DD/yyyy"", TimeZone.getDefault());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,118,"FastDateFormat format4 = FastDateFormat.getInstance(""MM/DD/yyyy"", TimeZone.getDefault());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,119,"FastDateFormat format5 = FastDateFormat.getInstance(""MM-DD-yyyy"", TimeZone.getDefault());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,121,assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,122,"assertTrue(format1.getTimeZone().equals(TimeZone.getTimeZone(""Atlantic/Reykjavik"")));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,123,assertNull(format2.getTimeZone());
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,124,"assertSame(format3, format4);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,125,assertTrue(format3 != format5); // -- junit 3.8 version -- assertFalse(format3 == format5);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,127,Locale.setDefault(realDefaultLocale);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,128,TimeZone.setDefault(realDefaultZone);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,131,public void test_getInstance_String_Locale() {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,132,Locale realDefaultLocale = Locale.getDefault();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,133,Locale.setDefault(Locale.US);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,134,"FastDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"", Locale.GERMANY);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,135,"FastDateFormat format2 = FastDateFormat.getInstance(""MM/DD/yyyy"");"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,136,"FastDateFormat format3 = FastDateFormat.getInstance(""MM/DD/yyyy"", Locale.GERMANY);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,138,assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,139,"assertSame(format1, format3);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,140,"assertSame(Locale.GERMANY, format1.getLocale());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,142,Locale.setDefault(realDefaultLocale);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,145,public void test_getInstance_String_TimeZone_Locale() {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,146,Locale realDefaultLocale = Locale.getDefault();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,147,Locale.setDefault(Locale.US);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,148,TimeZone realDefaultZone = TimeZone.getDefault();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,149,"TimeZone.setDefault(TimeZone.getTimeZone(""America/New_York""));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,151,"FastDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"","
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,152,"TimeZone.getTimeZone(""Atlantic/Reykjavik""), Locale.GERMANY);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,153,"FastDateFormat format2 = FastDateFormat.getInstance(""MM/DD/yyyy"", Locale.GERMANY);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,154,"FastDateFormat format3 = FastDateFormat.getInstance(""MM/DD/yyyy"","
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,155,"TimeZone.getDefault(), Locale.GERMANY);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,157,"assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,158,"assertEquals(format1.getTimeZone(), TimeZone.getTimeZone(""Atlantic/Reykjavik""));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,159,assertNull(format2.getTimeZone());
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,160,"assertEquals(format3.getTimeZone(), TimeZone.getDefault());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,161,"assertEquals(format3.getTimeZone(), TimeZone.getTimeZone(""America/New_York""));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,163,Locale.setDefault(realDefaultLocale);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,164,TimeZone.setDefault(realDefaultZone);

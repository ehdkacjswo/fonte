is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,170,"eturn getCauseUsingFieldName(throwable, ""detail"");"
True,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,170,return null;
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,227, <p>Finds a <code>Throwable</code> by field name.</p>
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,229, @param throwable  the exception to examine
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,230, @param fieldName  the name of the attribute to examine
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,231," @return the wrapped exception, or <code>null</code> if not found"
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,233,"rivate static Throwable getCauseUsingFieldName(Throwable throwable, String fieldName) {"
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,234,ield field = null;
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,235,ry {
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,236,ield = throwable.getClass().getField(fieldName);
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,237, catch (NoSuchFieldException ignored) {
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,238,/ exception ignored
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,239, catch (SecurityException ignored) {
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,240,/ exception ignored
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,243,f (field != null && Throwable.class.isAssignableFrom(field.getType())) {
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,244,ry {
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,245,eturn (Throwable) field.get(throwable);
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,246, catch (IllegalAccessException ignored) {
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,247,/ exception ignored
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,248, catch (IllegalArgumentException ignored) {
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,249,/ exception ignored
False,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,src/java/org/apache/commons/lang3/exception/ExceptionUtils.java,252,eturn null;

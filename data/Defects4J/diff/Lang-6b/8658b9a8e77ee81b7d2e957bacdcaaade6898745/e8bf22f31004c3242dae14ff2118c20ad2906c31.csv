is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,17,ackage org.apache.commons.lang.concurrent;
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,19,mport java.util.concurrent.Callable;
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,20,mport java.util.concurrent.ExecutorService;
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,23, <p>
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,24, A specialized {@link BackgroundInitializer} implementation that wraps a
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,25, {@code Callable} object.
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,26, </p>
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,27, <p>
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,28, An instance of this class is initialized with a {@code Callable} object when
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,29, it is constructed. The implementation of the {@link #initialize()} method
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,30, defined in the super class delegates to this {@code Callable} so that the
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,31, {@code Callable} is executed in the background thread.
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,32, </p>
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,33, <p>
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,34, The {@code java.util.concurrent.Callable} interface is a standard mechanism
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,35, of the JDK to define tasks to be executed by another thread. The {@code
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,36, CallableBackgroundInitializer} class allows combining this standard interface
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,37, with the background initializer API.
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,38, </p>
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,39, <p>
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,40, Usage of this class is very similar to the default usage pattern of the
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,41, {@link BackgroundInitializer} class: Just create an instance and provide the
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,42," {@code Callable} object to be executed, then call the initializer's"
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,43, {@link #start()} method. This causes the {@code Callable} to be executed in
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,44, another thread. When the results of the {@code Callable} are needed the
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,45, initializer's {@link #get()} method can be called (which may block until
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,46, background execution is complete). The following code fragment shows a
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,47, typical usage example:
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,49, <pre>
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,50, // a Callable that performs a complex computation
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,51, Callable<Integer> computationCallable = new MyComputationCallable();
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,7,* the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,53, // setup the background initializer
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,54, CallableBackgroundInitializer<Integer> initializer =
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,55,     new CallableBackgroundInitializer(computationCallable);
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,56, initializer.start();
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,58, // Now do some other things. Initialization runs in a parallel thread
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,60, // Wait for the end of initialization and access the result
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,61, Integer result = initializer.get();
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,62, </pre>
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,64, </p>
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,66, @version $Id: $
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,67, @param <T> the type of the object managed by this initializer class
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,69,ublic class CallableBackgroundInitializer<T> extends BackgroundInitializer<T> {
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,70,** The Callable to be executed. */
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,71,rivate final Callable<T> callable;
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,74, Creates a new instance of {@code CallableBackgroundInitializer} and sets
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,75, the {@code Callable} to be executed in a background thread.
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,77, @param call the {@code Callable} (must not be <b>null</b>)
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,78, @throws IllegalArgumentException if the {@code Callable} is <b>null</b>
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,80,ublic CallableBackgroundInitializer(Callable<T> call) {
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,81,heckCallable(call);
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,82,allable = call;
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,86, Creates a new instance of {@code CallableBackgroundInitializer} and
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,87, initializes it with the {@code Callable} to be executed in a background
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,88, thread and the {@code ExecutorService} for managing the background
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,89, execution.
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,91, @param call the {@code Callable} (must not be <b>null</b>)
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,92, @param exec an external {@code ExecutorService} to be used for task
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,93, execution
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,94, @throws IllegalArgumentException if the {@code Callable} is <b>null</b>
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,96,"ublic CallableBackgroundInitializer(Callable<T> call, ExecutorService exec) {"
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,97,uper(exec);
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,98,heckCallable(call);
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,99,allable = call;
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,103, Performs initialization in a background thread. This implementation
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,104, delegates to the {@code Callable} passed at construction time of this
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,105, object.
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,107, @return the result of the initialization
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,108, @throws Exception if an error occurs
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,110,Override
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,111,rotected T initialize() throws Exception {
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,112,eturn callable.call();
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,116, Tests the passed in {@code Callable} and throws an exception if it is
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,117, undefined.
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,119, @param call the object to check
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,120, @throws IllegalArgumentException if the {@code Callable} is <b>null</b>
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,122,rivate void checkCallable(Callable<T> call) {
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,123,f (call == null) {
False,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,124,"hrow new IllegalArgumentException(""Callable must not be null!"");"
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,17,package org.apache.commons.lang.concurrent;
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,19,import java.util.concurrent.Callable;
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,20,import java.util.concurrent.ExecutorService;
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,23,* <p>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,24,* A specialized {@link BackgroundInitializer} implementation that wraps a
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,25,* {@code Callable} object.
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,26,* </p>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,27,* <p>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,28,* An instance of this class is initialized with a {@code Callable} object when
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,29,* it is constructed. The implementation of the {@link #initialize()} method
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,30,* defined in the super class delegates to this {@code Callable} so that the
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,31,* {@code Callable} is executed in the background thread.
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,32,* </p>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,33,* <p>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,34,* The {@code java.util.concurrent.Callable} interface is a standard mechanism
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,35,* of the JDK to define tasks to be executed by another thread. The {@code
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,36,* CallableBackgroundInitializer} class allows combining this standard interface
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,37,* with the background initializer API.
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,38,* </p>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,39,* <p>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,40,* Usage of this class is very similar to the default usage pattern of the
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,41,* {@link BackgroundInitializer} class: Just create an instance and provide the
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,42,"* {@code Callable} object to be executed, then call the initializer's"
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,43,* {@link #start()} method. This causes the {@code Callable} to be executed in
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,44,* another thread. When the results of the {@code Callable} are needed the
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,45,* initializer's {@link #get()} method can be called (which may block until
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,46,* background execution is complete). The following code fragment shows a
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,47,* typical usage example:
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,49,* <pre>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,50,* // a Callable that performs a complex computation
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,51,* Callable&lt;Integer&gt; computationCallable = new MyComputationCallable();
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,52,* // setup the background initializer
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,53,* CallableBackgroundInitializer&lt;Integer&gt; initializer =
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,54,*     new CallableBackgroundInitializer(computationCallable);
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,55,* initializer.start();
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,56,* // Now do some other things. Initialization runs in a parallel thread
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,58,* // Wait for the end of initialization and access the result
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,59,* Integer result = initializer.get();
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,60,* </pre>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,62,* </p>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,64,* @version $Id$
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,65,* @param <T> the type of the object managed by this initializer class
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,67,public class CallableBackgroundInitializer<T> extends BackgroundInitializer<T> {
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,68,/** The Callable to be executed. */
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,69,private final Callable<T> callable;
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,72,* Creates a new instance of {@code CallableBackgroundInitializer} and sets
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,73,* the {@code Callable} to be executed in a background thread.
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,75,* @param call the {@code Callable} (must not be <b>null</b>)
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,76,* @throws IllegalArgumentException if the {@code Callable} is <b>null</b>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,78,public CallableBackgroundInitializer(Callable<T> call) {
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,79,checkCallable(call);
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,80,callable = call;
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,84,* Creates a new instance of {@code CallableBackgroundInitializer} and
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,85,* initializes it with the {@code Callable} to be executed in a background
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,86,* thread and the {@code ExecutorService} for managing the background
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,87,* execution.
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,89,* @param call the {@code Callable} (must not be <b>null</b>)
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,90,* @param exec an external {@code ExecutorService} to be used for task
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,91,* execution
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,92,* @throws IllegalArgumentException if the {@code Callable} is <b>null</b>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,94,"public CallableBackgroundInitializer(Callable<T> call, ExecutorService exec) {"
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,95,super(exec);
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,96,checkCallable(call);
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,97,callable = call;
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,101,* Performs initialization in a background thread. This implementation
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,102,* delegates to the {@code Callable} passed at construction time of this
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,103,* object.
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,105,* @return the result of the initialization
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,106,* @throws Exception if an error occurs
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,108,@Override
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,109,protected T initialize() throws Exception {
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,110,return callable.call();
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,114,* Tests the passed in {@code Callable} and throws an exception if it is
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,115,* undefined.
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,117,* @param call the object to check
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,118,* @throws IllegalArgumentException if the {@code Callable} is <b>null</b>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,120,private void checkCallable(Callable<T> call) {
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,121,if (call == null) {
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,122,"throw new IllegalArgumentException(""Callable must not be null!"");"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,26,mport java.text.SimpleDateFormat;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,30,mport java.util.GregorianCalendar;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,31,mport java.util.HashMap;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,34,mport java.util.Map;
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,32,import java.util.concurrent.ConcurrentHashMap;
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,33,import java.util.concurrent.ConcurrentMap;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,102,"/@GuardedBy(""this"")"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,103,rivate static String cDefaultPattern; // lazily initialised by getInstance()
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,100,private static final FormatCache<FastDateFormat> cache= new FormatCache<FastDateFormat>() {
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,101,@Override
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,102,"protected FastDateFormat createInstance(String pattern,    TimeZone timeZone, Locale locale) {"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,103,"return new FastDateFormat(pattern, timeZone, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,105,"rivate static final Map<FastDateFormat, FastDateFormat> cInstanceCache ="
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,106,"ew HashMap<FastDateFormat, FastDateFormat>(7);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,107,"rivate static final Map<Object, FastDateFormat> cDateInstanceCache = new HashMap<Object, FastDateFormat>(7);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,108,"rivate static final Map<Object, FastDateFormat> cTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,109,"rivate static final Map<Object, FastDateFormat> cDateTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,110,"rivate static final Map<Object, String> cTimeZoneDisplayCache = new HashMap<Object, String>(7);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,107,"private static ConcurrentMap<TimeZoneDisplayKey, String> cTimeZoneDisplayCache ="
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,108,"new ConcurrentHashMap<TimeZoneDisplayKey, String>(7);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,121, Whether the time zone overrides any on Calendars.
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,123,rivate final boolean mTimeZoneForced;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,129, Whether the locale overrides the default.
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,131,rivate final boolean mLocaleForced;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,149,"eturn getInstance(getDefaultPattern(), null, null);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,139,"return cache.getDateTimeInstance(SHORT, SHORT, null, null);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,162,"eturn getInstance(pattern, null, null);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,152,"return cache.getInstance(pattern, null, null);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,177,"eturn getInstance(pattern, timeZone, null);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,167,"return cache.getInstance(pattern, timeZone, null);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,191,"eturn getInstance(pattern, null, locale);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,181,"return cache.getInstance(pattern, null, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,207,"ublic static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale) {"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,208,"astDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,209,astDateFormat format = cInstanceCache.get(emptyFormat);
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,210,f (format == null) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,211,ormat = emptyFormat;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,212,ormat.init();  // convert shell format into usable one
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,213,"InstanceCache.put(format, format);  // this is OK!"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,215,eturn format;
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,197,"public static FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale) {"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,198,"return cache.getInstance(pattern, timeZone, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,230,"eturn getDateInstance(style, null, null);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,213,"return cache.getDateTimeInstance(style, null, null, null);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,245,"eturn getDateInstance(style, null, locale);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,228,"return cache.getDateTimeInstance(style, null, null, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,261,"eturn getDateInstance(style, timeZone, null);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,244,"return cache.getDateTimeInstance(style, null, timeZone, null);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,275,"ublic static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,276,bject key = Integer.valueOf(style);
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,277,f (timeZone != null) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,278,"ey = new Pair(key, timeZone);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,281,f (locale == null) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,282,ocale = Locale.getDefault();
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,285,"ey = new Pair(key, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,287,astDateFormat format = cDateInstanceCache.get(key);
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,288,f (format == null) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,289,ry {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,290,"impleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,291,tring pattern = formatter.toPattern();
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,292,"ormat = getInstance(pattern, timeZone, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,293,"DateInstanceCache.put(key, format);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,295, catch (ClassCastException ex) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,296,"hrow new IllegalArgumentException(""No date pattern for locale: "" + locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,299,eturn format;
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,259,"public static FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,260,"return cache.getDateTimeInstance(style, null, timeZone, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,314,"eturn getTimeInstance(style, null, null);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,275,"return cache.getDateTimeInstance(null, style, null, null);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,329,"eturn getTimeInstance(style, null, locale);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,290,"return cache.getDateTimeInstance(null, style, null, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,345,"eturn getTimeInstance(style, timeZone, null);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,306,"return cache.getDateTimeInstance(null, style, timeZone, null);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,360,"ublic static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale) {"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,361,bject key = Integer.valueOf(style);
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,362,f (timeZone != null) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,363,"ey = new Pair(key, timeZone);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,365,f (locale != null) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,366,"ey = new Pair(key, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,369,astDateFormat format = cTimeInstanceCache.get(key);
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,370,f (format == null) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,371,f (locale == null) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,372,ocale = Locale.getDefault();
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,375,ry {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,376,"impleDateFormat formatter = (SimpleDateFormat) DateFormat.getTimeInstance(style, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,377,tring pattern = formatter.toPattern();
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,378,"ormat = getInstance(pattern, timeZone, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,379,"TimeInstanceCache.put(key, format);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,381, catch (ClassCastException ex) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,382,"hrow new IllegalArgumentException(""No date pattern for locale: "" + locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,385,eturn format;
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,321,"public static FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale) {"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,322,"return cache.getDateTimeInstance(null, style, timeZone, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,400,ublic static FastDateFormat getDateTimeInstance(
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,401,"nt dateStyle, int timeStyle) {"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,402,"eturn getDateTimeInstance(dateStyle, timeStyle, null, null);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,337,"public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle) {"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,338,"return cache.getDateTimeInstance(dateStyle, timeStyle, null, null);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,417,ublic static FastDateFormat getDateTimeInstance(
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,418,"nt dateStyle, int timeStyle, Locale locale) {"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,419,"eturn getDateTimeInstance(dateStyle, timeStyle, null, locale);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,353,"public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, Locale locale) {"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,354,"return cache.getDateTimeInstance(dateStyle, timeStyle, null, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,435,ublic static FastDateFormat getDateTimeInstance(
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,436,"nt dateStyle, int timeStyle, TimeZone timeZone) {"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,370,"public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone) {"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,452,"ublic static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,453,ocale locale) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,455,"bject key = new Pair(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle));"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,456,f (timeZone != null) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,457,"ey = new Pair(key, timeZone);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,459,f (locale == null) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,460,ocale = Locale.getDefault();
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,462,"ey = new Pair(key, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,464,astDateFormat format = cDateTimeInstanceCache.get(key);
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,465,f (format == null) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,466,ry {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,467,"impleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,468,ocale);
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,469,tring pattern = formatter.toPattern();
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,470,"ormat = getInstance(pattern, timeZone, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,471,"DateTimeInstanceCache.put(key, format);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,473, catch (ClassCastException ex) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,474,"hrow new IllegalArgumentException(""No date time pattern for locale: "" + locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,477,eturn format;
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,386,public static FastDateFormat getDateTimeInstance(
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,387,"int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,388,"return cache.getDateTimeInstance(dateStyle, timeStyle, timeZone, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,491,"tatic synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale) {"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,492,"bject key = new TimeZoneDisplayKey(tz, daylight, style, locale);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,402,"static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale) {"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,403,"TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,497,"TimeZoneDisplayCache.put(key, value);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,408,"String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,409,if (prior != null) {
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,410,value= prior;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,503, <p>Gets the default pattern.</p>
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,505, @return the default pattern
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,507,rivate static synchronized String getDefaultPattern() {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,508,f (cDefaultPattern == null) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,509,DefaultPattern = new SimpleDateFormat().toPattern();
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,511,eturn cDefaultPattern;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,519, @param pattern  {@link java.text.SimpleDateFormat} compatible
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,520,  pattern
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,521," @param timeZone  time zone to use, <code>null</code> means use"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,522,  default for <code>Date</code> and value within for
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,523,  <code>Calendar</code>
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,524," @param locale  locale, <code>null</code> means use system"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,525,  default
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,526, @throws IllegalArgumentException if pattern is invalid or
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,527,  <code>null</code>
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,421,* @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,422,* @param timeZone  non-null time zone to use
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,423,* @param locale  non-null locale to use
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,424,"* @throws NullPointerException if pattern, timeZone, or locale is null."
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,530,uper();
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,531,f (pattern == null) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,532,"hrow new IllegalArgumentException(""The pattern must not be null"");"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,536,TimeZoneForced = (timeZone != null);
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,537,f (timeZone == null) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,538,imeZone = TimeZone.getDefault();
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,542,LocaleForced = (locale != null);
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,543,f (locale == null) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,544,ocale = Locale.getDefault();
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,431,init();
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,552,rotected void init() {
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,437,private void init() {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,665,"ule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,550,"rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,667,"ule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,552,"rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,815,"alendar c = new GregorianCalendar(mTimeZone, mLocale);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,700,"Calendar c = Calendar.getInstance(mTimeZone, mLocale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,852,alendar c = new GregorianCalendar(mTimeZone);
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,737,"Calendar c = Calendar.getInstance(mTimeZone, mLocale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,866,f (mTimeZoneForced) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,867,alendar.getTimeInMillis(); /// LANG-538
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,868,alendar = (Calendar) calendar.clone();
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,869,alendar.setTimeZone(mTimeZone);
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,883,ule[] rules = mRules;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,884,nt len = mRules.length;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,885,or (int i = 0; i < len; i++) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,886,"ules[i].appendTo(buf, calendar);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,763,for (Rule rule : mRules) {
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,764,"rule.appendTo(buf, calendar);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,921, <p>This zone is always used for <code>Date</code> formatting.
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,922," If a <code>Calendar</code> is passed in to be formatted, the"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,923, time zone on that may be used depending on
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,924, {@link #getTimeZoneOverridesCalendar()}.</p>
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,799,* <p>This zone is always used for <code>Date</code> formatting. </p>
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,933, <p>Returns <code>true</code> if the time zone of the
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,934, calendar overrides the time zone of the formatter.</p>
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,936, @return <code>true</code> if time zone of formatter
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,937,  overridden for calendars
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,939,ublic boolean getTimeZoneOverridesCalendar() {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,940,eturn mTimeZoneForced;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,979,f (
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,980,mPattern == other.mPattern || mPattern.equals(other.mPattern)) &&
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,981,mTimeZone == other.mTimeZone || mTimeZone.equals(other.mTimeZone)) &&
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,982,mLocale == other.mLocale || mLocale.equals(other.mLocale)) &&
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,983,mTimeZoneForced == other.mTimeZoneForced) &&
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,984,mLocaleForced == other.mLocaleForced)
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,986,eturn true;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,988,eturn false;
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,843,return mPattern.equals(other.mPattern)
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,844,&& mTimeZone.equals(other.mTimeZone)
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,845,&& mLocale.equals(other.mLocale);
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,998,nt total = 0;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,999,otal += mPattern.hashCode();
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1000,otal += mTimeZone.hashCode();
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1001,otal += (mTimeZoneForced ? 1 : 0);
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1002,otal += mLocale.hashCode();
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1003,otal += (mLocaleForced ? 1 : 0);
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1004,eturn total;
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,855,return mPattern.hashCode() + 13 * (mTimeZone.hashCode() + 13 * mLocale.hashCode());
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1520,rivate final boolean mTimeZoneForced;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1521,rivate final Locale mLocale;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1522,rivate final int mStyle;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1530, @param timeZoneForced if <code>true</code> the time zone is forced into standard and daylight
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1534,"imeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style) {"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1381,"TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1536,TimeZoneForced = timeZoneForced;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1537,Locale = locale;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1538,Style = style;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1540,f (timeZoneForced) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1541,"Standard = getTimeZoneDisplay(timeZone, false, style, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1542,"Daylight = getTimeZoneDisplay(timeZone, true, style, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1543, else {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1544,Standard = null;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1545,Daylight = null;
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1384,"mStandard = getTimeZoneDisplay(timeZone, false, style, locale);"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1385,"mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1553,f (mTimeZoneForced) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1554,"eturn Math.max(mStandard.length(), mDaylight.length());"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1555, else if (mStyle == TimeZone.SHORT) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1556,eturn 4;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1557, else {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1558,eturn 40;
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1392,"return Math.max(mStandard.length(), mDaylight.length());"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1566,f (mTimeZoneForced) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1567,f (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1568,uffer.append(mDaylight);
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1569, else {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1570,uffer.append(mStandard);
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1399,if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1400,buffer.append(mDaylight);
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1573,imeZone timeZone = calendar.getTimeZone();
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1574,f (timeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1575,"uffer.append(getTimeZoneDisplay(timeZone, true, mStyle, mLocale));"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1576, else {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1577,"uffer.append(getTimeZoneDisplay(timeZone, false, mStyle, mLocale));"
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1402,buffer.append(mStandard);
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1668,eturn mStyle * 31 + mLocale.hashCode();
True,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1492,return (mStyle * 31 + mLocale.hashCode() ) * 31 + mTimeZone.hashCode();
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1692, <p>Helper class for creating compound objects.</p>
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1694, <p>One use for this class is to create a hashtable key
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1695, out of multiple objects.</p>
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1697,rivate static class Pair {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1698,rivate final Object mObj1;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1699,rivate final Object mObj2;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1702, Constructs an instance of <code>Pair</code> to hold the specified objects.
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1703, @param obj1 one object in the pair
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1704, @param obj2 second object in the pair
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1706,"ublic Pair(Object obj1, Object obj2) {"
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1707,Obj1 = obj1;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1708,Obj2 = obj2;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1712, {@inheritDoc}
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1714,Override
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1715,ublic boolean equals(Object obj) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1716,f (this == obj) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1717,eturn true;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1720,f (!(obj instanceof Pair)) {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1721,eturn false;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1724,air key = (Pair)obj;
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1726,eturn
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1727,mObj1 == null ?
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1728,ey.mObj1 == null : mObj1.equals(key.mObj1)) &&
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1729,mObj2 == null ?
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1730,ey.mObj2 == null : mObj2.equals(key.mObj2));
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1734, {@inheritDoc}
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1736,Override
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1737,ublic int hashCode() {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1738,eturn
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1739,mObj1 == null ? 0 : mObj1.hashCode()) +
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1740,mObj2 == null ? 0 : mObj2.hashCode());
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1744, {@inheritDoc}
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1746,Override
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1747,ublic String toString() {
False,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,src/main/java/org/apache/commons/lang3/time/FastDateFormat.java,1748,"eturn ""["" + mObj1 + ':' + mObj2 + ']';"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,17,package org.apache.commons.lang3.time;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,19,import java.text.DateFormat;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,20,import java.text.Format;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,21,import java.text.SimpleDateFormat;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,22,import java.util.Arrays;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,23,import java.util.Locale;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,24,import java.util.TimeZone;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,25,import java.util.concurrent.ConcurrentHashMap;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,26,import java.util.concurrent.ConcurrentMap;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,29,* <p>FormatCache is a cache and factory for {@link Format}s.</p>
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,31,* @since 3.0
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,32,* @version $Id: FormatCache 892161 2009-12-18 07:21:10Z  $
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,34,abstract class FormatCache<F extends Format> {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,36,* No date or no time.  Used in same parameters as DateFormat.SHORT or DateFormat.LONG
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,38,static final int NONE= -1;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,40,"private final ConcurrentMap<MultipartKey, F> cInstanceCache"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,41,"= new ConcurrentHashMap<MultipartKey, F>(7);"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,43,"private final ConcurrentMap<MultipartKey, String> cDateTimeInstanceCache"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,44,"= new ConcurrentHashMap<MultipartKey, String>(7);"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,47,* <p>Gets a formatter instance using the default pattern in the
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,48,* default timezone and locale.</p>
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,50,* @return a date/time formatter
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,52,public F getInstance() {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,53,"return getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, TimeZone.getDefault(), Locale.getDefault());"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,57,"* <p>Gets a formatter instance using the specified pattern, time zone"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,58,* and locale.</p>
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,60,* @param pattern  {@link java.text.SimpleDateFormat} compatible
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,61,*  pattern
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,62,* @param timeZone  the non-null time zone
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,63,* @param locale  the non-null locale
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,64,* @return a pattern based date/time formatter
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,65,* @throws IllegalArgumentException if pattern is invalid
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,66,*  or <code>null</code>
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,68,"public F getInstance(String pattern, TimeZone timeZone, Locale locale) {"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,69,if (pattern == null) {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,70,"throw new NullPointerException(""pattern must not be null"");"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,72,if (timeZone == null) {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,73,timeZone = TimeZone.getDefault();
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,75,if (locale == null) {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,76,locale = Locale.getDefault();
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,78,"MultipartKey key = new MultipartKey(pattern, timeZone, locale);"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,79,F format = cInstanceCache.get(key);
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,80,if (format == null) {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,81,"format = createInstance(pattern, timeZone, locale);"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,82,"F previousValue= cInstanceCache.putIfAbsent(key, format);"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,83,if (previousValue != null) {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,84,// another thread snuck in and did the same work
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,85,// we should return the instance that is in ConcurrentMap
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,86,format= previousValue;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,89,return format;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,93,"* <p>Create a format instance using the specified pattern, time zone"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,94,* and locale.</p>
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,96,"* @param pattern  {@link java.text.SimpleDateFormat} compatible pattern, this will not be null."
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,97,"* @param timeZone  time zone, this will not be null."
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,98,"* @param locale  locale, this will not be null."
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,99,* @return a pattern based date/time formatter
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,100,* @throws IllegalArgumentException if pattern is invalid
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,101,*  or <code>null</code>
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,103,"abstract protected F createInstance(String pattern, TimeZone timeZone, Locale locale);"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,106,"* <p>Gets a date/time formatter instance using the specified style,"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,107,* time zone and locale.</p>
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,109,"* @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,110,"* @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,111,"* @param timeZone  optional time zone, overrides time zone of"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,112,*  formatted date
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,113,"* @param locale  optional locale, overrides system locale"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,114,* @return a localized standard date/time formatter
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,115,* @throws IllegalArgumentException if the Locale has no date/time
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,116,*  pattern defined
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,118,"public F getDateTimeInstance(Integer dateStyle, Integer timeStyle, TimeZone timeZone, Locale locale) {"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,119,if (locale == null) {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,120,locale = Locale.getDefault();
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,122,"MultipartKey key = new MultipartKey(dateStyle, timeStyle, locale);"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,124,String pattern = cDateTimeInstanceCache.get(key);
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,125,if (pattern == null) {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,126,try {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,127,DateFormat formatter;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,128,if (dateStyle == null) {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,129,"formatter = DateFormat.getTimeInstance(timeStyle, locale);"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,131,else if (timeStyle == null) {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,132,"formatter = DateFormat.getDateInstance(dateStyle, locale);"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,134,else {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,135,"formatter = DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,137,pattern = ((SimpleDateFormat)formatter).toPattern();
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,138,"String previous = cDateTimeInstanceCache.putIfAbsent(key, pattern);"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,139,if (previous != null) {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,140,// even though it doesn't matter if another thread put the pattern
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,141,// it's still good practice to return the String instance that is
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,142,// actually in the ConcurrentMap
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,143,pattern= previous;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,145,} catch (ClassCastException ex) {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,146,"throw new IllegalArgumentException(""No date time pattern for locale: "" + locale);"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,150,"return getInstance(pattern, timeZone, locale);"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,155,* <p>Helper class to hold multi-part Map keys</p>
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,157,private static class MultipartKey {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,158,private final Object[] keys;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,159,private int hashCode;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,162,* Constructs an instance of <code>MultipartKey</code> to hold the specified objects.
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,163,* @param keys the set of objects that make up the key.  Each key may be null.
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,165,public MultipartKey(Object... keys) {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,166,this.keys = keys;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,170,* {@inheritDoc}
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,172,@Override
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,173,public boolean equals(Object obj) {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,174,if (this == obj) {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,175,return true;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,177,if ( obj instanceof MultipartKey == false ) {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,178,return false;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,180,"return Arrays.equals(keys, ((MultipartKey)obj).keys);"
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,184,* {@inheritDoc}
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,186,@Override
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,187,public int hashCode() {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,188,if(hashCode==0) {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,189,int rc= 0;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,190,for(Object key : keys) {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,191,if(key!=null) {
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,192,rc= rc*7 + key.hashCode();
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,195,hashCode= rc;
True,src/main/java/org/apache/commons/lang3/time/FormatCache.java,src/main/java/org/apache/commons/lang3/time/FormatCache.java,197,return hashCode;
False,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,59,"ssertEquals(false, format1.getTimeZoneOverridesCalendar());"
False,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,60,"ssertEquals(false, format2.getTimeZoneOverridesCalendar());"
False,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,80,"ssertEquals(true, format1.getTimeZoneOverridesCalendar());"
False,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,82,"ssertEquals(false, format2.getTimeZoneOverridesCalendar());"
False,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,167,"ssertEquals(true, format1.getTimeZoneOverridesCalendar());"
False,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,168,"ssertEquals(false, format2.getTimeZoneOverridesCalendar());"
False,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,169,"ssertEquals(true, format3.getTimeZoneOverridesCalendar());"
False,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,186,astDateFormat fdf = null;
False,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,187,impleDateFormat sdf = null;
False,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,196,"df = FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss"");"
False,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,197,"df = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss"");"
True,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,187,"FastDateFormat fdf = FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss"");"
True,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,188,"SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss"");"
False,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,211,"df = FastDateFormat.getInstance(""Z"");"
False,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,221,"df = FastDateFormat.getInstance(""ZZ"");"
False,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,231,"ssertEquals(sdf.format(date2), fdf.format(date2));"
True,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,220,"assertEquals(sdf.format(date2), fdf.format(date2));"
False,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,286,/ TODO: Fix this problem
False,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,311,"inal String dateTime = ""2009-10-16T16:42:16.000Z"";"
False,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,320,"ssertEquals(""dateTime"", dateTime, format.format(cal));"
True,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,305,"assertEquals(""dateTime"", ""2009-10-16T16:42:16.000Z"", format.format(cal.getTime()));"
True,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,306,"assertEquals(""dateTime"", ""2009-10-16T08:42:16.000Z"", format.format(cal));"

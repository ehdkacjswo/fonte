is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,2,* Copyright 2005-2006 The Apache Software Foundation.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,14,* limitations under the License.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,16,package org.apache.commons.lang.text;
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,18,import java.util.Map;
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,21,* Lookup a String key to a String value.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,22,* <p>
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,23,* This class represents the simplest form of a string to string map.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,24,* It has a benefit over a map in that it can create the result on
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,25,* demand based on the key.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,26,* <p>
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,27,* This class comes complete with various factory methods.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,28,"* If these do not suffice, you can subclass and implement your own matcher."
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,29,* <p>
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,30,"* For example, it would be possible to implement a lookup that used the"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,31,"* key as a primary key, and looked up the value on demand from the database"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,33,* @author Stephen Colebourne
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,34,* @since 2.2
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,35,* @version $Id: $
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,37,public abstract class StrLookup {
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,40,* Lookup that always returns null.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,42,private static final StrLookup NONE_LOOKUP;
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,44,* Lookup that uses System properties.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,46,private static final StrLookup SYSTEM_PROPERTIES_LOOKUP;
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,47,static {
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,48,NONE_LOOKUP = new MapStrLookup(null);
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,49,StrLookup lookup = null;
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,50,try {
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,51,lookup = new MapStrLookup(System.getProperties());
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,52,} catch (SecurityException ex) {
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,53,lookup = NONE_LOOKUP;
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,55,SYSTEM_PROPERTIES_LOOKUP = lookup;
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,60,* Returns a lookup which always returns null.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,62,"* @return a lookup that always returns null, not null"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,64,public static StrLookup noneLookup() {
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,65,return NONE_LOOKUP;
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,69,* Returns a lookup which uses {@link System#getProperties() System properties}
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,70,* to lookup the key to value.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,71,* <p>
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,72,"* If a security manager blocked access to system properties, then null will"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,73,* be returned from every lookup.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,74,* <p>
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,75,"* If a null key is used, this lookup will throw a NullPointerException."
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,77,"* @return a lookup using system properties, not null"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,79,public static StrLookup systemPropertiesLookup() {
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,80,return SYSTEM_PROPERTIES_LOOKUP;
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,84,* Returns a lookup which looks up values using a map.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,85,* <p>
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,86,"* If the map is null, then null will be returned from every lookup."
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,87,* The map result object is converted to a string using toString().
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,89,"* @param map  the map of keys to values, may be null"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,90,"* @return a lookup using the map, not null"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,92,public static StrLookup mapLookup(Map map) {
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,93,return new MapStrLookup(map);
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,98,* Constructor.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,100,protected StrLookup() {
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,101,super();
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,105,* Looks up a String key to a String value.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,106,* <p>
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,107,* The internal implementation may use any mechanism to return the value.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,108,"* The simplest implementation is to use a Map. However, virtually any"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,109,* implementation is possible.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,110,* <p>
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,111,"* For example, it would be possible to implement a lookup that used the"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,112,"* key as a primary key, and looked up the value on demand from the database"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,113,"* Or, a numeric based implementation could be created that treats the key"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,114,"* as an integer, increments the value and return the result as a string -"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,115,"* converting 1 to 2, 15 to 16 etc."
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,117,"* @param key  the key to be looked up, may be null"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,118,"* @return the matching value, null if no match"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,120,public abstract String lookup(String key);
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,124,* Lookup imnplementation that uses a Map.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,126,static class MapStrLookup extends StrLookup {
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,128,/** Map keys are variable names and value. */
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,129,private final Map map;
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,132,* Creates a new instance backed by a Map.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,134,"* @param map  the map of keys to values, may be null"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,136,MapStrLookup(Map map) {
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,137,this.map = map;
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,141,* Looks up a String key to a String value using the map.
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,142,* <p>
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,143,"* If the map is null, then null is returned."
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,144,* The map result object is converted to a string using toString().
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,146,"* @param key  the key to be looked up, may be null"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,147,"* @return the matching value, null if no match"
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,149,public String lookup(String key) {
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,150,if (map == null) {
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,151,return null;
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,153,Object obj = map.get(key);
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,154,if (obj == null) {
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,155,return null;
True,src/java/org/apache/commons/lang/text/StrLookup.java,src/java/org/apache/commons/lang/text/StrLookup.java,157,return obj.toString();
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,122,rivate VariableResolver variableResolver;
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,121,private StrLookup variableResolver;
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,161,eturn new StrSubstitutor(System.getProperties()).replace(source);
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,160,return new StrSubstitutor(StrLookup.systemPropertiesLookup()).replace(source);
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,170,"his((VariableResolver) null, DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);"
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,169,"this((StrLookup) null, DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);"
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,180,"his(new MapVariableResolver(valueMap), DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);"
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,179,"this(StrLookup.mapLookup(valueMap), DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);"
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,192,"his(valueMap, prefix, suffix, DEFAULT_ESCAPE);"
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,191,"this(StrLookup.mapLookup(valueMap), prefix, suffix, DEFAULT_ESCAPE);"
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,205,"his(new MapVariableResolver(valueMap), prefix, suffix, escape);"
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,204,"this(StrLookup.mapLookup(valueMap), prefix, suffix, escape);"
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,208,* Creates a new instance and initializes it.
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,210,"* @param variableResolver  the variable resolver, may be null"
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,212,public StrSubstitutor(StrLookup variableResolver) {
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,213,"this(variableResolver, DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);"
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,217,"ublic StrSubstitutor(VariableResolver variableResolver, String prefix, String suffix, char escape) {"
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,225,"public StrSubstitutor(StrLookup variableResolver, String prefix, String suffix, char escape) {"
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,228," @param prefix  the prefix for variables, not null"
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,229," @param suffix  the suffix for variables, not null"
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,236,"* @param prefixMatcher  the prefix for variables, not null"
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,237,"* @param suffixMatcher  the suffix for variables, not null"
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,233,"ublic StrSubstitutor(VariableResolver variableResolver, StrMatcher prefix, StrMatcher suffix, char escape) {"
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,241,public StrSubstitutor(
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,242,"StrLookup variableResolver, StrMatcher prefixMatcher, StrMatcher suffixMatcher, char escape) {"
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,235,his.setVariablePrefixMatcher(prefix);
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,236,his.setVariableSuffixMatcher(suffix);
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,244,this.setVariablePrefixMatcher(prefixMatcher);
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,245,this.setVariableSuffixMatcher(suffixMatcher);
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,311,"eturn source.substring(offset, length);"
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,320,"return source.substring(offset, offset + length);"
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,513,ariableResolver lookup = getVariableResolver();
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,514,f (lookup == null) {
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,522,StrLookup resolver = getVariableResolver();
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,523,if (resolver == null) {
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,517,eturn lookup.resolveVariable(variableName);
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,526,return resolver.lookup(variableName);
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,675, Gets the VariableResolver
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,684,* Gets the VariableResolver that is used to lookup variables.
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,679,ublic VariableResolver getVariableResolver() {
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,688,public StrLookup getVariableResolver() {
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,684, Sets the VariableResolver
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,693,* Sets the VariableResolver that is used to lookup variables.
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,688,ublic void setVariableResolver(VariableResolver variableResolver) {
True,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,697,public void setVariableResolver(StrLookup variableResolver) {
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,694, Looks up a string value by name.
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,695, This represents the simplest form of a map.
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,697,ublic static interface VariableResolver {
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,699, Resolves the variable name to a value.
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,701," @param varName  the name to be looked up, may be null"
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,702," @return the matching value, null if no match"
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,704,tring resolveVariable(String varName);
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,709, Looks up a string value by name using a {@link Map}.
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,711,tatic class MapVariableResolver implements VariableResolver {
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,713, Map keys are variable names and value
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,715,ap map;
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,718, Creates a new resolver backed by a Map.
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,720, @param map  the variable names and values
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,722,apVariableResolver(Map map) {
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,723,his.map = map;
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,727, Resolves the given variable name with the backing Map.
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,729, @param varName  a variable name
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,730, @return a value or null if the variable name is not in Map
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,732,ublic String resolveVariable(String varName) {
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,733,f (map == null) {
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,734,eturn null;
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,736,bject obj = map.get(varName);
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,737,f (obj == null) {
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,738,eturn null;
False,src/java/org/apache/commons/lang/text/StrSubstitutor.java,src/java/org/apache/commons/lang/text/StrSubstitutor.java,740,eturn obj.toString();
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,2,* Copyright 2005-2006 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,17,package org.apache.commons.lang.text;
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,19,import java.util.HashMap;
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,22,import junit.framework.Test;
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,23,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,24,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,25,import junit.textui.TestRunner;
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,28,* Test class for StrLookup.
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,30,* @version $Id: StrSubstitutorTest.java 231316 2005-08-10 20:36:26Z ggregory $
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,32,public class StrLookupTest extends TestCase {
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,35,* Main method.
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,37,"* @param args  command line arguments, ignored"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,39,public static void main(String[] args) {
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,40,TestRunner.run(suite());
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,44,* Return a new test suite containing this test case.
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,46,* @return a new test suite containing this test case
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,48,public static Test suite() {
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,49,TestSuite suite = new TestSuite(StrLookupTest.class);
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,50,"suite.setName(""StrLookup Tests"");"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,51,return suite;
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,54,protected void setUp() throws Exception {
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,55,super.setUp();
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,58,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,59,super.tearDown();
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,63,public void testNoneLookup() {
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,64,"assertEquals(null, StrLookup.noneLookup().lookup(null));"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,65,"assertEquals(null, StrLookup.noneLookup().lookup(""""));"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,66,"assertEquals(null, StrLookup.noneLookup().lookup(""any""));"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,69,public void testSystemProperiesLookup() {
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,70,"assertEquals(System.getProperty(""os.name""), StrLookup.systemPropertiesLookup().lookup(""os.name""));"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,71,"assertEquals(null, StrLookup.systemPropertiesLookup().lookup(""""));"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,72,"assertEquals(null, StrLookup.systemPropertiesLookup().lookup(""other""));"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,73,try {
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,74,StrLookup.systemPropertiesLookup().lookup(null);
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,75,fail();
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,76,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,77,// expected
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,81,public void testMapLookup() {
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,82,Map map = new HashMap();
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,83,"map.put(""key"", ""value"");"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,84,"map.put(""number"", new Integer(2));"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,85,"assertEquals(""value"", StrLookup.mapLookup(map).lookup(""key""));"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,86,"assertEquals(""2"", StrLookup.mapLookup(map).lookup(""number""));"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,87,"assertEquals(null, StrLookup.mapLookup(map).lookup(null));"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,88,"assertEquals(null, StrLookup.mapLookup(map).lookup(""""));"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,89,"assertEquals(null, StrLookup.mapLookup(map).lookup(""other""));"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,92,public void testMapLookup_nullMap() {
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,93,Map map = null;
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,94,"assertEquals(null, StrLookup.mapLookup(map).lookup(null));"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,95,"assertEquals(null, StrLookup.mapLookup(map).lookup(""""));"
True,src/test/org/apache/commons/lang/text/StrLookupTest.java,src/test/org/apache/commons/lang/text/StrLookupTest.java,96,"assertEquals(null, StrLookup.mapLookup(map).lookup(""any""));"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,71,/     * Tests escaping variable references.
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,73,/    public void testEscape() {
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,74,"/        assertEquals(""${"", this.getFormat().replace(""$${""));"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,75,"/        assertEquals(""${animal}"", this.getFormat().replace(""$${animal}""));"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,76,"/        this.getValueMap().put(""var_name"", ""x"");"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,77,"/        assertEquals(""Many $$$$${target} $s"", this.getFormat().replace(""Many $$$$$${target} $s""));"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,78,"/        assertEquals(""Variable ${x} must be used!"", this.getFormat().replace(""Variable $${${var_name}} must be used!""));"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,82,/     * Tests creating new <code>VariableFormat</code> objects.
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,84,/    public void testInitialize() {
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,85,/        assertNotNull(this.getFormat().getVariableResolver());
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,86,"/        assertEquals(StrSubstitutor.DEFAULT_PREFIX, this.getFormat().getVariablePrefixMatcher());"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,87,"/        assertEquals(StrSubstitutor.DEFAULT_SUFFIX, this.getFormat().getVariableSuffixMatcher());"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,88,"/        assertEquals(StrSubstitutor.DEFAULT_ESCAPE, this.getFormat().getEscapeChar());"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,90,"/        format = new StrSubstitutor(values, ""<<"", "">>"", '\\');"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,91,"/        assertEquals(""<<"", this.getFormat().getVariablePrefixMatcher());"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,92,"/        assertEquals("">>"", this.getFormat().getVariableSuffixMatcher());"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,93,"/        assertEquals('\\', this.getFormat().getEscapeChar());"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,95,/        // new StrSubstitutor(null) should be OK IMO
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,96,/        // Gary Gregory - July 14 2005
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,97,/        // try {
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,98,/        // format = new StrSubstitutor(null);
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,99,"/        // fail(""Could create format object with null map!"");"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,100,/        // } catch (IllegalArgumentException iex) {
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,101,/        // // ok
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,104,/        try {
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,105,"/            format = new StrSubstitutor(values, ""${"", null);"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,106,"/            fail(""Could create format object with undefined suffix!"");"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,107,/        } catch (IllegalArgumentException iex) {
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,108,/            // ok
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,111,/        try {
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,112,"/            format = new StrSubstitutor(values, null, ""]"");"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,113,"/            fail(""Could create format object with undefined prefix!"");"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,114,/        } catch (IllegalArgumentException iex) {
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,115,/            // ok
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,120,/     * Tests chaning variable prefix and suffix and the escaping character.
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,122,/    public void testNonDefaultTokens() {
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,123,"/        format = new StrSubstitutor(values, ""<<"", "">>"", '\\');"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,124,"/        assertEquals(""The quick brown fox jumps over the lazy dog."", format"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,125,"/                .replace(""The <<animal>> jumps over the <<target>>.""));"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,126,"/        assertEquals(""The quick brown fox jumps over the <<target>>."", format"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,127,"/                .replace(""The <<animal>> jumps over the \\<<target>>.""));"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,131,/     * Tests invoking the static convenience methods.
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,133,/    public void testNonInstanceMethods() {
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,134,"/        assertEquals(""The quick brown fox jumps over the lazy dog."","
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,135,"/                StrSubstitutor.replace(REPLACE_TEMPLATE, values));"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,136,"/        values.put(KEY_ANIMAL, ""cow"");"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,137,"/        values.put(KEY_TARGET, ""moon"");"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,138,"/        assertEquals(""The cow jumps over the moon."","
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,139,"/                StrSubstitutor.replace(""The &animal; jumps over the &target;."", values, ""&"", "";""));"
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,142,/    public void testNoResolver() throws Exception {
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,143,/        this.testNoResolver(new StrSubstitutor());
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,144,/        this.testNoResolver(new StrSubstitutor(null));
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,147,/    void testNoResolver(StrSubstitutor formatter) throws Exception {
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,148,/        formatter.setVariableResolver(null);
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,149,/        this.validateNoReplace(formatter);
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,152,/    public void testNullMap() throws Exception {
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,153,/        StrSubstitutor formatter = new StrSubstitutor(null);
False,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,154,/        validateNoReplace(formatter);
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,268,* Tests simple key replace.
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,270,public void testReplacePartialString_noReplace() {
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,271,StrSubstitutor sub = new StrSubstitutor();
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,272,"assertEquals(""${animal} jumps"", sub.replace(""The ${animal} jumps over the ${target}."", 4, 15));"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,298,* Tests constructor.
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,300,public void testConstructorNoArgs() {
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,301,StrSubstitutor sub = new StrSubstitutor();
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,302,"assertEquals(""Hi ${name}"", sub.replace(""Hi ${name}""));"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,306,* Tests constructor.
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,308,public void testConstructorMapPrefixSuffix() {
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,309,Map map = new HashMap();
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,310,"map.put(""name"", ""commons"");"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,311,"StrSubstitutor sub = new StrSubstitutor(map, ""<"", "">"");"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,312,"assertEquals(""Hi < commons"", sub.replace(""Hi $< <name>""));"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,316,* Tests constructor.
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,318,public void testConstructorMapFull() {
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,319,Map map = new HashMap();
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,320,"map.put(""name"", ""commons"");"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,321,"StrSubstitutor sub = new StrSubstitutor(map, ""<"", "">"", '!');"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,322,"assertEquals(""Hi < commons"", sub.replace(""Hi !< <name>""));"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,327,* Tests get set.
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,329,public void testGetSetEscape() {
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,330,StrSubstitutor sub = new StrSubstitutor();
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,331,"assertEquals('$', sub.getEscapeChar());"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,332,sub.setEscapeChar('<');
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,333,"assertEquals('<', sub.getEscapeChar());"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,337,* Tests get set.
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,339,public void testGetSetPrefix() {
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,340,StrSubstitutor sub = new StrSubstitutor();
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,341,"assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,342,sub.setVariablePrefix('<');
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,343,"assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.CharMatcher);"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,345,"sub.setVariablePrefix(""<<"");"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,346,"assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,347,try {
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,348,sub.setVariablePrefix((String) null);
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,349,fail();
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,350,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,351,// expected
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,353,"assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,355,StrMatcher matcher = StrMatcher.commaMatcher();
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,356,sub.setVariablePrefixMatcher(matcher);
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,357,"assertSame(matcher, sub.getVariablePrefixMatcher());"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,358,try {
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,359,sub.setVariablePrefixMatcher((StrMatcher) null);
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,360,fail();
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,361,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,362,// expected
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,364,"assertSame(matcher, sub.getVariablePrefixMatcher());"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,368,* Tests get set.
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,370,public void testGetSetSuffix() {
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,371,StrSubstitutor sub = new StrSubstitutor();
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,372,"assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,373,sub.setVariableSuffix('<');
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,374,"assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher);"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,376,"sub.setVariableSuffix(""<<"");"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,377,"assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,378,try {
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,379,sub.setVariableSuffix((String) null);
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,380,fail();
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,381,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,382,// expected
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,384,"assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,386,StrMatcher matcher = StrMatcher.commaMatcher();
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,387,sub.setVariableSuffixMatcher(matcher);
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,388,"assertSame(matcher, sub.getVariableSuffixMatcher());"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,389,try {
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,390,sub.setVariableSuffixMatcher((StrMatcher) null);
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,391,fail();
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,392,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,393,// expected
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,395,"assertSame(matcher, sub.getVariableSuffixMatcher());"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,467,"assertEquals(null, sub.replace((String) null, 0, 100));"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,469,"assertEquals(null, sub.replace((char[]) null, 0, 100));"
True,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,src/test/org/apache/commons/lang/text/StrSubstitutorTest.java,472,"assertEquals(false, sub.replace((StrBuilder) null, 0, 100));"
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,54,suite.addTest(StrLookupTest.suite());
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,56,suite.addTest(StrSubstitutorTest.suite());

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,250,// Generic array
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,253,* Create a type-safe generic array.
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,255,* <p>Arrays are covariant i.e. they cannot be created from a generic type:</p>
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,257,* <pre>
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,258,public static &lt;T&gt; T[] createAnArray(int size)
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,260,return T[size]; // compiler error here
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,262,public static &lt;T&gt; T[] createAnArray(int size)
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,264,return (T[])Object[size]; // ClassCastException at runtime
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,266,* </pre>
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,268,"* <p>Therefore new arrays of generic types can be created with this method, e.g. an arrays"
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,269,* of Strings:</p>
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,271,* <pre>
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,272,"String[] array = ArrayUtils.toArray(""1"", ""2"");"
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,273,String[] emptyArray = ArrayUtils.&lt;String&gt;toArray();
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,274,* </pre>
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,276,"* The method is typically used in scenarios, where the caller itself uses generic types"
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,277,* that have to be combined into an array.
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,279,"* Note, this method makes only sense to provide arguments of the same type so that the"
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,280,* compiler can deduce the type of the array itself. While it is possible to select the
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,281,* type explicitly like in <code>Number[] array = ArrayUtils.<Number>toArray(new
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,282,"* Integer(42), new Double(Math.PI))</code>, there is no real advantage to <code>new"
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,283,"* Number[] {new Integer(42), new Double(Math.PI)}</code> anymore."
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,285,* @param  <T>   the array's element type
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,286,* @param  items the items of the array
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,287,* @return the array
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,288,* @since  3.0
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,290,public static <T> T[] toArray(final T... items)
True,src/java/org/apache/commons/lang3/ArrayUtils.java,src/java/org/apache/commons/lang3/ArrayUtils.java,292,return items;
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,137,* Tests generic array creation with parameters of same type.
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,139,public void testArrayCreation()
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,141,"final String[] array = ArrayUtils.toArray(""foo"", ""bar"");"
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,142,"assertEquals(2, array.length);"
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,143,"assertEquals(""foo"", array[0]);"
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,144,"assertEquals(""bar"", array[1]);"
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,148,* Tests generic array creation with general return type.
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,150,public void testArrayCreationWithGeneralReturnType()
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,152,"final Object obj = ArrayUtils.toArray(""foo"", ""bar"");"
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,153,assertTrue(obj instanceof String[]);
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,157,* Tests generic array creation with parameters of common base type.
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,159,public void testArrayCreationWithDifferentTypes()
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,161,"final Number[] array = ArrayUtils.<Number>toArray(Integer.valueOf(42), Double.valueOf(Math.PI));"
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,162,"assertEquals(2, array.length);"
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,163,"assertEquals(Integer.valueOf(42), array[0]);"
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,164,"assertEquals(Double.valueOf(Math.PI), array[1]);"
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,168,* Tests generic array creation with generic type.
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,170,public void testIndirectArrayCreation()
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,172,"final String[] array = toArrayPropagatingType(""foo"", ""bar"");"
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,173,"assertEquals(2, array.length);"
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,174,"assertEquals(""foo"", array[0]);"
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,175,"assertEquals(""bar"", array[1]);"
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,179,* Tests generic empty array creation with generic type.
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,181,public void testEmptyArrayCreation()
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,183,final String[] array = ArrayUtils.<String>toArray();
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,184,"assertEquals(0, array.length);"
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,188,* Tests indirect generic empty array creation with generic type.
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,190,public void testIndirectEmptyArrayCreation()
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,192,final String[] array = ArrayUtilsTest.<String>toArrayPropagatingType();
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,193,"assertEquals(0, array.length);"
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,196,private static <T> T[] toArrayPropagatingType(final T... items)
True,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/org/apache/commons/lang3/ArrayUtilsTest.java,198,return ArrayUtils.toArray(items);

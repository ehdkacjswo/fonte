is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,23, Translate XML numeric entities of the form &#[xX]?\d+; to
True,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,23,* Translate XML numeric entities of the form &#[xX]?\d+;? to
True,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,26,* Note that the semi-colon is optional.
False,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,36,f(input.charAt(index) == '&' && index < (input.length() - 1) && input.charAt(index + 1) == '#') {
True,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,38,int seqEnd = input.length();
True,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,39,// Uses -2 to ensure there is something after the &#
True,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,40,if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {
True,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,49,// Check there's more than just an x after the &#
True,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,50,if(start == seqEnd) {
True,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,51,return 0;
False,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,47,hile(input.charAt(end) != ';') {
True,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,56,// Note that this supports character codes without a ; on the end
True,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,57,while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
True,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,58,(input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
True,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,59,(input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )
True,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,72,"System.err.println(""FAIL: "" + input.subSequence(start, end) + ""["" + start +""][""+ end +""]"");"
False,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,69,eturn 2 + (end - start) + (isHex ? 1 : 0) + 1;
True,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,84,boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');
True,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java,86,return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);
False,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,39,"tring input = ""Test &"";"
False,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,40,tring expected = input;
True,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,40,"assertEquals(""Failed to ignore when last character is &"", ""Test &"", neu.translate(""Test &""));"
True,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,41,"assertEquals(""Failed to ignore when last character is &"", ""Test &#"", neu.translate(""Test &#""));"
True,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,42,"assertEquals(""Failed to ignore when last character is &"", ""Test &#x"", neu.translate(""Test &#x""));"
True,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,43,"assertEquals(""Failed to ignore when last character is &"", ""Test &#X"", neu.translate(""Test &#X""));"
True,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,46,public void testUnfinishedEntity() {
True,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,47,NumericEntityUnescaper neu = new NumericEntityUnescaper();
True,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,48,"String input = ""Test &#x30 not test"";"
True,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,49,"String expected = ""Test \u0030 not test"";"
False,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,43,"ssertEquals(""Failed to ignore when last character is &"", expected, result);"
True,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,52,"assertEquals(""Failed to support unfinished entities (i.e. missing semi-colon"", expected, result);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,52,@Test
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,53,public void testTwoCallsCancel() {
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,54,ReverseComparator rc = new ReverseComparator(new ReverseComparator());
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,56,// back to front tests
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,57,"assertTrue(""Reversal wasn't cancelled out"", rc.compare( 1, 2 ) < 0 );"
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,58,"assertTrue(""Reversal wasn't cancelled out"", rc.compare( 2, 1 ) > 0 );"
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,59,"assertTrue(""Reversal wasn't cancelled out"", rc.compare( ""aardvark"", ""baa"" ) < 0 );"
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,60,"assertTrue(""Reversal wasn't cancelled out"", rc.compare( ""baa"", ""aardvark"" ) > 0 );"
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,63,@Test
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,64,public void testEquality() {
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,65,ReverseComparator rc1 = new ReverseComparator();
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,66,ReverseComparator rc2 = new ReverseComparator(rc1);
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,67,ReverseComparator rc3 = new ReverseComparator(rc1);
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,69,// test same instance
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,70,"assertTrue(""Same instance wasn't equal"", rc1.equals(rc1));"
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,71,"assertEquals(""Equal instance has different hash code"", rc1.hashCode(), rc1.hashCode());"
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,73,// test null not equal
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,74,"assertFalse(""Null was equal"", rc1.equals(null));"
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,76,// test diff subcomparator not equal
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,77,"assertFalse(""Was equal despite different nested comparators"", rc1.equals(rc2));"
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,79,// test same subcomparator equal
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,80,"assertTrue(""Wasn't equal despite same nested comparator"", rc2.equals(rc3));"
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,81,"assertEquals(""Same subcomparator had different hash code"", rc2.hashCode(), rc3.hashCode());"
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,83,// test different type not equal
True,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java,84,"assertFalse(""Was equal despite not being same class"", rc1.equals(this));"

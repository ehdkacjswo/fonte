is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,40,"1. split(), suspend(), or stop() cannot be invoked twice."
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,41,2. unsplit() may only be called if the watch has been split()
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,42,3. resume() may only be called if the watch has been suspend()
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,43,4. start() cannot be called twice.
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,43," @version $Id: StopWatch.java,v 1.8 2004/02/18 22:56:42 ggregory Exp $"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,49,"* @version $Id: StopWatch.java,v 1.9 2004/07/25 07:31:36 bayard Exp $"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,53,// running states
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,54,private static final int STATE_UNSTARTED = 0;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,55,private static final int STATE_RUNNING   = 1;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,56,private static final int STATE_STOPPED   = 2;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,57,private static final int STATE_SUSPENDED = 3;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,59,// split state
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,60,private static final int STATE_UNSPLIT = 10;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,61,private static final int STATE_SPLIT   = 11;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,64,*  The current running state of the StopWatch.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,66,private int runningState = STATE_UNSTARTED;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,69,* Whether the stopwatch has a split time recorded.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,71,private int splitState   = STATE_UNSPLIT;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,93,* @throws IllegalStateException if the StopWatch is already running.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,96,if(this.runningState == STATE_STOPPED) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,97,"throw new IllegalStateException(""Stopwatch must be reset before being restarted. "");"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,99,if(this.runningState != STATE_UNSTARTED) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,100,"throw new IllegalStateException(""Stopwatch already started. "");"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,104,this.runningState = STATE_RUNNING;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,112,* @throws IllegalStateException if the StopWatch is not running.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,115,if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,116,"throw new IllegalStateException(""Stopwatch is not running. "");"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,119,this.runningState = STATE_STOPPED;
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,82, <p>Reset the stopwatch.</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,123,* <p>Resets the stopwatch. Stops it if need be. </p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,128,this.runningState = STATE_UNSTARTED;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,129,this.splitState   = STATE_UNSPLIT;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,141,* @throws IllegalStateException if the StopWatch is not running.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,144,if(this.runningState != STATE_RUNNING) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,145,"throw new IllegalStateException(""Stopwatch is not running. "");"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,148,this.splitState = STATE_SPLIT;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,157,* @throws IllegalStateException if the StopWatch has not been split.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,160,if(this.splitState != STATE_SPLIT) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,161,"throw new IllegalStateException(""Stopwatch has not been split. "");"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,164,this.splitState = STATE_UNSPLIT;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,173,* @throws IllegalStateException if the StopWatch is not currently running.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,176,if(this.runningState != STATE_RUNNING) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,177,"throw new IllegalStateException(""Stopwatch must be running to suspend. "");"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,180,this.runningState = STATE_SUSPENDED;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,189,* @throws IllegalStateException if the StopWatch has not been suspended.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,192,if(this.runningState != STATE_SUSPENDED) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,193,"throw new IllegalStateException(""Stopwatch must be suspended to resume. "");"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,197,this.runningState = STATE_RUNNING;
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,136," <p>This is either the time between start and latest split, between start"
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,137," and stop, or the time between the start and the moment this method is called.</p>"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,203,* <p>This is either the time between the start and the moment this method
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,204,"* is called, or the amount of time between start and stop.</p>"
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,142,f (stopTime == -1) {
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,143,f (startTime == -1) {
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,144,eturn 0;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,209,if(this.runningState == STATE_STOPPED || this.runningState == STATE_SUSPENDED) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,210,return (this.stopTime - this.startTime);
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,211,} else
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,212,if(this.runningState == STATE_UNSTARTED) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,213,return 0;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,214,} else
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,215,if(this.runningState == STATE_RUNNING) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,218,"throw new RuntimeException(""Illegal running state has occured. "");"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,222,* <p>Get the split time on the stopwatch.</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,224,* <p>This is the time between start and latest split. </p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,226,* @return the split time in milliseconds
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,228,* @throws IllegalStateException if the StopWatch has not yet been split.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,230,public long getSplitTime() {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,231,if(this.splitState != STATE_SPLIT) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,232,"throw new IllegalStateException(""Stopwatch must be split to get the split time. "");"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,250,* <p>Gets a summary of the split time that the stopwatch recorded as a string.</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,252,"* <p>The format used is ISO8601-like,"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,253,* <i>hours</i>:<i>minutes</i>:<i>seconds</i>.<i>milliseconds</i>.</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,255,* @return the split time as a String
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,257,public String toSplitString() {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,258,return DurationFormatUtils.formatISO(getSplitTime());

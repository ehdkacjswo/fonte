is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,227,* @deprecated Replaced by {@link org.apache.commons.lang.enums.Enum org.apache.commons.lang.enums.Enum}
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,228,*          and will be removed in version 3.0. All classes in this package are deprecated and repackaged to
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,229,"*          <a href=""../enums/package-summary.html"">org.apache.commons.lang.enums</a> since <code>enum</code>"
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,230,*          is a Java 1.5 keyword.
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,231,* @see org.apache.commons.lang.enums.Enum
False,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,232," @version $Id: Enum.java,v 1.27 2004/02/18 22:53:51 ggregory Exp $"
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,237,"* @version $Id: Enum.java,v 1.28 2004/02/23 04:34:20 ggregory Exp $"
True,src/java/org/apache/commons/lang/enum/EnumUtils.java,src/java/org/apache/commons/lang/enum/EnumUtils.java,25,* @deprecated Replaced by {@link org.apache.commons.lang.enums.EnumUtils org.apache.commons.lang.enums.EnumUtils}
True,src/java/org/apache/commons/lang/enum/EnumUtils.java,src/java/org/apache/commons/lang/enum/EnumUtils.java,26,*          and will be removed in version 3.0. All classes in this package are deprecated and repackaged to
True,src/java/org/apache/commons/lang/enum/EnumUtils.java,src/java/org/apache/commons/lang/enum/EnumUtils.java,27,"*          <a href=""../enums/package-summary.html"">org.apache.commons.lang.enums</a> since <code>enum</code>"
True,src/java/org/apache/commons/lang/enum/EnumUtils.java,src/java/org/apache/commons/lang/enum/EnumUtils.java,28,*          is a Java 1.5 keyword.
True,src/java/org/apache/commons/lang/enum/EnumUtils.java,src/java/org/apache/commons/lang/enum/EnumUtils.java,29,* @see org.apache.commons.lang.enums.EnumUtils
False,src/java/org/apache/commons/lang/enum/EnumUtils.java,src/java/org/apache/commons/lang/enum/EnumUtils.java,30," @version $Id: EnumUtils.java,v 1.11 2004/02/18 22:53:51 ggregory Exp $"
True,src/java/org/apache/commons/lang/enum/EnumUtils.java,src/java/org/apache/commons/lang/enum/EnumUtils.java,35,"* @version $Id: EnumUtils.java,v 1.12 2004/02/23 04:34:20 ggregory Exp $"
True,src/java/org/apache/commons/lang/enum/ValuedEnum.java,src/java/org/apache/commons/lang/enum/ValuedEnum.java,95,* @deprecated Replaced by {@link org.apache.commons.lang.enums.ValuedEnum org.apache.commons.lang.enums.ValuedEnum}
True,src/java/org/apache/commons/lang/enum/ValuedEnum.java,src/java/org/apache/commons/lang/enum/ValuedEnum.java,96,*          and will be removed in version 3.0. All classes in this package are deprecated and repackaged to
True,src/java/org/apache/commons/lang/enum/ValuedEnum.java,src/java/org/apache/commons/lang/enum/ValuedEnum.java,97,"*          <a href=""../enums/package-summary.html"">org.apache.commons.lang.enums</a> since <code>enum</code>"
True,src/java/org/apache/commons/lang/enum/ValuedEnum.java,src/java/org/apache/commons/lang/enum/ValuedEnum.java,98,*          is a Java 1.5 keyword.
True,src/java/org/apache/commons/lang/enum/ValuedEnum.java,src/java/org/apache/commons/lang/enum/ValuedEnum.java,99,* @see org.apache.commons.lang.enums.ValuedEnum
False,src/java/org/apache/commons/lang/enum/ValuedEnum.java,src/java/org/apache/commons/lang/enum/ValuedEnum.java,98," @version $Id: ValuedEnum.java,v 1.15 2004/02/18 22:53:51 ggregory Exp $"
True,src/java/org/apache/commons/lang/enum/ValuedEnum.java,src/java/org/apache/commons/lang/enum/ValuedEnum.java,103,"* @version $Id: ValuedEnum.java,v 1.16 2004/02/23 04:34:20 ggregory Exp $"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,14,* limitations under the License.
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,16,package org.apache.commons.lang.enums;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,18,import java.io.Serializable;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,19,import java.lang.reflect.InvocationTargetException;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,20,import java.lang.reflect.Method;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,21,import java.util.ArrayList;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,22,import java.util.Collections;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,23,import java.util.HashMap;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,24,import java.util.Iterator;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,25,import java.util.List;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,26,import java.util.Map;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,28,import org.apache.commons.lang.ClassUtils;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,29,import org.apache.commons.lang.StringUtils;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,32,* <p>Abstract superclass for type-safe enums.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,34,* <p>One feature of the C programming language lacking in Java is enumerations. The
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,35,* C implementation based on ints was poor and open to abuse. The original Java
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,36,* recommendation and most of the JDK also uses int constants. It has been recognised
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,37,* however that a more robust type-safe class-based solution can be designed. This
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,38,* class follows the basic Java type-safe enumeration pattern.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,40,"* <p><em>NOTE:</em>Due to the way in which Java ClassLoaders work, comparing"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,41,"* Enum objects should always be done using <code>equals()</code>, not <code>==</code>."
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,42,* The equals() method will try == first so in most cases the effect is the same.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,44,"* <p>Of course, if you actually want (or don't mind) Enums in different class"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,45,"* loaders being non-equal, then you can use <code>==</code>.</p>"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,47,* <h4>Simple Enums</h4>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,49,"* <p>To use this class, it must be subclassed. For example:</p>"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,51,* <pre>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,52,* public final class ColorEnum extends Enum {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,53,"*   public static final ColorEnum RED = new ColorEnum(""Red"");"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,54,"*   public static final ColorEnum GREEN = new ColorEnum(""Green"");"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,55,"*   public static final ColorEnum BLUE = new ColorEnum(""Blue"");"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,57,*   private ColorEnum(String color) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,58,*     super(color);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,61,*   public static ColorEnum getEnum(String color) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,62,"*     return (ColorEnum) getEnum(ColorEnum.class, color);"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,65,*   public static Map getEnumMap() {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,66,*     return getEnumMap(ColorEnum.class);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,69,*   public static List getEnumList() {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,70,*     return getEnumList(ColorEnum.class);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,73,*   public static Iterator iterator() {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,74,*     return iterator(ColorEnum.class);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,77,* </pre>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,79,"* <p>As shown, each enum has a name. This can be accessed using <code>getName</code>.</p>"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,81,* <p>The <code>getEnum</code> and <code>iterator</code> methods are recommended.
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,82,"* Unfortunately, Java restrictions require these to be coded as shown in each subclass."
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,83,* An alternative choice is to use the {@link EnumUtils} class.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,85,* <h4>Subclassed Enums</h4>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,86,"* <p>A hierarchy of Enum classes can be built. In this case, the superclass is"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,87,* unaffected by the addition of subclasses (as per normal Java). The subclasses
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,88,* may add additional Enum constants <em>of the type of the superclass</em>. The
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,89,* query methods on the subclass will return all of the Enum constants from the
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,90,* superclass and subclass.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,92,* <pre>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,93,* public final class ExtraColorEnum extends ColorEnum {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,94,"*   // NOTE: Color enum declared above is final, change that to get this"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,95,*   // example to compile.
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,96,"*   public static final ColorEnum YELLOW = new ExtraColorEnum(""Yellow"");"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,98,*   private ExtraColorEnum(String color) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,99,*     super(color);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,102,*   public static ColorEnum getEnum(String color) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,103,"*     return (ColorEnum) getEnum(ExtraColorEnum.class, color);"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,106,*   public static Map getEnumMap() {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,107,*     return getEnumMap(ExtraColorEnum.class);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,110,*   public static List getEnumList() {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,111,*     return getEnumList(ExtraColorEnum.class);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,114,*   public static Iterator iterator() {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,115,*     return iterator(ExtraColorEnum.class);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,118,* </pre>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,120,"* <p>This example will return RED, GREEN, BLUE, YELLOW from the List and iterator"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,121,"* methods in that order. The RED, GREEN and BLUE instances will be the same (==)"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,122,* as those from the superclass ColorEnum. Note that YELLOW is declared as a
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,123,* ColorEnum and not an ExtraColorEnum.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,125,* <h4>Functional Enums</h4>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,127,* <p>The enums can have functionality by defining subclasses and
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,128,* overriding the <code>getEnumClass()</code> method:</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,130,* <pre>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,131,*   public static final OperationEnum PLUS = new PlusOperation();
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,132,*   private static final class PlusOperation extends OperationEnum {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,133,*     private PlusOperation() {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,134,"*       super(""Plus"");"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,136,"*     public int eval(int a, int b) {"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,137,*       return (a + b);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,140,*   public static final OperationEnum MINUS = new MinusOperation();
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,141,*   private static final class MinusOperation extends OperationEnum {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,142,*     private MinusOperation() {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,143,"*       super(""Minus"");"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,145,"*     public int eval(int a, int b) {"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,146,*       return (a - b);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,150,*   private OperationEnum(String color) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,151,*     super(color);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,154,*   public final Class getEnumClass() {     // NOTE: new method!
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,155,*     return OperationEnum.class;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,158,"*   public abstract double eval(double a, double b);"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,160,*   public static OperationEnum getEnum(String name) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,161,"*     return (OperationEnum) getEnum(OperationEnum.class, name);"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,164,*   public static Map getEnumMap() {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,165,*     return getEnumMap(OperationEnum.class);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,168,*   public static List getEnumList() {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,169,*     return getEnumList(OperationEnum.class);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,172,*   public static Iterator iterator() {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,173,*     return iterator(OperationEnum.class);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,176,* </pre>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,177,"* <p>The code above will work on JDK 1.2. If JDK1.3 and later is used,"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,178,* the subclasses may be defined as anonymous.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,180,* <h4>Nested class Enums</h4>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,182,* <p>Care must be taken with class loading when defining a static nested class
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,183,* for enums. The static nested class can be loaded without the surrounding outer
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,184,* class being loaded. This can result in an empty list/map/iterator being returned.
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,185,* One solution is to define a static block that references the outer class where
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,186,* the constants are defined. For example:</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,188,* <pre>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,189,* public final class Outer {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,190,"*   public static final BWEnum BLACK = new BWEnum(""Black"");"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,191,"*   public static final BWEnum WHITE = new BWEnum(""White"");"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,193,*   // static nested enum class
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,194,*   public static final class BWEnum extends Enum {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,196,*     static {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,197,*       // explicitly reference BWEnum class to force constants to load
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,198,*       Object obj = Outer.BLACK;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,201,*     // ... other methods omitted
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,204,* </pre>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,206,"* <p>Although the above solves the problem, it is not recommended. The best solution"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,207,"* is to define the constants in the enum class, and hold references in the outer class:"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,209,* <pre>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,210,* public final class Outer {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,211,*   public static final BWEnum BLACK = BWEnum.BLACK;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,212,*   public static final BWEnum WHITE = BWEnum.WHITE;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,214,*   // static nested enum class
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,215,*   public static final class BWEnum extends Enum {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,216,*     // only define constants in enum classes - private if desired
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,217,"*     private static final BWEnum BLACK = new BWEnum(""Black"");"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,218,"*     private static final BWEnum WHITE = new BWEnum(""White"");"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,220,*     // ... other methods omitted
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,223,* </pre>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,225,"* <p>For more details, see the 'Nested' test cases."
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,227,* @author Apache Avalon project
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,228,* @author Stephen Colebourne
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,229,* @author Chris Webb
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,230,* @author Mike Bowler
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,231,* @since 1.0
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,232,"* @version $Id: Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,234,"public abstract class Enum implements Comparable, Serializable {"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,236,/** Lang version 1.0.1 serial compatibility */
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,237,private static final long serialVersionUID = -487045951170455942L;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,239,"// After discussion, the default size for HashMaps is used, as the"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,240,// sizing algorithm changes across the JDK versions
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,242,"* An empty <code>Map</code>, as JDK1.2 didn't have an empty map."
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,244,private static final Map EMPTY_MAP = Collections.unmodifiableMap(new HashMap(0));
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,247,"* <code>Map</code>, key of class name, value of <code>Entry</code>."
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,249,private static final Map cEnumClasses = new HashMap();
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,252,* The string representation of the Enum.
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,254,private final String iName;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,257,* The hashcode representation of the Enum.
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,259,private transient final int iHashCode;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,262,* The toString representation of the Enum.
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,263,* @since 2.0
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,265,protected transient String iToString = null;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,268,* <p>Enable the iterator to retain the source code order.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,270,private static class Entry {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,272,* Map of Enum name to Enum.
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,274,final Map map = new HashMap();
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,276,* Map of Enum name to Enum.
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,278,final Map unmodifiableMap = Collections.unmodifiableMap(map);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,280,* List of Enums in source code order.
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,282,final List list = new ArrayList(25);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,284,* Map of Enum name to Enum.
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,286,final List unmodifiableList = Collections.unmodifiableList(list);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,289,* <p>Restrictive constructor.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,291,private Entry() {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,296,* <p>Constructor to add a new named item to the enumeration.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,298,"* @param name  the name of the enum object,"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,299,*  must not be empty or <code>null</code>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,300,* @throws IllegalArgumentException if the name is <code>null</code>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,301,*  or an empty string
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,302,* @throws IllegalArgumentException if the getEnumClass() method returns
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,303,*  a null or invalid Class
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,305,protected Enum(String name) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,306,super();
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,307,init(name);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,308,iName = name;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,309,iHashCode = 7 + getEnumClass().hashCode() + 3 * name.hashCode();
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,310,// cannot create toString here as subclasses may want to include other data
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,314,* Initializes the enumeration.
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,316,* @param name  the enum name
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,317,* @throws IllegalArgumentException if the name is null or empty or duplicate
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,318,* @throws IllegalArgumentException if the enumClass is null or invalid
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,320,private void init(String name) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,321,if (StringUtils.isEmpty(name)) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,322,"throw new IllegalArgumentException(""The Enum name must not be empty or null"");"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,325,Class enumClass = getEnumClass();
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,326,if (enumClass == null) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,327,"throw new IllegalArgumentException(""getEnumClass() must not be null"");"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,329,Class cls = getClass();
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,330,boolean ok = false;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,331,while (cls != null && cls != Enum.class && cls != ValuedEnum.class) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,332,if (cls == enumClass) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,333,ok = true;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,334,break;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,336,cls = cls.getSuperclass();
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,338,if (ok == false) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,339,"throw new IllegalArgumentException(""getEnumClass() must return a superclass of this class"");"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,342,// create entry
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,343,Entry entry = (Entry) cEnumClasses.get(enumClass);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,344,if (entry == null) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,345,entry = createEntry(enumClass);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,346,"cEnumClasses.put(enumClass, entry);"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,348,if (entry.map.containsKey(name)) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,349,"throw new IllegalArgumentException(""The Enum name must be unique, '"" + name + ""' has already been added"");"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,351,"entry.map.put(name, this);"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,352,entry.list.add(this);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,356,* <p>Handle the deserialization of the class to ensure that multiple
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,357,"* copies are not wastefully created, or illegal enum types created.</p>"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,359,* @return the resolved object
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,361,protected Object readResolve() {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,362,Entry entry = (Entry) cEnumClasses.get(getEnumClass());
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,363,if (entry == null) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,364,return null;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,366,return (Enum) entry.map.get(getName());
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,372,* <p>Gets an <code>Enum</code> object by class and name.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,374,"* @param enumClass  the class of the Enum to get, must not"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,375,*  be <code>null</code>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,376,"* @param name  the name of the <code>Enum</code> to get,"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,377,*  may be <code>null</code>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,378,"* @return the enum object, or null if the enum does not exist"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,379,* @throws IllegalArgumentException if the enum class
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,380,*  is <code>null</code>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,382,"protected static Enum getEnum(Class enumClass, String name) {"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,383,Entry entry = getEntry(enumClass);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,384,if (entry == null) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,385,return null;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,387,return (Enum) entry.map.get(name);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,391,* <p>Gets the <code>Map</code> of <code>Enum</code> objects by
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,392,* name using the <code>Enum</code> class.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,394,* <p>If the requested class has no enum objects an empty
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,395,* <code>Map</code> is returned.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,397,"* @param enumClass  the class of the <code>Enum</code> to get,"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,398,*  must not be <code>null</code>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,399,* @return the enum object Map
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,400,* @throws IllegalArgumentException if the enum class is <code>null</code>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,401,* @throws IllegalArgumentException if the enum class is not a subclass of Enum
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,403,protected static Map getEnumMap(Class enumClass) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,404,Entry entry = getEntry(enumClass);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,405,if (entry == null) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,406,return EMPTY_MAP;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,408,return entry.unmodifiableMap;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,412,* <p>Gets the <code>List</code> of <code>Enum</code> objects using the
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,413,* <code>Enum</code> class.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,415,* <p>The list is in the order that the objects were created (source code order).
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,416,* If the requested class has no enum objects an empty <code>List</code> is
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,417,* returned.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,419,"* @param enumClass  the class of the <code>Enum</code> to get,"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,420,*  must not be <code>null</code>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,421,* @return the enum object Map
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,422,* @throws IllegalArgumentException if the enum class is <code>null</code>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,423,* @throws IllegalArgumentException if the enum class is not a subclass of Enum
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,425,protected static List getEnumList(Class enumClass) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,426,Entry entry = getEntry(enumClass);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,427,if (entry == null) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,428,return Collections.EMPTY_LIST;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,430,return entry.unmodifiableList;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,434,* <p>Gets an <code>Iterator</code> over the <code>Enum</code> objects in
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,435,* an <code>Enum</code> class.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,437,* <p>The <code>Iterator</code> is in the order that the objects were
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,438,* created (source code order). If the requested class has no enum
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,439,* objects an empty <code>Iterator</code> is returned.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,441,"* @param enumClass  the class of the <code>Enum</code> to get,"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,442,*  must not be <code>null</code>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,443,* @return an iterator of the Enum objects
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,444,* @throws IllegalArgumentException if the enum class is <code>null</code>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,445,* @throws IllegalArgumentException if the enum class is not a subclass of Enum
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,447,protected static Iterator iterator(Class enumClass) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,448,return Enum.getEnumList(enumClass).iterator();
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,453,* <p>Gets an <code>Entry</code> from the map of Enums.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,455,* @param enumClass  the class of the <code>Enum</code> to get
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,456,* @return the enum entry
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,458,private static Entry getEntry(Class enumClass) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,459,if (enumClass == null) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,460,"throw new IllegalArgumentException(""The Enum Class must not be null"");"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,462,if (Enum.class.isAssignableFrom(enumClass) == false) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,463,"throw new IllegalArgumentException(""The Class must be a subclass of Enum"");"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,465,Entry entry = (Entry) cEnumClasses.get(enumClass);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,466,return entry;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,470,* <p>Creates an <code>Entry</code> for storing the Enums.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,472,* <p>This accounts for subclassed Enums.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,474,* @param enumClass  the class of the <code>Enum</code> to get
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,475,* @return the enum entry
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,477,private static Entry createEntry(Class enumClass) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,478,Entry entry = new Entry();
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,479,Class cls = enumClass.getSuperclass();
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,480,while (cls != null && cls != Enum.class && cls != ValuedEnum.class) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,481,Entry loopEntry = (Entry) cEnumClasses.get(cls);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,482,if (loopEntry != null) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,483,entry.list.addAll(loopEntry.list);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,484,entry.map.putAll(loopEntry.map);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,485,"break;  // stop here, as this will already have had superclasses added"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,487,cls = cls.getSuperclass();
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,489,return entry;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,494,"* <p>Retrieve the name of this Enum item, set in the constructor.</p>"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,496,* @return the <code>String</code> name of this Enum item
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,498,public final String getName() {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,499,return iName;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,503,"* <p>Retrieves the Class of this Enum item, set in the constructor.</p>"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,505,"* <p>This is normally the same as <code>getClass()</code>, but for"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,506,"* advanced Enums may be different. If overridden, it must return a"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,507,* constant value.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,509,* @return the <code>Class</code> of the enum
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,510,* @since 2.0
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,512,public Class getEnumClass() {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,513,return getClass();
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,517,* <p>Tests for equality.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,519,* <p>Two Enum objects are considered equal
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,520,* if they have the same class names and the same names.
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,521,"* Identity is tested for first, so this method usually runs fast.</p>"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,523,"* <p>If the parameter is in a different class loader than this instance,"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,524,* reflection is used to compare the names.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,526,* @param other  the other object to compare for equality
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,527,* @return <code>true</code> if the Enums are equal
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,529,public final boolean equals(Object other) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,530,if (other == this) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,531,return true;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,532,} else if (other == null) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,533,return false;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,534,} else if (other.getClass() == this.getClass()) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,535,// Ok to do a class cast to Enum here since the test above
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,536,// guarantee both
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,537,// classes are in the same class loader.
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,538,return iName.equals(((Enum) other).iName);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,539,} else {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,540,"// This and other are in different class loaders, we must use reflection."
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,541,try {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,542,"Method mth = other.getClass().getMethod(""getName"", null);"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,543,"String name = (String) mth.invoke(other, null);"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,544,return iName.equals(name);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,545,} catch (NoSuchMethodException e) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,546,// ignore - should never happen
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,547,} catch (IllegalAccessException e) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,548,// ignore - should never happen
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,549,} catch (InvocationTargetException e) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,550,// ignore - should never happen
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,552,return false;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,557,* <p>Returns a suitable hashCode for the enumeration.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,559,* @return a hashcode based on the name
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,561,public final int hashCode() {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,562,return iHashCode;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,566,* <p>Tests for order.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,568,"* <p>The default ordering is alphabetic by name, but this"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,569,* can be overridden by subclasses.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,571,* @see java.lang.Comparable#compareTo(Object)
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,572,* @param other  the other object to compare to
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,573,"* @return -ve if this is less than the other object, +ve if greater"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,574,"*  than, <code>0</code> of equal"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,575,* @throws ClassCastException if other is not an Enum
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,576,* @throws NullPointerException if other is <code>null</code>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,578,public int compareTo(Object other) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,579,if (other == this) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,580,return 0;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,582,return iName.compareTo(((Enum) other).iName);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,586,* <p>Human readable description of this Enum item.</p>
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,588,"* @return String in the form <code>type[name]</code>, for example:"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,589,* <code>Color[Red]</code>. Note that the package name is stripped from
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,590,* the type name.
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,592,public String toString() {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,593,if (iToString == null) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,594,String shortName = ClassUtils.getShortClassName(getEnumClass());
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,595,"iToString = shortName + ""["" + getName() + ""]"";"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,597,return iToString;
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,14,* limitations under the License.
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,16,package org.apache.commons.lang.enums;
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,18,import java.util.Iterator;
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,19,import java.util.List;
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,20,import java.util.Map;
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,23,* <p>Utility class for accessing and manipulating {@link Enum}s.</p>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,25,* @see Enum
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,26,* @see ValuedEnum
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,27,* @author Stephen Colebourne
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,28,* @author Gary Gregory
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,29,* @since 1.0
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,30,"* @version $Id: EnumUtils.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,32,public class EnumUtils {
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,35,* Public constructor. This class should not normally be instantiated.
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,36,* @since 2.0
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,38,public EnumUtils() {
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,42,* <p>Gets an <code>Enum</code> object by class and name.</p>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,44,* @param enumClass  the class of the <code>Enum</code> to get
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,45,"* @param name  the name of the Enum to get, may be <code>null</code>"
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,46,* @return the enum object
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,47,* @throws IllegalArgumentException if the enum class is <code>null</code>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,49,"public static Enum getEnum(Class enumClass, String name) {"
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,50,"return Enum.getEnum(enumClass, name);"
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,54,* <p>Gets a <code>ValuedEnum</code> object by class and value.</p>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,56,* @param enumClass  the class of the <code>Enum</code> to get
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,57,* @param value  the value of the <code>Enum</code> to get
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,58,"* @return the enum object, or null if the enum does not exist"
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,59,* @throws IllegalArgumentException if the enum class is <code>null</code>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,61,"public static ValuedEnum getEnum(Class enumClass, int value) {"
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,62,"return (ValuedEnum) ValuedEnum.getEnum(enumClass, value);"
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,66,* <p>Gets the <code>Map</code> of <code>Enum</code> objects by
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,67,* name using the <code>Enum</code> class.</p>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,69,* <p>If the requested class has no enum objects an empty
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,70,* <code>Map</code> is returned. The <code>Map</code> is unmodifiable.</p>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,72,* @param enumClass  the class of the <code>Enum</code> to get
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,73,* @return the enum object Map
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,74,* @throws IllegalArgumentException if the enum class is <code>null</code>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,75,* @throws IllegalArgumentException if the enum class is not a subclass
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,76,*  of <code>Enum</code>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,78,public static Map getEnumMap(Class enumClass) {
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,79,return Enum.getEnumMap(enumClass);
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,83,* <p>Gets the <code>List</code> of <code>Enum</code> objects using
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,84,* the <code>Enum</code> class.</p>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,86,* <p>The list is in the order that the objects were created
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,87,* (source code order).</p>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,89,* <p>If the requested class has no enum objects an empty
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,90,* <code>List</code> is returned. The <code>List</code> is unmodifiable.</p>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,92,* @param enumClass  the class of the Enum to get
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,93,* @return the enum object Map
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,94,* @throws IllegalArgumentException if the enum class is <code>null</code>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,95,* @throws IllegalArgumentException if the enum class is not a subclass
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,96,*  of <code>Enum</code>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,98,public static List getEnumList(Class enumClass) {
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,99,return Enum.getEnumList(enumClass);
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,103,* <p>Gets an <code>Iterator</code> over the <code>Enum</code> objects
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,104,* in an <code>Enum</code> class.</p>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,106,* <p>The iterator is in the order that the objects were created
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,107,* (source code order).</p>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,109,* <p>If the requested class has no enum objects an empty
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,110,* <code>Iterator</code> is returned. The <code>Iterator</code>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,111,* is unmodifiable.</p>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,113,* @param enumClass  the class of the <code>Enum</code> to get
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,114,* @return an <code>Iterator</code> of the <code>Enum</code> objects
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,115,* @throws IllegalArgumentException if the enum class is <code>null</code>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,116,* @throws IllegalArgumentException if the enum class is not a subclass of <code>Enum</code>
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,118,public static Iterator iterator(Class enumClass) {
True,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,119,return Enum.getEnumList(enumClass).iterator();
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,14,* limitations under the License.
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,16,package org.apache.commons.lang.enums;
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,18,import java.util.Iterator;
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,19,import java.util.List;
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,21,import org.apache.commons.lang.ClassUtils;
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,24,* <p>Abstract superclass for type-safe enums with integer values suitable
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,25,* for use in <code>switch</code> statements.</p>
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,27,"* <p><em>NOTE:</em>Due to the way in which Java ClassLoaders work, comparing"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,28,"* <code>Enum</code> objects should always be done using the equals() method,"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,29,* not <code>==</code>. The equals() method will try <code>==</code> first so
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,30,* in most cases the effect is the same.</p>
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,32,"* <p>To use this class, it must be subclassed. For example:</p>"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,34,* <pre>
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,35,* public final class JavaVersionEnum extends ValuedEnum {
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,36,*   //standard enums for version of JVM
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,37,*   public static final int  JAVA1_0_VALUE  = 100;
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,38,*   public static final int  JAVA1_1_VALUE  = 110;
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,39,*   public static final int  JAVA1_2_VALUE  = 120;
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,40,*   public static final int  JAVA1_3_VALUE  = 130;
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,41,"*   public static final JavaVersionEnum  JAVA1_0  = new JavaVersionEnum( ""Java 1.0"", JAVA1_0_VALUE );"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,42,"*   public static final JavaVersionEnum  JAVA1_1  = new JavaVersionEnum( ""Java 1.1"", JAVA1_1_VALUE );"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,43,"*   public static final JavaVersionEnum  JAVA1_2  = new JavaVersionEnum( ""Java 1.2"", JAVA1_2_VALUE );"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,44,"*   public static final JavaVersionEnum  JAVA1_3  = new JavaVersionEnum( ""Java 1.3"", JAVA1_3_VALUE );"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,46,"*   private JavaVersionEnum(String name, int value) {"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,47,"*     super( name, value );"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,50,*   public static JavaVersionEnum getEnum(String javaVersion) {
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,51,"*     return (JavaVersionEnum) getEnum(JavaVersionEnum.class, javaVersion);"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,54,*   public static JavaVersionEnum getEnum(int javaVersion) {
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,55,"*     return (JavaVersionEnum) getEnum(JavaVersionEnum.class, javaVersion);"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,58,*   public static Map getEnumMap() {
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,59,*     return getEnumMap(JavaVersionEnum.class);
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,62,*   public static List getEnumList() {
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,63,*     return getEnumList(JavaVersionEnum.class);
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,66,*   public static Iterator iterator() {
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,67,*     return iterator(JavaVersionEnum.class);
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,70,* </pre>
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,72,* <p>The above class could then be used as follows:</p>
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,74,* <pre>
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,75,* public void doSomething(JavaVersion ver) {
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,76,*   switch (ver.getValue()) {
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,77,*     case JAVA1_0_VALUE:
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,79,*       break;
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,80,*     case JAVA1_1_VALUE:
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,82,*       break;
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,86,* </pre>
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,88,"* <p>As shown, each enum has a name and a value. These can be accessed using"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,89,* <code>getName</code> and <code>getValue</code>.</p>
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,91,* <p>The <code>getEnum</code> and <code>iterator</code> methods are recommended.
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,92,"* Unfortunately, Java restrictions require these to be coded as shown in each subclass."
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,93,* An alternative choice is to use the {@link EnumUtils} class.</p>
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,95,* @author Apache Avalon project
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,96,* @author Stephen Colebourne
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,97,* @since 1.0
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,98,"* @version $Id: ValuedEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,100,public abstract class ValuedEnum extends Enum {
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,102,/** Lang version 1.0.1 serial compatibility */
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,103,private static final long serialVersionUID = -7129650521543789085L;
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,106,* The value contained in enum.
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,108,private final int iValue;
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,111,* Constructor for enum item.
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,113,* @param name  the name of enum item
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,114,* @param value  the value of enum item
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,116,"protected ValuedEnum(String name, int value) {"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,117,super(name);
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,118,iValue = value;
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,122,* <p>Gets an <code>Enum</code> object by class and value.</p>
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,124,"* <p>This method loops through the list of <code>Enum</code>,"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,125,* thus if there are many <code>Enum</code>s this will be
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,126,* slow.</p>
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,128,* @param enumClass  the class of the <code>Enum</code> to get
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,129,* @param value  the value of the <code>Enum</code> to get
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,130,"* @return the enum object, or null if the enum does not exist"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,131,* @throws IllegalArgumentException if the enum class is <code>null</code>
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,133,"protected static Enum getEnum(Class enumClass, int value) {"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,134,if (enumClass == null) {
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,135,"throw new IllegalArgumentException(""The Enum Class must not be null"");"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,137,List list = Enum.getEnumList(enumClass);
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,138,for (Iterator it = list.iterator(); it.hasNext();) {
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,139,ValuedEnum enum = (ValuedEnum) it.next();
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,140,if (enum.getValue() == value) {
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,141,return enum;
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,144,return null;
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,148,* <p>Get value of enum item.</p>
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,150,* @return the enum item's value.
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,152,public final int getValue() {
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,153,return iValue;
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,157,* <p>Tests for order.</p>
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,159,"* <p>The default ordering is numeric by value, but this"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,160,* can be overridden by subclasses.</p>
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,162,* @see java.lang.Comparable#compareTo(Object)
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,163,* @param other  the other object to compare to
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,164,"* @return -ve if this is less than the other object, +ve if greater than,"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,165,*  <code>0</code> of equal
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,166,* @throws ClassCastException if other is not an <code>Enum</code>
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,167,* @throws NullPointerException if other is <code>null</code>
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,169,public int compareTo(Object other) {
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,170,return iValue - ((ValuedEnum) other).iValue;
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,174,* <p>Human readable description of this <code>Enum</code> item.</p>
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,176,"* @return String in the form <code>type[name=value]</code>, for example:"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,177,*  <code>JavaVersion[Java 1.0=100]</code>. Note that the package name is
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,178,*  stripped from the type name.
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,180,public String toString() {
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,181,if (iToString == null) {
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,182,String shortName = ClassUtils.getShortClassName(getEnumClass());
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,183,"iToString = shortName + ""["" + getName() + ""="" + getValue() + ""]"";"
True,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,185,return iToString;
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,18,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,23,* Broken color enumeration.
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,25,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,26,"* @version $Id: Broken1Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,28,public final class Broken1Enum extends Enum {
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,29,"public static final Broken1Enum RED = new Broken1Enum(""Red"");"
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,30,"public static final Broken1Enum GREEN = new Broken1Enum(""Green"");"
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,31,"public static final Broken1Enum GREENISH = new Broken1Enum(""Green"");  // duplicate not allowed"
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,33,private Broken1Enum(String color) {
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,34,super(color);
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,37,public static Broken1Enum getEnum(String color) {
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,38,"return (Broken1Enum) getEnum(Broken1Enum.class, color);"
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,41,public static Map getEnumMap() {
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,42,return getEnumMap(Broken1Enum.class);
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,45,public static List getEnumList() {
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,46,return getEnumList(Broken1Enum.class);
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,49,public static Iterator iterator() {
True,src/test/org/apache/commons/lang/enums/Broken1Enum.java,src/test/org/apache/commons/lang/enums/Broken1Enum.java,50,return iterator(Broken1Enum.class);
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,18,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,23,"* Broken Operator enumeration, null class."
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,25,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,26,"* @version $Id: Broken1OperationEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,28,public abstract class Broken1OperationEnum extends Enum {
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,29,// This syntax works for JDK 1.3 and upwards:
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,30,"//    public static final OperationEnum PLUS = new OperationEnum(""Plus"") {"
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,31,"//        public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,32,//            return (a + b);
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,35,"//    public static final OperationEnum MINUS = new OperationEnum(""Minus"") {"
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,36,"//        public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,37,//            return (a - b);
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,40,// This syntax works for JDK 1.2 and upwards:
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,41,public static final Broken1OperationEnum PLUS = new PlusOperation();
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,42,private static class PlusOperation extends Broken1OperationEnum {
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,43,private PlusOperation() {
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,44,"super(""Plus"");"
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,46,"public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,47,return (a + b);
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,50,public static final Broken1OperationEnum MINUS = new MinusOperation();
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,51,private static class MinusOperation extends Broken1OperationEnum {
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,52,private MinusOperation() {
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,53,"super(""Minus"");"
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,55,"public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,56,return (a - b);
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,60,private Broken1OperationEnum(String name) {
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,61,super(name);
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,64,public final Class getEnumClass() {
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,65,return null;
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,68,"public abstract int eval(int a, int b);"
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,70,public static Broken1OperationEnum getEnum(String name) {
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,71,"return (Broken1OperationEnum) getEnum(Broken1OperationEnum.class, name);"
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,74,public static Map getEnumMap() {
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,75,return getEnumMap(Broken1OperationEnum.class);
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,78,public static List getEnumList() {
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,79,return getEnumList(Broken1OperationEnum.class);
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,82,public static Iterator iterator() {
True,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java,83,return iterator(Broken1OperationEnum.class);
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,18,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,23,* Broken color enumeration.
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,25,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,26,"* @version $Id: Broken2Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,28,public final class Broken2Enum extends Enum {
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,29,"public static final Broken2Enum RED = new Broken2Enum(""Red"");"
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,30,"public static final Broken2Enum GREEN = new Broken2Enum(""Green"");"
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,31,"public static final Broken2Enum BLUE = new Broken2Enum("""");  // blank not allowed"
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,33,private Broken2Enum(String color) {
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,34,super(color);
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,37,public static Broken2Enum getEnum(String color) {
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,38,"return (Broken2Enum) getEnum(Broken2Enum.class, color);"
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,41,public static Map getEnumMap() {
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,42,return getEnumMap(Broken2Enum.class);
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,45,public static List getEnumList() {
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,46,return getEnumList(Broken2Enum.class);
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,49,public static Iterator iterator() {
True,src/test/org/apache/commons/lang/enums/Broken2Enum.java,src/test/org/apache/commons/lang/enums/Broken2Enum.java,50,return iterator(Broken2Enum.class);
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,18,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,23,"* Broken Operator enumeration, getEnumClass() not superclass."
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,25,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,26,"* @version $Id: Broken2OperationEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,28,public abstract class Broken2OperationEnum extends Enum {
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,29,// This syntax works for JDK 1.3 and upwards:
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,30,"//    public static final OperationEnum PLUS = new OperationEnum(""Plus"") {"
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,31,"//        public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,32,//            return (a + b);
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,35,"//    public static final OperationEnum MINUS = new OperationEnum(""Minus"") {"
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,36,"//        public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,37,//            return (a - b);
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,40,// This syntax works for JDK 1.2 and upwards:
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,41,public static final Broken2OperationEnum PLUS = new PlusOperation();
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,42,private static class PlusOperation extends Broken2OperationEnum {
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,43,private PlusOperation() {
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,44,"super(""Plus"");"
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,46,"public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,47,return (a + b);
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,50,public static final Broken2OperationEnum MINUS = new MinusOperation();
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,51,private static class MinusOperation extends Broken2OperationEnum {
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,52,private MinusOperation() {
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,53,"super(""Minus"");"
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,55,"public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,56,return (a - b);
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,60,private Broken2OperationEnum(String name) {
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,61,super(name);
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,64,public final Class getEnumClass() {
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,65,return ColorEnum.class;
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,68,"public abstract int eval(int a, int b);"
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,70,public static Broken2OperationEnum getEnum(String name) {
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,71,"return (Broken2OperationEnum) getEnum(Broken2OperationEnum.class, name);"
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,74,public static Map getEnumMap() {
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,75,return getEnumMap(Broken2OperationEnum.class);
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,78,public static List getEnumList() {
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,79,return getEnumList(Broken2OperationEnum.class);
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,82,public static Iterator iterator() {
True,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java,83,return iterator(Broken2OperationEnum.class);
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,18,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,23,* Broken color enumeration.
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,25,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,26,"* @version $Id: Broken3Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,28,public final class Broken3Enum extends Enum {
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,29,"public static final Broken3Enum RED = new Broken3Enum(""Red"");"
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,30,"public static final Broken3Enum GREEN = new Broken3Enum(""Green"");"
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,31,public static final Broken3Enum BLUE = new Broken3Enum(null);  // null not allowed
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,33,private Broken3Enum(String color) {
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,34,super(color);
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,37,public static Broken3Enum getEnum(String color) {
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,38,"return (Broken3Enum) getEnum(Broken3Enum.class, color);"
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,41,public static Map getEnumMap() {
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,42,return getEnumMap(Broken3Enum.class);
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,45,public static List getEnumList() {
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,46,return getEnumList(Broken3Enum.class);
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,49,public static Iterator iterator() {
True,src/test/org/apache/commons/lang/enums/Broken3Enum.java,src/test/org/apache/commons/lang/enums/Broken3Enum.java,50,return iterator(Broken3Enum.class);
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,18,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,23,"* Broken Operator enumeration, getEnumClass() is Enum.class."
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,25,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,26,"* @version $Id: Broken3OperationEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,28,public abstract class Broken3OperationEnum extends Enum {
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,29,// This syntax works for JDK 1.3 and upwards:
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,30,"//    public static final OperationEnum PLUS = new OperationEnum(""Plus"") {"
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,31,"//        public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,32,//            return (a + b);
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,35,"//    public static final OperationEnum MINUS = new OperationEnum(""Minus"") {"
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,36,"//        public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,37,//            return (a - b);
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,40,// This syntax works for JDK 1.2 and upwards:
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,41,public static final Broken3OperationEnum PLUS = new PlusOperation();
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,42,private static class PlusOperation extends Broken3OperationEnum {
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,43,private PlusOperation() {
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,44,"super(""Plus"");"
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,46,"public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,47,return (a + b);
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,50,public static final Broken3OperationEnum MINUS = new MinusOperation();
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,51,private static class MinusOperation extends Broken3OperationEnum {
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,52,private MinusOperation() {
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,53,"super(""Minus"");"
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,55,"public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,56,return (a - b);
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,60,private Broken3OperationEnum(String name) {
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,61,super(name);
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,64,public final Class getEnumClass() {
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,65,return Enum.class;
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,68,"public abstract int eval(int a, int b);"
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,70,public static Broken3OperationEnum getEnum(String name) {
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,71,"return (Broken3OperationEnum) getEnum(Broken3OperationEnum.class, name);"
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,74,public static Map getEnumMap() {
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,75,return getEnumMap(Broken3OperationEnum.class);
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,78,public static List getEnumList() {
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,79,return getEnumList(Broken3OperationEnum.class);
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,82,public static Iterator iterator() {
True,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java,83,return iterator(Broken3OperationEnum.class);
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,18,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,23,"* Broken Operator enumeration, getEnumClass() is ValuedEnum.class."
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,25,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,26,"* @version $Id: Broken4OperationEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,28,public abstract class Broken4OperationEnum extends Enum {
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,29,// This syntax works for JDK 1.3 and upwards:
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,30,"//    public static final OperationEnum PLUS = new OperationEnum(""Plus"") {"
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,31,"//        public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,32,//            return (a + b);
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,35,"//    public static final OperationEnum MINUS = new OperationEnum(""Minus"") {"
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,36,"//        public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,37,//            return (a - b);
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,40,// This syntax works for JDK 1.2 and upwards:
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,41,public static final Broken4OperationEnum PLUS = new PlusOperation();
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,42,private static class PlusOperation extends Broken4OperationEnum {
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,43,private PlusOperation() {
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,44,"super(""Plus"");"
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,46,"public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,47,return (a + b);
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,50,public static final Broken4OperationEnum MINUS = new MinusOperation();
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,51,private static class MinusOperation extends Broken4OperationEnum {
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,52,private MinusOperation() {
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,53,"super(""Minus"");"
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,55,"public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,56,return (a - b);
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,60,private Broken4OperationEnum(String name) {
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,61,super(name);
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,64,public final Class getEnumClass() {
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,65,return ValuedEnum.class;
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,68,"public abstract int eval(int a, int b);"
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,70,public static Broken4OperationEnum getEnum(String name) {
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,71,"return (Broken4OperationEnum) getEnum(Broken4OperationEnum.class, name);"
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,74,public static Map getEnumMap() {
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,75,return getEnumMap(Broken4OperationEnum.class);
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,78,public static List getEnumList() {
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,79,return getEnumList(Broken4OperationEnum.class);
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,82,public static Iterator iterator() {
True,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java,83,return iterator(Broken4OperationEnum.class);
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,18,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,23,"* Broken Operator enumeration, getEnumClass() is not an Enum class."
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,25,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,26,"* @version $Id: Broken5OperationEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,28,public abstract class Broken5OperationEnum extends Enum {
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,29,// This syntax works for JDK 1.3 and upwards:
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,30,"//    public static final OperationEnum PLUS = new OperationEnum(""Plus"") {"
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,31,"//        public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,32,//            return (a + b);
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,35,"//    public static final OperationEnum MINUS = new OperationEnum(""Minus"") {"
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,36,"//        public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,37,//            return (a - b);
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,40,// This syntax works for JDK 1.2 and upwards:
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,41,public static final Broken5OperationEnum PLUS = new PlusOperation();
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,42,private static class PlusOperation extends Broken5OperationEnum {
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,43,private PlusOperation() {
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,44,"super(""Plus"");"
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,46,"public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,47,return (a + b);
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,50,public static final Broken5OperationEnum MINUS = new MinusOperation();
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,51,private static class MinusOperation extends Broken5OperationEnum {
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,52,private MinusOperation() {
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,53,"super(""Minus"");"
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,55,"public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,56,return (a - b);
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,60,private Broken5OperationEnum(String name) {
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,61,super(name);
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,64,public final Class getEnumClass() {
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,65,return String.class;
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,68,"public abstract int eval(int a, int b);"
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,70,public static Broken5OperationEnum getEnum(String name) {
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,71,"return (Broken5OperationEnum) getEnum(Broken5OperationEnum.class, name);"
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,74,public static Map getEnumMap() {
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,75,return getEnumMap(Broken5OperationEnum.class);
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,78,public static List getEnumList() {
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,79,return getEnumList(Broken5OperationEnum.class);
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,82,public static Iterator iterator() {
True,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java,83,return iterator(Broken5OperationEnum.class);
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,18,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,23,* Color enumeration.
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,25,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,26,"* @version $Id: ColorEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,29,public final class ColorEnum extends Enum {
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,30,"public static final ColorEnum RED = new ColorEnum(""Red"");"
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,31,"public static final ColorEnum GREEN = new ColorEnum(""Green"");"
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,32,"public static final ColorEnum BLUE = new ColorEnum(""Blue"");"
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,34,private ColorEnum(String color) {
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,35,super(color);
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,38,public static ColorEnum getEnum(String color) {
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,39,"return (ColorEnum) getEnum(ColorEnum.class, color);"
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,42,public static Map getEnumMap() {
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,43,return getEnumMap(ColorEnum.class);
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,46,public static List getEnumList() {
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,47,return getEnumList(ColorEnum.class);
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,50,public static Iterator iterator() {
True,src/test/org/apache/commons/lang/enums/ColorEnum.java,src/test/org/apache/commons/lang/enums/ColorEnum.java,51,return iterator(ColorEnum.class);
True,src/test/org/apache/commons/lang/enums/DummyEnum.java,src/test/org/apache/commons/lang/enums/DummyEnum.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/DummyEnum.java,src/test/org/apache/commons/lang/enums/DummyEnum.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/DummyEnum.java,src/test/org/apache/commons/lang/enums/DummyEnum.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/DummyEnum.java,src/test/org/apache/commons/lang/enums/DummyEnum.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/DummyEnum.java,src/test/org/apache/commons/lang/enums/DummyEnum.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/DummyEnum.java,src/test/org/apache/commons/lang/enums/DummyEnum.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/DummyEnum.java,src/test/org/apache/commons/lang/enums/DummyEnum.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/DummyEnum.java,src/test/org/apache/commons/lang/enums/DummyEnum.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/DummyEnum.java,src/test/org/apache/commons/lang/enums/DummyEnum.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/DummyEnum.java,src/test/org/apache/commons/lang/enums/DummyEnum.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/DummyEnum.java,src/test/org/apache/commons/lang/enums/DummyEnum.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/DummyEnum.java,src/test/org/apache/commons/lang/enums/DummyEnum.java,19,* Dummy enumeration - no values.
True,src/test/org/apache/commons/lang/enums/DummyEnum.java,src/test/org/apache/commons/lang/enums/DummyEnum.java,21,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/enums/DummyEnum.java,src/test/org/apache/commons/lang/enums/DummyEnum.java,22,"* @version $Id: DummyEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/DummyEnum.java,src/test/org/apache/commons/lang/enums/DummyEnum.java,24,public abstract class DummyEnum extends Enum {
True,src/test/org/apache/commons/lang/enums/DummyEnum.java,src/test/org/apache/commons/lang/enums/DummyEnum.java,26,private DummyEnum(String name) {
True,src/test/org/apache/commons/lang/enums/DummyEnum.java,src/test/org/apache/commons/lang/enums/DummyEnum.java,27,super(name);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,18,import java.lang.reflect.InvocationTargetException;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,19,import java.lang.reflect.Method;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,20,import java.util.ArrayList;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,21,import java.util.HashMap;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,22,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,23,import java.util.List;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,24,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,26,import junit.framework.AssertionFailedError;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,27,import junit.framework.Test;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,28,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,29,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,30,import org.apache.commons.lang.ClassUtilsTest;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,31,import org.apache.commons.lang.SerializationUtils;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,34,* Test cases for the {@link Enum} class.
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,36,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,37,* @author Gary D. Gregory
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,38,"* @version $Id: EnumTest.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,41,public final class EnumTest extends TestCase {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,43,public EnumTest(String name) {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,44,super(name);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,47,public void setUp() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,50,public static Test suite() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,51,TestSuite suite = new TestSuite(EnumTest.class);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,52,"suite.setName(""Enum Tests"");"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,53,return suite;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,56,public void testName() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,57,"assertEquals(""Red"", ColorEnum.RED.getName());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,58,"assertEquals(""Green"", ColorEnum.GREEN.getName());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,59,"assertEquals(""Blue"", ColorEnum.BLUE.getName());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,62,public void testCompareTo() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,63,assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.BLUE) == 0);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,64,assertTrue(ColorEnum.RED.compareTo(ColorEnum.BLUE) > 0);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,65,assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.RED) < 0);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,66,try {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,67,ColorEnum.RED.compareTo(null);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,68,fail();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,69,} catch (NullPointerException ex) {}
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,70,try {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,71,ColorEnum.RED.compareTo(new Object());
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,72,fail();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,73,} catch (ClassCastException ex) {}
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,76,public void testEquals() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,77,"assertSame(ColorEnum.RED, ColorEnum.RED);"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,78,"assertSame(ColorEnum.getEnum(""Red""), ColorEnum.RED);"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,79,"assertEquals(false, ColorEnum.RED.equals(null));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,80,"assertEquals(true, ColorEnum.RED.equals(ColorEnum.RED));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,81,"assertEquals(true, ColorEnum.RED.equals(ColorEnum.getEnum(""Red"")));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,84,public void testHashCode() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,85,"assertEquals(ColorEnum.RED.hashCode(), ColorEnum.RED.hashCode());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,86,"assertEquals(7 + ColorEnum.class.hashCode() + 3 * ""Red"".hashCode(), ColorEnum.RED.hashCode());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,89,public void testToString() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,90,String toString = ColorEnum.RED.toString();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,91,"assertEquals(""ColorEnum[Red]"", toString);"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,92,"assertSame(toString, ColorEnum.RED.toString());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,95,public void testIterator() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,96,Iterator it = ColorEnum.iterator();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,97,"assertSame(ColorEnum.RED, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,98,"assertSame(ColorEnum.GREEN, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,99,"assertSame(ColorEnum.BLUE, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,102,public void testList() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,103,List list = new ArrayList(ColorEnum.getEnumList());
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,105,assertNotNull(list);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,107,"assertEquals( list.size(),"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,108,ColorEnum.getEnumMap().keySet().size());
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,110,Iterator it = list.iterator();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,111,"assertSame(ColorEnum.RED, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,112,"assertSame(ColorEnum.GREEN, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,113,"assertSame(ColorEnum.BLUE, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,116,public void testMap() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,117,Map map = new HashMap(ColorEnum.getEnumMap());
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,119,assertNotNull(map);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,120,assertTrue(map.containsValue(ColorEnum.RED));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,121,assertTrue(map.containsValue(ColorEnum.GREEN));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,122,assertTrue(map.containsValue(ColorEnum.BLUE));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,123,"assertSame(ColorEnum.RED, map.get(""Red""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,124,"assertSame(ColorEnum.GREEN, map.get(""Green""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,125,"assertSame(ColorEnum.BLUE, map.get(""Blue""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,126,"assertEquals( map.keySet().size(),"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,127,ColorEnum.getEnumList().size());
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,130,public void testGet() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,131,"assertSame(ColorEnum.RED, ColorEnum.getEnum(""Red""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,132,"assertSame(ColorEnum.GREEN, ColorEnum.getEnum(""Green""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,133,"assertSame(ColorEnum.BLUE, ColorEnum.getEnum(""Blue""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,134,"assertSame(null, ColorEnum.getEnum(""Pink""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,137,public void testSerialization() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,138,int hashCode = ColorEnum.RED.hashCode();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,139,"assertSame(ColorEnum.RED, SerializationUtils.clone(ColorEnum.RED));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,140,"assertEquals(hashCode, SerializationUtils.clone(ColorEnum.RED).hashCode());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,141,"assertSame(ColorEnum.GREEN, SerializationUtils.clone(ColorEnum.GREEN));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,142,"assertSame(ColorEnum.BLUE, SerializationUtils.clone(ColorEnum.BLUE));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,145,public void testBroken1() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,146,try {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,147,Broken1Enum.RED.getName();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,148,fail();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,149,} catch (ExceptionInInitializerError ex) {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,150,assertTrue(ex.getException() instanceof IllegalArgumentException);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,154,public void testBroken2() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,155,try {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,156,Broken2Enum.RED.getName();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,157,fail();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,158,} catch (ExceptionInInitializerError ex) {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,159,assertTrue(ex.getException() instanceof IllegalArgumentException);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,163,public void testBroken3() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,164,try {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,165,Broken3Enum.RED.getName();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,166,fail();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,167,} catch (ExceptionInInitializerError ex) {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,168,assertTrue(ex.getException() instanceof IllegalArgumentException);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,172,public void testBroken1Operation() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,173,try {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,174,Broken1OperationEnum.PLUS.getName();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,175,fail();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,176,} catch (ExceptionInInitializerError ex) {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,177,assertTrue(ex.getException() instanceof IllegalArgumentException);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,181,public void testBroken2Operation() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,182,try {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,183,Broken2OperationEnum.PLUS.getName();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,184,fail();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,185,} catch (ExceptionInInitializerError ex) {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,186,assertTrue(ex.getException() instanceof IllegalArgumentException);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,190,public void testBroken3Operation() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,191,try {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,192,Broken3OperationEnum.PLUS.getName();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,193,fail();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,194,} catch (ExceptionInInitializerError ex) {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,195,assertTrue(ex.getException() instanceof IllegalArgumentException);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,199,public void testBroken4Operation() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,200,try {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,201,Broken4OperationEnum.PLUS.getName();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,202,fail();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,203,} catch (ExceptionInInitializerError ex) {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,204,assertTrue(ex.getException() instanceof IllegalArgumentException);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,208,public void testBroken5Operation() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,209,try {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,210,Broken5OperationEnum.PLUS.getName();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,211,fail();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,212,} catch (ExceptionInInitializerError ex) {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,213,assertTrue(ex.getException() instanceof IllegalArgumentException);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,217,public void testOperationGet() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,218,"assertSame(OperationEnum.PLUS, OperationEnum.getEnum(""Plus""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,219,"assertSame(OperationEnum.MINUS, OperationEnum.getEnum(""Minus""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,220,"assertSame(null, OperationEnum.getEnum(""Pink""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,223,public void testOperationSerialization() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,224,"assertSame(OperationEnum.PLUS, SerializationUtils.clone(OperationEnum.PLUS));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,225,"assertSame(OperationEnum.MINUS, SerializationUtils.clone(OperationEnum.MINUS));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,228,public void testOperationToString() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,229,"assertEquals(""OperationEnum[Plus]"", OperationEnum.PLUS.toString());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,232,public void testOperationList() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,233,List list = OperationEnum.getEnumList();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,234,assertNotNull(list);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,235,"assertEquals(2, list.size());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,236,"assertEquals(list.size(), OperationEnum.getEnumMap().keySet().size());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,238,Iterator it = list.iterator();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,239,"assertSame(OperationEnum.PLUS, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,240,"assertSame(OperationEnum.MINUS, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,243,public void testOperationMap() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,244,Map map = OperationEnum.getEnumMap();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,245,assertNotNull(map);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,246,"assertEquals(map.keySet().size(), OperationEnum.getEnumList().size());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,248,assertTrue(map.containsValue(OperationEnum.PLUS));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,249,assertTrue(map.containsValue(OperationEnum.MINUS));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,250,"assertSame(OperationEnum.PLUS, map.get(""Plus""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,251,"assertSame(OperationEnum.MINUS, map.get(""Minus""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,254,public void testOperationCalculation() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,255,"assertEquals(3, OperationEnum.PLUS.eval(1, 2));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,256,"assertEquals(-1, OperationEnum.MINUS.eval(1, 2));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,260,public void testExtended1Get() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,261,"assertSame(Extended1Enum.ALPHA, Extended1Enum.getEnum(""Alpha""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,262,"assertSame(Extended1Enum.BETA, Extended1Enum.getEnum(""Beta""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,263,"assertSame(null, Extended1Enum.getEnum(""Gamma""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,264,"assertSame(null, Extended1Enum.getEnum(""Delta""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,267,public void testExtended2Get() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,268,"assertSame(Extended1Enum.ALPHA, Extended2Enum.ALPHA);"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,269,"assertSame(Extended1Enum.BETA, Extended2Enum.BETA);"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,271,"assertSame(Extended2Enum.ALPHA, Extended2Enum.getEnum(""Alpha""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,272,"assertSame(Extended2Enum.BETA, Extended2Enum.getEnum(""Beta""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,273,"assertSame(Extended2Enum.GAMMA, Extended2Enum.getEnum(""Gamma""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,274,"assertSame(null, Extended2Enum.getEnum(""Delta""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,277,public void testExtended3Get() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,278,"assertSame(Extended2Enum.ALPHA, Extended3Enum.ALPHA);"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,279,"assertSame(Extended2Enum.BETA, Extended3Enum.BETA);"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,280,"assertSame(Extended2Enum.GAMMA, Extended3Enum.GAMMA);"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,282,"assertSame(Extended3Enum.ALPHA, Extended3Enum.getEnum(""Alpha""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,283,"assertSame(Extended3Enum.BETA, Extended3Enum.getEnum(""Beta""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,284,"assertSame(Extended3Enum.GAMMA, Extended3Enum.getEnum(""Gamma""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,285,"assertSame(Extended3Enum.DELTA, Extended3Enum.getEnum(""Delta""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,288,public void testExtendedSerialization() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,289,"assertSame(Extended1Enum.ALPHA, SerializationUtils.clone(Extended1Enum.ALPHA));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,290,"assertSame(Extended1Enum.BETA, SerializationUtils.clone(Extended1Enum.BETA));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,291,"assertSame(Extended2Enum.GAMMA, SerializationUtils.clone(Extended2Enum.GAMMA));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,292,"assertSame(Extended3Enum.DELTA, SerializationUtils.clone(Extended3Enum.DELTA));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,295,public void testExtendedToString() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,296,"assertEquals(""Extended1Enum[Alpha]"", Extended1Enum.ALPHA.toString());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,297,"assertEquals(""Extended1Enum[Beta]"", Extended1Enum.BETA.toString());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,299,"assertEquals(""Extended1Enum[Alpha]"", Extended2Enum.ALPHA.toString());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,300,"assertEquals(""Extended1Enum[Beta]"", Extended2Enum.BETA.toString());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,301,"assertEquals(""Extended2Enum[Gamma]"", Extended2Enum.GAMMA.toString());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,303,"assertEquals(""Extended1Enum[Alpha]"", Extended3Enum.ALPHA.toString());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,304,"assertEquals(""Extended1Enum[Beta]"", Extended3Enum.BETA.toString());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,305,"assertEquals(""Extended2Enum[Gamma]"", Extended3Enum.GAMMA.toString());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,306,"assertEquals(""Extended3Enum[Delta]"", Extended3Enum.DELTA.toString());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,309,public void testExtended1List() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,310,List list = Extended1Enum.getEnumList();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,311,assertNotNull(list);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,312,"assertEquals(2, list.size());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,313,"assertEquals(list.size(), Extended1Enum.getEnumMap().keySet().size());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,315,Iterator it = list.iterator();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,316,"assertSame(Extended1Enum.ALPHA, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,317,"assertSame(Extended1Enum.BETA, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,320,public void testExtended2List() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,321,List list = Extended2Enum.getEnumList();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,322,assertNotNull(list);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,323,"assertEquals(3, list.size());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,324,"assertEquals(list.size(), Extended2Enum.getEnumMap().keySet().size());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,326,Iterator it = list.iterator();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,327,"assertSame(Extended2Enum.ALPHA, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,328,"assertSame(Extended2Enum.BETA, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,329,"assertSame(Extended2Enum.GAMMA, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,332,public void testExtended3List() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,333,List list = Extended3Enum.getEnumList();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,334,assertNotNull(list);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,335,"assertEquals(4, list.size());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,336,"assertEquals(list.size(), Extended3Enum.getEnumMap().keySet().size());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,338,Iterator it = list.iterator();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,339,"assertSame(Extended3Enum.ALPHA, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,340,"assertSame(Extended3Enum.BETA, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,341,"assertSame(Extended3Enum.GAMMA, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,342,"assertSame(Extended3Enum.DELTA, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,345,public void testExtended1Map() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,346,Map map = Extended1Enum.getEnumMap();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,347,assertNotNull(map);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,348,"assertEquals(map.keySet().size(), Extended1Enum.getEnumList().size());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,350,assertTrue(map.containsValue(Extended1Enum.ALPHA));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,351,assertTrue(map.containsValue(Extended1Enum.BETA));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,352,"assertSame(Extended1Enum.ALPHA, map.get(""Alpha""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,353,"assertSame(Extended1Enum.BETA, map.get(""Beta""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,356,public void testExtended2Map() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,357,Map map = Extended2Enum.getEnumMap();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,358,assertNotNull(map);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,359,"assertEquals(map.keySet().size(), Extended2Enum.getEnumList().size());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,361,assertTrue(map.containsValue(Extended2Enum.ALPHA));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,362,assertTrue(map.containsValue(Extended2Enum.BETA));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,363,assertTrue(map.containsValue(Extended2Enum.GAMMA));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,364,"assertSame(Extended2Enum.ALPHA, map.get(""Alpha""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,365,"assertSame(Extended2Enum.BETA, map.get(""Beta""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,366,"assertSame(Extended2Enum.GAMMA, map.get(""Gamma""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,369,public void testExtended3Map() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,370,Map map = Extended3Enum.getEnumMap();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,371,assertNotNull(map);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,372,"assertEquals(map.keySet().size(), Extended3Enum.getEnumList().size());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,374,assertTrue(map.containsValue(Extended3Enum.ALPHA));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,375,assertTrue(map.containsValue(Extended3Enum.BETA));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,376,assertTrue(map.containsValue(Extended3Enum.GAMMA));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,377,assertTrue(map.containsValue(Extended3Enum.DELTA));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,378,"assertSame(Extended3Enum.ALPHA, map.get(""Alpha""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,379,"assertSame(Extended3Enum.BETA, map.get(""Beta""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,380,"assertSame(Extended3Enum.GAMMA, map.get(""Gamma""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,381,"assertSame(Extended3Enum.DELTA, map.get(""Delta""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,385,public void testNested() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,386,List list = new ArrayList(Nest.ColorEnum.getEnumList());
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,387,"assertEquals(3, list.size());  // all is well"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,388,Iterator it = list.iterator();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,389,"assertSame(Nest.ColorEnum.RED, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,390,"assertSame(Nest.ColorEnum.GREEN, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,391,"assertSame(Nest.ColorEnum.BLUE, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,392,// This nesting works because the enum constants are defined in the SAME
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,393,// class as the getEnumList(). It just acts as a normal enum.
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,396,public void testNestedBroken() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,397,List list = new ArrayList(NestBroken.ColorEnum.getEnumList());
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,398,try {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,399,"assertEquals(0, list.size());  // no enums!!!"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,400,// this is BROKEN because the enum constants are defined in a DIFFERENT
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,401,"// class from getEnumList(). Once NestBroken class is referenced,"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,402,"// and thus class loaded with its enum constants, the getEnumList works:"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,403,} catch (AssertionFailedError ex) {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,404,"// this actually works and isn't broken on Linux SunJDK1.4.1, so..."
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,405,"assertEquals(3, list.size());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,407,new NestBroken();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,408,list = new ArrayList(NestBroken.ColorEnum.getEnumList());
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,409,"assertEquals(3, list.size());  // all is well!!!"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,410,Iterator it = list.iterator();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,411,"assertSame(NestBroken.RED, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,412,"assertSame(NestBroken.GREEN, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,413,"assertSame(NestBroken.BLUE, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,416,public void testNestedLinked() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,417,List list = new ArrayList(NestLinked.ColorEnum.getEnumList());
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,418,"assertEquals(3, list.size());  // all is well"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,419,Iterator it = list.iterator();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,420,"assertSame(NestLinked.RED, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,421,"assertSame(NestLinked.GREEN, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,422,"assertSame(NestLinked.BLUE, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,423,// This nesting works because a static block in the enum class forces a
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,424,// class load of the outer class which defines the enum constants.
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,427,public void testNestedReferenced() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,428,List list = new ArrayList(NestReferenced.ColorEnum.getEnumList());
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,429,"assertEquals(3, list.size());  // all is well"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,430,Iterator it = list.iterator();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,431,"assertSame(NestReferenced.RED, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,432,"assertSame(NestReferenced.GREEN, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,433,"assertSame(NestReferenced.BLUE, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,434,// This nesting works because the enum constants are actually defined in
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,435,// the SAME class as the getEnumList(). The references in the outer class
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,436,// are just extra references.
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,439,"public void testColorEnumEqualsWithDifferentClassLoaders() throws SecurityException, IllegalArgumentException,"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,440,"ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,441,this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.BLUE);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,442,this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.GREEN);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,443,this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.RED);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,446,"void testEqualsTrueWithDifferentClassLoaders(ColorEnum colorEnum) throws ClassNotFoundException, SecurityException,"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,447,"NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,448,// Sanity checks:
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,449,assertTrue(colorEnum.equals(colorEnum));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,450,assertNotNull(ColorEnum.class.getClassLoader());
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,451,// set up:
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,452,ClassLoader classLoader = ClassUtilsTest.newSystemClassLoader();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,453,"Object enumObjectFromOtherClassLoader = this.getColorEnum(classLoader, colorEnum.getName());"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,454,"// the real test, part 1."
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,455,try {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,456,ColorEnum testCase = (ColorEnum) enumObjectFromOtherClassLoader;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,457,"fail(""Should have thrown a ClassCastException for "" + testCase);"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,458,} catch (ClassCastException e) {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,459,// normal.
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,461,"// the real test, part 2."
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,462,"assertEquals(""The two objects should match even though they are from different class loaders"", colorEnum,"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,463,enumObjectFromOtherClassLoader);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,464,"// the real test, part 3."
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,465,int falseCount = 0;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,466,for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,467,ColorEnum element = (ColorEnum) iter.next();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,468,if (!colorEnum.equals(element)) {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,469,falseCount++;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,470,assertFalse(enumObjectFromOtherClassLoader.equals(element));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,473,"assertEquals(ColorEnum.getEnumList().size() - 1, falseCount);"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,476,"Object getColorEnum(ClassLoader classLoader, String color) throws ClassNotFoundException, SecurityException,"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,477,"NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,478,// Sanity check:
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,479,ColorEnum.RED.equals(ColorEnum.RED);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,480,assertNotNull(ColorEnum.class.getClassLoader());
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,481,// set up:
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,482,assertNotNull(classLoader);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,483,assertFalse(classLoader.equals(ColorEnum.class.getClassLoader()));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,484,"Class otherColorEnumClass = classLoader.loadClass(""org.apache.commons.lang.enums.ColorEnum"");"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,485,assertNotNull(otherColorEnumClass);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,486,assertNotNull(otherColorEnumClass.getClassLoader());
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,487,assertTrue(classLoader.equals(otherColorEnumClass.getClassLoader()));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,488,assertFalse(otherColorEnumClass.getClassLoader().equals(ColorEnum.class.getClassLoader()));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,489,"Method method = otherColorEnumClass.getMethod(""getEnum"", new Class[]{String.class});"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,490,"Object enumObject = method.invoke(otherColorEnumClass, new Object[]{color});"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,491,assertNotNull(enumObject);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,492,assertFalse(ColorEnum.class.equals(enumObject.getClass()));
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,493,assertFalse(ColorEnum.class == enumObject.getClass());
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,494,return enumObject;
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,497,public void testEqualsToWrongInstance() {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,498,for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,499,ColorEnum element = (ColorEnum) iter.next();
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,500,this.testEqualsToWrongInstance(element);
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,504,void testEqualsToWrongInstance(ColorEnum colorEnum) {
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,505,"assertEquals(false, colorEnum.equals(""test""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,506,"assertEquals(false, colorEnum.equals(new Integer(1)));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,507,"assertEquals(false, colorEnum.equals(new Boolean(true)));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,508,"assertEquals(false, colorEnum.equals(new StringBuffer(""test"")));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,509,"assertEquals(false, colorEnum.equals(new Object()));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,510,"assertEquals(false, colorEnum.equals(null));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,511,"assertEquals(false, colorEnum.equals(""""));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,512,"assertEquals(false, colorEnum.equals(ColorEnum.getEnum(null)));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,513,"assertEquals(false, colorEnum.equals(ColorEnum.getEnum("""")));"
True,src/test/org/apache/commons/lang/enums/EnumTest.java,src/test/org/apache/commons/lang/enums/EnumTest.java,514,"assertEquals(false, colorEnum.equals(ColorEnum.getEnum(""This ColorEnum does not exist."")));"
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,18,import junit.framework.Test;
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,19,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,20,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,21,import junit.textui.TestRunner;
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,24,* Test suite for the Enum package.
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,26,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,27,"* @version $Id: EnumTestSuite.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,29,public class EnumTestSuite extends TestCase {
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,32,* Construct a new instance.
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,34,public EnumTestSuite(String name) {
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,35,super(name);
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,39,* Command-line interface.
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,41,public static void main(String[] args) {
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,42,TestRunner.run(suite());
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,46,* Get the suite of tests
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,48,public static Test suite() {
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,49,TestSuite suite = new TestSuite();
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,50,"suite.setName(""Commons-Lang-Enum Tests"");"
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,51,suite.addTest(EnumTest.suite());
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,52,suite.addTest(EnumUtilsTest.suite());
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,53,suite.addTest(ValuedEnumTest.suite());
True,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,src/test/org/apache/commons/lang/enums/EnumTestSuite.java,54,return suite;
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,18,import java.lang.reflect.Constructor;
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,19,import java.lang.reflect.Modifier;
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,20,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,21,import java.util.List;
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,22,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,24,import junit.framework.Test;
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,25,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,26,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,29,* Test cases for the {@link Enum} class.
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,31,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,32,"* @version $Id: EnumUtilsTest.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,35,public final class EnumUtilsTest extends TestCase {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,37,public EnumUtilsTest(String name) {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,38,super(name);
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,41,public void setUp() {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,44,public static Test suite() {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,45,TestSuite suite = new TestSuite(EnumUtilsTest.class);
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,46,"suite.setName(""EnumUtils Tests"");"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,47,return suite;
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,51,public void testConstructor() {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,52,assertNotNull(new EnumUtils());
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,53,Constructor[] cons = EnumUtils.class.getDeclaredConstructors();
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,54,"assertEquals(1, cons.length);"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,55,"assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,56,"assertEquals(true, Modifier.isPublic(EnumUtils.class.getModifiers()));"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,57,"assertEquals(false, Modifier.isFinal(EnumUtils.class.getModifiers()));"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,61,public void testIterator() {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,62,Iterator it = EnumUtils.iterator(ColorEnum.class);
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,63,"assertSame(ColorEnum.RED, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,64,"assertSame(ColorEnum.GREEN, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,65,"assertSame(ColorEnum.BLUE, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,66,it = EnumUtils.iterator(DummyEnum.class);
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,67,"assertEquals(false, it.hasNext());"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,70,public void testIteratorEx() {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,71,try {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,72,EnumUtils.iterator(null);
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,73,fail();
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,74,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,75,try {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,76,EnumUtils.iterator(Object.class);
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,77,fail();
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,78,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,82,public void testList() {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,83,List list = EnumUtils.getEnumList(ColorEnum.class);
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,84,Iterator it = list.iterator();
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,85,"assertSame(ColorEnum.RED, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,86,"assertSame(ColorEnum.GREEN, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,87,"assertSame(ColorEnum.BLUE, it.next());"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,88,list = EnumUtils.getEnumList(DummyEnum.class);
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,89,"assertEquals(0, list.size());"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,92,public void testListEx() {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,93,try {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,94,EnumUtils.getEnumList(null);
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,95,fail();
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,96,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,97,try {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,98,EnumUtils.getEnumList(Object.class);
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,99,fail();
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,100,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,104,public void testMap() {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,105,Map map = EnumUtils.getEnumMap(ColorEnum.class);
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,106,assertTrue(map.containsValue(ColorEnum.RED));
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,107,assertTrue(map.containsValue(ColorEnum.GREEN));
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,108,assertTrue(map.containsValue(ColorEnum.BLUE));
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,109,"assertSame(ColorEnum.RED, map.get(""Red""));"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,110,"assertSame(ColorEnum.GREEN, map.get(""Green""));"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,111,"assertSame(ColorEnum.BLUE, map.get(""Blue""));"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,112,map = EnumUtils.getEnumMap(DummyEnum.class);
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,113,"assertEquals(0, map.size());"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,116,public void testMapEx() {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,117,try {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,118,EnumUtils.getEnumMap(null);
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,119,fail();
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,120,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,121,try {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,122,EnumUtils.getEnumMap(Object.class);
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,123,fail();
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,124,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,128,public void testGet() {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,129,"assertSame(ColorEnum.RED, EnumUtils.getEnum(ColorEnum.class, ""Red""));"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,130,"assertSame(ColorEnum.GREEN, EnumUtils.getEnum(ColorEnum.class, ""Green""));"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,131,"assertSame(ColorEnum.BLUE, EnumUtils.getEnum(ColorEnum.class, ""Blue""));"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,132,"assertSame(null, EnumUtils.getEnum(ColorEnum.class, ""Pink""));"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,133,"assertSame(null, EnumUtils.getEnum(DummyEnum.class, ""Pink""));"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,136,public void testGetEx() {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,137,try {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,138,"EnumUtils.getEnum(null, """");"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,139,fail();
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,140,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,141,try {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,142,"EnumUtils.getEnum(Object.class, ""Red"");"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,143,fail();
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,144,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,148,public void testGetValue() {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,149,"assertSame(ValuedColorEnum.RED, EnumUtils.getEnum(ValuedColorEnum.class, 1));"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,150,"assertSame(ValuedColorEnum.GREEN, EnumUtils.getEnum(ValuedColorEnum.class, 2));"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,151,"assertSame(ValuedColorEnum.BLUE, EnumUtils.getEnum(ValuedColorEnum.class, 3));"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,152,"assertSame(null, EnumUtils.getEnum(ValuedColorEnum.class, 4));"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,153,"assertSame(null, EnumUtils.getEnum(DummyEnum.class, 5));"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,156,public void testGetValueEx() {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,157,try {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,158,"EnumUtils.getEnum(null, 0);"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,159,fail();
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,160,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,161,try {
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,162,"EnumUtils.getEnum(Object.class, 2);"
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,163,fail();
True,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,src/test/org/apache/commons/lang/enums/EnumUtilsTest.java,164,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,2,"* Copyright 2003,2004 The Apache Software Foundation."
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,18,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,23,* Base extended enumeration.
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,25,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,26,"* @version $Id: Extended1Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,28,public class Extended1Enum extends Enum {
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,29,"public static final Extended1Enum ALPHA = new Extended1Enum(""Alpha"");"
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,30,"public static final Extended1Enum BETA = new Extended1Enum(""Beta"");"
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,32,protected Extended1Enum(String name) {
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,33,super(name);
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,36,public static Extended1Enum getEnum(String name) {
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,37,"return (Extended1Enum) getEnum(Extended1Enum.class, name);"
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,40,public static Map getEnumMap() {
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,41,return getEnumMap(Extended1Enum.class);
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,44,public static List getEnumList() {
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,45,return getEnumList(Extended1Enum.class);
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,48,public static Iterator iterator() {
True,src/test/org/apache/commons/lang/enums/Extended1Enum.java,src/test/org/apache/commons/lang/enums/Extended1Enum.java,49,return iterator(Extended1Enum.class);
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,2,"* Copyright 2003,2004 The Apache Software Foundation."
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,18,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,23,* Extended enumeration.
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,25,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,26,"* @version $Id: Extended2Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,28,public class Extended2Enum extends Extended1Enum {
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,29,"public static final Extended1Enum GAMMA = new Extended2Enum(""Gamma"");"
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,31,protected Extended2Enum(String color) {
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,32,super(color);
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,35,public static Extended1Enum getEnum(String name) {
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,36,"return (Extended1Enum) getEnum(Extended2Enum.class, name);"
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,39,public static Map getEnumMap() {
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,40,return getEnumMap(Extended2Enum.class);
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,43,public static List getEnumList() {
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,44,return getEnumList(Extended2Enum.class);
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,47,public static Iterator iterator() {
True,src/test/org/apache/commons/lang/enums/Extended2Enum.java,src/test/org/apache/commons/lang/enums/Extended2Enum.java,48,return iterator(Extended2Enum.class);
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,2,"* Copyright 2003,2004 The Apache Software Foundation."
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,18,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,23,* Extended enumeration.
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,25,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,26,"* @version $Id: Extended3Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,28,public class Extended3Enum extends Extended2Enum {
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,29,"public static final Extended1Enum DELTA = new Extended3Enum(""Delta"");"
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,31,protected Extended3Enum(String name) {
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,32,super(name);
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,35,public static Extended1Enum getEnum(String name) {
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,36,"return (Extended1Enum) Enum.getEnum(Extended3Enum.class, name);"
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,39,public static Map getEnumMap() {
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,40,return Enum.getEnumMap(Extended3Enum.class);
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,43,public static List getEnumList() {
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,44,return Enum.getEnumList(Extended3Enum.class);
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,47,public static Iterator iterator() {
True,src/test/org/apache/commons/lang/enums/Extended3Enum.java,src/test/org/apache/commons/lang/enums/Extended3Enum.java,48,return Enum.iterator(Extended3Enum.class);
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,18,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,23,* Color enumeration demonstrating a normal simple nesting case.
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,24,* All is well here as the nested enum class is really no different
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,25,* to any other class.
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,27,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,28,"* @version $Id: Nest.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,31,public final class Nest {
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,33,public Nest() {
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,34,super();
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,37,public static final class ColorEnum extends Enum {
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,38,"public static final ColorEnum RED = new ColorEnum(""Red"");"
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,39,"public static final ColorEnum GREEN = new ColorEnum(""Green"");"
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,40,"public static final ColorEnum BLUE = new ColorEnum(""Blue"");"
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,42,private ColorEnum(String color) {
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,43,super(color);
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,46,public static ColorEnum getEnum(String color) {
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,47,"return (ColorEnum) getEnum(ColorEnum.class, color);"
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,50,public static Map getEnumMap() {
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,51,return getEnumMap(ColorEnum.class);
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,54,public static List getEnumList() {
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,55,return getEnumList(ColorEnum.class);
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,58,public static Iterator iterator() {
True,src/test/org/apache/commons/lang/enums/Nest.java,src/test/org/apache/commons/lang/enums/Nest.java,59,return iterator(ColorEnum.class);
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,18,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,23,* Color enumeration which demonstrates how to break the enum system.
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,24,* <p>
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,25,* The class loader sees the two classes here as independent - the enum
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,26,"* class is nested, not an inner class. Calling getEnumList() on ColorEnum"
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,27,"* will return an empty list, unless and until the NestBroken class is"
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,28,* referenced.
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,30,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,31,"* @version $Id: NestBroken.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,34,public final class NestBroken {
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,36,"public static final ColorEnum RED = new ColorEnum(""Red"");"
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,37,"public static final ColorEnum GREEN = new ColorEnum(""Green"");"
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,38,"public static final ColorEnum BLUE = new ColorEnum(""Blue"");"
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,40,public NestBroken() {
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,41,super();
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,44,public static final class ColorEnum extends Enum {
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,46,private ColorEnum(String color) {
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,47,super(color);
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,50,public static ColorEnum getEnum(String color) {
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,51,"return (ColorEnum) getEnum(ColorEnum.class, color);"
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,54,public static Map getEnumMap() {
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,55,return getEnumMap(ColorEnum.class);
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,58,public static List getEnumList() {
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,59,return getEnumList(ColorEnum.class);
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,62,public static Iterator iterator() {
True,src/test/org/apache/commons/lang/enums/NestBroken.java,src/test/org/apache/commons/lang/enums/NestBroken.java,63,return iterator(ColorEnum.class);
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,18,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,23,* Color enumeration which demonstrates how to define the constants in a
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,24,* different class to the Enum. The extra <code>static{}</code> block is
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,25,* needed to ensure that the enum constants are created before the
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,26,* static methods on the ColorEnum are used.
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,27,* <p>
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,28,* The class loader sees the two classes here as independent - the enum
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,29,"* class is nested, not an inner class. The static block thus forces the"
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,30,"* class load of the outer class, which is needed to initialise the enums."
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,32,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,33,"* @version $Id: NestLinked.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,36,public final class NestLinked {
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,38,"public static final ColorEnum RED = new ColorEnum(""Red"");"
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,39,"public static final ColorEnum GREEN = new ColorEnum(""Green"");"
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,40,"public static final ColorEnum BLUE = new ColorEnum(""Blue"");"
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,42,public NestLinked() {
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,43,super();
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,46,public static final class ColorEnum extends Enum {
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,48,static {
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,49,// Explicitly reference the class where the enums are defined
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,50,Object obj = NestLinked.RED;
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,53,private ColorEnum(String color) {
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,54,super(color);
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,57,public static ColorEnum getEnum(String color) {
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,58,"return (ColorEnum) getEnum(ColorEnum.class, color);"
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,61,public static Map getEnumMap() {
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,62,return getEnumMap(ColorEnum.class);
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,65,public static List getEnumList() {
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,66,return getEnumList(ColorEnum.class);
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,69,public static Iterator iterator() {
True,src/test/org/apache/commons/lang/enums/NestLinked.java,src/test/org/apache/commons/lang/enums/NestLinked.java,70,return iterator(ColorEnum.class);
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,18,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,23,* Color enumeration which demonstrates how to provide a view of the constants
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,24,"* in a different class to the Enum. This technique is the safest, however it"
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,25,* is obviously inconvenient as it involves defining two sets of constants.
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,26,* See NestedLinked for an alternative.
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,28,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,29,"* @version $Id: NestReferenced.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,32,public final class NestReferenced {
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,34,public static final ColorEnum RED = ColorEnum.RED;
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,35,public static final ColorEnum GREEN = ColorEnum.GREEN;
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,36,public static final ColorEnum BLUE = ColorEnum.BLUE;
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,38,public NestReferenced() {
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,39,super();
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,42,public static final class ColorEnum extends Enum {
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,44,"// must be defined here, not just in outer class"
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,45,"private static final ColorEnum RED = new ColorEnum(""Red"");"
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,46,"private static final ColorEnum GREEN = new ColorEnum(""Green"");"
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,47,"private static final ColorEnum BLUE = new ColorEnum(""Blue"");"
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,49,private ColorEnum(String color) {
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,50,super(color);
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,53,public static ColorEnum getEnum(String color) {
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,54,"return (ColorEnum) getEnum(ColorEnum.class, color);"
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,57,public static Map getEnumMap() {
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,58,return getEnumMap(ColorEnum.class);
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,61,public static List getEnumList() {
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,62,return getEnumList(ColorEnum.class);
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,65,public static Iterator iterator() {
True,src/test/org/apache/commons/lang/enums/NestReferenced.java,src/test/org/apache/commons/lang/enums/NestReferenced.java,66,return iterator(ColorEnum.class);
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,18,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,23,* Operator enumeration.
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,25,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,26,"* @version $Id: OperationEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,28,public abstract class OperationEnum extends Enum {
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,29,// This syntax works for JDK 1.3 and upwards:
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,30,"//    public static final OperationEnum PLUS = new OperationEnum(""Plus"") {"
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,31,"//        public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,32,//            return (a + b);
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,35,"//    public static final OperationEnum MINUS = new OperationEnum(""Minus"") {"
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,36,"//        public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,37,//            return (a - b);
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,40,// This syntax works for JDK 1.2 and upwards:
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,41,public static final OperationEnum PLUS = new PlusOperation();
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,42,private static class PlusOperation extends OperationEnum {
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,43,private PlusOperation() {
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,44,"super(""Plus"");"
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,46,"public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,47,return (a + b);
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,50,public static final OperationEnum MINUS = new MinusOperation();
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,51,private static class MinusOperation extends OperationEnum {
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,52,private MinusOperation() {
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,53,"super(""Minus"");"
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,55,"public int eval(int a, int b) {"
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,56,return (a - b);
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,60,private OperationEnum(String name) {
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,61,super(name);
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,64,public final Class getEnumClass() {
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,65,return OperationEnum.class;
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,68,"public abstract int eval(int a, int b);"
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,70,public static OperationEnum getEnum(String name) {
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,71,"return (OperationEnum) getEnum(OperationEnum.class, name);"
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,74,public static Map getEnumMap() {
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,75,return getEnumMap(OperationEnum.class);
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,78,public static List getEnumList() {
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,79,return getEnumList(OperationEnum.class);
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,82,public static Iterator iterator() {
True,src/test/org/apache/commons/lang/enums/OperationEnum.java,src/test/org/apache/commons/lang/enums/OperationEnum.java,83,return iterator(OperationEnum.class);
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,18,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,23,* Color enumeration.
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,25,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,26,"* @version $Id: ValuedColorEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,29,public final class ValuedColorEnum extends ValuedEnum {
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,30,"public static final ValuedColorEnum RED = new ValuedColorEnum(""Red"", 1);"
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,31,"public static final ValuedColorEnum GREEN = new ValuedColorEnum(""Green"", 2);"
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,32,"public static final ValuedColorEnum BLUE = new ValuedColorEnum(""Blue"", 3);"
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,34,"private ValuedColorEnum(String color, int value) {"
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,35,"super(color, value);"
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,38,public static ValuedColorEnum getEnum(String color) {
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,39,"return (ValuedColorEnum) getEnum(ValuedColorEnum.class, color);"
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,42,public static ValuedColorEnum getEnum(int value) {
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,43,"return (ValuedColorEnum) getEnum(ValuedColorEnum.class, value);"
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,46,public static Map getEnumMap() {
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,47,return getEnumMap(ValuedColorEnum.class);
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,50,public static List getEnumList() {
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,51,return getEnumList(ValuedColorEnum.class);
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,54,public static Iterator iterator() {
True,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,src/test/org/apache/commons/lang/enums/ValuedColorEnum.java,55,return iterator(ValuedColorEnum.class);
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,16,package org.apache.commons.lang.enums;
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,18,import java.util.Iterator;
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,22,import junit.framework.Test;
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,23,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,24,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,25,import org.apache.commons.lang.SerializationUtils;
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,28,* Test cases for the {@link Enum} class.
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,30,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,31,"* @version $Id: ValuedEnumTest.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,34,public final class ValuedEnumTest extends TestCase {
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,36,public ValuedEnumTest(String name) {
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,37,super(name);
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,40,public void setUp() {
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,43,public static Test suite() {
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,44,TestSuite suite = new TestSuite(ValuedEnumTest.class);
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,45,"suite.setName(""ValuedEnum Tests"");"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,46,return suite;
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,49,public void testName() {
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,50,"assertEquals(""Red"", ValuedColorEnum.RED.getName());"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,51,"assertEquals(""Green"", ValuedColorEnum.GREEN.getName());"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,52,"assertEquals(""Blue"", ValuedColorEnum.BLUE.getName());"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,55,public void testValue() {
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,56,"assertEquals(1, ValuedColorEnum.RED.getValue());"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,57,"assertEquals(2, ValuedColorEnum.GREEN.getValue());"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,58,"assertEquals(3, ValuedColorEnum.BLUE.getValue());"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,61,public void testCompareTo() {
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,62,assertTrue(ValuedColorEnum.BLUE.compareTo(ValuedColorEnum.BLUE) == 0);
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,63,assertTrue(ValuedColorEnum.RED.compareTo(ValuedColorEnum.BLUE) < 0);
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,64,assertTrue(ValuedColorEnum.BLUE.compareTo(ValuedColorEnum.RED) > 0);
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,67,public void testEquals() {
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,68,"assertSame(ValuedColorEnum.RED, ValuedColorEnum.RED);"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,69,"assertSame(ValuedColorEnum.getEnum(""Red""), ValuedColorEnum.RED);"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,72,public void testToString() {
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,73,String toString = ValuedColorEnum.RED.toString();
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,74,"assertEquals(""ValuedColorEnum[Red=1]"", toString);"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,75,"assertSame(toString, ValuedColorEnum.RED.toString());"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,78,public void testIterator() {
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,79,Iterator it = ValuedColorEnum.iterator();
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,80,"assertSame(ValuedColorEnum.RED, it.next());"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,81,"assertSame(ValuedColorEnum.GREEN, it.next());"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,82,"assertSame(ValuedColorEnum.BLUE, it.next());"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,85,public void testList() {
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,86,List list = ValuedColorEnum.getEnumList();
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,88,assertNotNull(list);
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,90,"assertEquals( list.size(),"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,91,ValuedColorEnum.getEnumMap().keySet().size());
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,93,Iterator it = list.iterator();
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,94,"assertSame(ValuedColorEnum.RED, it.next());"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,95,"assertSame(ValuedColorEnum.GREEN, it.next());"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,96,"assertSame(ValuedColorEnum.BLUE, it.next());"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,99,public void testMap() {
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,100,Map map = ValuedColorEnum.getEnumMap();
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,102,assertNotNull(map);
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,104,"assertEquals( map.keySet().size(),"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,105,ValuedColorEnum.getEnumList().size());
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,107,assertTrue(map.containsValue(ValuedColorEnum.RED));
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,108,assertTrue(map.containsValue(ValuedColorEnum.GREEN));
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,109,assertTrue(map.containsValue(ValuedColorEnum.BLUE));
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,110,"assertSame(ValuedColorEnum.RED, map.get(""Red""));"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,111,"assertSame(ValuedColorEnum.GREEN, map.get(""Green""));"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,112,"assertSame(ValuedColorEnum.BLUE, map.get(""Blue""));"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,115,public void testGet() {
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,116,"assertSame(ValuedColorEnum.RED, ValuedColorEnum.getEnum(""Red""));"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,117,"assertSame(ValuedColorEnum.GREEN, ValuedColorEnum.getEnum(""Green""));"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,118,"assertSame(ValuedColorEnum.BLUE, ValuedColorEnum.getEnum(""Blue""));"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,119,"assertSame(null, ValuedColorEnum.getEnum(""Pink""));"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,122,public void testGetValue() {
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,123,"assertSame(ValuedColorEnum.RED, ValuedColorEnum.getEnum(1));"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,124,"assertSame(ValuedColorEnum.GREEN, ValuedColorEnum.getEnum(2));"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,125,"assertSame(ValuedColorEnum.BLUE, ValuedColorEnum.getEnum(3));"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,126,"assertSame(null, ValuedColorEnum.getEnum(4));"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,129,public void testSerialization() {
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,130,"assertSame(ValuedColorEnum.RED, SerializationUtils.clone(ValuedColorEnum.RED));"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,131,"assertSame(ValuedColorEnum.GREEN, SerializationUtils.clone(ValuedColorEnum.GREEN));"
True,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,132,"assertSame(ValuedColorEnum.BLUE, SerializationUtils.clone(ValuedColorEnum.BLUE));"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,19,import org.apache.commons.math.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,20,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,26,import org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,48, @exception IllegalArgumentException if the direction norm is too small
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,51,* @exception MathArithmeticException if the direction norm is too small
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,57,/** Copy constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,58,* <p>The created instance is completely independent from the
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,59,"* original instance, it is a deep copy.</p>"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,60,* @param line line to copy
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,62,public Line(final Line line) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,63,this.direction = line.direction;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,64,this.zero      = line.zero;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,57, @exception IllegalArgumentException if the direction norm is too small
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,70,* @exception MathArithmeticException if the direction norm is too small
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,62,"hrow new IllegalArgumentException(""null norm"");"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,75,throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,65,"ero = new Vector3D(1.0, p, -Vector3D.dotProduct(p, this.direction), this.direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,78,"zero = new Vector3D(1.0, p, -p.dotProduct(this.direction), this.direction);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,93, @param point point to check (must be a {@link Vector3D Vector3D}
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,94, instance)
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,95, @return abscissa of the point (really a
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,96, {org.apache.commons.math.geometry.euclidean.oned.Vector1D Vector1D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,106,* @param point point to check
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,107,* @return abscissa of the point
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,98,ublic Vector1D toSubSpace(final Vector<Euclidean3D> point) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,99,ector3D p3 = (Vector3D) point;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,100,"eturn new Vector1D(Vector3D.dotProduct(p3.subtract(zero), direction));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,109,public double getAbscissa(final Vector3D point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,110,return point.subtract(zero).dotProduct(direction);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,104, @param point desired abscissa for the point (must be a
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,105, {org.apache.commons.math.geometry.euclidean.oned.Vector1D Vector1D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,114,* @param point desired abscissa for the point
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,107, (really a {@link Vector3D Vector3D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,117,public Vector3D pointAt(final double abscissa) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,118,"return new Vector3D(1.0, zero, abscissa, direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,121,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,122,* @see #getAbscissa(Vector3D)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,124,public Vector1D toSubSpace(final Vector<Euclidean3D> point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,125,return new Vector1D(getAbscissa((Vector3D) point));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,128,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,129,* @see #pointAt(double)
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,110,ector1D p1 = (Vector1D) point;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,111,"eturn new Vector3D(1.0, zero, p1.getX(), direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,132,return pointAt(((Vector1D) point).getX());
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,140,"inal Vector3D n = new Vector3D(1.0, d, -Vector3D.dotProduct(d, direction), direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,161,"final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,145, @param line line to check agains the instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,166,* @param line line to check against the instance
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,151,f (normal.getNorm() < 1.0e-10) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,172,final double n = normal.getNorm();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,173,if (n < MathUtils.SAFE_MIN) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,156,/ separating middle plane
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,157,"inal Plane middle = new Plane(new Vector3D(0.5, zero, 0.5, line.zero), normal);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,178,// signed separation of the two parallel planes that contains the lines
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,179,final double offset = line.zero.subtract(zero).dotProduct(normal) / n;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,159,/ the lines are at the same distance on either side of the plane
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,160,eturn 2 * FastMath.abs(middle.getOffset(zero));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,181,return FastMath.abs(offset);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,185,/** Compute the point of the instance closest to another line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,186,* @param line line to check against the instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,187,* @return point of the instance closest to another line
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,189,public Vector3D closestPoint(final Line line) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,191,final double cos = direction.dotProduct(line.direction);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,192,final double n = 1 - cos * cos;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,193,if (n < MathUtils.EPSILON) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,194,// the lines are parallel
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,195,return zero;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,198,final Vector3D delta0 = line.zero.subtract(zero);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,199,final double a        = delta0.dotProduct(direction);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,200,final double b        = delta0.dotProduct(line.direction);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,202,"return new Vector3D(1, zero, (a - b * cos) / n, direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,206,/** Get the intersection point of the instance and another line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,207,* @param line other line
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,208,* @return intersection point of the instance and the other line
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,209,* or null if there are no intersection points
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,211,public Vector3D intersection(final Line line) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,212,final Vector3D closest = closestPoint(line);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,213,return line.contains(closest) ? closest : null;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,167,"inal double scal = Vector3D.dotProduct(plane.getNormal(), w);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,167,final double scal = plane.getNormal().dotProduct(w);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,204,"ector2D pPoint       = new Vector2D(Vector3D.dotProduct(previous3D, u),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,205,"ector3D.dotProduct(previous3D, v));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,204,"Vector2D pPoint       = new Vector2D(previous3D.dotProduct(u),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,205,previous3D.dotProduct(v));
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,209,"inal Vector2D  cPoint    = new Vector2D(Vector3D.dotProduct(current3D, u),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,210,"ector3D.dotProduct(current3D, v));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,209,"final Vector2D  cPoint    = new Vector2D(current3D.dotProduct(u),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,210,current3D.dotProduct(v));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,19,import org.apache.commons.math.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,20,import org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,51, @exception IllegalArgumentException if the normal norm is too small
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,53,* @exception MathArithmeticException if the normal norm is too small
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,62, @exception IllegalArgumentException if the normal norm is too small
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,64,* @exception MathArithmeticException if the normal norm is too small
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,66,"riginOffset = -Vector3D.dotProduct(p, w);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,68,originOffset = -p.dotProduct(w);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,76, @exception IllegalArgumentException if the points do not constitute a plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,78,* @exception MathArithmeticException if the points do not constitute a plane
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,79,"his(p1, Vector3D.crossProduct(p2.subtract(p1), p3.subtract(p1)));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,81,"this(p1, p2.subtract(p1).crossProduct(p3.subtract(p1)));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,112,"riginOffset = -Vector3D.dotProduct(p, w);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,114,originOffset = -p.dotProduct(w);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,132, @exception IllegalArgumentException if the normal norm is too small
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,134,* @exception MathArithmeticException if the normal norm is too small
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,137,"hrow new IllegalArgumentException(""null norm"");"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,139,throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,223,inal Vector3D p3D = (Vector3D) point;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,224,"eturn new Vector2D(Vector3D.dotProduct(p3D, u),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,225,"ector3D.dotProduct(p3D, v));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,225,"return new Vector2D(point.dotProduct(u), point.dotProduct(v));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,307,"inal double   dot       = Vector3D.dotProduct(w, direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,307,final double   dot       = w.dotProduct(direction);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,312,"inal double   k     = -(originOffset + Vector3D.dotProduct(w, point)) / dot;"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,312,final double   k     = -(originOffset + w.dotProduct(point)) / dot;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,418,"eturn Vector3D.dotProduct((Vector3D) point, w) + originOffset;"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,418,return point.dotProduct(w) + originOffset;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,427,"eturn Vector3D.dotProduct(((Plane) other).w, w) > 0.0;"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,427,return (((Plane) other).w).dotProduct(w) > 0.0;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,178,"ouble   scaled = area * Vector3D.dotProduct(facetB, plane.getNormal());"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,178,double   scaled = area * facetB.dotProduct(plane.getNormal());
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,75,"f (Vector3D.dotProduct(crossP, otherPlane.getNormal()) < 0) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,75,if (crossP.dotProduct(otherPlane.getNormal()) < 0) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,112,"f (Vector3D.dotProduct(crossP, otherPlane.getNormal()) < 0) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,112,if (crossP.dotProduct(otherPlane.getNormal()) < 0) {

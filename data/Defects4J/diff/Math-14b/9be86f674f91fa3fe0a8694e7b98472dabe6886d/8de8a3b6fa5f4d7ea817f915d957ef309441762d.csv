is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,134, <li> <code> f(a) * f(b) < 0 </code> </li>
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,134,* <li> <code> f(a) * f(b) <= 0 </code> </li>
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,144, <li> <code> f(a) * f(b) < 0 </code> --  success!</li>
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,144,* <li> <code> f(a) * f(b) <= 0 </code> --  success!</li>
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,198,f (fa * fb >= 0.0 ) {
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,198,if (fa * fb > 0.0 ) {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,68,/ subclasses can overide if there is a better method.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,68,// subclasses can override if there is a better method.
False,src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,20,mport org.apache.commons.math.ConvergenceException;
True,src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,20,import junit.framework.TestCase;
False,src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,25,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,94,ublic void testBracketCornerSolution() throws MathException {
False,src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,95,ry {
False,src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,96,"nivariateRealSolverUtils.bracket(sin, 1.5, 0, 2.0);"
False,src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,97,"ail(""Expecting ConvergenceException"");"
False,src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,98, catch (ConvergenceException ex) {
False,src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,99,/ expected
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,20,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,167,public void testMath280() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,168,"NormalDistribution normal = new NormalDistributionImpl(0,1);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,169,double result = normal.inverseCumulativeProbability(0.9772498680518209);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,170,"assertEquals(2.0, result, 1.0e-12);"

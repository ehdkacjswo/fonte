is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,274,"OUT_OF_RANGE_LEFT(""{0} out of ({1}, {2}] range""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,275,"OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),"
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,17,package org.apache.commons.math.random;
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,19,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,20,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,21,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,22,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,25,* <p>This class provides a stable normalized random generator. It samples from a stable
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,26,* distribution with location parameter 0 and scale 1.</p>
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,28,* <p>The implementation uses the Chambers-Mallows-Stuck method as described in
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,29,* <i>Handbook of computational statistics: concepts and methods</i> by
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,30,"* James E. Gentle, Wolfgang Hrdle, Yuichi Mori.</p>"
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,32,* @version $Id$
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,33,* @since 3.0
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,35,public class StableRandomGenerator implements NormalizedRandomGenerator {
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,36,/** Underlying generator. */
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,37,private final RandomGenerator generator;
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,39,/** stability parameter */
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,40,private final double alpha;
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,42,/** skewness parameter */
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,43,private final double beta;
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,45,/** cache of expression value used in generation */
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,46,private final double zeta;
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,49,* Create a new generator.
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,51,* @param generator underlying random generator to use
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,52,"* @param alpha Stability parameter. Must be in range (0, 2]"
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,53,"* @param beta Skewness parameter. Must be in range [-1, 1]"
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,55,"public StableRandomGenerator(final RandomGenerator generator, double alpha,"
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,56,double beta) {
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,57,if (generator == null) {
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,58,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,61,if (!(alpha > 0d && alpha <= 2d)) {
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,62,"throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,"
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,63,"alpha, 0, 2);"
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,66,if (!(beta >= -1d && beta <= 1d)) {
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,67,"throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_SIMPLE,"
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,68,"beta, -1, 1);"
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,71,this.generator = generator;
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,72,this.alpha = alpha;
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,73,this.beta = beta;
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,74,if (alpha < 2d && beta != 0d) {
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,75,zeta = beta * FastMath.tan(FastMath.PI * alpha / 2);
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,76,} else {
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,77,zeta = 0d;
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,82,* Generate a random scalar with zero location and unit scale.
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,84,* @return a random scalar with zero location and unit scale
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,86,public double nextNormalizedDouble() {
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,87,// we need 2 uniform random numbers to calculate omega and phi
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,88,double omega = -FastMath.log(generator.nextDouble());
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,89,double phi = FastMath.PI * (generator.nextDouble() - 0.5);
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,91,// Normal distribution case (Box-Muller algorithm)
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,92,if (alpha == 2d) {
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,93,return FastMath.sqrt(2d * omega) * FastMath.sin(phi);
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,96,double x;
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,97,"// when beta = 0, zeta is zero as well"
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,98,// Thus we can exclude it from the formula
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,99,if (beta == 0d) {
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,100,// Cauchy distribution case
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,101,if (alpha == 1d) {
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,102,x = FastMath.tan(phi);
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,103,} else {
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,104,"x = FastMath.pow(omega * FastMath.cos((1 - alpha) * phi),"
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,105,1d / alpha - 1d) *
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,106,FastMath.sin(alpha * phi) /
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,107,"FastMath.pow(FastMath.cos(phi), 1d / alpha);"
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,109,} else {
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,110,// Generic stable distribution
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,111,double cosPhi = FastMath.cos(phi);
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,112,// to avoid rounding errors around alpha = 1
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,113,if (FastMath.abs(alpha - 1d) > 1e-8) {
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,114,double alphaPhi = alpha * phi;
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,115,double invAlphaPhi = phi - alphaPhi;
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,116,x = (FastMath.sin(alphaPhi) + zeta * FastMath.cos(alphaPhi)) / cosPhi *
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,117,(FastMath.cos(invAlphaPhi) + zeta * FastMath.sin(invAlphaPhi)) /
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,118,"FastMath.pow(omega * cosPhi, (1 - alpha) / alpha);"
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,119,} else {
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,120,double betaPhi = FastMath.PI / 2 + beta * phi;
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,121,x = 2d / FastMath.PI * (betaPhi * FastMath.tan(phi) - beta *
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,122,FastMath.log(FastMath.PI / 2d * omega * cosPhi / betaPhi));
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,124,if (alpha != 1d) {
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,125,x = x + beta * FastMath.tan(FastMath.PI * alpha / 2);
True,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,src/main/java/org/apache/commons/math/random/StableRandomGenerator.java,129,return x;
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,17,package org.apache.commons.math.random;
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,19,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,21,import org.apache.commons.math.exception.OutOfRangeException;
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,22,import org.apache.commons.math.stat.StatUtils;
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,23,import org.apache.commons.math.stat.descriptive.DescriptiveStatistics;
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,26,* The class <code>StableRandomGeneratorTest</code> contains tests for the class
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,27,* {@link <code>StableRandomGenerator</code>}
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,29,* @version $Revision$
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,31,public class StableRandomGeneratorTest extends TestCase {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,33,private RandomGenerator rg = new Well19937c(100);
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,34,private final static int sampleSize = 10000;
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,37,* Construct new test instance
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,39,* @param name the test name
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,41,public StableRandomGeneratorTest(String name) {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,42,super(name);
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,46,* Run the double nextDouble() method test Due to leptokurtic property the
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,47,* acceptance range is widened.
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,49,public void testNextDouble() {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,50,"StableRandomGenerator generator = new StableRandomGenerator(rg, 1.3,"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,51,0.1);
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,52,double[] sample = new double[2 * sampleSize];
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,53,for (int i = 0; i < sample.length; ++i) {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,54,sample[i] = generator.nextNormalizedDouble();
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,56,"assertEquals(0.0, StatUtils.mean(sample), 0.2);"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,60,"* If alpha = 2, than it must be Gaussian distribution"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,62,public void testGaussianCase() {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,63,"StableRandomGenerator generator = new StableRandomGenerator(rg, 2d, 0.0);"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,65,double[] sample = new double[sampleSize];
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,66,for (int i = 0; i < sample.length; ++i) {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,67,sample[i] = generator.nextNormalizedDouble();
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,69,"assertEquals(0.0, StatUtils.mean(sample), 0.02);"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,70,"assertEquals(1.0, StatUtils.variance(sample), 0.02);"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,74,"* If alpha = 1, than it must be Cauchy distribution"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,76,public void testCauchyCase() {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,77,"StableRandomGenerator generator = new StableRandomGenerator(rg, 1d, 0.0);"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,78,DescriptiveStatistics summary = new DescriptiveStatistics();
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,80,for (int i = 0; i < sampleSize; ++i) {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,81,double sample = generator.nextNormalizedDouble();
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,82,summary.addValue(sample);
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,85,// Standard Cauchy distribution should have zero median and mode
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,86,double median = summary.getPercentile(50);
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,87,"assertEquals(0.0, median, 0.2);"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,91,* Input parameter range tests
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,93,public void testAlphaRangeBelowZero() {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,94,try {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,95,"StableRandomGenerator generator = new StableRandomGenerator(rg,"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,96,"-1.0, 0.0);"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,97,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,98,"assertEquals(-1.0, e.getArgument());"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,102,public void testAlphaRangeAboveTwo() {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,103,try {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,104,"StableRandomGenerator generator = new StableRandomGenerator(rg,"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,105,"3.0, 0.0);"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,106,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,107,"assertEquals(3.0, e.getArgument());"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,111,public void testBetaRangeBelowMinusOne() {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,112,try {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,113,"StableRandomGenerator generator = new StableRandomGenerator(rg,"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,114,"1.0, -2.0);"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,115,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,116,"assertEquals(-2.0, e.getArgument());"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,120,public void testBetaRangeAboveOne() {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,121,try {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,122,"StableRandomGenerator generator = new StableRandomGenerator(rg,"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,123,"1.0, 2.0);"
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,124,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/StableRandomGeneratorTest.java,125,"assertEquals(2.0, e.getArgument());"

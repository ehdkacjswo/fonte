is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,114,* <p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,115,* Polygons with thin pikes or dents are inherently difficult to handle because
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,116,* they involve lines with almost opposite directions at some vertices. Polygons
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,117,* whose vertices come from some physical measurement with noise are also
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,118,* difficult because an edge that should be straight may be broken in lots of
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,119,"* different pieces with almost equal directions. In both cases, computing the"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,120,* lines intersections is not numerically robust due to the almost 0 or almost
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,121,* &pi; angle. Such cases need to carefully adjust the {@code hyperplaneThickness}
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,122,* parameter. A too small value would often lead to completely wrong polygons
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,123,* with large area wrongly identified as inside or outside. Large values are
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,124,"* often much safer. As a rule of thumb, a value slightly below the size of the"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,125,* most accurate detail needed is a good value for the {@code hyperplaneThickness}
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,126,* parameter.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,127,* </p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,160,f (vertices.length == 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,174,final int n = vertices.length;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,175,if (n == 0) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,165,"/ at start, none of the edges have been processed"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,166,inal BSPTree<Euclidean2D> tree = new BSPTree<Euclidean2D>();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,167,ist<Vertex> list = new ArrayList<PolygonsSet.Vertex>(vertices.length);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,168,or (final Vector2D vertex : vertices) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,169,ist.add(new Vertex(vertex));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,180,// build the vertices
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,181,final Vertex[] vArray = new Vertex[n];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,182,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,183,vArray[i] = new Vertex(vertices[i]);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,186,// build the edges
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,187,List<Edge> edges = new ArrayList<Edge>();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,188,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,190,// get the endpoints of the edge
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,191,final Vertex start = vArray[i];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,192,final Vertex end   = vArray[(i + 1) % n];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,194,"// get the line supporting the edge, taking care not to recreate it"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,195,// if it was already created earlier due to another edge being aligned
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,196,// with the current one
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,197,Line line = start.sharedLineWith(end);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,198,if (line == null) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,199,"line = new Line(start.getLocation(), end.getLocation());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,202,// create the edge and store it
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,203,"edges.add(new Edge(start, end, line));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,205,// check if another vertex also happens to be on this line
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,206,for (final Vertex vertex : vArray) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,207,if (vertex != start && vertex != end &&
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,208,FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,209,vertex.bindWith(line);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,173,"nsertVertices(hyperplaneThickness, tree, list);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,216,final BSPTree<Euclidean2D> tree = new BSPTree<Euclidean2D>();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,217,"insertEdges(hyperplaneThickness, tree, edges);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,184, @param vertices list of vertices belonging to the boundary of the
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,185, cell defined by the node
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,228,* @param edges list of edges to insert in the cell defined by this node
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,229,* (excluding edges not belonging to the cell defined by this node)
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,187,"rivate static void insertVertices(final double hyperplaneThickness,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,188,"inal BSPTree<Euclidean2D> node,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,189,inal List<Vertex> vertices) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,231,"private static void insertEdges(final double hyperplaneThickness,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,232,"final BSPTree<Euclidean2D> node,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,233,final List<Edge> edges) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,191,ertex current = vertices.get(vertices.size() - 1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,235,// find an edge with an hyperplane that can be inserted in the node
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,193,ine inserted = null;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,194,hile (inserted == null && index < vertices.size()) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,195,inal Vertex previous = current;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,196,urrent = vertices.get(index++);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,197,f (previous.outgoingNeedsProcessing() && current.incomingNeedsProcessing()) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,199,f (previous.shareNodeWith(current)) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,200,"/ both vertices are already handled by an existing node,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,201,"/ closer to the tree root, they were probably created"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,202,/ when split points were introduced
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,203,nserted = null;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,237,Edge inserted =null;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,238,while (inserted == null && index < edges.size()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,239,inserted = edges.get(index++);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,240,if (inserted.getNode() == null) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,241,if (node.insertCut(inserted.getLine())) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,242,inserted.setNode(node);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,206,"nserted = new Line(previous.getLocation(), current.getLocation());"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,208,f (node.insertCut(inserted)) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,209,revious.addNode(node);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,210,revious.outgoingProcessed();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,211,urrent.addNode(node);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,212,urrent.incomingProcessed();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,213, else {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,214,nserted = null;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,244,inserted = null;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,246,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,247,inserted = null;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,222,f (node.getCut() == null) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,251,if (inserted == null) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,252,"// no suitable edge was found, the node remains a leaf node"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,253,// we need to set its inside/outside boolean indicator
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,232,/ distribute the remaining vertices in the two sub-trees
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,233,ide currentSide = Side.HYPER;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,234,inal List<Vertex> plusList  = new ArrayList<Vertex>();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,235,lusList.add(current);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,236,nt plusCount = 0;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,237,inal List<Vertex> minusList = new ArrayList<Vertex>();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,238,inusList.add(current);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,239,nt minusCount = 0;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,240,hile (index < vertices.size()) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,241,inal Vertex previous = current;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,242,inal Side previousSide = currentSide;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,243,urrent = vertices.get(index++);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,244,inal double currentOffset = inserted.getOffset(current.getLocation());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,245,urrentSide = (FastMath.abs(currentOffset) <= hyperplaneThickness) ?
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,246,ide.HYPER :
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,247,(currentOffset < 0) ? Side.MINUS : Side.PLUS);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,248,witch (currentSide) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,249,ase PLUS:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,250,f (previousSide == Side.MINUS) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,251,/ we need to insert a split point on the hyperplane
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,252,"inal Line line = new Line(previous.getLocation(), current.getLocation());"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,253,inal Vertex splitPoint = new Vertex(inserted.intersection(line));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,254,plitPoint.addNode(node);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,255,inusList.add(splitPoint);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,256,lusList.add(splitPoint);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,258,lusList.add(current);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,259,f (current.incomingNeedsProcessing() || current.outgoingNeedsProcessing()) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,260,+plusCount;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,262,reak;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,263,ase MINUS:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,264,f (previousSide == Side.PLUS) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,265,/ we need to insert a split point on the hyperplane
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,266,"inal Line line = new Line(previous.getLocation(), current.getLocation());"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,267,inal Vertex splitPoint = new Vertex(inserted.intersection(line));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,268,plitPoint.addNode(node);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,269,inusList.add(splitPoint);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,270,lusList.add(splitPoint);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,272,inusList.add(current);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,273,f (current.incomingNeedsProcessing() || current.outgoingNeedsProcessing()) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,274,+minusCount;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,263,// we have split the node by inserted an edge as a cut sub-hyperplane
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,264,// distribute the remaining edges in the two sub-trees
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,265,final List<Edge> plusList  = new ArrayList<Edge>();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,266,final List<Edge> minusList = new ArrayList<Edge>();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,267,for (final Edge edge : edges) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,268,if (edge != inserted) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,269,final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,270,final double endOffset   = inserted.getLine().getOffset(edge.getEnd().getLocation());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,271,Side startSide = (FastMath.abs(startOffset) <= hyperplaneThickness) ?
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,272,Side.HYPER : ((startOffset < 0) ? Side.MINUS : Side.PLUS);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,273,Side endSide   = (FastMath.abs(endOffset) <= hyperplaneThickness) ?
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,274,Side.HYPER : ((endOffset < 0) ? Side.MINUS : Side.PLUS);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,275,switch (startSide) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,276,case PLUS:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,277,if (endSide == Side.MINUS) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,278,// we need to insert a split point on the hyperplane
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,279,final Vertex splitPoint = edge.split(inserted.getLine());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,280,minusList.add(splitPoint.getOutgoing());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,281,plusList.add(splitPoint.getIncoming());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,282,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,283,plusList.add(edge);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,285,break;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,286,case MINUS:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,287,if (endSide == Side.PLUS) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,288,// we need to insert a split point on the hyperplane
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,289,final Vertex splitPoint = edge.split(inserted.getLine());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,290,minusList.add(splitPoint.getIncoming());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,291,plusList.add(splitPoint.getOutgoing());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,292,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,293,minusList.add(edge);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,295,break;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,296,default:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,297,if (endSide == Side.PLUS) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,298,plusList.add(edge);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,299,} else if (endSide == Side.MINUS) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,300,minusList.add(edge);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,302,break;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,276,reak;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,277,efault:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,278,urrent.addNode(node);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,279,lusList.add(current);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,280,inusList.add(current);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,281,reak;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,286,f (plusCount > 0) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,287,"nsertVertices(hyperplaneThickness, node.getPlus(),  plusList);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,308,if (!plusList.isEmpty()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,309,"insertEdges(hyperplaneThickness, node.getPlus(),  plusList);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,291,f (minusCount > 0) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,292,"nsertVertices(hyperplaneThickness, node.getMinus(), minusList);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,313,if (!minusList.isEmpty()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,314,"insertEdges(hyperplaneThickness, node.getMinus(), minusList);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,305,** Nodes associated with the hyperplane containing this vertex. */
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,306,rivate final List<BSPTree<Euclidean2D>> nodes;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,327,/** Incoming edge. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,328,private Edge incoming;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,308,** Indicator for incoming edges that still need processing. */
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,309,rivate boolean incomingNeedsProcessing;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,330,/** Outgoing edge. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,331,private Edge outgoing;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,311,** Indicator for outgoing edges that still need processing. */
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,312,rivate boolean outgoingNeedsProcessing;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,333,/** Lines bound with this vertex. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,334,private final List<Line> lines;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,318,his.location                = location;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,319,his.nodes                   = new ArrayList<BSPTree<Euclidean2D>>();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,320,his.incomingNeedsProcessing = true;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,321,his.outgoingNeedsProcessing = true;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,340,this.location = location;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,341,this.incoming = null;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,342,this.outgoing = null;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,343,this.lines    = new ArrayList<Line>();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,331,** Check if the instance and another vertex share a node.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,353,/** Bind a line considered to contain this vertex.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,354,* @param line line to bind with this vertex
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,356,public void bindWith(final Line line) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,357,lines.add(line);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,360,"/** Get the common line bound with both the instance and another vertex, if any."
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,333," When two vertices share a node, this means they are already handled"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,334," by the hyperplane of this node, so there is no need to create a cut"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,335, hyperplane for them.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,362,"* When two vertices are both bound to the same line, this means they are"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,363,"* already handled by node associated with this line, so there is no need"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,364,* to create a cut hyperplane for them.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,338, @return true if the instance and another vertex share a node
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,367,"* @return line bound with both the instance and another vertex, or null if the"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,368,* two vertices do not share a line yet
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,340,ublic boolean shareNodeWith(final Vertex vertex) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,341,or (final BSPTree<Euclidean2D> node1 : nodes) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,342,or (final BSPTree<Euclidean2D> node2 : vertex.nodes) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,343,f (node1 == node2) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,344,eturn true;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,370,public Line sharedLineWith(final Vertex vertex) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,371,for (final Line line1 : lines) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,372,for (final Line line2 : vertex.lines) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,373,if (line1 == line2) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,374,return line1;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,348,eturn false;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,378,return null;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,351,** Add a node whose hyperplane contains this vertex.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,352, @param node node whose hyperplane contains this vertex
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,381,/** Set incoming edge.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,382,* <p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,383,* The line supporting the incoming edge is automatically bound
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,384,* with the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,385,* </p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,386,* @param incoming incoming edge
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,354,ublic void addNode(final BSPTree<Euclidean2D> node) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,355,odes.add(node);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,388,public void setIncoming(final Edge incoming) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,389,this.incoming = incoming;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,390,bindWith(incoming.getLine());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,358,** Check incoming edge processed indicator.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,359, @return true if incoming edge needs processing
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,393,/** Get incoming edge.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,394,* @return incoming edge
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,361,ublic boolean incomingNeedsProcessing() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,362,eturn incomingNeedsProcessing;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,396,public Edge getIncoming() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,397,return incoming;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,365,** Check outgoing edge processed indicator.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,366, @return true if outgoing edge needs processing
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,400,/** Set outgoing edge.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,401,* <p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,402,* The line supporting the outgoing edge is automatically bound
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,403,* with the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,404,* </p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,405,* @param incoming outgoing edge
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,407,public void setOutgoing(final Edge outgoing) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,408,this.outgoing = outgoing;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,409,bindWith(outgoing.getLine());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,412,/** Get outgoing edge.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,413,* @return outgoing edge
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,415,public Edge getOutgoing() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,416,return outgoing;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,421,/** Internal class for holding edges while they are processed to build a BSP tree. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,422,private static class Edge {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,424,/** Start vertex. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,425,private final Vertex start;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,427,/** End vertex. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,428,private final Vertex end;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,430,/** Line supporting the edge. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,431,private final Line line;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,433,/** Node whose cut hyperplane contains this edge. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,434,private BSPTree<Euclidean2D> node;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,436,/** Build an edge not contained in any node yet.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,437,* @param start start vertex
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,438,* @param end end vertex
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,439,* @param line line supporting the edge
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,441,"public Edge(final Vertex start, final Vertex end, final Line line) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,443,this.start = start;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,444,this.end   = end;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,445,this.line  = line;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,446,this.node  = null;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,448,// connect the vertices back to the edge
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,449,start.setOutgoing(this);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,450,end.setIncoming(this);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,454,/** Get start vertex.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,455,* @return start vertex
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,457,public Vertex getStart() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,458,return start;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,461,/** Get end vertex.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,462,* @return end vertex
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,368,ublic boolean outgoingNeedsProcessing() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,369,eturn outgoingNeedsProcessing;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,464,public Vertex getEnd() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,465,return end;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,372,** Mark the incoming edge as processed.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,468,/** Get the line supporting this edge.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,469,* @return line supporting this edge
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,374,ublic void incomingProcessed() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,375,ncomingNeedsProcessing = false;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,471,public Line getLine() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,472,return line;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,378,** Mark the outgoing edge as processed.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,475,/** Set the node whose cut hyperplane contains this edge.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,476,* @param node node whose cut hyperplane contains this edge
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,478,public void setNode(final BSPTree<Euclidean2D> node) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,479,this.node = node;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,482,/** Get the node whose cut hyperplane contains this edge.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,483,* @return node whose cut hyperplane contains this edge
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,484,* (null if edge has not yet been inserted into the BSP tree)
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,486,public BSPTree<Euclidean2D> getNode() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,487,return node;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,490,/** Split the edge.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,491,* <p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,492,"* Once split, this edge is not referenced anymore by the vertices,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,493,* it is replaced by the two half-edges and an intermediate splitting
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,494,* vertex is introduced to connect these two halves.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,495,* </p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,496,* @param splitLine line splitting the edge in two halves
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,497,* @return split vertex (its incoming and outgoing edges are the two halves)
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,380,ublic void outgoingProcessed() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,381,utgoingNeedsProcessing = false;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,499,public Vertex split(final Line splitLine) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,500,final Vertex splitVertex = new Vertex(line.intersection(splitLine));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,501,splitVertex.bindWith(splitLine);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,502,"final Edge startHalf = new Edge(start, splitVertex, line);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,503,"final Edge endHalf   = new Edge(splitVertex, end, line);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,504,startHalf.node = node;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,505,endHalf.node   = node;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,506,return splitVertex;
False,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,19,mport java.io.FileNotFoundException;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,19,import java.io.IOException;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,804,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,805,public void testSqueezedHexa() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,806,"PolygonsSet set = new PolygonsSet(1.0e-10,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,807,"new Vector2D(-6, -4), new Vector2D(-8, -8), new Vector2D(  8, -8),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,808,"new Vector2D( 6, -4), new Vector2D(10,  4), new Vector2D(-10,  4));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,809,"Assert.assertEquals(Location.OUTSIDE, set.checkPoint(new Vector2D(0, 6)));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,824,ublic void testIssue880Complete() throws FileNotFoundException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,832,public void testIssue880Complete() throws IOException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,897,"olygonsSet set1 = new PolygonsSet(1.0e-10, vertices1);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,898,"ssert.assertEquals(Location.OUTSIDE, set1.checkPoint(new Vector2D(90.0905, 38.3755)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,905,"PolygonsSet set1 = new PolygonsSet(1.0e-8, vertices1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,906,"Assert.assertEquals(Location.OUTSIDE, set1.checkPoint(new Vector2D(90.0905,  38.3755)));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,900,/ TODO: the following assertion fails and should not
False,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,901,/ this is due to a small spurious triangle being included in the polygon
False,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,902,"/ Assert.assertEquals(Location.OUTSIDE, set1.checkPoint(new Vector2D(90.0913, 38.3755)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,908,"Assert.assertEquals(Location.OUTSIDE, set1.checkPoint(new Vector2D(90.0913,  38.3755)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,909,"Assert.assertEquals(Location.INSIDE,  set1.checkPoint(new Vector2D(90.1042,  38.3739)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,910,"Assert.assertEquals(Location.INSIDE,  set1.checkPoint(new Vector2D(90.1111,  38.3673)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,911,"Assert.assertEquals(Location.OUTSIDE, set1.checkPoint(new Vector2D(90.0959,  38.3457)));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,968,"olygonsSet set2 = new PolygonsSet(1.0e-10, vertices2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,977,"PolygonsSet set2 = new PolygonsSet(1.0e-8, vertices2);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,973,ector2D[][] vertices = set.getVertices();
False,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,974,ssert.assertTrue(vertices[0][0] != null);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,975,/ TODO: the resulting polygon has two boundaries but should have only one
False,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,976,/ this is because for an unknown reason the boundary has two infinitely close
False,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,977,/ parallel paths near the top left of the polygon
False,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,978,"ssert.assertEquals(2, vertices.length);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,982,Vector2D[][] verticies = set.getVertices();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,983,Assert.assertTrue(verticies[0][0] != null);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java,984,"Assert.assertEquals(1, verticies.length);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,17,package org.apache.commons.math.exception;
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,19,import java.util.Locale;
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,21,import org.apache.commons.math.exception.util.ArgUtils;
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,22,import org.apache.commons.math.exception.util.MessageFactory;
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,23,import org.apache.commons.math.exception.util.Localizable;
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,24,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,27,* Base class for arithmetic exceptions.
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,28,* It is used for all the exceptions that share the semantics of the standard
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,29,"* {@link ArithmeticException}, but must also provide a localized"
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,30,* message.
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,32,* @since 3.0
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,33,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,35,public class MathArithmeticException extends ArithmeticException {
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,37,/** Serializable version Id. */
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,38,private static final long serialVersionUID = -6024911025449780478L;
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,41,* Pattern used to build the message (specific context).
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,43,private final Localizable specific;
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,45,* Arguments used to build the message.
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,47,private final Object[] arguments;
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,50,* @param args Arguments.
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,52,public MathArithmeticException(Object ... args) {
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,53,"this(null, args);"
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,56,* @param specific Message pattern providing the specific context of
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,57,* the error.
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,58,* @param args Arguments.
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,60,"public MathArithmeticException(Localizable specific,"
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,61,Object ... args) {
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,62,this.specific = specific;
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,63,arguments = ArgUtils.flatten(args);
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,67,* Get the message in a specified locale.
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,69,* @param locale Locale in which the message should be translated.
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,71,* @return the localized message.
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,73,public String getMessage(final Locale locale) {
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,74,"return MessageFactory.buildMessage(locale,"
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,75,"specific,"
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,76,"LocalizedFormats.UNSUPPORTED_OPERATION,"
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,77,arguments);
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,80,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,81,@Override
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,82,public String getMessage() {
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,83,return getMessage(Locale.US);
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,86,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,87,@Override
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,88,public String getLocalizedMessage() {
True,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,src/main/java/org/apache/commons/math/exception/MathArithmeticException.java,89,return getMessage(Locale.getDefault());
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,115,"INDEX(""index ({0})""), /* keep */"
False,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,118,"NITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {0} after final column {1}""),"
False,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,119,"NITIAL_ROW_AFTER_FINAL_ROW(""initial row {0} after final row {1}""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,119,"INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,120,"INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,77,ublic RealMatrix add(RealMatrix m) throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,79,/ safety check
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,77,public RealMatrix add(RealMatrix m) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,78,// Safety check.
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,95,ublic RealMatrix subtract(final RealMatrix m) throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,97,/ safety check
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,94,public RealMatrix subtract(final RealMatrix m) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,95,// Safety check.
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,143,ublic RealMatrix multiply(final RealMatrix m)
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,144,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,146,/ safety check
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,139,public RealMatrix multiply(final RealMatrix m) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,140,// Safety check.
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,167,ublic RealMatrix preMultiply(final RealMatrix m)
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,168,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,161,public RealMatrix preMultiply(final RealMatrix m) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,253,"inal int startColumn, final int endColumn)"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,254,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,245,"final int startColumn, final int endColumn) {"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,270,"ublic RealMatrix getSubMatrix(final int[] selectedRows, final int[] selectedColumns)"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,271,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,260,"public RealMatrix getSubMatrix(final int[] selectedRows, final int[] selectedColumns) {"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,295,inal double[][] destination)
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,296,"hrows MatrixIndexException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,283,final double[][] destination) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,355,"ublic void setSubMatrix(final double[][] subMatrix, final int row, final int column)"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,356,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,342,"public void setSubMatrix(final double[][] subMatrix, final int row, final int column) {"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,389,ublic RealMatrix getRowMatrix(final int row)
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,390,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,374,public RealMatrix getRowMatrix(final int row) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,418,ublic RealMatrix getColumnMatrix(final int column)
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,419,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,401,public RealMatrix getColumnMatrix(final int column) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,447,ublic RealVector getRowVector(final int row)
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,448,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,428,public RealVector getRowVector(final int row) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,466,ublic RealVector getColumnVector(final int column)
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,467,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,446,public RealVector getColumnVector(final int column) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,485,ublic double[] getRow(final int row)
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,486,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,464,public double[] getRow(final int row) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,511,ublic double[] getColumn(final int column)
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,512,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,488,public double[] getColumn(final int column) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,537,"ublic abstract double getEntry(int row, int column)"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,538,hrows MatrixIndexException;
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,512,"public abstract double getEntry(int row, int column);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,541,"ublic abstract void setEntry(int row, int column, double value)"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,542,hrows MatrixIndexException;
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,515,"public abstract void setEntry(int row, int column, double value);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,545,"ublic abstract void addToEntry(int row, int column, double increment)"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,546,hrows MatrixIndexException;
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,518,"public abstract void addToEntry(int row, int column, double increment);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,549,"ublic abstract void multiplyEntry(int row, int column, double factor)"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,550,hrows MatrixIndexException;
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,521,"public abstract void multiplyEntry(int row, int column, double factor);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,753,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,723,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,772,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,742,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,819,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,789,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,838,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,808,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,866,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,836,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,874,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,844,throws MatrixVisitorException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,26,import org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,67, @param index index to check
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,68, @exception MatrixIndexException if index is not valid
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,69,* @param index Index to check.
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,70,* @exception OutOfRangeException if {@code index} is not valid.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,70,rotected void checkIndex(final int index)
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,71,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,72,f (index < 0 || index >= getDimension()) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,73,"hrow new MatrixIndexException(LocalizedFormats.INDEX_OUT_OF_RANGE,"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,74,"ndex, 0, getDimension() - 1);"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,72,protected void checkIndex(final int index) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,73,if (index < 0 ||
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,74,index >= getDimension()) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,75,"throw new OutOfRangeException(LocalizedFormats.INDEX,"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,76,"index, 0, getDimension() - 1);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,79,"ublic void setSubVector(int index, RealVector v) throws MatrixIndexException {"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,81,"public void setSubVector(int index, RealVector v) {"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,86,"ublic void setSubVector(int index, double[] v) throws MatrixIndexException {"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,88,"public void setSubVector(int index, double[] v) {"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,95,ublic RealVector add(double[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,97,public RealVector add(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,106,ublic RealVector add(RealVector v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,108,public RealVector add(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,122,ublic RealVector subtract(double[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,124,public RealVector subtract(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,134,ublic RealVector subtract(RealVector v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,136,public RealVector subtract(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,170,ublic double dotProduct(double[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,172,public double dotProduct(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,175,ublic double dotProduct(RealVector v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,177,public double dotProduct(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,187,ublic RealVector ebeDivide(double[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,189,public RealVector ebeDivide(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,192,ublic RealVector ebeMultiply(double[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,194,public RealVector ebeMultiply(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,197,ublic double getDistance(RealVector v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,199,public double getDistance(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,244,ublic double getDistance(double[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,246,public double getDistance(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,249,ublic double getL1Distance(RealVector v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,251,public double getL1Distance(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,261,ublic double getL1Distance(double[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,263,public double getL1Distance(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,273,ublic double getLInfDistance(RealVector v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,275,public double getLInfDistance(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,285,ublic double getLInfDistance(double[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,287,public double getLInfDistance(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,723,ublic RealMatrix outerProduct(RealVector v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,725,public RealMatrix outerProduct(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,726,"roduct = new OpenMapRealMatrix(this.getDimension(), v.getDimension());"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,728,"product = new OpenMapRealMatrix(this.getDimension(),"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,729,v.getDimension());
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,728,"roduct = new Array2DRowRealMatrix(this.getDimension(), v.getDimension());"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,731,"product = new Array2DRowRealMatrix(this.getDimension(),"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,732,v.getDimension());
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,746,ublic RealMatrix outerProduct(double[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,750,public RealMatrix outerProduct(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,751,ublic RealVector projection(double[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,755,public RealVector projection(double[] v) {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,22,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,22,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,23,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,24,import org.apache.commons.math.exception.ZeroException;
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,25,import org.apache.commons.math.exception.MathIllegalStateException;
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,55,** Serializable version identifier */
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,57,/** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,58,** Entries of the matrix */
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,59,/** Entries of the matrix. */
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,64,ublic Array2DRowRealMatrix() {
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,65,public Array2DRowRealMatrix() {}
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,102, <p>If an array is built specially in order to be embedded in a
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,103," RealMatrix and not used directly, the <code>copyArray</code> may be"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,104, set to <code>false</code. This will prevent the copying and improve
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,105, performance as no new array will be built and no data will be copied.</p>
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,106, @param d data for new matrix
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,107," @param copyArray if true, the input array will be copied, otherwise"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,108, it will be referenced
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,109, @throws IllegalArgumentException if <code>d</code> is not rectangular
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,110,  (not all rows have the same length) or empty
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,111, @throws NullPointerException if <code>d</code> is null
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,102,* If an array is built specially in order to be embedded in a
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,103,"* RealMatrix and not used directly, the {@code copyArray} may be"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,104,* set to {@code false}. This will prevent the copying and improve
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,105,* performance as no new array will be built and no data will be copied.
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,107,* @param d Data for new matrix.
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,108,"* @param copyArray if {@code true}, the input array will be copied,"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,109,* otherwise it will be referenced.
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,110,* @throws DimensionMismatchException if {@code d} is not rectangular
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,111,* (not all rows have the same length) or empty.
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,112,* @throws NullArgumentException if {@code d} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,113,* @throws ZeroException if there are not at least one row and one column.
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,114,"ublic Array2DRowRealMatrix(final double[][] d, final boolean copyArray)"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,115,"hrows IllegalArgumentException, NullPointerException {"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,116,"public Array2DRowRealMatrix(final double[][] d, final boolean copyArray) {"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,120,hrow new NullPointerException();
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,121,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,124,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,125,ocalizedFormats.AT_LEAST_ONE_ROW);
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,125,throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_ROW);
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,129,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,130,ocalizedFormats.AT_LEAST_ONE_COLUMN);
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,129,throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,134,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,135,"ocalizedFormats.DIFFERENT_ROWS_LENGTHS, nCols, d[r].length);"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,133,"throw new DimensionMismatchException(d[r].length, nCols);"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,143, Create a new (column) RealMatrix using <code>v</code> as the
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,144, data for the unique column of the <code>v.length x 1</code> matrix
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,141,* Create a new (column) RealMatrix using {@code v} as the
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,142,* data for the unique column of the {@code v.length x 1} matrix
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,146," <p>The input array is copied, not referenced.</p>"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,144,"* The input array is copied, not referenced."
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,148, @param v column vector holding data for new matrix
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,146,* @param v Column vector holding data for new matrix.
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,160,"ublic RealMatrix createMatrix(final int rowDimension, final int columnDimension)"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,161,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,158,"public RealMatrix createMatrix(final int rowDimension,"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,159,final int columnDimension) {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,171,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,172,Override
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,173,ublic RealMatrix add(final RealMatrix m)
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,174,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,175,ry {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,176,eturn add((Array2DRowRealMatrix) m);
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,177, catch (ClassCastException cce) {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,178,eturn super.add(m);
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,183, Compute the sum of this and <code>m</code>.
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,170,* Compute the sum of this matrix with {@code m}.
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,185, @param m    matrix to be added
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,186, @return     this + m
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,187, @throws  IllegalArgumentException if m is not the same size as this
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,172,* @param m Matrix to be added.
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,173,* @return {@code this} + m.
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,174,* @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,175,* if {@code m} is not the same size as this matrix.
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,189,ublic Array2DRowRealMatrix add(final Array2DRowRealMatrix m)
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,190,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,192,/ safety check
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,177,public Array2DRowRealMatrix add(final Array2DRowRealMatrix m) {
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,178,// Safety check.
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,211,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,212,Override
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,213,ublic RealMatrix subtract(final RealMatrix m)
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,214,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,215,ry {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,216,eturn subtract((Array2DRowRealMatrix) m);
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,217, catch (ClassCastException cce) {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,218,eturn super.subtract(m);
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,223, Compute  this minus <code>m</code>.
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,197,* Subtract {@code m} from this matrix.
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,225, @param m    matrix to be subtracted
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,226, @return     this + m
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,227, @throws  IllegalArgumentException if m is not the same size as this
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,199,* @param m Matrix to be subtracted.
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,200,* @return {@code this} - m.
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,201,* @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,202,* if {@code m} is not the same size as this matrix.
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,229,ublic Array2DRowRealMatrix subtract(final Array2DRowRealMatrix m)
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,230,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,232,/ safety check
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,204,public Array2DRowRealMatrix subtract(final Array2DRowRealMatrix m) {
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,205,// Safety check.
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,251,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,252,Override
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,253,ublic RealMatrix multiply(final RealMatrix m)
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,254,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,255,ry {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,256,eturn multiply((Array2DRowRealMatrix) m);
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,257, catch (ClassCastException cce) {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,258,eturn super.multiply(m);
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,263, Returns the result of postmultiplying this by <code>m</code>.
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,264, @param m    matrix to postmultiply by
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,265, @return     this*m
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,266, @throws     IllegalArgumentException
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,267,             if columnDimension(this) != rowDimension(m)
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,224,* Returns the result of postmultiplying this matrix with {@code m}.
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,226,* @param m Matrix to postmultiply by.
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,227,* @return {@code this} * m.
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,228,* @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,229,* if the column dimension of this matrix is different from the row
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,230,* dimension of {@code m}.
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,269,ublic Array2DRowRealMatrix multiply(final Array2DRowRealMatrix m)
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,270,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,272,/ safety check
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,232,public Array2DRowRealMatrix multiply(final Array2DRowRealMatrix m) {
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,233,// Safety check.
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,302, Returns a reference to the underlying data array.
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,303, <p>
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,304, Does <strong>not</strong> make a fresh copy of the underlying data.</p>
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,263,* Return a reference to the underlying data array.
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,306, @return 2-dimensional array of entries
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,265,* @return 2-dimensional array of entries.
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,314,"ublic void setSubMatrix(final double[][] subMatrix, final int row, final int column)"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,315,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,273,"public void setSubMatrix(final double[][] subMatrix,"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,274,"final int row, final int column) {"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,318,hrow MathRuntimeException.createIllegalStateException(
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,319,"ocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,277,"throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,322,hrow MathRuntimeException.createIllegalStateException(
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,323,"ocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,280,"throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,327,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,328,ocalizedFormats.AT_LEAST_ONE_ROW);
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,284,throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_ROW);
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,333,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,334,ocalizedFormats.AT_LEAST_ONE_COLUMN);
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,289,throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,339,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,340,"ocalizedFormats.DIFFERENT_ROWS_LENGTHS, nCols, subMatrix[i].length);"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,294,"throw new DimensionMismatchException(subMatrix[i].length, nCols);"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,352,"ublic double getEntry(final int row, final int column)"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,353,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,354,ry {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,355,eturn data[row][column];
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,356, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,357,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,358,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY, row, column, getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,306,"public double getEntry(final int row, final int column) {"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,307,"MatrixUtils.checkMatrixIndex(this, row, column);"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,308,return data[row][column];
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,364,"ublic void setEntry(final int row, final int column, final double value)"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,365,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,366,ry {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,367,ata[row][column] = value;
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,368, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,369,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,370,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY, row, column, getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,313,"public void setEntry(final int row, final int column, final double value) {"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,314,"MatrixUtils.checkMatrixIndex(this, row, column);"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,315,data[row][column] = value;
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,376,"ublic void addToEntry(final int row, final int column, final double increment)"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,377,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,378,ry {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,379,ata[row][column] += increment;
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,380, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,381,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,382,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY, row, column, getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,320,"public void addToEntry(final int row, final int column, final double increment) {"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,321,"MatrixUtils.checkMatrixIndex(this, row, column);"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,322,data[row][column] += increment;
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,388,"ublic void multiplyEntry(final int row, final int column, final double factor)"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,389,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,390,ry {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,391,ata[row][column] *= factor;
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,392, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,393,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,394,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY, row, column, getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,327,"public void multiplyEntry(final int row, final int column, final double factor) {"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,328,"MatrixUtils.checkMatrixIndex(this, row, column);"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,329,data[row][column] *= factor;
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,400,ublic int getRowDimension() {
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,334,public int getRowDimension() {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,412,ublic double[] operate(final double[] v)
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,413,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,346,public double[] operate(final double[] v) {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,417,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,418,"ocalizedFormats.VECTOR_LENGTH_MISMATCH, v.length, nCols);"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,350,"throw new DimensionMismatchException(v.length, nCols);"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,434,ublic double[] preMultiply(final double[] v)
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,435,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,366,public double[] preMultiply(final double[] v) {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,440,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,441,"ocalizedFormats.VECTOR_LENGTH_MISMATCH, v.length, nRows);"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,370,"throw new DimensionMismatchException(v.length, nRows);"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,494,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,423,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,512,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,441,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,561,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,490,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,579,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,508,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,25,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,25,import org.apache.commons.math.exception.ZeroException;
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,26,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,27,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,28,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,29,import org.apache.commons.math.exception.NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,47, <p>Zero-length vectors may be used to initialized construction of vectors
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,48,* Zero-length vectors may be used to initialized construction of vectors
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,50," or one of the <code>append</code> methods ({@link #append(FieldElement[])},"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,51,"* or one of the {@code append} methods ({@link #append(FieldElement[])},"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,52, into this vector.</p>
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,53,* into this vector.
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,60, Construct a (size)-length vector of zeros.
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,61, @param field field to which the elements belong
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,62, @param size size of the vector
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,62,* Construct a vector of zeroes.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,64,* @param field Field to which the elements belong.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,65,* @param size Size of the vector.
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,71, Construct an (size)-length vector with preset values.
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,72, @param size size of the vector
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,73, @param preset fill the vector with this scalar value
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,74,* Construct a vector with preset values.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,76,* @param size Size of the vector.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,77,* @param preset All entries will be set with this value.
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,82, <p>
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,87, </p>
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,88, @param d array of Ts.
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,89, @throws IllegalArgumentException if <code>d</code> is empty
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,91,* @param d Array.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,92,* @throws NullArgumentException if {@code d} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,93,* @throws ZeroException if {@code d} is empty.
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,92,ublic ArrayFieldVector(T[] d)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,93,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,96,public ArrayFieldVector(T[] d) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,97,if (d == null) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,98,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,98,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,99,ocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,104,throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,105, @param field field to which the elements belong
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,106, @param d array of Ts.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,111,* @param field Field to which the elements belong.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,112,* @param d Array.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,113,* @throws NullArgumentException if {@code d} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,117,if (d == null) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,118,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,117, <p>If an array is built specially in order to be embedded in a
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,118," ArrayFieldVector and not used directly, the <code>copyArray</code> may be"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,119, set to <code>false</code. This will prevent the copying and improve
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,120, performance as no new array will be built and no data will be copied.</p>
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,121, <p>
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,127,* If an array is built specially in order to be embedded in a
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,128,"* ArrayFieldVector and not used directly, the {@code copyArray} may be"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,129,* set to {@code false}. This will prevent the copying and improve
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,130,* performance as no new array will be built and no data will be copied.
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,125," use the {@link #ArrayFieldVector(Field, FieldElement[], boolean)} constructor."
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,126, </p>
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,127, @param d data for new vector
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,128," @param copyArray if true, the input array will be copied, otherwise"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,129, it will be referenced
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,130, @throws IllegalArgumentException if <code>d</code> is empty
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,131, @throws NullPointerException if <code>d</code> is null
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,134,"* use the {@link #ArrayFieldVector(Field, FieldElement[], boolean)}"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,135,* constructor.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,137,* @param d Data for the new vector.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,138,"* @param copyArray If {@code true}, the input array will be copied,"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,139,* otherwise it will be referenced.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,140,* @throws NullArgumentException if {@code d} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,141,* @throws ZeroException if {@code d} is empty.
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,135,"ublic ArrayFieldVector(T[] d, boolean copyArray)"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,136,"hrows NullPointerException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,145,"public ArrayFieldVector(T[] d, boolean copyArray) {"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,146,if (d == null) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,147,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,138,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,139,ocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,150,throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,148, <p>If an array is built specially in order to be embedded in a
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,149," ArrayFieldVector and not used directly, the <code>copyArray</code> may be"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,150, set to <code>false</code. This will prevent the copying and improve
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,151, performance as no new array will be built and no data will be copied.</p>
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,152, @param field field to which the elements belong
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,153, @param d data for new vector
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,154," @param copyArray if true, the input array will be copied, otherwise"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,155, it will be referenced
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,159,* If an array is built specially in order to be embedded in a
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,160,"* ArrayFieldVector and not used directly, the {@code copyArray} may be"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,161,* set to {@code false}. This will prevent the copying and improve
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,162,* performance as no new array will be built and no data will be copied.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,164,* @param field Field to which the elements belong.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,165,* @param d Data for the new vector.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,166,"* @param copyArray If {@code true}, the input array will be copied,"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,167,* otherwise it will be referenced.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,168,* @throws NullArgumentException if {@code d} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,172,if (d == null) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,173,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,165, @param d array of Ts.
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,166, @param pos position of first entry
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,167, @param size number of entries to copy
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,182,* @param d Array.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,183,* @param pos Position of the first entry.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,184,* @param size Number of entries to copy.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,185,* @throws NullArgumentException if {@code d} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,186,* @throws NumberIsTooLargeException if the size of {@code d} is less
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,187,* than {@code pos + size}.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,190,if (d == null) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,191,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,171,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,172,"ocalizedFormats.POSITION_SIZE_MISMATCH_INPUT_ARRAY,"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,173,"os, size, d.length);"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,194,"throw new NumberIsTooLargeException(pos + size, d.length, true);"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,182, @param v vector to copy
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,204,* @param v Vector to copy.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,205,* @throws NullArgumentException if {@code v} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,208,if (v == null) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,209,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,194, @param v vector to copy
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,221,* @param v Vector to copy.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,222,* @throws NullArgumentException if {@code v} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,225,if (v == null) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,226,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,203, @param v vector to copy
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,204, @param deep if true perform a deep copy otherwise perform a shallow copy
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,235,* @param v Vector to copy.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,236,"* @param deep If {@code true} perform a deep copy, otherwise perform"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,237,* a shallow copy
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,238,* @throws NullArgumentException if {@code v} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,241,if (v == null) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,242,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,213, @param v1 first vector (will be put in front of the new vector)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,214, @param v2 second vector (will be put at back of the new vector)
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,251,* @param v1 First vector (will be put in front of the new vector).
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,252,* @param v2 Second vector (will be put at back of the new vector).
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,253,* @throws NullArgumentException if {@code v1} or {@code v2} is
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,254,* {@code null}.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,257,if (v1 == null ||
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,258,v2 == null) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,259,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,225, @param v1 first vector (will be put in front of the new vector)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,226, @param v2 second vector (will be put at back of the new vector)
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,270,* @param v1 First vector (will be put in front of the new vector).
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,271,* @param v2 Second vector (will be put at back of the new vector).
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,272,* @throws NullArgumentException if {@code v1} or {@code v2} is
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,273,* {@code null}.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,276,if (v1 == null ||
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,277,v2 == null) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,278,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,237, @param v1 first vector (will be put in front of the new vector)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,238, @param v2 second vector (will be put at back of the new vector)
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,289,* @param v1 First vector (will be put in front of the new vector).
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,290,* @param v2 Second vector (will be put at back of the new vector).
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,291,* @throws NullArgumentException if {@code v1} or {@code v2} is
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,292,* {@code null}.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,295,if (v1 == null ||
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,296,v2 == null) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,297,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,249, <p>
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,253," use the {@link #ArrayFieldVector(Field, FieldElement[], FieldElement[])} constructor."
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,254, </p>
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,255, @param v1 first vector (will be put in front of the new vector)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,256, @param v2 second vector (will be put at back of the new vector)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,257, @exception IllegalArgumentException if both vectors are empty
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,310,"* use the {@link #ArrayFieldVector(Field, FieldElement[], FieldElement[])}"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,311,* constructor.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,313,* @param v1 First vector (will be put in front of the new vector).
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,314,* @param v2 Second vector (will be put at back of the new vector).
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,315,* @throws NullArgumentException if {@code v1} or {@code v2} is
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,316,* {@code null}.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,317,* @throws ZeroException if both arrays are empty.
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,261,ry {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,262,ata = buildArray(v1.length + v2.length);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,263,"ystem.arraycopy(v1, 0, data, 0, v1.length);"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,264,"ystem.arraycopy(v2, 0, data, v1.length, v2.length);"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,265,ield = data[0].getField();
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,266, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,267,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,268,ocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,321,if (v1 == null ||
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,322,v2 == null) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,323,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,325,if (v1.length + v2.length == 0) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,326,throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,328,data = buildArray(v1.length + v2.length);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,329,"System.arraycopy(v1, 0, data, 0, v1.length);"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,330,"System.arraycopy(v2, 0, data, v1.length, v2.length);"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,331,field = data[0].getField();
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,274, @param field field to which the elements belong
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,275, @param v1 first vector (will be put in front of the new vector)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,276, @param v2 second vector (will be put at back of the new vector)
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,337,* @param field Field to which the elements belong.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,338,* @param v1 First vector (will be put in front of the new vector).
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,339,* @param v2 Second vector (will be put at back of the new vector).
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,340,* @throws NullArgumentException if {@code v1} or {@code v2} is
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,341,* {@code null}.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,342,* @throws ZeroException if both arrays are empty.
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,281,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,282,ocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,347,throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,290,** Build an array of elements.
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,291, @param length size of the array to build
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,292, @return a new array
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,356,* Build an array of elements.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,358,* @param length Size of the array to build.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,359,* @return a new array.
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,310,ublic FieldVector<T> add(FieldVector<T> v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,377,public FieldVector<T> add(FieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,324,ublic FieldVector<T> add(T[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,391,public FieldVector<T> add(T[] v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,339,ublic ArrayFieldVector<T> add(ArrayFieldVector<T> v)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,340,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,406,public ArrayFieldVector<T> add(ArrayFieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,345,ublic FieldVector<T> subtract(FieldVector<T> v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,411,public FieldVector<T> subtract(FieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,359,ublic FieldVector<T> subtract(T[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,425,public FieldVector<T> subtract(T[] v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,374,ublic ArrayFieldVector<T> subtract(ArrayFieldVector<T> v)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,375,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,440,public ArrayFieldVector<T> subtract(ArrayFieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,467,ublic FieldVector<T> ebeMultiply(FieldVector<T> v)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,468,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,532,public FieldVector<T> ebeMultiply(FieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,482,ublic FieldVector<T> ebeMultiply(T[] v)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,483,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,546,public FieldVector<T> ebeMultiply(T[] v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,498,ublic ArrayFieldVector<T> ebeMultiply(ArrayFieldVector<T> v)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,499,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,561,public ArrayFieldVector<T> ebeMultiply(ArrayFieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,504,ublic FieldVector<T> ebeDivide(FieldVector<T> v)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,505,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,566,public FieldVector<T> ebeDivide(FieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,519,ublic FieldVector<T> ebeDivide(T[] v)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,520,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,580,public FieldVector<T> ebeDivide(T[] v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,535,ublic ArrayFieldVector<T> ebeDivide(ArrayFieldVector<T> v)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,536,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,595,public ArrayFieldVector<T> ebeDivide(ArrayFieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,555,ublic T dotProduct(FieldVector<T> v)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,556,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,614,public T dotProduct(FieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,570,ublic T dotProduct(T[] v)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,571,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,628,public T dotProduct(T[] v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,586,ublic T dotProduct(ArrayFieldVector<T> v)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,587,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,643,public T dotProduct(ArrayFieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,611,ublic FieldMatrix<T> outerProduct(FieldVector<T> v)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,612,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,667,public FieldMatrix<T> outerProduct(FieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,634,ublic FieldMatrix<T> outerProduct(ArrayFieldVector<T> v)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,635,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,689,public FieldMatrix<T> outerProduct(ArrayFieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,640,ublic FieldMatrix<T> outerProduct(T[] v)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,641,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,694,public FieldMatrix<T> outerProduct(T[] v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,654,ublic T getEntry(int index) throws MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,707,public T getEntry(int index) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,746, @exception MatrixIndexException if the index is
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,799,* @throws OutOfRangeException if the index is
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,749,"ublic void set(int index, ArrayFieldVector<T> v)"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,750,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,802,"public void set(int index, ArrayFieldVector<T> v) {"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,770,rotected void checkVectorDimensions(FieldVector<T> v)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,771,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,822,protected void checkVectorDimensions(FieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,778, @param n expected dimension.
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,779, @exception IllegalArgumentException if the dimension is
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,780, inconsistent with vector size
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,829,* @param n Expected dimension.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,830,* @throws OutOfRangeException if the dimension is
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,831,* inconsistent with this vector size.
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,782,rotected void checkVectorDimensions(int n)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,783,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,833,protected void checkVectorDimensions(int n) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,785,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,786,"ocalizedFormats.VECTOR_LENGTH_MISMATCH,"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,787,"ata.length, n);"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,835,"throw new DimensionMismatchException(data.length, n);"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,792, Test for the equality of two real vectors.
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,793, <p>
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,794," If all coordinates of two real vectors are exactly the same, and none are"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,795," <code>Double.NaN</code>, the two real vectors are considered to be equal."
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,796, </p>
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,797, <p>
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,798, <code>NaN</code> coordinates are considered to affect globally the vector
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,799," and be equals to each other - i.e, if either (or all) coordinates of the"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,800," real vector are equal to <code>Double.NaN</code>, the real vector is equal to"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,801, a vector with all <code>Double.NaN</code> coordinates.
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,802, </p>
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,804, @param other Object to test for equality to this
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,805," @return true if two 3D vector objects are equal, false if"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,806,"         object is null, not an instance of Vector3D, or"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,807,         not equal to this Vector3D instance
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,840,* Test for the equality of two vectors.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,842,* @param other Object to test for equality.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,843,"* @return {@code true} if two vector objects are equal, {@code false}"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,844,* otherwise.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,848,if (this == other) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,849,return true;
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,851,if (other == null) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,852,return false;
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,813,f (this == other) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,814,eturn true;
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,817,f (other == null) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,818,eturn false;
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,821,ry {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,822,"SuppressWarnings(""unchecked"") // May fail, but we ignore ClassCastException"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,823,ieldVector<T> rhs = (FieldVector<T>) other;
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,824,f (data.length != rhs.getDimension()) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,825,eturn false;
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,828,or (int i = 0; i < data.length; ++i) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,829,f (!data[i].equals(rhs.getEntry(i))) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,830,eturn false;
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,833,eturn true;
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,835, catch (ClassCastException ex) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,836,/ ignore exception
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,837,eturn false;
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,855,try {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,856,"@SuppressWarnings(""unchecked"") // May fail, but we ignore ClassCastException"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,857,FieldVector<T> rhs = (FieldVector<T>) other;
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,858,if (data.length != rhs.getDimension()) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,859,return false;
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,862,for (int i = 0; i < data.length; ++i) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,863,if (!data[i].equals(rhs.getEntry(i))) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,864,return false;
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,867,return true;
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,868,} catch (ClassCastException ex) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,869,// ignore exception
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,870,return false;
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,858, @param index index to check
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,859, @exception MatrixIndexException if index is not valid
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,891,* @param index Index to check.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,892,* @exception OutOfRangeException if the index is not valid.
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,861,rivate void checkIndex(final int index)
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,862,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,894,private void checkIndex(final int index) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,864,"hrow new MatrixIndexException(LocalizedFormats.INDEX_OUT_OF_RANGE,"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,865,"ndex, 0, getDimension() - 1);"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,896,"throw new OutOfRangeException(LocalizedFormats.INDEX,"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,897,"index, 0, getDimension() - 1);"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,23,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,23,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,24,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,25,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,26,import org.apache.commons.math.exception.MathArithmeticException;
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,47, <p>Zero-length vectors may be used to initialized construction of vectors
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,47,* Zero-length vectors may be used to initialized construction of vectors
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,50," or one of the <code>append</code> method ({@link #append(double)}, {@link"
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,50,"* or one of the {@code append} method ({@link #append(double)}, {@link"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,52, into this vector.</p>
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,52,* into this vector.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,59, Construct a (size)-length vector of zeros.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,60, @param size size of the vector
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,59,* Construct a vector of zeroes.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,61,* @param size Size of the vector.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,67, Construct an (size)-length vector with preset values.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,68, @param size size of the vector
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,69, @param preset fill the vector with this scalar value
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,68,* Construct a vector with preset values.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,70,* @param size Size of the vector
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,71,* @param preset All entries will be set with this value.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,78, @param d array of doubles.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,81,* @param d Array.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,82,* @throws NullArgumentException if {@code d} is {@code null}.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,87, <p>If an array is built specially in order to be embedded in a
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,88," ArrayRealVector and not used directly, the <code>copyArray</code> may be"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,89, set to <code>false</code. This will prevent the copying and improve
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,90, performance as no new array will be built and no data will be copied.</p>
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,91, @param d data for new vector
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,92," @param copyArray if true, the input array will be copied, otherwise"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,93, it will be referenced
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,91,* If an array is built specially in order to be embedded in a
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,92,"* ArrayRealVector and not used directly, the {@code copyArray} may be"
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,93,* set to {@code false}. This will prevent the copying and improve
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,94,* performance as no new array will be built and no data will be copied.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,96,* @param d Data for the new vector.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,97,"* @param copyArray if {@code true}, the input array will be copied,"
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,98,* otherwise it will be referenced.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,99,* @throws NullArgumentException if {@code d} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,103,if (d == null) {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,104,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,102, @param d array of doubles.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,103, @param pos position of first entry
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,104, @param size number of entries to copy
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,112,* @param d Array.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,113,* @param pos Position of first entry.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,114,* @param size Number of entries to copy.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,115,* @throws NullArgumentException if {@code d} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,116,* @throws NumberIsTooLargeException if the size of {@code d} is less
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,117,* than {@code pos + size}.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,120,if (d == null) {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,121,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,108,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,109,"ocalizedFormats.POSITION_SIZE_MISMATCH_INPUT_ARRAY, pos, size, d.length);"
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,124,"throw new NumberIsTooLargeException(pos + size, d.length, true);"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,127, Construct a vector from part of a Double array
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,128, @param d array of Doubles.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,129, @param pos position of first entry
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,130, @param size number of entries to copy
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,142,* Construct a vector from part of an array.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,144,* @param d Array.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,145,* @param pos Position of first entry.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,146,* @param size Number of entries to copy.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,147,* @throws NullArgumentException if {@code d} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,148,* @throws NumberIsTooLargeException if the size of {@code d} is less
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,149,* than {@code pos + size}.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,152,if (d == null) {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,153,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,134,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,135,"ocalizedFormats.POSITION_SIZE_MISMATCH_INPUT_ARRAY, pos, size, d.length);"
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,156,"throw new NumberIsTooLargeException(pos + size, d.length, true);"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,139,ata[i-pos] = d[i].doubleValue();
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,160,data[i - pos] = d[i].doubleValue();
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,145, @param v vector to copy
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,167,* @param v vector to copy.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,168,* @throws NullArgumentException if {@code v} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,171,if (v == null) {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,172,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,156, @param v vector to copy
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,183,* @param v Vector to copy.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,184,* @throws NullArgumentException if {@code v} is {@code null}.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,164, @param v vector to copy
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,165, @param deep if true perform a deep copy otherwise perform a shallow copy
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,193,* @param v Vector to copy.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,194,"* @param deep If {@code true} perform a deep copy, otherwise perform a"
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,195,* shallow copy.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,714, @param v vector with which dot product should be computed
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,715, @return the scalar dot product between instance and v
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,716, @exception IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,745,* @param v Vector with which dot product should be computed
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,746,* @return the scalar dot product between instance and {@code v}.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,747,* @throws DimensionMismatchException if {@code v} is not the same
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,748,* size as this vector.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,718,ublic double dotProduct(ArrayRealVector v)
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,719,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,750,public double dotProduct(ArrayRealVector v) {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,785, <p>This method computes the distance consistent with the
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,816,* This method computes the distance consistent with the
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,787," elements differences, or euclidian distance.</p>"
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,818,"* elements differences, or euclidian distance."
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,789, @return distance between two vectors.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,790, @exception IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,821,* @return the distance between two vectors.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,822,* @throws DimensionMismatchException if {@code v} is not the same size as
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,823,* this vector.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,796,ublic double getDistance(ArrayRealVector v)
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,797,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,829,public double getDistance(ArrayRealVector v) {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,803,ublic double getL1Distance(RealVector v)
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,804,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,835,public double getL1Distance(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,833, <p>This method computes the distance consistent with
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,864,* This method computes the distance consistent with
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,835, elements differences.</p>
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,836, @param v vector to which distance is requested
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,837, @return distance between two vectors.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,838, @exception IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,866,* elements differences.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,868,* @param v Vector to which distance is requested.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,869,* @return the distance between two vectors.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,870,* @throws DimensionMismatchException if {@code v} is not the same size
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,871,* as this vector.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,844,ublic double getL1Distance(ArrayRealVector v)
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,845,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,877,public double getL1Distance(ArrayRealVector v) {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,851,ublic double getLInfDistance(RealVector v)
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,852,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,883,public double getLInfDistance(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,881, <p>This method computes the distance consistent with
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,912,* This method computes the distance consistent with
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,883, elements differences.</p>
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,884, @param v vector to which distance is requested
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,885, @return distance between two vectors.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,886, @exception IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,914,* elements differences.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,916,* @param v Vector to which distance is requested.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,917,* @return the distance between two vectors.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,918,* @exception IllegalArgumentException if {@code v} is not the same size as this
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,892,ublic double getLInfDistance(ArrayRealVector v)
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,893,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,924,public double getLInfDistance(ArrayRealVector v) {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,899,ublic RealVector unitVector() throws ArithmeticException {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,930,public RealVector unitVector() {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,902,hrow MathRuntimeException.createArithmeticException(LocalizedFormats.ZERO_NORM);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,933,throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,909,ublic void unitize() throws ArithmeticException {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,940,public void unitize() {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,912,hrow MathRuntimeException.createArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,943,throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,928,** Find the orthogonal projection of this vector onto another vector.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,929, @param v vector onto which instance must be projected
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,930, @return projection of the instance onto v
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,931, @throws IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,960,* Find the orthogonal projection of this vector onto another vector.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,962,* @param v Vector onto which instance must be projected.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,963,* @return Projection of this instance onto {@code v}.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,964,* @throws DimensionMismatchException if {@code v} is not the same size as
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,965,* this vector.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,983,ublic double getEntry(int index) throws MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1017,public double getEntry(int index) {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1003, @param v vector to append to this one.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1004, @return a new vector
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1038,* @param v Vector to append to this one.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1039,* @return a new vector.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1075, @param index index of first element to be set.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1076, @param v vector containing the values to set.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1077, @exception MatrixIndexException if the index is
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1078, inconsistent with vector size
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1110,* @param index Index of first element to be set.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1111,* @param v Vector containing the values to set.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1112,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1113,* if the index is inconsistent with vector size.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1080,"ublic void set(int index, ArrayRealVector v)"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1081,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1115,"public void set(int index, ArrayRealVector v) {"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1105, @param v vector to compare instance with
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1106, @exception IllegalArgumentException if the vectors do not
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1107, have the same dimension
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1140,* @param v Vector to compare instance with.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1141,* @throws DimensionMismatchException if the vectors do not
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1142,* have the same dimension.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1110,rotected void checkVectorDimensions(RealVector v)
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1111,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1145,protected void checkVectorDimensions(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1118, @param n expected dimension.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1119, @exception IllegalArgumentException if the dimension is
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1120, inconsistent with vector size
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1152,* @param n Expected dimension.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1153,* @throws DimensionMismatchException if the dimension is
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1154,* inconsistent with vector size.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1123,rotected void checkVectorDimensions(int n)
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1124,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1157,protected void checkVectorDimensions(int n) {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1126,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1127,"ocalizedFormats.VECTOR_LENGTH_MISMATCH,"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1128,"ata.length, n);"
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1159,"throw new DimensionMismatchException(data.length, n);"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1133, Returns true if any coordinate of this vector is NaN; false otherwise
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1134, @return  true if any coordinate of this vector is NaN; false otherwise
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1164,* Check if any coordinate of this vector is {@code NaN}.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1166,"* @return {@code true} if any coordinate of this vector is {@code NaN},"
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1167,* {@code false} otherwise.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1146, Returns true if any coordinate of this vector is infinite and none are NaN;
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1147, false otherwise
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1148, @return  true if any coordinate of this vector is infinite and none are NaN;
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1149, false otherwise
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1179,* Check whether any coordinate of this vector is infinite and none
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1180,* are {@code NaN}.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1182,* @return {@code true} if any coordinate of this vector is infinite and
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1183,"* none are {@code NaN}, {@code false} otherwise."
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1169, <p>
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1171," <code>Double.NaN</code>, the two real vectors are considered to be equal."
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1172, </p>
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1173, <p>
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1174, <code>NaN</code> coordinates are considered to affect globally the vector
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1202,"* {@code NaN}, the two real vectors are considered to be equal."
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1203,* {@code NaN} coordinates are considered to affect globally the vector
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1176," real vector are equal to <code>Double.NaN</code>, the real vector is equal to"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1177, a vector with all <code>Double.NaN</code> coordinates.
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1178, </p>
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1180, @param other Object to test for equality to this
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1181," @return true if two vector objects are equal, false if"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1182,"         object is null, not an instance of RealVector, or"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1183,         not equal to this RealVector instance
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1205,"* real vector are equal to {@code NaN}, the real vector is equal to"
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1206,* a vector with all {@code NaN} coordinates.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1208,* @param other Object to test for equality.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1209,"* @return {@code true} if two vector objects are equal, {@code false} if"
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1210,"* {@code other} is null, not an instance of {@code RealVector}, or"
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1211,* not equal to this {@code RealVector} instance.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1215,if (this == other) {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1216,return true;
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1189,f (this == other) {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1190,eturn true;
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1193,f (other == null || !(other instanceof RealVector)) {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1194,eturn false;
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1219,if (other == null || !(other instanceof RealVector)) {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1220,return false;
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1198,ealVector rhs = (RealVector) other;
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1199,f (data.length != rhs.getDimension()) {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1200,eturn false;
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1223,RealVector rhs = (RealVector) other;
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1224,if (data.length != rhs.getDimension()) {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1225,return false;
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1203,f (rhs.isNaN()) {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1204,eturn this.isNaN();
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1228,if (rhs.isNaN()) {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1229,return this.isNaN();
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1207,or (int i = 0; i < data.length; ++i) {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1208,f (data[i] != rhs.getEntry(i)) {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1209,eturn false;
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1232,for (int i = 0; i < data.length; ++i) {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1233,if (data[i] != rhs.getEntry(i)) {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1234,return false;
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1212,eturn true;
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1237,return true;
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1217, <p>All NaN values have the same hash code.</p>
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1218, @return a hash code value for this object
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1242,* All {@code NaN} values have the same hash code.
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1244,* @return a hash code.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,18,ackage org.apache.commons.math.linear;
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,20,mport java.math.BigDecimal;
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,23," Interface defining a real-valued matrix with basic algebraic operations, using"
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,24, BigDecimal representations for the entries.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,25, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,26," Matrix element indexing is 0-based -- e.g., <code>getEntry(0, 0)</code>"
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,27," returns the element in the first row, first column of the matrix.</p>"
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,29, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,30," @deprecated as of 2.0, replaced by {@link FieldMatrix} with a {@link"
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,31, org.apache.commons.math.util.BigReal} parameter
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,33,Deprecated
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,34,ublic interface BigMatrix extends AnyMatrix {
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,37, Returns a (deep) copy of this.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,39, @return matrix copy
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,41,igMatrix copy();
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,44, Compute the sum of this and m.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,46, @param m    matrix to be added
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,47, @return     this + m
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,48, @exception  IllegalArgumentException if m is not the same size as this
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,50,igMatrix add(BigMatrix m) throws IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,53, Compute this minus m.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,55, @param m    matrix to be subtracted
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,56, @return     this + m
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,57, @exception  IllegalArgumentException if m is not the same size as this
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,59,igMatrix subtract(BigMatrix m) throws IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,62, Returns the result of adding d to each entry of this.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,64, @param d    value to be added to each entry
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,65, @return     d + this
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,67,igMatrix scalarAdd(BigDecimal d);
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,70, Returns the result multiplying each entry of this by d.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,72, @param d    value to multiply all entries by
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,73, @return     d * this
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,75,igMatrix scalarMultiply(BigDecimal d);
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,78, Returns the result of postmultiplying this by m.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,80, @param m    matrix to postmultiply by
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,81, @return     this * m
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,82, @throws     IllegalArgumentException
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,83,             if columnDimension(this) != rowDimension(m)
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,85,igMatrix multiply(BigMatrix m) throws IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,88, Returns the result premultiplying this by <code>m</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,89, @param m    matrix to premultiply by
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,90, @return     m * this
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,91, @throws     IllegalArgumentException
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,92,             if rowDimension(this) != columnDimension(m)
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,94,igMatrix preMultiply(BigMatrix m) throws IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,97, Returns matrix entries as a two-dimensional array.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,99, @return    2-dimensional array of entries
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,101,igDecimal[][] getData();
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,104, Returns matrix entries as a two-dimensional array.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,106, @return    2-dimensional array of entries
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,108,ouble [][] getDataAsDoubleArray();
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,111, Gets the rounding mode
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,112, @return the rounding mode
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,114,nt getRoundingMode();
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,117," Returns the <a href=""http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html"">"
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,118, maximum absolute row sum norm</a> of the matrix.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,120, @return norm
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,122,igDecimal getNorm();
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,125, Gets a submatrix. Rows and columns are indicated
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,126, counting from 0 to n-1.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,128, @param startRow Initial row index
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,129, @param endRow Final row index
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,130, @param startColumn Initial column index
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,131, @param endColumn Final column index
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,132, @return The subMatrix containing the data of the
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,133,         specified rows and columns
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,134, @exception MatrixIndexException  if the indices are not valid
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,136,"igMatrix getSubMatrix(int startRow, int endRow, int startColumn,"
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,137,nt endColumn) throws MatrixIndexException;
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,140, Gets a submatrix. Rows and columns are indicated
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,141, counting from 0 to n-1.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,143, @param selectedRows Array of row indices.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,144, @param selectedColumns Array of column indices.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,145, @return The subMatrix containing the data in the
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,146,         specified rows and columns
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,147, @exception MatrixIndexException if row or column selections are not valid
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,149,"igMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)"
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,150,hrows MatrixIndexException;
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,153, Returns the entries in row number <code>row</code>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,154, as a row matrix.  Row indices start at 0.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,156, @param row the row to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,157, @return row matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,158, @throws MatrixIndexException if the specified row index is invalid
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,160,igMatrix getRowMatrix(int row) throws MatrixIndexException;
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,163, Returns the entries in column number <code>column</code>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,164, as a column matrix.  Column indices start at 0.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,166, @param column the column to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,167, @return column matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,168, @throws MatrixIndexException if the specified column index is invalid
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,170,igMatrix getColumnMatrix(int column) throws MatrixIndexException;
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,173, Returns the entries in row number <code>row</code> as an array.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,174, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,175, Row indices start at 0.  A <code>MatrixIndexException</code> is thrown
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,176, unless <code>0 <= row < rowDimension.</code></p>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,178, @param row the row to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,179, @return array of entries in the row
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,180, @throws MatrixIndexException if the specified row index is not valid
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,182,igDecimal[] getRow(int row) throws MatrixIndexException;
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,185, Returns the entries in row number <code>row</code> as an array
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,186, of double values.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,187, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,188, Row indices start at 0.  A <code>MatrixIndexException</code> is thrown
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,189, unless <code>0 <= row < rowDimension.</code></p>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,191, @param row the row to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,192, @return array of entries in the row
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,193, @throws MatrixIndexException if the specified row index is not valid
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,195,ouble [] getRowAsDoubleArray(int row) throws MatrixIndexException;
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,198, Returns the entries in column number <code>col</code> as an array.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,199, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,200, Column indices start at 0.  A <code>MatrixIndexException</code> is thrown
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,201, unless <code>0 <= column < columnDimension.</code></p>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,203, @param col the column to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,204, @return array of entries in the column
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,205, @throws MatrixIndexException if the specified column index is not valid
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,207,igDecimal[] getColumn(int col) throws MatrixIndexException;
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,210, Returns the entries in column number <code>col</code> as an array
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,211, of double values.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,212, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,213, Column indices start at 0.  A <code>MatrixIndexException</code> is thrown
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,214, unless <code>0 <= column < columnDimension.</code></p>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,216, @param col the column to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,217, @return array of entries in the column
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,218, @throws MatrixIndexException if the specified column index is not valid
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,220,ouble [] getColumnAsDoubleArray(int col) throws MatrixIndexException;
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,223, Returns the entry in the specified row and column.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,224, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,225, Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,226, <ul>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,227, <li><code>0 <= row < rowDimension</code></li>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,228, <li><code> 0 <= column < columnDimension</code></li>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,229, </ul>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,230, otherwise a <code>MatrixIndexException</code> is thrown.</p>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,232, @param row  row location of entry to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,233, @param column  column location of entry to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,234," @return matrix entry in row,column"
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,235, @throws MatrixIndexException if the row or column index is not valid
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,237,"igDecimal getEntry(int row, int column) throws MatrixIndexException;"
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,240, Returns the entry in the specified row and column as a double.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,241, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,242, Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,243, <ul>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,244, <li><code>0 <= row < rowDimension</code></li>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,245, <li><code> 0 <= column < columnDimension</code></li>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,246, </ul>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,247, otherwise a <code>MatrixIndexException</code> is thrown.</p>
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,249, @param row  row location of entry to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,250, @param column  column location of entry to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,251," @return matrix entry in row,column"
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,252, @throws MatrixIndexException if the row or column index is not valid
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,254,"ouble getEntryAsDouble(int row, int column) throws MatrixIndexException;"
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,257, Returns the transpose of this matrix.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,259, @return transpose matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,261,igMatrix transpose();
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,264, Returns the inverse of this matrix.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,266, @return inverse matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,267, @throws org.apache.commons.math.linear.InvalidMatrixException if
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,268,     this is not invertible
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,270,igMatrix inverse() throws InvalidMatrixException;
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,273, Returns the determinant of this matrix.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,275, @return determinant
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,276,@throws org.apache.commons.math.linear.InvalidMatrixException if
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,277,    matrix is not square
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,279,igDecimal getDeterminant() throws InvalidMatrixException;
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,282," Returns the <a href=""http://mathworld.wolfram.com/MatrixTrace.html"">"
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,283, trace</a> of the matrix (the sum of the elements on the main diagonal).
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,285, @return trace
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,287,igDecimal getTrace();
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,290, Returns the result of multiplying this by the vector <code>v</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,292, @param v the vector to operate on
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,293, @return this*v
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,294, @throws IllegalArgumentException if columnDimension != v.size()
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,296,igDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,299, Returns the (row) vector result of premultiplying this by the vector <code>v</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,301, @param v the row vector to premultiply by
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,302, @return v*this
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,303, @throws IllegalArgumentException if rowDimension != v.size()
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,305,igDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,308, Returns the solution vector for a linear system with coefficient
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,309, matrix = this and constant vector = <code>b</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,311, @param b  constant vector
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,312," @return vector of solution values to AX = b, where A is *this"
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,313, @throws IllegalArgumentException if this.rowDimension != b.length
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,314, @throws org.apache.commons.math.linear.InvalidMatrixException if this matrix is not square or is singular
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,316,"igDecimal[] solve(BigDecimal[] b) throws IllegalArgumentException, InvalidMatrixException;"
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,319, Returns a matrix of (column) solution vectors for linear systems with
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,320, coefficient matrix = this and constant vectors = columns of
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,321, <code>b</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,323, @param b  matrix of constant vectors forming RHS of linear systems to
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,324, to solve
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,325, @return matrix of solution vectors
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,326, @throws IllegalArgumentException if this.rowDimension != row dimension
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,327, @throws org.apache.commons.math.linear.InvalidMatrixException if this matrix is not square or is singular
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,329,"igMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,18,ackage org.apache.commons.math.linear;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,19,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,20,mport java.math.BigDecimal;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,22,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,23,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,26, Implementation of {@link BigMatrix} using a BigDecimal[][] array to store entries
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,27," and <a href=""http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf"">"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,28, LU decompostion</a> to support linear system
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,29, solution and inverse.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,30, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,31," The LU decompostion is performed as needed, to support the following operations: <ul>"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,32, <li>solve</li>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,33, <li>isSingular</li>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,34, <li>getDeterminant</li>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,35, <li>inverse</li> </ul></p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,36, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,37, <strong>Usage notes</strong>:<br>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,38, <ul><li>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,39, The LU decomposition is stored and reused on subsequent calls.  If matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,40," data are modified using any of the public setXxx methods, the saved"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,41, decomposition is discarded.  If data are modified via references to the
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,42," underlying array obtained using <code>getDataRef()</code>, then the stored"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,43," LU decomposition will not be discarded.  In this case, you need to"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,44, explicitly invoke <code>LUDecompose()</code> to recompute the decomposition
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,45, before using any of the methods above.</li>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,46, <li>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,47," As specified in the {@link BigMatrix} interface, matrix element indexing"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,48," is 0-based -- e.g., <code>getEntry(0, 0)</code>"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,49," returns the element in the first row, first column of the matrix.</li></ul></p>"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,51," @deprecated as of 2.0, replaced by {@link Array2DRowFieldMatrix} with a {@link"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,52, org.apache.commons.math.util.BigReal} parameter
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,53, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,55,Deprecated
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,56,"ublic class BigMatrixImpl implements BigMatrix, Serializable {"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,58,** BigDecimal 0 */
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,59,tatic final BigDecimal ZERO = new BigDecimal(0);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,61,** BigDecimal 1 */
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,62,tatic final BigDecimal ONE = new BigDecimal(1);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,64,** Bound to determine effective singularity in LU decomposition */
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,65,rivate static final BigDecimal TOO_SMALL = new BigDecimal(10E-12);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,67,** Serialization id */
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,68,rivate static final long serialVersionUID = -1011428905656140431L;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,70,** Entries of the matrix */
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,71,rotected BigDecimal data[][] = null;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,73,** Entries of cached LU decomposition.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,74,  All updates to data (other than luDecompose()) *must* set this to null
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,76,rotected BigDecimal lu[][] = null;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,78,** Permutation associated with LU decomposition */
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,79,rotected int[] permutation = null;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,81,** Parity of the permutation associated with the LU decomposition */
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,82,rotected int parity = 1;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,84,** Rounding mode for divisions **/
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,85,rivate int roundingMode = BigDecimal.ROUND_HALF_UP;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,87,*** BigDecimal scale ***/
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,88,rivate int scale = 64;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,91, Creates a matrix with no data
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,93,ublic BigMatrixImpl() {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,97, Create a new BigMatrix with the supplied row and column dimensions.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,99, @param rowDimension      the number of rows in the new matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,100, @param columnDimension   the number of columns in the new matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,101, @throws IllegalArgumentException if row or column dimension is not
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,102,  positive
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,104,"ublic BigMatrixImpl(int rowDimension, int columnDimension) {"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,105,f (rowDimension < 1 ) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,106,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,107,"ocalizedFormats.INSUFFICIENT_DIMENSION, rowDimension, 1);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,109,f (columnDimension < 1) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,110,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,111,"ocalizedFormats.INSUFFICIENT_DIMENSION, columnDimension, 1);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,113,ata = new BigDecimal[rowDimension][columnDimension];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,114,u = null;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,118, Create a new BigMatrix using <code>d</code> as the underlying
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,119, data array.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,120," <p>The input array is copied, not referenced. This constructor has"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,121," the same effect as calling {@link #BigMatrixImpl(BigDecimal[][], boolean)}"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,122, with the second argument set to <code>true</code>.</p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,124, @param d data for new matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,125, @throws IllegalArgumentException if <code>d</code> is not rectangular
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,126,  (not all rows have the same length) or empty
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,127, @throws NullPointerException if <code>d</code> is null
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,129,ublic BigMatrixImpl(BigDecimal[][] d) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,130,his.copyIn(d);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,131,u = null;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,135, Create a new BigMatrix using the input array as the underlying
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,136, data array.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,137, <p>If an array is built specially in order to be embedded in a
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,138," BigMatrix and not used directly, the <code>copyArray</code> may be"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,139, set to <code>false</code. This will prevent the copying and improve
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,140, performance as no new array will be built and no data will be copied.</p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,141, @param d data for new matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,142," @param copyArray if true, the input array will be copied, otherwise"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,143, it will be referenced
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,144, @throws IllegalArgumentException if <code>d</code> is not rectangular
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,145,  (not all rows have the same length) or empty
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,146, @throws NullPointerException if <code>d</code> is null
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,147, @see #BigMatrixImpl(BigDecimal[][])
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,149,"ublic BigMatrixImpl(BigDecimal[][] d, boolean copyArray) {"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,150,f (copyArray) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,151,opyIn(d);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,152, else {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,153,f (d == null) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,154,hrow new NullPointerException();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,156,inal int nRows = d.length;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,157,f (nRows == 0) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,158,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_ROW);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,161,inal int nCols = d[0].length;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,162,f (nCols == 0) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,163,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,165,or (int r = 1; r < nRows; r++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,166,f (d[r].length != nCols) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,167,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,168,"ocalizedFormats.DIFFERENT_ROWS_LENGTHS,"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,169,"Cols, d[r].length);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,172,ata = d;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,174,u = null;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,178, Create a new BigMatrix using <code>d</code> as the underlying
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,179, data array.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,180, <p>Since the underlying array will hold <code>BigDecimal</code>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,181," instances, it will be created.</p>"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,183, @param d data for new matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,184, @throws IllegalArgumentException if <code>d</code> is not rectangular
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,185,  (not all rows have the same length) or empty
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,186, @throws NullPointerException if <code>d</code> is null
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,188,ublic BigMatrixImpl(double[][] d) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,189,inal int nRows = d.length;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,190,f (nRows == 0) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,191,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_ROW);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,194,inal int nCols = d[0].length;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,195,f (nCols == 0) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,196,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,198,or (int row = 1; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,199,f (d[row].length != nCols) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,200,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,201,"ocalizedFormats.DIFFERENT_ROWS_LENGTHS,"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,202,"Cols, d[row].length);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,205,his.copyIn(d);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,206,u = null;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,210, Create a new BigMatrix using the values represented by the strings in
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,211, <code>d</code> as the underlying data array.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,213, @param d data for new matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,214, @throws IllegalArgumentException if <code>d</code> is not rectangular
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,215,  (not all rows have the same length) or empty
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,216, @throws NullPointerException if <code>d</code> is null
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,218,ublic BigMatrixImpl(String[][] d) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,219,inal int nRows = d.length;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,220,f (nRows == 0) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,221,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_ROW);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,224,inal int nCols = d[0].length;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,225,f (nCols == 0) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,226,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,228,or (int row = 1; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,229,f (d[row].length != nCols) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,230,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,231,"ocalizedFormats.DIFFERENT_ROWS_LENGTHS,"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,232,"Cols, d[row].length);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,235,his.copyIn(d);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,236,u = null;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,240, Create a new (column) BigMatrix using <code>v</code> as the
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,241, data for the unique column of the <code>v.length x 1</code> matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,242, created.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,243, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,244," The input array is copied, not referenced.</p>"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,246, @param v column vector holding data for new matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,248,ublic BigMatrixImpl(BigDecimal[] v) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,249,inal int nRows = v.length;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,250,ata = new BigDecimal[nRows][1];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,251,or (int row = 0; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,252,ata[row][0] = v[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,257, Create a new BigMatrix which is a copy of this.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,259, @return  the cloned matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,261,ublic BigMatrix copy() {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,262,"eturn new BigMatrixImpl(this.copyOut(), false);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,266, Compute the sum of this and <code>m</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,268, @param m    matrix to be added
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,269, @return     this + m
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,270, @throws  IllegalArgumentException if m is not the same size as this
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,272,ublic BigMatrix add(BigMatrix m) throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,273,ry {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,274,eturn add((BigMatrixImpl) m);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,275, catch (ClassCastException cce) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,277,/ safety check
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,278,"atrixUtils.checkAdditionCompatible(this, m);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,280,inal int rowCount    = getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,281,inal int columnCount = getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,282,inal BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,283,or (int row = 0; row < rowCount; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,284,inal BigDecimal[] dataRow    = data[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,285,inal BigDecimal[] outDataRow = outData[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,286,or (int col = 0; col < columnCount; col++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,287,"utDataRow[col] = dataRow[col].add(m.getEntry(row, col));"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,290,"eturn new BigMatrixImpl(outData, false);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,295, Compute the sum of this and <code>m</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,297, @param m    matrix to be added
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,298, @return     this + m
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,299, @throws  IllegalArgumentException if m is not the same size as this
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,301,ublic BigMatrixImpl add(BigMatrixImpl m) throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,303,/ safety check
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,304,"atrixUtils.checkAdditionCompatible(this, m);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,306,inal int rowCount    = getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,307,inal int columnCount = getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,308,inal BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,309,or (int row = 0; row < rowCount; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,310,inal BigDecimal[] dataRow    = data[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,311,inal BigDecimal[] mRow       = m.data[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,312,inal BigDecimal[] outDataRow = outData[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,313,or (int col = 0; col < columnCount; col++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,314,utDataRow[col] = dataRow[col].add(mRow[col]);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,317,"eturn new BigMatrixImpl(outData, false);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,321, Compute  this minus <code>m</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,323, @param m    matrix to be subtracted
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,324, @return     this + m
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,325, @throws  IllegalArgumentException if m is not the same size as this
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,327,ublic BigMatrix subtract(BigMatrix m) throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,328,ry {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,329,eturn subtract((BigMatrixImpl) m);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,330, catch (ClassCastException cce) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,332,/ safety check
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,333,"atrixUtils.checkSubtractionCompatible(this, m);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,335,inal int rowCount    = getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,336,inal int columnCount = getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,337,inal BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,338,or (int row = 0; row < rowCount; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,339,inal BigDecimal[] dataRow    = data[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,340,inal BigDecimal[] outDataRow = outData[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,341,or (int col = 0; col < columnCount; col++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,342,"utDataRow[col] = dataRow[col].subtract(getEntry(row, col));"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,345,"eturn new BigMatrixImpl(outData, false);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,350, Compute  this minus <code>m</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,352, @param m    matrix to be subtracted
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,353, @return     this + m
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,354, @throws  IllegalArgumentException if m is not the same size as this
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,356,ublic BigMatrixImpl subtract(BigMatrixImpl m) throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,358,/ safety check
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,359,"atrixUtils.checkSubtractionCompatible(this, m);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,361,inal int rowCount    = getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,362,inal int columnCount = getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,363,inal BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,364,or (int row = 0; row < rowCount; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,365,inal BigDecimal[] dataRow    = data[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,366,inal BigDecimal[] mRow       = m.data[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,367,inal BigDecimal[] outDataRow = outData[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,368,or (int col = 0; col < columnCount; col++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,369,utDataRow[col] = dataRow[col].subtract(mRow[col]);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,372,"eturn new BigMatrixImpl(outData, false);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,376, Returns the result of adding d to each entry of this.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,378, @param d    value to be added to each entry
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,379, @return     d + this
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,381,ublic BigMatrix scalarAdd(BigDecimal d) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,382,inal int rowCount    = getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,383,inal int columnCount = getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,384,inal BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,385,or (int row = 0; row < rowCount; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,386,inal BigDecimal[] dataRow    = data[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,387,inal BigDecimal[] outDataRow = outData[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,388,or (int col = 0; col < columnCount; col++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,389,utDataRow[col] = dataRow[col].add(d);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,392,"eturn new BigMatrixImpl(outData, false);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,396, Returns the result of multiplying each entry of this by <code>d</code>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,397, @param d  value to multiply all entries by
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,398, @return d * this
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,400,ublic BigMatrix scalarMultiply(BigDecimal d) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,401,inal int rowCount    = getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,402,inal int columnCount = getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,403,inal BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,404,or (int row = 0; row < rowCount; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,405,inal BigDecimal[] dataRow    = data[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,406,inal BigDecimal[] outDataRow = outData[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,407,or (int col = 0; col < columnCount; col++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,408,utDataRow[col] = dataRow[col].multiply(d);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,411,"eturn new BigMatrixImpl(outData, false);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,415, Returns the result of postmultiplying this by <code>m</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,416, @param m    matrix to postmultiply by
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,417, @return     this*m
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,418, @throws     IllegalArgumentException
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,419,             if columnDimension(this) != rowDimension(m)
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,421,ublic BigMatrix multiply(BigMatrix m) throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,422,ry {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,423,eturn multiply((BigMatrixImpl) m);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,424, catch (ClassCastException cce) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,426,/ safety check
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,427,"atrixUtils.checkMultiplicationCompatible(this, m);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,429,inal int nRows = this.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,430,inal int nCols = m.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,431,inal int nSum = this.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,432,inal BigDecimal[][] outData = new BigDecimal[nRows][nCols];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,433,or (int row = 0; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,434,inal BigDecimal[] dataRow    = data[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,435,inal BigDecimal[] outDataRow = outData[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,436,or (int col = 0; col < nCols; col++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,437,igDecimal sum = ZERO;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,438,or (int i = 0; i < nSum; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,439,"um = sum.add(dataRow[i].multiply(m.getEntry(i, col)));"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,441,utDataRow[col] = sum;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,444,"eturn new BigMatrixImpl(outData, false);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,449, Returns the result of postmultiplying this by <code>m</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,450, @param m    matrix to postmultiply by
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,451, @return     this*m
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,452, @throws     IllegalArgumentException
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,453,             if columnDimension(this) != rowDimension(m)
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,455,ublic BigMatrixImpl multiply(BigMatrixImpl m) throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,457,/ safety check
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,458,"atrixUtils.checkMultiplicationCompatible(this, m);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,460,inal int nRows = this.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,461,inal int nCols = m.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,462,inal int nSum = this.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,463,inal BigDecimal[][] outData = new BigDecimal[nRows][nCols];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,464,or (int row = 0; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,465,inal BigDecimal[] dataRow    = data[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,466,inal BigDecimal[] outDataRow = outData[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,467,or (int col = 0; col < nCols; col++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,468,igDecimal sum = ZERO;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,469,or (int i = 0; i < nSum; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,470,um = sum.add(dataRow[i].multiply(m.data[i][col]));
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,472,utDataRow[col] = sum;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,475,"eturn new BigMatrixImpl(outData, false);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,479, Returns the result premultiplying this by <code>m</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,480, @param m    matrix to premultiply by
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,481, @return     m * this
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,482, @throws     IllegalArgumentException
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,483,             if rowDimension(this) != columnDimension(m)
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,485,ublic BigMatrix preMultiply(BigMatrix m) throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,486,eturn m.multiply(this);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,490, Returns matrix entries as a two-dimensional array.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,491, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,492, Makes a fresh copy of the underlying data.</p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,494, @return    2-dimensional array of entries
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,496,ublic BigDecimal[][] getData() {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,497,eturn copyOut();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,501, Returns matrix entries as a two-dimensional array.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,502, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,503, Makes a fresh copy of the underlying data converted to
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,504, <code>double</code> values.</p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,506, @return    2-dimensional array of entries
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,508,ublic double[][] getDataAsDoubleArray() {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,509,inal int nRows = getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,510,inal int nCols = getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,511,inal double d[][] = new double[nRows][nCols];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,512,or (int i = 0; i < nRows; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,513,or (int j = 0; j < nCols; j++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,514,[i][j] = data[i][j].doubleValue();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,517,eturn d;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,521, Returns a reference to the underlying data array.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,522, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,523, Does not make a fresh copy of the underlying data.</p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,525, @return 2-dimensional array of entries
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,527,ublic BigDecimal[][] getDataRef() {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,528,eturn data;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,532, Gets the rounding mode for division operations
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,533, The default is {@link java.math.BigDecimal#ROUND_HALF_UP}
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,534, @see BigDecimal
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,535, @return the rounding mode.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,537,ublic int getRoundingMode() {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,538,eturn roundingMode;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,542, Sets the rounding mode for decimal divisions.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,543, @see BigDecimal
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,544, @param roundingMode rounding mode for decimal divisions
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,546,ublic void setRoundingMode(int roundingMode) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,547,his.roundingMode = roundingMode;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,551, Sets the scale for division operations.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,552, The default is 64
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,553, @see BigDecimal
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,554, @return the scale
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,556,ublic int getScale() {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,557,eturn scale;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,561, Sets the scale for division operations.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,562, @see BigDecimal
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,563, @param scale scale for division operations
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,565,ublic void setScale(int scale) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,566,his.scale = scale;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,570," Returns the <a href=""http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html"">"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,571, maximum absolute row sum norm</a> of the matrix.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,573, @return norm
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,575,ublic BigDecimal getNorm() {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,576,igDecimal maxColSum = ZERO;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,577,or (int col = 0; col < this.getColumnDimension(); col++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,578,igDecimal sum = ZERO;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,579,or (int row = 0; row < this.getRowDimension(); row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,580,um = sum.add(data[row][col].abs());
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,582,axColSum = maxColSum.max(sum);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,584,eturn maxColSum;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,588, Gets a submatrix. Rows and columns are indicated
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,589, counting from 0 to n-1.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,591, @param startRow Initial row index
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,592, @param endRow Final row index
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,593, @param startColumn Initial column index
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,594, @param endColumn Final column index
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,595, @return The subMatrix containing the data of the
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,596,         specified rows and columns
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,597, @exception MatrixIndexException if row or column selections are not valid
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,599,"ublic BigMatrix getSubMatrix(int startRow, int endRow,"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,600,"nt startColumn, int endColumn)"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,601,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,603,"atrixUtils.checkRowIndex(this, startRow);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,604,"atrixUtils.checkRowIndex(this, endRow);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,605,f (startRow > endRow) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,606,"hrow new MatrixIndexException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,607,"tartRow, endRow);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,610,"atrixUtils.checkColumnIndex(this, startColumn);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,611,"atrixUtils.checkColumnIndex(this, endColumn);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,612,f (startColumn > endColumn) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,613,"hrow new MatrixIndexException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,614,"tartColumn, endColumn);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,617,inal BigDecimal[][] subMatrixData =
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,618,ew BigDecimal[endRow - startRow + 1][endColumn - startColumn + 1];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,619,or (int i = startRow; i <= endRow; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,620,"ystem.arraycopy(data[i], startColumn,"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,621,"ubMatrixData[i - startRow], 0,"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,622,ndColumn - startColumn + 1);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,625,"eturn new BigMatrixImpl(subMatrixData, false);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,630, Gets a submatrix. Rows and columns are indicated
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,631, counting from 0 to n-1.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,633, @param selectedRows Array of row indices must be non-empty
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,634, @param selectedColumns Array of column indices must be non-empty
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,635, @return The subMatrix containing the data in the
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,636,     specified rows and columns
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,637, @exception MatrixIndexException  if supplied row or column index arrays
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,638,     are not valid
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,640,"ublic BigMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,641,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,643,f (selectedRows.length * selectedColumns.length == 0) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,644,f (selectedRows.length == 0) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,645,hrow new MatrixIndexException(LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,647,hrow new MatrixIndexException(LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,650,inal BigDecimal[][] subMatrixData =
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,651,ew BigDecimal[selectedRows.length][selectedColumns.length];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,652,ry  {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,653,or (int i = 0; i < selectedRows.length; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,654,inal BigDecimal[] subI = subMatrixData[i];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,655,inal BigDecimal[] dataSelectedI = data[selectedRows[i]];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,656,or (int j = 0; j < selectedColumns.length; j++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,657,ubI[j] = dataSelectedI[selectedColumns[j]];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,660, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,661,/ we redo the loop with checks enabled
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,662,/ in order to generate an appropriate message
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,663,or (final int row : selectedRows) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,664,"atrixUtils.checkRowIndex(this, row);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,666,or (final int column : selectedColumns) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,667,"atrixUtils.checkColumnIndex(this, column);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,670,"eturn new BigMatrixImpl(subMatrixData, false);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,674," Replace the submatrix starting at <code>row, column</code> using data in"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,675, the input <code>subMatrix</code> array. Indexes are 0-based.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,676, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,677, Example:<br>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,678, Starting with <pre>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,679, 1  2  3  4
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,680, 5  6  7  8
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,681, 9  0  1  2
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,682, </pre>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,683," and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,684," <code>setSubMatrix(subMatrix,1,1))</code> will result in <pre>"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,685, 1  2  3  4
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,686, 5  3  4  8
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,687, 9  5  6  2
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,688, </pre></p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,690, @param subMatrix  array containing the submatrix replacement data
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,691," @param row  row coordinate of the top, left element to be replaced"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,692," @param column  column coordinate of the top, left element to be replaced"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,693, @throws MatrixIndexException  if subMatrix does not fit into this
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,694,"    matrix from element in (row, column)"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,695, @throws IllegalArgumentException if <code>subMatrix</code> is not rectangular
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,696,  (not all rows have the same length) or empty
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,697, @throws NullPointerException if <code>subMatrix</code> is null
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,698, @since 1.1
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,700,"ublic void setSubMatrix(BigDecimal[][] subMatrix, int row, int column)"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,701,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,703,inal int nRows = subMatrix.length;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,704,f (nRows == 0) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,705,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_ROW);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,708,inal int nCols = subMatrix[0].length;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,709,f (nCols == 0) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,710,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,713,or (int r = 1; r < nRows; r++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,714,f (subMatrix[r].length != nCols) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,715,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,716,"ocalizedFormats.DIFFERENT_ROWS_LENGTHS,"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,717,"Cols, subMatrix[r].length);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,721,f (data == null) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,722,f (row > 0) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,723,hrow MathRuntimeException.createIllegalStateException(
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,724,"ocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET,"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,725,ow);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,727,f (column > 0) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,728,hrow MathRuntimeException.createIllegalStateException(
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,729,"ocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,730,olumn);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,732,ata = new BigDecimal[nRows][nCols];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,733,"ystem.arraycopy(subMatrix, 0, data, 0, subMatrix.length);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,734, else {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,735,"atrixUtils.checkRowIndex(this, row);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,736,"atrixUtils.checkColumnIndex(this, column);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,737,"atrixUtils.checkRowIndex(this, nRows + row - 1);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,738,"atrixUtils.checkColumnIndex(this, nCols + column - 1);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,740,or (int i = 0; i < nRows; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,741,"ystem.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,744,u = null;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,749, Returns the entries in row number <code>row</code>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,750, as a row matrix.  Row indices start at 0.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,752, @param row the row to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,753, @return row matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,754, @throws MatrixIndexException if the specified row index is invalid
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,756,ublic BigMatrix getRowMatrix(int row) throws MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,757,"atrixUtils.checkRowIndex(this, row);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,758,inal int ncols = this.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,759,inal BigDecimal[][] out = new BigDecimal[1][ncols];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,760,"ystem.arraycopy(data[row], 0, out[0], 0, ncols);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,761,"eturn new BigMatrixImpl(out, false);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,765, Returns the entries in column number <code>column</code>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,766, as a column matrix.  Column indices start at 0.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,768, @param column the column to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,769, @return column matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,770, @throws MatrixIndexException if the specified column index is invalid
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,772,ublic BigMatrix getColumnMatrix(int column) throws MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,773,"atrixUtils.checkColumnIndex(this, column);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,774,inal int nRows = this.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,775,inal BigDecimal[][] out = new BigDecimal[nRows][1];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,776,or (int row = 0; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,777,ut[row][0] = data[row][column];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,779,"eturn new BigMatrixImpl(out, false);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,783, Returns the entries in row number <code>row</code> as an array.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,784, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,785, Row indices start at 0.  A <code>MatrixIndexException</code> is thrown
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,786, unless <code>0 <= row < rowDimension.</code></p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,788, @param row the row to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,789, @return array of entries in the row
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,790, @throws MatrixIndexException if the specified row index is not valid
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,792,ublic BigDecimal[] getRow(int row) throws MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,793,"atrixUtils.checkRowIndex(this, row);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,794,inal int ncols = this.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,795,inal BigDecimal[] out = new BigDecimal[ncols];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,796,"ystem.arraycopy(data[row], 0, out, 0, ncols);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,797,eturn out;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,801, Returns the entries in row number <code>row</code> as an array
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,802, of double values.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,803, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,804, Row indices start at 0.  A <code>MatrixIndexException</code> is thrown
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,805, unless <code>0 <= row < rowDimension.</code></p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,807, @param row the row to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,808, @return array of entries in the row
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,809, @throws MatrixIndexException if the specified row index is not valid
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,811,ublic double[] getRowAsDoubleArray(int row) throws MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,812,"atrixUtils.checkRowIndex(this, row);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,813,inal int ncols = this.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,814,inal double[] out = new double[ncols];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,815,or (int i=0;i<ncols;i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,816,ut[i] = data[row][i].doubleValue();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,818,eturn out;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,822, Returns the entries in column number <code>col</code> as an array.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,823, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,824, Column indices start at 0.  A <code>MatrixIndexException</code> is thrown
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,825, unless <code>0 <= column < columnDimension.</code></p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,827, @param col the column to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,828, @return array of entries in the column
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,829, @throws MatrixIndexException if the specified column index is not valid
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,831,ublic BigDecimal[] getColumn(int col) throws MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,832,"atrixUtils.checkColumnIndex(this, col);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,833,inal int nRows = this.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,834,inal BigDecimal[] out = new BigDecimal[nRows];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,835,or (int i = 0; i < nRows; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,836,ut[i] = data[i][col];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,838,eturn out;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,842, Returns the entries in column number <code>col</code> as an array
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,843, of double values.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,844, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,845, Column indices start at 0.  A <code>MatrixIndexException</code> is thrown
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,846, unless <code>0 <= column < columnDimension.</code></p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,848, @param col the column to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,849, @return array of entries in the column
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,850, @throws MatrixIndexException if the specified column index is not valid
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,852,ublic double[] getColumnAsDoubleArray(int col) throws MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,853,"atrixUtils.checkColumnIndex(this, col);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,854,inal int nrows = this.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,855,inal double[] out = new double[nrows];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,856,or (int i=0;i<nrows;i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,857,ut[i] = data[i][col].doubleValue();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,859,eturn out;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,863, Returns the entry in the specified row and column.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,864, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,865, Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,866, <ul>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,867, <li><code>0 <= row < rowDimension</code></li>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,868, <li><code> 0 <= column < columnDimension</code></li>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,869, </ul>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,870, otherwise a <code>MatrixIndexException</code> is thrown.</p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,872, @param row  row location of entry to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,873, @param column  column location of entry to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,874," @return matrix entry in row,column"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,875, @throws MatrixIndexException if the row or column index is not valid
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,877,"ublic BigDecimal getEntry(int row, int column)"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,878,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,879,ry {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,880,eturn data[row][column];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,881, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,882,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,883,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY,"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,884,"ow, column, getRowDimension(), getColumnDimension());"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,889, Returns the entry in the specified row and column as a double.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,890, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,891, Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,892, <ul>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,893, <li><code>0 <= row < rowDimension</code></li>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,894, <li><code> 0 <= column < columnDimension</code></li>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,895, </ul>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,896, otherwise a <code>MatrixIndexException</code> is thrown.</p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,898, @param row  row location of entry to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,899, @param column  column location of entry to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,900," @return matrix entry in row,column"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,901, @throws MatrixIndexException if the row
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,902, or column index is not valid
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,904,"ublic double getEntryAsDouble(int row, int column) throws MatrixIndexException {"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,905,"eturn getEntry(row,column).doubleValue();"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,909, Returns the transpose matrix.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,911, @return transpose matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,913,ublic BigMatrix transpose() {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,914,inal int nRows = this.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,915,inal int nCols = this.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,916,inal BigDecimal[][] outData = new BigDecimal[nCols][nRows];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,917,or (int row = 0; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,918,inal BigDecimal[] dataRow = data[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,919,or (int col = 0; col < nCols; col++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,920,utData[col][row] = dataRow[col];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,923,"eturn new BigMatrixImpl(outData, false);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,927, Returns the inverse matrix if this matrix is invertible.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,929, @return inverse matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,930, @throws InvalidMatrixException if this is not invertible
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,932,ublic BigMatrix inverse() throws InvalidMatrixException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,933,eturn solve(MatrixUtils.createBigIdentityMatrix(getRowDimension()));
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,937, Returns the determinant of this matrix.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,939, @return determinant
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,940, @throws InvalidMatrixException if matrix is not square
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,942,ublic BigDecimal getDeterminant() throws InvalidMatrixException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,943,f (!isSquare()) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,944,"hrow new NonSquareMatrixException(getRowDimension(), getColumnDimension());"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,946,f (isSingular()) {   // note: this has side effect of attempting LU decomp if lu == null
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,947,eturn ZERO;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,948, else {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,949,igDecimal det = (parity == 1) ? ONE : ONE.negate();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,950,or (int i = 0; i < getRowDimension(); i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,951,et = det.multiply(lu[i][i]);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,953,eturn det;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,958, Is this a square matrix?
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,959, @return true if the matrix is square (rowDimension = columnDimension)
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,961,ublic boolean isSquare() {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,962,eturn getColumnDimension() == getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,966, Is this a singular matrix?
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,967, @return true if the matrix is singular
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,969,ublic boolean isSingular() {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,970,f (lu == null) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,971,ry {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,972,uDecompose();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,973,eturn false;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,974, catch (InvalidMatrixException ex) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,975,eturn true;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,977, else { // LU decomp must have been successfully performed
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,978,eturn false; // so the matrix is not singular
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,983, Returns the number of rows in the matrix.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,985, @return rowDimension
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,987,ublic int getRowDimension() {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,988,eturn data.length;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,992, Returns the number of columns in the matrix.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,994, @return columnDimension
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,996,ublic int getColumnDimension() {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,997,eturn data[0].length;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1001," Returns the <a href=""http://mathworld.wolfram.com/MatrixTrace.html"">"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1002, trace</a> of the matrix (the sum of the elements on the main diagonal).
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1004, @return trace
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1006, @throws IllegalArgumentException if this matrix is not square.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1008,ublic BigDecimal getTrace() throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1009,f (!isSquare()) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1010,"hrow new NonSquareMatrixException(getRowDimension(), getColumnDimension());"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1012,igDecimal trace = data[0][0];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1013,or (int i = 1; i < this.getRowDimension(); i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1014,race = trace.add(data[i][i]);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1016,eturn trace;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1020, Returns the result of multiplying this by the vector <code>v</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1022, @param v the vector to operate on
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1023, @return this*v
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1024, @throws IllegalArgumentException if columnDimension != v.size()
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1026,ublic BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1027,f (v.length != getColumnDimension()) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1028,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1029,"ocalizedFormats.VECTOR_LENGTH_MISMATCH,"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1030,".length, getColumnDimension() );"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1032,inal int nRows = this.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1033,inal int nCols = this.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1034,inal BigDecimal[] out = new BigDecimal[nRows];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1035,or (int row = 0; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1036,igDecimal sum = ZERO;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1037,or (int i = 0; i < nCols; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1038,um = sum.add(data[row][i].multiply(v[i]));
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1040,ut[row] = sum;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1042,eturn out;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1046, Returns the result of multiplying this by the vector <code>v</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1048, @param v the vector to operate on
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1049, @return this*v
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1050, @throws IllegalArgumentException if columnDimension != v.size()
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1052,ublic BigDecimal[] operate(double[] v) throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1053,inal BigDecimal bd[] = new BigDecimal[v.length];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1054,or (int i = 0; i < bd.length; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1055,d[i] = new BigDecimal(v[i]);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1057,eturn operate(bd);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1061, Returns the (row) vector result of premultiplying this by the vector <code>v</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1063, @param v the row vector to premultiply by
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1064, @return v*this
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1065, @throws IllegalArgumentException if rowDimension != v.size()
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1067,ublic BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1068,inal int nRows = this.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1069,f (v.length != nRows) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1070,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1071,"ocalizedFormats.VECTOR_LENGTH_MISMATCH,"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1072,".length, nRows );"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1074,inal int nCols = this.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1075,inal BigDecimal[] out = new BigDecimal[nCols];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1076,or (int col = 0; col < nCols; col++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1077,igDecimal sum = ZERO;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1078,or (int i = 0; i < nRows; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1079,um = sum.add(data[i][col].multiply(v[i]));
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1081,ut[col] = sum;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1083,eturn out;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1087, Returns a matrix of (column) solution vectors for linear systems with
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1088, coefficient matrix = this and constant vectors = columns of
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1089, <code>b</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1091, @param b  array of constants forming RHS of linear systems to
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1092, to solve
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1093, @return solution array
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1094, @throws IllegalArgumentException if this.rowDimension != row dimension
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1095, @throws InvalidMatrixException if this matrix is not square or is singular
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1097,"ublic BigDecimal[] solve(BigDecimal[] b) throws IllegalArgumentException, InvalidMatrixException {"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1098,inal int nRows = this.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1099,f (b.length != nRows) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1100,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1101,"ocalizedFormats.VECTOR_LENGTH_MISMATCH,"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1102,".length, nRows);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1104,inal BigMatrix bMatrix = new BigMatrixImpl(b);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1105,inal BigDecimal[][] solution = ((BigMatrixImpl) (solve(bMatrix))).getDataRef();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1106,inal BigDecimal[] out = new BigDecimal[nRows];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1107,or (int row = 0; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1108,ut[row] = solution[row][0];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1110,eturn out;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1114, Returns a matrix of (column) solution vectors for linear systems with
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1115, coefficient matrix = this and constant vectors = columns of
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1116, <code>b</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1118, @param b  array of constants forming RHS of linear systems to
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1119, to solve
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1120, @return solution array
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1121, @throws IllegalArgumentException if this.rowDimension != row dimension
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1122, @throws InvalidMatrixException if this matrix is not square or is singular
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1124,"ublic BigDecimal[] solve(double[] b) throws IllegalArgumentException, InvalidMatrixException {"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1125,inal BigDecimal bd[] = new BigDecimal[b.length];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1126,or (int i = 0; i < bd.length; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1127,d[i] = new BigDecimal(b[i]);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1129,eturn solve(bd);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1133, Returns a matrix of (column) solution vectors for linear systems with
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1134, coefficient matrix = this and constant vectors = columns of
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1135, <code>b</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1137, @param b  matrix of constant vectors forming RHS of linear systems to
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1138, to solve
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1139, @return matrix of solution vectors
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1140, @throws IllegalArgumentException if this.rowDimension != row dimension
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1141, @throws InvalidMatrixException if this matrix is not square or is singular
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1143,"ublic BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException  {"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1144,f (b.getRowDimension() != getRowDimension()) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1145,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1146,"ocalizedFormats.DIMENSIONS_MISMATCH_2x2,"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1147,".getRowDimension(), b.getColumnDimension(), getRowDimension(), ""n"");"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1149,f (!isSquare()) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1150,"hrow new NonSquareMatrixException(getRowDimension(), getColumnDimension());"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1152,f (this.isSingular()) { // side effect: compute LU decomp
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1153,hrow new SingularMatrixException();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1156,inal int nCol = this.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1157,inal int nColB = b.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1158,inal int nRowB = b.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1160,/ Apply permutations to b
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1161,inal BigDecimal[][] bp = new BigDecimal[nRowB][nColB];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1162,or (int row = 0; row < nRowB; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1163,inal BigDecimal[] bpRow = bp[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1164,or (int col = 0; col < nColB; col++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1165,"pRow[col] = b.getEntry(permutation[row], col);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1169,/ Solve LY = b
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1170,or (int col = 0; col < nCol; col++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1171,or (int i = col + 1; i < nCol; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1172,inal BigDecimal[] bpI = bp[i];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1173,inal BigDecimal[] luI = lu[i];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1174,or (int j = 0; j < nColB; j++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1175,pI[j] = bpI[j].subtract(bp[col][j].multiply(luI[col]));
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1180,/ Solve UX = Y
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1181,or (int col = nCol - 1; col >= 0; col--) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1182,inal BigDecimal[] bpCol = bp[col];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1183,inal BigDecimal luDiag = lu[col][col];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1184,or (int j = 0; j < nColB; j++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1185,"pCol[j] = bpCol[j].divide(luDiag, scale, roundingMode);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1187,or (int i = 0; i < col; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1188,inal BigDecimal[] bpI = bp[i];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1189,inal BigDecimal[] luI = lu[i];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1190,or (int j = 0; j < nColB; j++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1191,pI[j] = bpI[j].subtract(bp[col][j].multiply(luI[col]));
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1196,"eturn new BigMatrixImpl(bp, false);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1201, Computes a new
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1202," <a href=""http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf"">"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1203," LU decompostion</a> for this matrix, storing the result for use by other methods."
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1204, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1205, <strong>Implementation Note</strong>:<br>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1206," Uses <a href=""http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm"">"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1207," Crout's algortithm</a>, with partial pivoting.</p>"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1208, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1209, <strong>Usage Note</strong>:<br>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1210, This method should rarely be invoked directly. Its only use is
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1211, to force recomputation of the LU decomposition when changes have been
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1212, made to the underlying data using direct array references. Changes
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1213, made using setXxx methods will trigger recomputation when needed
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1214, automatically.</p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1216, @throws InvalidMatrixException if the matrix is non-square or singular.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1218,ublic void luDecompose() throws InvalidMatrixException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1220,inal int nRows = this.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1221,inal int nCols = this.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1222,f (nRows != nCols) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1223,"hrow new NonSquareMatrixException(getRowDimension(), getColumnDimension());"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1225,u = this.getData();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1227,/ Initialize permutation array and parity
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1228,ermutation = new int[nRows];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1229,or (int row = 0; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1230,ermutation[row] = row;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1232,arity = 1;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1234,/ Loop over columns
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1235,or (int col = 0; col < nCols; col++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1237,igDecimal sum = ZERO;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1239,/ upper
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1240,or (int row = 0; row < col; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1241,inal BigDecimal[] luRow = lu[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1242,um = luRow[col];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1243,or (int i = 0; i < row; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1244,um = sum.subtract(luRow[i].multiply(lu[i][col]));
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1246,uRow[col] = sum;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1249,/ lower
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1250,nt max = col; // permutation row
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1251,igDecimal largest = ZERO;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1252,or (int row = col; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1253,inal BigDecimal[] luRow = lu[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1254,um = luRow[col];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1255,or (int i = 0; i < col; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1256,um = sum.subtract(luRow[i].multiply(lu[i][col]));
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1258,uRow[col] = sum;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1260,/ maintain best permutation choice
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1261,f (sum.abs().compareTo(largest) == 1) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1262,argest = sum.abs();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1263,ax = row;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1267,/ Singularity check
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1268,f (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1269,u = null;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1270,hrow new SingularMatrixException();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1273,/ Pivot if necessary
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1274,f (max != col) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1275,igDecimal tmp = ZERO;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1276,or (int i = 0; i < nCols; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1277,mp = lu[max][i];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1278,u[max][i] = lu[col][i];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1279,u[col][i] = tmp;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1281,nt temp = permutation[max];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1282,ermutation[max] = permutation[col];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1283,ermutation[col] = temp;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1284,arity = -parity;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1287,"/ Divide the lower elements by the ""winning"" diagonal elt."
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1288,inal BigDecimal luDiag = lu[col][col];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1289,or (int row = col + 1; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1290,inal BigDecimal[] luRow = lu[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1291,"uRow[col] = luRow[col].divide(luDiag, scale, roundingMode);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1299, Get a string representation for this matrix.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1300, @return a string representation for this matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1302,Override
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1303,ublic String toString() {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1304,tringBuffer res = new StringBuffer();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1305,"es.append(""BigMatrixImpl{"");"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1306,f (data != null) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1307,or (int i = 0; i < data.length; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1308,f (i > 0) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1309,"es.append("","");"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1311,"es.append(""{"");"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1312,or (int j = 0; j < data[0].length; j++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1313,f (j > 0) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1314,"es.append("","");"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1316,es.append(data[i][j]);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1318,"es.append(""}"");"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1321,"es.append(""}"");"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1322,eturn res.toString();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1326, Returns true iff <code>object</code> is a
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1327, <code>BigMatrixImpl</code> instance with the same dimensions as this
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1328, and all corresponding matrix entries are equal.  BigDecimal.equals
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1329, is used to compare corresponding entries.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1331, @param object the object to test equality against.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1332, @return true if object equals this
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1334,Override
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1335,ublic boolean equals(Object object) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1336,f (object == this ) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1337,eturn true;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1339,f (object instanceof BigMatrixImpl == false) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1340,eturn false;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1342,inal BigMatrix m = (BigMatrix) object;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1343,inal int nRows = getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1344,inal int nCols = getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1345,f (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1346,eturn false;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1348,or (int row = 0; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1349,inal BigDecimal[] dataRow = data[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1350,or (int col = 0; col < nCols; col++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1351,"f (!dataRow[col].equals(m.getEntry(row, col))) {"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1352,eturn false;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1356,eturn true;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1360, Computes a hashcode for the matrix.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1362, @return hashcode for matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1364,Override
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1365,ublic int hashCode() {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1366,nt ret = 7;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1367,inal int nRows = getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1368,inal int nCols = getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1369,et = ret * 31 + nRows;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1370,et = ret * 31 + nCols;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1371,or (int row = 0; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1372,inal BigDecimal[] dataRow = data[row];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1373,or (int col = 0; col < nCols; col++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1374,et = ret * 31 + (11 * (row+1) + 17 * (col+1)) *
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1375,ataRow[col].hashCode();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1378,eturn ret;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1381,/------------------------ Protected methods
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1384,  Returns the LU decomposition as a BigMatrix.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1385,  Returns a fresh copy of the cached LU matrix if this has been computed;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1386,  otherwise the composition is computed and cached for use by other methods.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1387,"  Since a copy is returned in either case, changes to the returned matrix do not"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1388,  affect the LU decomposition property.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1389, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1390, The matrix returned is a compact representation of the LU decomposition.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1391," Elements below the main diagonal correspond to entries of the ""L"" matrix;"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1392," elements on and above the main diagonal correspond to entries of the ""U"""
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1393, matrix.</p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1394, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1395, Example: <pre>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1397,     Returned matrix                L                  U
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1398,         2  3  1                   1  0  0            2  3  1
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1399,         5  4  6                   5  1  0            0  4  6
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1400,         1  7  8                   1  7  1            0  0  8
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1401, </pre>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1403," The L and U matrices satisfy the matrix equation LU = permuteRows(this), <br>"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1404,  where permuteRows reorders the rows of the matrix to follow the order determined
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1405,  by the <a href=#getPermutation()>permutation</a> property.</p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1407, @return LU decomposition matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1408, @throws InvalidMatrixException if the matrix is non-square or singular.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1410,rotected BigMatrix getLUMatrix() throws InvalidMatrixException {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1411,f (lu == null) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1412,uDecompose();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1414,eturn new BigMatrixImpl(lu);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1418, Returns the permutation associated with the lu decomposition.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1419," The entries of the array represent a permutation of the numbers 0, ... , nRows - 1."
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1420, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1421, Example:
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1422," permutation = [1, 2, 0] means current 2nd row is first, current third row is second"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1423, and current first row is last.</p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1424, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1425, Returns a fresh copy of the array.</p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1427, @return the permutation
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1429,rotected int[] getPermutation() {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1430,inal int[] out = new int[permutation.length];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1431,"ystem.arraycopy(permutation, 0, out, 0, permutation.length);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1432,eturn out;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1435,/------------------------ Private methods
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1438, Returns a fresh copy of the underlying data array.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1440, @return a copy of the underlying data array.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1442,rivate BigDecimal[][] copyOut() {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1443,inal int nRows = this.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1444,inal BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension()];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1445,"/ can't copy 2-d array in one shot, otherwise get row references"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1446,or (int i = 0; i < nRows; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1447,"ystem.arraycopy(data[i], 0, out[i], 0, data[i].length);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1449,eturn out;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1453, Replaces data with a fresh copy of the input array.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1454, <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1455, Verifies that the input array is rectangular and non-empty.</p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1457, @param in data to copy in
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1458, @throws IllegalArgumentException if input array is emtpy or not
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1459,    rectangular
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1460, @throws NullPointerException if input array is null
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1462,rivate void copyIn(BigDecimal[][] in) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1463,"etSubMatrix(in,0,0);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1467, Replaces data with a fresh copy of the input array.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1469, @param in data to copy in
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1471,rivate void copyIn(double[][] in) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1472,inal int nRows = in.length;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1473,inal int nCols = in[0].length;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1474,ata = new BigDecimal[nRows][nCols];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1475,or (int i = 0; i < nRows; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1476,inal BigDecimal[] dataI = data[i];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1477,inal double[] inI = in[i];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1478,or (int j = 0; j < nCols; j++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1479,ataI[j] = new BigDecimal(inI[j]);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1482,u = null;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1486, Replaces data with BigDecimals represented by the strings in the input
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1487, array.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1489, @param in data to copy in
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1491,rivate void copyIn(String[][] in) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1492,inal int nRows = in.length;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1493,inal int nCols = in[0].length;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1494,ata = new BigDecimal[nRows][nCols];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1495,or (int i = 0; i < nRows; i++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1496,inal BigDecimal[] dataI = data[i];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1497,inal String[] inI = in[i];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1498,or (int j = 0; j < nCols; j++) {
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1499,ataI[j] = new BigDecimal(inI[j]);
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1502,u = null;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,97,  positive
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,90,* positive.
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,99,"ublic BlockRealMatrix(final int rows, final int columns)"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,100,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,92,"public BlockRealMatrix(final int rows, final int columns) {"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,103,his.rows    = rows;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,94,this.rows = rows;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,107,lockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,98,blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,149,"inal double[][] blockData, final boolean copyArray)"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,150,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,139,"final double[][] blockData, final boolean copyArray) {"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,153,his.rows    = rows;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,141,this.rows = rows;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,157,lockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,145,blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,205,ublic static double[][] toBlocksLayout(final double[][] rawData)
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,206,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,208,inal int rows         = rawData.length;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,209,inal int columns      = rawData[0].length;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,210,inal int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,193,public static double[][] toBlocksLayout(final double[][] rawData) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,194,final int rows = rawData.length;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,195,final int columns = rawData[0].length;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,196,final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,225,inal int pStart  = iBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,226,"inal int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,211,final int pStart = iBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,212,"final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,230,"inal int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,216,"final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,266,inal int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,249,final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,272,inal int pStart  = iBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,273,"inal int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,255,final int pStart = iBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,256,"final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,277,"inal int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,260,"final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,289,"ublic BlockRealMatrix createMatrix(final int rowDimension, final int columnDimension)"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,290,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,272,"public BlockRealMatrix createMatrix(final int rowDimension, final int columnDimension) {"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,311,ublic BlockRealMatrix add(final RealMatrix m)
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,312,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,292,public BlockRealMatrix add(final RealMatrix m) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,330,inal int      pStart   = iBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,331,"inal int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,332,inal int      qStart   = jBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,333,"inal int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,309,final int pStart = iBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,310,"final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,311,final int qStart = jBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,312,"final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,353, Compute the sum of this and <code>m</code>.
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,330,* Compute the sum of this matrix and {@code m}.
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,355, @param m    matrix to be added
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,356, @return     this + m
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,357, @throws  IllegalArgumentException if m is not the same size as this
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,332,* @param m Matrix to be added.
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,333,* @return {@code this} + m.
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,334,* @throws MatrixDimensionMismatchException if {@code m} is not the same
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,335,* size as this matrix.
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,359,ublic BlockRealMatrix add(final BlockRealMatrix m)
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,360,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,337,public BlockRealMatrix add(final BlockRealMatrix m) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,370,inal double[] tBlock   = blocks[blockIndex];
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,371,inal double[] mBlock   = m.blocks[blockIndex];
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,346,final double[] tBlock = blocks[blockIndex];
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,347,final double[] mBlock = m.blocks[blockIndex];
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,382,ublic BlockRealMatrix subtract(final RealMatrix m)
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,383,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,358,public BlockRealMatrix subtract(final RealMatrix m) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,400,inal double[] tBlock   = blocks[blockIndex];
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,401,inal int      pStart   = iBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,402,"inal int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,403,inal int      qStart   = jBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,404,"inal int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,374,final double[] tBlock = blocks[blockIndex];
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,375,final int pStart = iBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,376,"final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,377,final int qStart = jBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,378,"final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,424, Compute this minus <code>m</code>.
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,396,* Subtract {@code m} from this matrix.
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,426, @param m    matrix to be subtracted
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,427, @return     this - m
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,428, @throws  IllegalArgumentException if m is not the same size as this
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,398,* @param m Matrix to be subtracted.
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,399,* @return {@code this} - m.
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,400,* @throws MatrixDimensionMismatchException if {@code m} is not the
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,401,* same size as this matrix.
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,430,ublic BlockRealMatrix subtract(final BlockRealMatrix m)
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,431,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,403,public BlockRealMatrix subtract(final BlockRealMatrix m) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,441,inal double[] tBlock   = blocks[blockIndex];
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,442,inal double[] mBlock   = m.blocks[blockIndex];
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,412,final double[] tBlock = blocks[blockIndex];
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,413,final double[] mBlock = m.blocks[blockIndex];
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,453,ublic BlockRealMatrix scalarAdd(final double d)
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,454,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,424,public BlockRealMatrix scalarAdd(final double d) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,461,inal double[] tBlock   = blocks[blockIndex];
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,431,final double[] tBlock = blocks[blockIndex];
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,472,ublic RealMatrix scalarMultiply(final double d)
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,473,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,442,public RealMatrix scalarMultiply(final double d) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,480,inal double[] tBlock   = blocks[blockIndex];
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,448,final double[] tBlock = blocks[blockIndex];
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,491,ublic BlockRealMatrix multiply(final RealMatrix m)
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,492,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,459,public BlockRealMatrix multiply(final RealMatrix m) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,507,"inal int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,472,"final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,512,"inal int qEnd   = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,476,"final int qEnd = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,519,inal int kWidth      = blockWidth(kBlock);
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,483,final int kWidth = blockWidth(kBlock);
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,521,inal int rStart      = kBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,485,final int rStart = kBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,525,inal int lEnd   = lStart + kWidth;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,489,final int lEnd = lStart + kWidth;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,550, Returns the result of postmultiplying this by m.
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,512,* Returns the result of postmultiplying this by {@code m}.
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,552, @param m    matrix to postmultiply by
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,553, @return     this * m
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,554, @throws     IllegalArgumentException
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,555,             if columnDimension(this) != rowDimension(m)
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,514,* @param m Matrix to postmultiply by.
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,515,* @return {@code this} * m.
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,516,* @throws MatrixDimensionMismatchException if the matrices are not
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,517,* compatible.
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,557,ublic BlockRealMatrix multiply(BlockRealMatrix m) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,519,public BlockRealMatrix multiply(BlockRealMatrix m) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,569,"inal int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,530,"final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,588,inal int lEnd   = lStart + kWidth;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,549,final int lEnd = lStart + kWidth;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,629,"inal int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,630,nt regularPos   = 0;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,631,nt lastPos      = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,587,"final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,588,int regularPos = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,589,int lastPos = 0;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,635,nt dataPos    = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,593,int dataPos = 0;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,690,"inal int startColumn, final int endColumn)"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,691,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,648,"final int startColumn, final int endColumn) {"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,701,inal int blockStartRow    = startRow    / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,702,inal int rowsShift        = startRow    % BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,657,final int blockStartRow = startRow / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,658,final int rowsShift = startRow % BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,704,inal int columnsShift     = startColumn % BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,660,final int columnsShift = startColumn % BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,715,inal int      outIndex = iBlock * out.blockColumns + jBlock;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,671,final int outIndex = iBlock * out.blockColumns + jBlock;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,717,inal int      index    = pBlock * blockColumns + qBlock;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,718,inal int      width    = blockWidth(qBlock);
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,673,final int index = pBlock * blockColumns + qBlock;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,674,final int width = blockWidth(qBlock);
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,721,inal int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,677,final int widthExcess = jWidth + columnsShift - BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,819,"ublic void setSubMatrix(final double[][] subMatrix, final int row, final int column)"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,820,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,771,"public void setSubMatrix(final double[][] subMatrix, final int row, final int column) {"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,827,inal int endRow    = row + subMatrix.length - 1;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,777,final int endRow = row + subMatrix.length - 1;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,837,inal int blockStartRow    = row / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,838,inal int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,787,final int blockStartRow = row / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,788,final int blockEndRow = (endRow + BLOCK_SIZE) / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,840,inal int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,790,final int blockEndColumn = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,844,inal int iHeight  = blockHeight(iBlock);
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,794,final int iHeight = blockHeight(iBlock);
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,846,"inal int iStart   = FastMath.max(row,    firstRow);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,847,"inal int iEnd     = FastMath.min(endRow + 1, firstRow + iHeight);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,796,"final int iStart = FastMath.max(row,    firstRow);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,797,"final int iEnd = FastMath.min(endRow + 1, firstRow + iHeight);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,850,inal int jWidth      = blockWidth(jBlock);
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,800,final int jWidth = blockWidth(jBlock);
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,852,"inal int jStart      = FastMath.max(column,    firstColumn);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,853,"inal int jEnd        = FastMath.min(endColumn + 1, firstColumn + jWidth);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,854,inal int jLength     = jEnd - jStart;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,802,"final int jStart = FastMath.max(column,    firstColumn);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,803,"final int jEnd = FastMath.min(endColumn + 1, firstColumn + jWidth);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,804,final int jLength = jEnd - jStart;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,870,ublic BlockRealMatrix getRowMatrix(final int row)
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,871,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,820,public BlockRealMatrix getRowMatrix(final int row) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,877,inal int iBlock  = row / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,878,inal int iRow    = row - iBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,825,final int iBlock = row / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,826,final int iRow = row - iBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,880,nt outIndex      = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,828,int outIndex = 0;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,883,inal int jWidth     = blockWidth(jBlock);
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,831,final int jWidth = blockWidth(jBlock);
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,885,inal int available  = outBlock.length - outIndex;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,833,final int available = outBlock.length - outIndex;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,917, @throws MatrixIndexException if the specified row index is invalid
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,918, @throws MatrixDimensionMismatchException if the matrix dimensions do not match one
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,919, instance row
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,865,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,866,* if the specified row index is invalid.
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,867,* @throws MatrixDimensionMismatchException if the matrix dimensions do
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,868,* not match one instance row.
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,933,inal int iRow   = row - iBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,934,nt mBlockIndex  = 0;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,935,nt mIndex       = 0;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,936,ouble[] mBlock  = matrix.blocks[mBlockIndex];
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,882,final int iRow = row - iBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,883,int mBlockIndex = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,884,int mIndex = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,885,double[] mBlock = matrix.blocks[mBlockIndex];
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,938,inal int jWidth     = blockWidth(jBlock);
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,887,final int jWidth = blockWidth(jBlock);
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,955,ublic BlockRealMatrix getColumnMatrix(final int column)
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,956,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,904,public BlockRealMatrix getColumnMatrix(final int column) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,962,inal int jBlock  = column / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,909,final int jBlock = column / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,964,inal int jWidth  = blockWidth(jBlock);
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,911,final int jWidth = blockWidth(jBlock);
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,966,nt outIndex      = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,913,int outIndex = 0;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1000, @throws MatrixIndexException if the specified column index is invalid
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1001, @throws MatrixDimensionMismatchException if the matrix dimensions do not match one
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1002, instance column
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,947,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,948,* if the specified column index is invalid.
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,949,* @throws MatrixDimensionMismatchException if the matrix dimensions do
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,950,* not match one instance column.
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1015,inal int jBlock  = column / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,963,final int jBlock = column / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1017,inal int jWidth  = blockWidth(jBlock);
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,965,final int jWidth = blockWidth(jBlock);
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1019,nt mIndex      = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,967,int mIndex = 0;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1036,ublic RealVector getRowVector(final int row)
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1037,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,984,public RealVector getRowVector(final int row) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1043,inal int iBlock  = row / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1044,inal int iRow    = row - iBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1045,nt outIndex      = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,989,final int iBlock = row / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,990,final int iRow = row - iBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,991,int outIndex = 0;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1047,inal int jWidth     = blockWidth(jBlock);
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,993,final int jWidth = blockWidth(jBlock);
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1068,ublic RealVector getColumnVector(final int column)
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1069,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1014,public RealVector getColumnVector(final int column) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1075,inal int jBlock  = column / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1019,final int jBlock = column / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1077,inal int jWidth  = blockWidth(jBlock);
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1078,nt outIndex      = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1021,final int jWidth = blockWidth(jBlock);
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1022,int outIndex = 0;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1102,ublic double[] getRow(final int row)
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1103,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1046,public double[] getRow(final int row) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1109,inal int iBlock  = row / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1110,inal int iRow    = row - iBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1111,nt outIndex      = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1051,final int iBlock = row / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1052,final int iRow = row - iBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1053,int outIndex = 0;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1132,inal int iBlock  = row / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1133,inal int iRow    = row - iBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1134,nt outIndex      = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1074,final int iBlock = row / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1075,final int iRow = row - iBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1076,int outIndex = 0;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1145,ublic double[] getColumn(final int column)
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1146,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1087,public double[] getColumn(final int column) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1155,nt outIndex      = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1095,int outIndex = 0;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1179,inal int jWidth  = blockWidth(jBlock);
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1180,nt outIndex      = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1119,final int jWidth = blockWidth(jBlock);
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1120,int outIndex = 0;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1192,"ublic double getEntry(final int row, final int column)"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1193,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1194,ry {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1195,inal int iBlock = row    / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1196,inal int jBlock = column / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1197,inal int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1198,column - jBlock * BLOCK_SIZE);
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1199,eturn blocks[iBlock * blockColumns + jBlock][k];
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1200, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1201,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1202,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY,"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1203,"ow, column, getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1132,"public double getEntry(final int row, final int column) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1133,"MatrixUtils.checkMatrixIndex(this, row, column);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1134,final int iBlock = row / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1135,final int jBlock = column / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1136,final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1137,(column - jBlock * BLOCK_SIZE);
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1138,return blocks[iBlock * blockColumns + jBlock][k];
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1209,"ublic void setEntry(final int row, final int column, final double value)"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1210,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1211,ry {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1212,inal int iBlock = row    / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1213,inal int jBlock = column / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1214,inal int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1215,column - jBlock * BLOCK_SIZE);
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1216,locks[iBlock * blockColumns + jBlock][k] = value;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1217, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1218,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1219,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY,"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1220,"ow, column, getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1143,"public void setEntry(final int row, final int column, final double value) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1144,"MatrixUtils.checkMatrixIndex(this, row, column);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1145,final int iBlock = row / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1146,final int jBlock = column / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1147,final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1148,(column - jBlock * BLOCK_SIZE);
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1149,blocks[iBlock * blockColumns + jBlock][k] = value;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1226,"ublic void addToEntry(final int row, final int column, final double increment)"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1227,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1228,ry {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1229,inal int iBlock = row    / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1230,inal int jBlock = column / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1231,inal int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1232,column - jBlock * BLOCK_SIZE);
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1233,locks[iBlock * blockColumns + jBlock][k] += increment;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1234, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1235,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1236,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY,"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1237,"ow, column, getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1154,"public void addToEntry(final int row, final int column, final double increment) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1155,"MatrixUtils.checkMatrixIndex(this, row, column);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1156,final int iBlock = row    / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1157,final int jBlock = column / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1158,final int k = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1159,(column - jBlock * BLOCK_SIZE);
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1160,blocks[iBlock * blockColumns + jBlock][k] += increment;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1243,"ublic void multiplyEntry(final int row, final int column, final double factor)"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1244,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1245,ry {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1246,inal int iBlock = row    / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1247,inal int jBlock = column / BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1248,inal int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1249,column - jBlock * BLOCK_SIZE);
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1250,locks[iBlock * blockColumns + jBlock][k] *= factor;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1251, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1252,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1253,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY,"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1254,"ow, column, getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1165,"public void multiplyEntry(final int row, final int column, final double factor) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1166,"MatrixUtils.checkMatrixIndex(this, row, column);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1167,final int iBlock = row / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1168,final int jBlock = column / BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1169,final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1170,(column - jBlock * BLOCK_SIZE);
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1171,blocks[iBlock * blockColumns + jBlock][k] *= factor;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1273,inal double[] tBlock   = blocks[jBlock * blockColumns + iBlock];
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1274,inal int      pStart   = iBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1275,"inal int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1276,inal int      qStart   = jBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1277,"inal int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1187,final double[] tBlock = blocks[jBlock * blockColumns + iBlock];
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1188,final int pStart = iBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1189,"final int pEnd = FastMath.min(pStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1190,final int qStart = jBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1191,"final int qEnd = FastMath.min(qStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1312,ublic double[] operate(final double[] v)
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1313,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1224,public double[] operate(final double[] v) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1323,"inal int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1233,"final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1326,inal int      qStart = jBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1327,"inal int      qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1236,final int qStart = jBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1237,"final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1353,ublic double[] preMultiply(final double[] v)
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1354,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1263,public double[] preMultiply(final double[] v) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1368,"inal int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1276,"final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1371,inal int      pStart = iBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1372,"inal int      pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1279,final int pStart = iBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1280,"final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1404,"inal int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1312,"final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1409,"inal int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1317,"final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1429,"inal int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1337,"final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1434,"inal int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1342,"final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1452,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1360,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1456,inal int p0     = iBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1364,final int p0 = iBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1458,"inal int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1366,"final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1462,inal int q0     = jBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1370,final int q0 = jBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1464,"inal int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1372,"final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1482,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1390,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1486,inal int p0     = iBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1394,final int p0 = iBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1488,"inal int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1396,"final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1492,inal int q0     = jBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1400,final int q0 = jBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1494,"inal int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1402,"final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1515,"inal int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1423,"final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1518,"inal int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1426,"final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1541,"inal int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1449,"final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1544,"inal int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1452,"final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1564,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1472,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1568,inal int p0     = iBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1476,final int p0 = iBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1570,"inal int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1478,"final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1573,inal int q0     = jBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1481,final int q0 = jBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1575,"inal int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1483,"final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1594,"hrows MatrixIndexException, MatrixVisitorException {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1502,throws MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1598,inal int p0     = iBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1506,final int p0 = iBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1600,"inal int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1508,"final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1603,inal int q0     = jBlock * BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1511,final int q0 = jBlock * BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1605,"inal int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1513,"final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,37, @return type of field elements of the matrix
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,38,* @return the type of field elements of the matrix.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,42, Create a new FieldMatrix<T> of the same type as the instance with the supplied
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,43, row and column dimensions.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,43,* Create a new FieldMatrix<T> of the same type as the instance with
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,44,* the supplied row and column dimensions.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,48, @throws IllegalArgumentException if row or column dimension is not positive
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,49,* @throws org.apache.commons.math.exception.NotStrictlyPositiveException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,50,* if row or column dimension is not positive.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,54, Returns a (deep) copy of this.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,56,* Make a (deep) copy of this.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,56, @return matrix copy
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,58,* @return a copy of this matrix.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,63, @param m    matrix to be added
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,64, @return     this + m
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,65, @throws  IllegalArgumentException if m is not the same size as this
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,65,* @param m Matrix to be added.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,66,* @return {@code this} + {@code m}.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,67,* @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,68,* if {@code m} is not the same size as this matrix.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,70, Compute this minus m.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,73,* Subtract {@code m} from this matrix.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,72, @param m    matrix to be subtracted
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,73, @return     this + m
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,74, @throws  IllegalArgumentException if m is not the same size as this
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,75,* @param m Matrix to be subtracted.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,76,* @return {@code this} - {@code m}.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,77,* @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,78,* if {@code m} is not the same size as this matrix.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,79, Returns the result of adding d to each entry of this.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,83,* Increment each entry of this matrix.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,81, @param d    value to be added to each entry
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,82, @return     d + this
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,85,* @param d Value to be added to each entry.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,86,* @return {@code d} + {@code this}.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,87, Returns the result multiplying each entry of this by d.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,91,* Multiply each entry by {@code d}.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,89, @param d    value to multiply all entries by
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,90, @return     d * this
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,93,* @param d Value to multiply all entries by.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,94,* @return {@code d} * {@code this}.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,95, Returns the result of postmultiplying this by m.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,99,* Postmultiply this matrix by {@code m}.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,97, @param m    matrix to postmultiply by
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,98, @return     this * m
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,99, @throws     IllegalArgumentException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,101,* @param m  Matrix to postmultiply by.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,102,* @return {@code this} * {@code m}.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,103,* @throws IllegalArgumentException
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,105, Returns the result premultiplying this by <code>m</code>.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,106, @param m    matrix to premultiply by
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,107, @return     m * this
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,108, @throws     IllegalArgumentException
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,109,             if rowDimension(this) != columnDimension(m)
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,109,* Premultiply this matrix by {@code m}.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,111,* @param m Matrix to premultiply by.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,112,* @return {@code m} * {@code this}.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,113,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,114,* if the number of columns of {@code m} differ from the number of rows
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,115,* of this matrix.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,116, @return    2-dimensional array of entries
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,122,* @return a 2-dimensional array of entries.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,121, Gets a submatrix. Rows and columns are indicated
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,122, counting from 0 to n-1.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,127,* Get a submatrix. Rows and columns are indicated
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,128,* counting from 0 to n - 1.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,128, @return The subMatrix containing the data of the
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,129,         specified rows and columns
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,130, @exception MatrixIndexException  if the indices are not valid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,134,* @return the matrix containing the data of the
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,135,* specified rows and columns.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,136,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,137,* if the indices are not valid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,135, Gets a submatrix. Rows and columns are indicated
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,136, counting from 0 to n-1.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,142,* Get a submatrix. Rows and columns are indicated
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,143,* counting from 0 to n - 1.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,140, @return The subMatrix containing the data in the
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,141,         specified rows and columns
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,142, @exception MatrixIndexException if row or column selections are not valid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,147,* @return the matrix containing the data in the
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,148,* specified rows and columns.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,149,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,150,* if row or column selections are not valid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,150, @param startRow Initial row index
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,151, @param endRow Final row index (inclusive)
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,152, @param startColumn Initial column index
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,153, @param endColumn Final column index (inclusive)
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,158,* @param startRow Initial row index.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,159,* @param endRow Final row index (inclusive).
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,160,* @param startColumn Initial column index.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,161,* @param endColumn Final column index (inclusive).
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,155," (if larger than rows/columns counts, only the upper-left part will be used)"
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,156, @exception MatrixIndexException if the indices are not valid
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,157, @exception IllegalArgumentException if the destination array is too small
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,163,"* (if larger than rows/columns counts, only the upper-left part will be used)."
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,164,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,165,* if the indices are not valid.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,166,* @exception IllegalArgumentException if the destination array is too small.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,164, counting from 0 to n-1.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,173,* counting from 0 to n - 1.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,166, @param selectedRows Array of row indices.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,167, @param selectedColumns Array of column indices.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,168, @param destination The arrays where the submatrix data should be copied
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,175,* @param selectedRows Array of row indices.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,176,* @param selectedColumns Array of column indices.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,177,* @param destination Arrays where the submatrix data should be copied
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,170, @exception MatrixIndexException if the indices are not valid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,179,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,180,* if the indices are not valid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,176," Replace the submatrix starting at <code>row, column</code> using data in"
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,177, the input <code>subMatrix</code> array. Indexes are 0-based.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,186,"* Replace the submatrix starting at {@code (row, column)} using data in"
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,187,* the input {@code subMatrix} array. Indexes are 0-based.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,192, @param subMatrix  array containing the submatrix replacement data
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,193," @param row  row coordinate of the top, left element to be replaced"
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,194," @param column  column coordinate of the top, left element to be replaced"
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,195, @throws MatrixIndexException  if subMatrix does not fit into this
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,196,"    matrix from element in (row, column)"
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,197, @throws IllegalArgumentException if <code>subMatrix</code> is not rectangular
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,198,  (not all rows have the same length) or empty
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,199, @throws NullPointerException if <code>subMatrix</code> is null
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,202,* @param subMatrix Array containing the submatrix replacement data.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,203,* @param row Row coordinate of the top-left element to be replaced.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,204,* @param column Column coordinate of the top-left element to be replaced.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,205,* @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,206,* if {@code subMatrix} does not fit into this matrix from element in
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,207,"* {@code (row, column)}."
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,208,* @throws org.apache.commons.math.exception.ZeroException if a row or column
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,209,* of {@code subMatrix} is empty.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,210,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,211,* if {@code subMatrix} is not rectangular (not all rows have the same
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,212,* length).
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,213,* @throws org.apache.commons.math.exception.NullArgumentException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,214,* if {@code subMatrix} is {@code null}.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,205, Returns the entries in row number <code>row</code>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,206, as a row matrix.  Row indices start at 0.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,220,* Get the entries in row number {@code row}
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,221,* as a row matrix.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,208, @param row the row to be fetched
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,209, @return row matrix
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,210, @throws MatrixIndexException if the specified row index is invalid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,223,* @param row Row to be fetched.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,224,* @return a row matrix.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,225,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,226,* if the specified row index is invalid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,215, Sets the entries in row number <code>row</code>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,216, as a row matrix.  Row indices start at 0.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,231,* Set the entries in row number {@code row}
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,232,* as a row matrix.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,218, @param row the row to be set
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,219, @param matrix row matrix (must have one row and the same number of columns
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,220, as the instance)
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,221, @throws MatrixIndexException if the specified row index is invalid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,234,* @param row Row to be set.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,235,* @param matrix Row matrix (must have one row and the same number
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,236,* of columns as the instance).
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,237,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,238,* if the specified row index is invalid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,228, Returns the entries in column number <code>column</code>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,229, as a column matrix.  Column indices start at 0.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,245,* Get the entries in column number {@code column}
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,246,* as a column matrix.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,231, @param column the column to be fetched
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,232, @return column matrix
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,233, @throws MatrixIndexException if the specified column index is invalid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,248,* @param column Column to be fetched.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,249,* @return a column matrix.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,250,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,251,* if the specified column index is invalid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,238, Sets the entries in column number <code>column</code>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,239, as a column matrix.  Column indices start at 0.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,256,* Set the entries in column number {@code column}
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,257,* as a column matrix.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,241, @param column the column to be set
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,242, @param matrix column matrix (must have one column and the same number of rows
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,243, as the instance)
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,244, @throws MatrixIndexException if the specified column index is invalid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,259,* @param column Column to be set.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,260,* @param matrix column matrix (must have one column and the same
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,261,* number of rows as the instance).
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,262,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,263,* if the specified column index is invalid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,251, Returns the entries in row number <code>row</code>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,252, as a vector.  Row indices start at 0.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,270,* Get the entries in row number {@code row}
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,271,* as a vector.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,254, @param row the row to be fetched
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,255, @return row vector
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,256, @throws MatrixIndexException if the specified row index is invalid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,273,* @param row Row to be fetched
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,274,* @return a row vector.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,275,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,276,* if the specified row index is invalid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,261, Sets the entries in row number <code>row</code>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,262, as a vector.  Row indices start at 0.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,281,* Set the entries in row number {@code row}
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,282,* as a vector.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,264, @param row the row to be set
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,284,* @param row Row to be set.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,266, as the instance)
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,267, @throws MatrixIndexException if the specified row index is invalid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,286,* as the instance).
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,287,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,288,* if the specified row index is invalid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,274, Returns the entries in column number <code>column</code>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,275, as a vector.  Column indices start at 0.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,295,* Returns the entries in column number {@code column}
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,296,* as a vector.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,277, @param column the column to be fetched
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,278, @return column vector
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,279, @throws MatrixIndexException if the specified column index is invalid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,298,* @param column Column to be fetched.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,299,* @return a column vector.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,300,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,301,* if the specified column index is invalid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,284, Sets the entries in column number <code>column</code>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,285, as a vector.  Column indices start at 0.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,306,* Set the entries in column number {@code column}
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,307,* as a vector.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,287, @param column the column to be set
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,288, @param vector column vector (must have the same number of rows as the instance)
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,289, @throws MatrixIndexException if the specified column index is invalid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,309,* @param column Column to be set.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,310,* @param vector Column vector (must have the same number of rows
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,311,* as the instance).
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,312,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,313,* if the specified column index is invalid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,296, Returns the entries in row number <code>row</code> as an array.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,297, <p>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,298, Row indices start at 0.  A <code>MatrixIndexException</code> is thrown
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,299, unless {@code 0 <= row < rowDimension}.</p>
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,320,* Get the entries in row number {@code row} as an array.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,301, @param row the row to be fetched
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,302, @return array of entries in the row
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,303, @throws MatrixIndexException if the specified row index is not valid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,322,* @param row Row to be fetched.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,323,* @return array of entries in the row.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,324,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,325,* if the specified row index is not valid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,308, Sets the entries in row number <code>row</code>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,309, as a row matrix.  Row indices start at 0.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,330,* Set the entries in row number {@code row}
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,331,* as a row matrix.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,311, @param row the row to be set
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,312, @param array row matrix (must have the same number of columns as the instance)
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,313, @throws MatrixIndexException if the specified row index is invalid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,333,* @param row Row to be set.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,334,* @param array Row matrix (must have the same number of columns as
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,335,* the instance).
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,336,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,337,* if the specified row index is invalid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,320, Returns the entries in column number <code>col</code> as an array.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,321, <p>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,322, Column indices start at 0.  A <code>MatrixIndexException</code> is thrown
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,323, unless {@code 0 <= column < columnDimension}.</p>
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,344,* Get the entries in column number {@code col} as an array.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,327, @throws MatrixIndexException if the specified column index is not valid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,348,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,349,* if the specified column index is not valid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,332, Sets the entries in column number <code>column</code>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,333, as a column matrix.  Column indices start at 0.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,354,* Set the entries in column number {@code column}
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,355,* as a column matrix.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,337, @throws MatrixIndexException if the specified column index is invalid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,359,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,360,* if the specified column index is invalid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,345, <p>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,346, Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,347, <ul>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,348, <li>{@code 0 <= row < rowDimension}</li>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,349, <li>{@code 0 <= column < columnDimension}</li>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,350, </ul>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,351, otherwise a <code>MatrixIndexException</code> is thrown.</p>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,356, @throws MatrixIndexException if the row or column index is not valid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,372,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,373,* if the row or column index is not valid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,362, <p>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,363, Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,364, <ul>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,365, <li>{@code 0 <= row < rowDimension}</li>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,366, <li>{@code 0 <= column < columnDimension}</li>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,367, </ul>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,368, otherwise a <code>MatrixIndexException</code> is thrown.</p>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,373, @throws MatrixIndexException if the row or column index is not valid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,383,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,384,* if the row or column index is not valid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,380, <p>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,381, Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,382, <ul>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,383, <li>{@code 0 <= row < rowDimension}</li>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,384, <li>{@code 0 <= column < columnDimension}</li>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,385, </ul>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,386, otherwise a <code>MatrixIndexException</code> is thrown.</p>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,388, @param row  row location of entry to be set
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,389, @param column  column location of entry to be set
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,390," @param increment value to add to the current matrix entry in row,column"
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,391, @throws MatrixIndexException if the row or column index is not valid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,392,* @param row Row location of entry to be set.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,393,* @param column Column location of entry to be set.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,394,* @param increment Value to add to the current matrix entry in
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,395,"* {@code (row, column)}."
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,396,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,397,* if the row or column index is not valid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,394,"oid addToEntry(int row, int column, T increment) throws MatrixIndexException;"
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,400,"void addToEntry(int row, int column, T increment);"
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,398, <p>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,399, Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,400, <ul>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,401, <li>{@code 0 <= row < rowDimension}</li>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,402, <li>{@code 0 <= column < columnDimension}</li>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,403, </ul>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,404, otherwise a <code>MatrixIndexException</code> is thrown.</p>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,406, @param row  row location of entry to be set
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,407, @param column  column location of entry to be set
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,408," @param factor multiplication factor for the current matrix entry in row,column"
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,409, @throws MatrixIndexException if the row or column index is not valid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,405,* @param row Row location of entry to be set.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,406,* @param column Column location of entry to be set.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,407,* @param factor Multiplication factor for the current matrix entry
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,408,"* in {@code (row,column)}"
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,409,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,410,* if the row or column index is not valid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,523, @exception MatrixIndexException  if the indices are not valid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,524,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,525,* if the indices are not valid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,552, @exception MatrixIndexException  if the indices are not valid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,554,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,555,* if the indices are not valid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,627, @exception MatrixIndexException  if the indices are not valid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,630,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,631,* if the indices are not valid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,656, @exception MatrixIndexException  if the indices are not valid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,660,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,661,* if the indices are not valid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,728, @exception MatrixIndexException  if the indices are not valid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,733,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,734,* if the indices are not valid.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,756, @exception MatrixIndexException  if the indices are not valid
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,762,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,763,* if the indices are not valid.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,261, <p>
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,262," The index start at 0 and must be lesser than the size,"
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,263, otherwise a {@link MatrixIndexException} is thrown.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,264, </p>
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,265, @param index  index location of entry to be fetched
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,266, @return vector entry at index
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,267, @throws MatrixIndexException if the index is not valid
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,262,* @param index Index location of entry to be fetched.
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,263,* @return the vector entry at {@code index}.
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,264,* @throws org.apache.commons.math.exception.OutOfRangeException if the
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,265,* index is not valid.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,270, getEntry(int index)
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,271,hrows MatrixIndexException;
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,268,T getEntry(int index);
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,277, @exception MatrixIndexException if the index is
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,278, inconsistent with vector size
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,274,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,275,* if the index is inconsistent with vector size.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,281,"oid setEntry(int index, T value)"
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,282,hrows MatrixIndexException;
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,278,"void setEntry(int index, T value);"
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,316, @exception MatrixIndexException if the index is
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,317, inconsistent with vector size
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,312,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,313,* if the index is inconsistent with vector size.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,319,"ieldVector<T> getSubVector(int index, int n)"
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,320,hrows MatrixIndexException;
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,315,"FieldVector<T> getSubVector(int index, int n);"
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,326, @exception MatrixIndexException if the index is
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,327, inconsistent with vector size
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,321,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,322,* if the index is inconsistent with vector size.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,330,"oid setSubVector(int index, FieldVector<T> v)"
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,331,hrows MatrixIndexException;
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,325,"void setSubVector(int index, FieldVector<T> v);"
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,337, @exception MatrixIndexException if the index is
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,338, inconsistent with vector size
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,331,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,332,* if the index is inconsistent with vector size.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,341,"oid setSubVector(int index, T[] v)"
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,342,hrows MatrixIndexException;
True,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,335,"void setSubVector(int index, T[] v);"
True,src/main/java/org/apache/commons/math/linear/MatrixIndexException.java,src/main/java/org/apache/commons/math/linear/MatrixIndexException.java,28,* @deprecated in 2.2 (to be removed in 3.0). Please use the exceptions in package
True,src/main/java/org/apache/commons/math/linear/MatrixIndexException.java,src/main/java/org/apache/commons/math/linear/MatrixIndexException.java,29,* {@link org.apache.commons.math.exception}.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,24,mport java.math.BigDecimal;
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,29,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,30,import org.apache.commons.math.exception.ZeroException;
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,31,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,32,import org.apache.commons.math.exception.NullArgumentException;
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,100, @throws IllegalArgumentException if <code>data</code> is not rectangular
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,101,  (not all rows have the same length) or empty
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,102, @throws NullPointerException if either <code>data</code> or
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,103, <code>data[0]</code> is null
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,103,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,104,* if {@code data} is not rectangular (not all rows have the same length).
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,105,* @throws ZeroException if a row or column is empty.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,106,* @throws NullArgumentException if either {@code data} or {@code data[0]}
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,107,* is {@code null}.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,111,if (data == null ||
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,112,data[0] == null) {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,113,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,121, @return  RealMatrix containing the values of the array
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,122, @throws IllegalArgumentException if <code>data</code> is not rectangular
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,123,  (not all rows have the same length) or empty
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,124, @throws NullPointerException if either <code>data</code> or
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,125, <code>data[0]</code> is null
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,129,* @return a matrix containing the values of the array.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,130,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,131,* if {@code data} is not rectangular (not all rows have the same length).
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,132,* @throws ZeroException if a row or column is empty.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,133,* @throws NullArgumentException if either {@code data} or {@code data[0]}
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,134,* is {@code null}.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,139,if (data == null ||
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,140,data[0] == null) {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,141,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,175, Returns <code>dimension x dimension</code> identity matrix.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,177, @param dimension dimension of identity matrix to generate
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,178, @return identity matrix
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,179, @throws IllegalArgumentException if dimension is not positive
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,180, @since 1.1
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,181," @deprecated since 2.0, replaced by {@link #createFieldIdentityMatrix(Field, int)}"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,183,Deprecated
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,184,ublic static BigMatrix createBigIdentityMatrix(int dimension) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,185,inal BigDecimal[][] d = new BigDecimal[dimension][dimension];
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,186,or (int row = 0; row < dimension; row++) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,187,inal BigDecimal[] dRow = d[row];
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,188,"rrays.fill(dRow, BigMatrixImpl.ZERO);"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,189,Row[row] = BigMatrixImpl.ONE;
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,191,"eturn new BigMatrixImpl(d, false);"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,230, Returns a {@link BigMatrix} whose entries are the the values in the
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,231," the input array.  The input array is copied, not referenced."
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,233, @param data input array
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,234, @return  RealMatrix containing the values of the array
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,235, @throws IllegalArgumentException if <code>data</code> is not rectangular
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,236,  (not all rows have the same length) or empty
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,237, @throws NullPointerException if data is null
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,238, @deprecated since 2.0 replaced by {@link #createFieldMatrix(FieldElement[][])}
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,240,Deprecated
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,241,ublic static BigMatrix createBigMatrix(double[][] data) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,242,eturn new BigMatrixImpl(data);
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,246, Returns a {@link BigMatrix} whose entries are the the values in the
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,247," the input array.  The input array is copied, not referenced."
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,249, @param data input array
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,250, @return  RealMatrix containing the values of the array
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,251, @throws IllegalArgumentException if <code>data</code> is not rectangular
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,252,  (not all rows have the same length) or empty
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,253, @throws NullPointerException if data is null
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,254, @deprecated since 2.0 replaced by {@link #createFieldMatrix(FieldElement[][])}
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,256,Deprecated
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,257,ublic static BigMatrix createBigMatrix(BigDecimal[][] data) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,258,eturn new BigMatrixImpl(data);
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,262, Returns a {@link BigMatrix} whose entries are the the values in the
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,263, the input array.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,264, <p>If an array is built specially in order to be embedded in a
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,265," BigMatrix and not used directly, the <code>copyArray</code> may be"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,266, set to <code>false</code. This will prevent the copying and improve
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,267, performance as no new array will be built and no data will be copied.</p>
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,268, @param data data for new matrix
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,269," @param copyArray if true, the input array will be copied, otherwise"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,270, it will be referenced
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,271, @return  BigMatrix containing the values of the array
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,272, @throws IllegalArgumentException if <code>data</code> is not rectangular
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,273,  (not all rows have the same length) or empty
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,274, @throws NullPointerException if <code>data</code> is null
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,275, @see #createRealMatrix(double[][])
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,276, @deprecated since 2.0 replaced by {@link #createFieldMatrix(FieldElement[][])}
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,278,Deprecated
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,279,"ublic static BigMatrix createBigMatrix(BigDecimal[][] data, boolean copyArray) {"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,280,"eturn new BigMatrixImpl(data, copyArray);"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,284, Returns a {@link BigMatrix} whose entries are the the values in the
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,285," the input array.  The input array is copied, not referenced."
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,287, @param data input array
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,288, @return  RealMatrix containing the values of the array
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,289, @throws IllegalArgumentException if <code>data</code> is not rectangular
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,290,  (not all rows have the same length) or empty
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,291, @throws NullPointerException if data is null
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,292, @deprecated since 2.0 replaced by {@link #createFieldMatrix(FieldElement[][])}
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,294,Deprecated
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,295,ublic static BigMatrix createBigMatrix(String[][] data) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,296,eturn new BigMatrixImpl(data);
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,304, @throws IllegalArgumentException if <code>data</code> is empty
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,305, @throws NullPointerException if <code>data</code>is null
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,227,* @throws ZeroException if {@code data} is empty.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,228,* @throws NullArgumentException if {@code data} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,231,if (data == null) {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,232,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,317, @throws IllegalArgumentException if <code>data</code> is empty
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,318, @throws NullPointerException if <code>data</code>is null
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,243,* @throws ZeroException if {@code data} is empty.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,244,* @throws NullArgumentException if {@code data} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,247,if (data == null) {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,248,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,325, Creates a row {@link RealMatrix} using the data from the input
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,254,* Create a row {@link RealMatrix} using the data from the input
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,330, @throws IllegalArgumentException if <code>rowData</code> is empty
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,331, @throws NullPointerException if <code>rowData</code>is null
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,259,* @throws ZeroException if {@code rowData} is empty.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,260,* @throws NullArgumentException if {@code rowData} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,263,if (rowData == null) {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,264,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,343, Creates a row {@link FieldMatrix} using the data from the input
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,275,* Create a row {@link FieldMatrix} using the data from the input
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,349, @throws IllegalArgumentException if <code>rowData</code> is empty
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,350, @throws NullPointerException if <code>rowData</code>is null
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,281,* @throws ZeroException if {@code rowData} is empty.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,282,* @throws NullArgumentException if {@code rowData} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,286,if (rowData == null) {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,287,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,356,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,291,throw new ZeroException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,366, Creates a row {@link BigMatrix} using the data from the input
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,367, array.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,369, @param rowData the input row data
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,370, @return a 1 x rowData.length BigMatrix
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,371, @throws IllegalArgumentException if <code>rowData</code> is empty
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,372, @throws NullPointerException if <code>rowData</code>is null
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,373, @deprecated since 2.0 replaced by {@link #createRowFieldMatrix(FieldElement[])}
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,375,Deprecated
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,376,ublic static BigMatrix createRowBigMatrix(double[] rowData) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,377,inal int nCols = rowData.length;
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,378,inal BigDecimal[][] data = new BigDecimal[1][nCols];
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,379,or (int i = 0; i < nCols; ++i) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,380,ata[0][i] = new BigDecimal(rowData[i]);
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,382,"eturn new BigMatrixImpl(data, false);"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,386, Creates a row {@link BigMatrix} using the data from the input
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,387, array.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,389, @param rowData the input row data
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,390, @return a 1 x rowData.length BigMatrix
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,391, @throws IllegalArgumentException if <code>rowData</code> is empty
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,392, @throws NullPointerException if <code>rowData</code>is null
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,393, @deprecated since 2.0 replaced by {@link #createRowFieldMatrix(FieldElement[])}
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,395,Deprecated
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,396,ublic static BigMatrix createRowBigMatrix(BigDecimal[] rowData) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,397,inal int nCols = rowData.length;
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,398,inal BigDecimal[][] data = new BigDecimal[1][nCols];
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,399,"ystem.arraycopy(rowData, 0, data[0], 0, nCols);"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,400,"eturn new BigMatrixImpl(data, false);"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,404, Creates a row {@link BigMatrix} using the data from the input
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,405, array.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,407, @param rowData the input row data
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,408, @return a 1 x rowData.length BigMatrix
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,409, @throws IllegalArgumentException if <code>rowData</code> is empty
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,410, @throws NullPointerException if <code>rowData</code>is null
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,411, @deprecated since 2.0 replaced by {@link #createRowFieldMatrix(FieldElement[])}
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,413,Deprecated
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,414,ublic static BigMatrix createRowBigMatrix(String[] rowData) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,415,inal int nCols = rowData.length;
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,416,inal BigDecimal[][] data = new BigDecimal[1][nCols];
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,417,or (int i = 0; i < nCols; ++i) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,418,ata[0][i] = new BigDecimal(rowData[i]);
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,420,"eturn new BigMatrixImpl(data, false);"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,429, @throws IllegalArgumentException if <code>columnData</code> is empty
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,430, @throws NullPointerException if <code>columnData</code>is null
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,306,* @throws ZeroException if {@code columnData} is empty.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,307,* @throws NullArgumentException if {@code columnData} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,310,if (columnData == null) {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,311,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,448, @throws IllegalArgumentException if <code>columnData</code> is empty
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,449, @throws NullPointerException if <code>columnData</code>is null
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,328,* @throws ZeroException if {@code data} is empty.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,329,* @throws NullArgumentException if {@code columnData} is {@code null}.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,333,if (columnData == null) {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,334,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,465, Creates a column {@link BigMatrix} using the data from the input
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,466, array.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,348,* Check if matrix indices are valid.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,468, @param columnData  the input column data
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,469, @return a columnData x 1 BigMatrix
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,470, @throws IllegalArgumentException if <code>columnData</code> is empty
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,471, @throws NullPointerException if <code>columnData</code>is null
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,472, @deprecated since 2.0 replaced by {@link #createColumnFieldMatrix(FieldElement[])}
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,350,* @param m Matrix.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,351,* @param row Row index to check.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,352,* @param column Column index to check.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,353,* @throws OutOfRangeException if {@code row} or {@code column} is not
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,354,* a valid index.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,474,Deprecated
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,475,ublic static BigMatrix createColumnBigMatrix(double[] columnData) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,476,inal int nRows = columnData.length;
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,477,inal BigDecimal[][] data = new BigDecimal[nRows][1];
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,478,or (int row = 0; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,479,ata[row][0] = new BigDecimal(columnData[row]);
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,481,"eturn new BigMatrixImpl(data, false);"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,485, Creates a column {@link BigMatrix} using the data from the input
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,486, array.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,488, @param columnData  the input column data
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,489, @return a columnData x 1 BigMatrix
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,490, @throws IllegalArgumentException if <code>columnData</code> is empty
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,491, @throws NullPointerException if <code>columnData</code>is null
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,492, @deprecated since 2.0 replaced by {@link #createColumnFieldMatrix(FieldElement[])}
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,494,Deprecated
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,495,ublic static BigMatrix createColumnBigMatrix(BigDecimal[] columnData) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,496,inal int nRows = columnData.length;
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,497,inal BigDecimal[][] data = new BigDecimal[nRows][1];
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,498,or (int row = 0; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,499,ata[row][0] = columnData[row];
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,501,"eturn new BigMatrixImpl(data, false);"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,505, Creates a column {@link BigMatrix} using the data from the input
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,506, array.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,508, @param columnData  the input column data
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,509, @return a columnData x 1 BigMatrix
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,510, @throws IllegalArgumentException if <code>columnData</code> is empty
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,511, @throws NullPointerException if <code>columnData</code>is null
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,512, @deprecated since 2.0 replaced by {@link #createColumnFieldMatrix(FieldElement[])}
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,514,Deprecated
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,515,ublic static BigMatrix createColumnBigMatrix(String[] columnData) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,516,nt nRows = columnData.length;
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,517,inal BigDecimal[][] data = new BigDecimal[nRows][1];
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,518,or (int row = 0; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,519,ata[row][0] = new BigDecimal(columnData[row]);
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,521,"eturn new BigMatrixImpl(data, false);"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,356,"public static void checkMatrixIndex(final AnyMatrix m,"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,357,"final int row, final int column) {"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,358,"checkRowIndex(m, row);"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,359,"checkColumnIndex(m, column);"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,526, @param m matrix containing the submatrix
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,527, @param row row index to check
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,528, @exception MatrixIndexException if index is not valid
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,365,* @param m Matrix.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,366,* @param row Row index to check.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,367,* @throws OutOfRangeException if {@code row} is not a valid index.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,531,f (row < 0 || row >= m.getRowDimension()) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,532,"hrow new MatrixIndexException(LocalizedFormats.ROW_INDEX_OUT_OF_RANGE,"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,533,"ow, 0, m.getRowDimension() - 1);"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,370,if (row < 0 ||
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,371,row >= m.getRowDimension()) {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,372,"throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,373,"row, 0, m.getRowDimension() - 1);"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,539, @param m matrix containing the submatrix
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,540, @param column column index to check
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,541, @exception MatrixIndexException if index is not valid
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,380,* @param m Matrix.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,381,* @param column Column index to check.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,382,* @throws OutOfRangeException if {@code column} is not a valid index.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,543,"ublic static void checkColumnIndex(final AnyMatrix m, final int column)"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,544,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,384,"public static void checkColumnIndex(final AnyMatrix m, final int column) {"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,546,"hrow new MatrixIndexException(LocalizedFormats.COLUMN_INDEX_OUT_OF_RANGE,"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,386,"throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,553, Rows and columns are indicated counting from 0 to n-1.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,393,* Rows and columns are indicated counting from 0 to {@code n - 1}.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,555, @param m matrix containing the submatrix
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,556, @param startRow Initial row index
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,557, @param endRow Final row index
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,558, @param startColumn Initial column index
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,559, @param endColumn Final column index
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,560, @exception MatrixIndexException  if the indices are not valid
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,395,* @param m Matrix.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,396,* @param startRow Initial row index.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,397,* @param endRow Final row index.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,398,* @param startColumn Initial column index.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,399,* @param endColumn Final column index.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,400,* @throws OutOfRangeException if the indices are invalid.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,401,* @throws NumberIsTooSmallException if {@code endRow < startRow} or
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,402,* {@code endColumn < startColumn}.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,567,f (startRow > endRow) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,568,"hrow new MatrixIndexException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,569,"tartRow, endRow);"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,409,if (endRow < startRow) {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,410,"throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,411,"endRow, startRow, false);"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,574,f (startColumn > endColumn) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,575,"hrow new MatrixIndexException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,576,"tartColumn, endColumn);"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,416,if (endColumn < startColumn) {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,417,"throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,418,"endColumn, startColumn, false);"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,586, @param m matrix containing the submatrix
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,428,* @param m Matrix.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,589, @exception MatrixIndexException if row or column selections are not valid
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,431,* @throws NullArgumentException if {@code selectedRows} or
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,432,* {@code selectedColumns} are {@code null}.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,433,* @throws ZeroException if the row or column selections are empty (zero
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,434,* length).
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,435,* @throws OutOfRangeException if row or column selections are not valid.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,592,"inal int[] selectedRows, final int[] selectedColumns)"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,593,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,594,f (selectedRows.length * selectedColumns.length == 0) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,595,f (selectedRows.length == 0) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,596,hrow new MatrixIndexException(LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY);
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,598,hrow new MatrixIndexException(LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY);
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,438,"final int[] selectedRows,"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,439,final int[] selectedColumns) {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,440,if (selectedRows == null) {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,441,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,443,if (selectedColumns == null) {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,444,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,446,if (selectedRows.length == 0) {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,447,throw new ZeroException(LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY);
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,449,if (selectedColumns.length == 0) {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,450,throw new ZeroException(LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY);
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,30,"ublic class OpenMapRealMatrix extends AbstractRealMatrix implements SparseRealMatrix, Serializable {"
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,30,public class OpenMapRealMatrix extends AbstractRealMatrix
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,31,"implements SparseRealMatrix, Serializable {"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,46, @param rowDimension number of rows of the matrix
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,47, @param columnDimension number of columns of the matrix
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,44,* @param rowDimension Number of rows of the matrix.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,45,* @param columnDimension Number of columns of the matrix.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,51,his.rows    = rowDimension;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,49,this.rows = rowDimension;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,58, @param matrix matrix to copy
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,57,* @param matrix matrix to copy.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,61,his.rows    = matrix.rows;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,60,this.rows = matrix.rows;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,74,"ublic OpenMapRealMatrix createMatrix(int rowDimension, int columnDimension)"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,75,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,73,"public OpenMapRealMatrix createMatrix(int rowDimension, int columnDimension) {"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,85,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,86,Override
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,87,ublic OpenMapRealMatrix add(final RealMatrix m)
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,88,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,89,ry {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,90,eturn add((OpenMapRealMatrix) m);
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,91, catch (ClassCastException cce) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,92,eturn (OpenMapRealMatrix) super.add(m);
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,97, Compute the sum of this and <code>m</code>.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,84,* Compute the sum of this matrix and {@code m}.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,99, @param m    matrix to be added
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,100, @return     this + m
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,101, @throws  IllegalArgumentException if m is not the same size as this
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,86,* @param m Matrix to be added.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,87,* @return {@code this} + {@code m}.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,88,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,89,* if {@code m} is not the same size as this matrix.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,103,ublic OpenMapRealMatrix add(OpenMapRealMatrix m) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,91,public OpenMapRealMatrix add(OpenMapRealMatrix m) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,132, Compute this minus <code>m</code>.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,120,* Subtract {@code m} from this matrix.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,134, @param m    matrix to be subtracted
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,135, @return     this - m
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,136, @throws  IllegalArgumentException if m is not the same size as this
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,122,* @param m Matrix to be subtracted.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,123,* @return {@code this} - {@code m}.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,124,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,125,* if {@code m} is not the same size as this matrix.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,138,ublic OpenMapRealMatrix subtract(OpenMapRealMatrix m) throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,140,/ safety check
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,127,public OpenMapRealMatrix subtract(OpenMapRealMatrix m) {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,128,// Safety check.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,185, Returns the result of postmultiplying this by m.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,171,* Postmultiply this matrix by {@code m}.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,187, @param m    matrix to postmultiply by
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,188, @return     this * m
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,189, @throws     IllegalArgumentException
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,190,             if columnDimension(this) != rowDimension(m)
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,173,* @param m Matrix to postmultiply by.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,174,* @return {@code this} * {@code m}.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,175,* @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,176,* if the number of rows of {@code m} differ from the number of columns
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,177,* of this matrix.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,192,ublic OpenMapRealMatrix multiply(OpenMapRealMatrix m) throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,194,/ safety check
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,179,public OpenMapRealMatrix multiply(OpenMapRealMatrix m) {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,180,// Safety check.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,226,"ublic double getEntry(int row, int column) throws MatrixIndexException {"
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,211,"public double getEntry(int row, int column) {"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,240,"ublic void setEntry(int row, int column, double value)"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,241,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,225,"public void setEntry(int row, int column, double value) {"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,253,"ublic void addToEntry(int row, int column, double increment)"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,254,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,237,"public void addToEntry(int row, int column, double increment) {"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,268,"ublic void multiplyEntry(int row, int column, double factor)"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,269,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,251,"public void multiplyEntry(int row, int column, double factor) {"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,21,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,21,import org.apache.commons.math.exception.MathArithmeticException;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,28, This class implements the {@link RealVector} interface with a {@link OpenIntToDoubleHashMap} backing store.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,28,* This class implements the {@link RealVector} interface with a
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,29,* {@link OpenIntToDoubleHashMap} backing store.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,32,"ublic class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable {"
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,33,public class OpenMapRealVector extends AbstractRealVector
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,34,"implements SparseRealVector, Serializable {"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,51, <p>Zero-length vectors may be used to initialized construction of vectors
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,48,* Zero-length vectors may be used to initialized construction of vectors
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,54," or one of the <code>append</code> method ({@link #append(double)}, {@link"
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,51,"* or one of the {@code append} method ({@link #append(double)}, {@link"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,56, into this vector.</p>
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,53,* into this vector.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,63, Construct a (dimension)-length vector of zeros.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,64, @param dimension size of the vector
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,60,* Construct a vector of zeroes.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,62,* @param dimension Size of the vector.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,71," Construct a (dimension)-length vector of zeros, specifying zero tolerance."
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,72, @param dimension Size of the vector
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,73, @param epsilon The tolerance for having a value considered zero
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,69,"* Construct a vector of zeroes, specifying zero tolerance."
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,71,* @param dimension Size of the vector.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,72,* @param epsilon Tolerance below which a value considered zero.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,83, @param v The original vector
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,84, @param resize The amount to resize it
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,83,* @param v Original vector.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,84,* @param resize Amount to add.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,94, @param dimension The size of the vector
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,95, @param expectedSize The expected number of non-zero entries
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,95,* @param dimension Size of the vector.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,96,* @param expectedSize The expected number of non-zero entries.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,102, Build a vector with known the sparseness and zero tolerance setting (for advanced use only).
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,103, @param dimension The size of the vector
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,104, @param expectedSize The expected number of non-zero entries
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,105, @param epsilon The tolerance for having a value considered zero
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,103,* Build a vector with known the sparseness and zero tolerance
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,104,* setting (for advanced use only).
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,106,* @param dimension Size of the vector.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,107,* @param expectedSize Expected number of non-zero entries.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,108,* @param epsilon Tolerance below which a value is considered zero.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,114, Create from a double array.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,115, Only non-zero entries will be stored
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,116, @param values The set of values to create from
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,117,* Create from an array.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,118,* Only non-zero entries will be stored.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,120,* @param values Set of values to create from.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,123," Create from a double array, specifying zero tolerance."
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,124, Only non-zero entries will be stored
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,125, @param values The set of values to create from
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,126, @param epsilon The tolerance for having a value considered zero
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,127,"* Create from an array, specifying zero tolerance."
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,128,* Only non-zero entries will be stored.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,130,* @param values Set of values to create from.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,131,* @param epsilon Tolerance below which a value is considered zero.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,141, Create from a Double array.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,142, Only non-zero entries will be stored
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,146,* Create from an array.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,147,* Only non-zero entries will be stored.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,150, Create from a Double array.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,151, Only non-zero entries will be stored
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,152, @param values The set of values to create from
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,153, @param epsilon The tolerance for having a value considered zero
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,156,* Create from an array.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,157,* Only non-zero entries will be stored.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,159,* @param values Set of values to create from.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,160,* @param epsilon Tolerance below which a value is considered zero.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,169, @param v The instance to copy from
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,177,* @param v Instance to copy from.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,179, @param v The instance to copy from
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,188,* @param v Instance to copy from.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,195, @return entries of this instance
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,205,* @return the entries of this instance.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,203, @param value The value to test
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,204," @return <code>true</code> if this value is within epsilon to zero, <code>false</code> otherwise"
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,214,* @param value Value to test
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,215,"* @return {@code true} if this value is within epsilon to zero,"
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,216,* {@code false} otherwise.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,213,ublic RealVector add(RealVector v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,225,public RealVector add(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,223," Optimized method to add two OpenMapRealVectors.  Copies the larger vector, iterates over the smaller."
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,224, @param v Vector to add with
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,225, @return The sum of <code>this</code> with <code>v</code>
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,226, @throws IllegalArgumentException If the dimensions don't match
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,235,* Optimized method to add two OpenMapRealVectors.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,236,"* It copies the larger vector, then iterates over the smaller."
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,238,* @param v Vector to add.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,239,* @return the sum of {@code this} and {@code v}.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,240,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,241,* if the dimensions do not match.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,228,ublic OpenMapRealVector add(OpenMapRealVector v) throws IllegalArgumentException{
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,243,public OpenMapRealVector add(OpenMapRealVector v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,249, @return The result of appending <code>v</code> to self
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,264,* @return The result of appending {@code v} to self
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,296, Iterates over the smaller of the two.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,297, @param v The vector to compute the dot product with
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,298, @return The dot product of <code>this</code> and <code>v</code>
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,299, @throws IllegalArgumentException If the dimensions don't match
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,311,* It iterates over the smallest of the two.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,313,* @param v Cector to compute the dot product with.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,314,* @return the dot product of {@code this} and {@code v}.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,315,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,316,* if the dimensions do not match.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,301,ublic double dotProduct(OpenMapRealVector v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,318,public double dotProduct(OpenMapRealVector v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,316,ublic double dotProduct(RealVector v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,333,public double dotProduct(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,325,ublic OpenMapRealVector ebeDivide(RealVector v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,342,public OpenMapRealVector ebeDivide(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,338,ublic OpenMapRealVector ebeDivide(double[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,355,public OpenMapRealVector ebeDivide(double[] v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,350,ublic OpenMapRealVector ebeMultiply(RealVector v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,367,public OpenMapRealVector ebeMultiply(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,363,ublic OpenMapRealVector ebeMultiply(double[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,380,public OpenMapRealVector ebeMultiply(double[] v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,375,"ublic OpenMapRealVector getSubVector(int index, int n) throws MatrixIndexException {"
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,392,"public OpenMapRealVector getSubVector(int index, int n) {"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,410, @param v The vector to compute distance to
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,411, @return The distance from <code>this</code> and <code>v</code>
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,412, @throws IllegalArgumentException If the dimensions don't match
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,428,* @param v Vector to compute distance to.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,429,* @return the distance from {@code this} and {@code v}.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,430,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,431,* if the dimensions do not match.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,414,ublic double getDistance(OpenMapRealVector v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,433,public double getDistance(OpenMapRealVector v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,438,ublic double getDistance(RealVector v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,457,public double getDistance(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,448,ublic double getDistance(double[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,467,public double getDistance(double[] v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,459,ublic double getEntry(int index) throws MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,478,public double getEntry(int index) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,466, <p>This method computes the distance consistent with
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,485,* This method computes the distance consistent with
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,468, elements differences.</p>
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,469, @param v vector to which distance is requested
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,470, @return distance between two vectors.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,487,* elements differences.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,489,* @param v Vector to which distance is requested.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,490,* @return distance between this vector and {@code v}.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,494,ublic double getL1Distance(RealVector v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,514,public double getL1Distance(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,504,ublic double getL1Distance(double[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,524,public double getL1Distance(double[] v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,516, @param v The vector to compute from
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,517, @return the LInfDistance
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,537,* @param v Vector to compute distance from.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,538,* @return the LInfDistance.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,544,ublic double getLInfDistance(RealVector v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,565,public double getLInfDistance(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,554,ublic double getLInfDistance(double[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,575,public double getLInfDistance(double[] v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,612,ublic RealMatrix outerProduct(double[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,633,public RealMatrix outerProduct(double[] v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,628,ublic RealVector projection(RealVector v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,649,public RealVector projection(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,635,ublic OpenMapRealVector projection(double[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,656,public OpenMapRealVector projection(double[] v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,641,"ublic void setEntry(int index, double value) throws MatrixIndexException {"
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,662,"public void setEntry(int index, double value) {"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,652,"ublic void setSubVector(int index, RealVector v) throws MatrixIndexException {"
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,673,"public void setSubVector(int index, RealVector v) {"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,660,"ublic void setSubVector(int index, double[] v) throws MatrixIndexException {"
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,681,"public void setSubVector(int index, double[] v) {"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,678, @param v The vector to subtract from <code>this</code>
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,679, @return The difference of <code>this</code> and <code>v</code>
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,680, @throws IllegalArgumentException If the dimensions don't match
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,700,* @param v Vector to subtract from {@code this}.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,701,* @return the difference of {@code this} and {@code v}.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,702,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,703,* if the dimensions do not match.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,682,ublic OpenMapRealVector subtract(OpenMapRealVector v) throws IllegalArgumentException{
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,705,public OpenMapRealVector subtract(OpenMapRealVector v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,700,ublic OpenMapRealVector subtract(RealVector v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,723,public OpenMapRealVector subtract(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,710,ublic OpenMapRealVector subtract(double[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,733,public OpenMapRealVector subtract(double[] v) {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,737,hrow  MathRuntimeException.createArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,760,throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,754,** {@inheritDoc}
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,755," <p> Implementation Note: This works on exact values, and as a result"
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,776,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,777,"* Implementation Note: This works on exact values, and as a result"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,757, {@code a.hashCode() != b.hashCode()}.</p>
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,779,* {@code a.hashCode() != b.hashCode()}.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,777," <p> Implementation Note: This performs an exact comparison, and as a result"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,778," it is possible for {@code a.subtract(b}} to be the zero vector, while"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,779, {@code  a.equals(b) == false}.</p>
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,800,"* Implementation Note: This performs an exact comparison, and as a result"
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,801,"* it is possible for {@code a.subtract(b}} to be the zero vector, while"
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,802,* {@code  a.equals(b) == false}.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,820, @deprecated Use the correctly spelled {@link #getSparsity()}
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,822,Deprecated
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,823,ublic double getSparcity() {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,824,eturn getSparsity();
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,829, @return the percentage of none zero elements as a decimal percent.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,831,ublic double getSparsity() {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,843,public double getSparsity() {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,842,  Implementation of <code>Entry</code> optimized for OpenMap.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,843, <p>This implementation does not allow arbitrary calls to <code>setIndex</code>
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,844, since the order that entries are returned is undefined.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,854,* Implementation of {@code Entry} optimized for OpenMap.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,855,* This implementation does not allow arbitrary calls to {@code setIndex}
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,856,* since the order in which entries are returned is undefined.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,851,** Build an entry from an iterator point to an element.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,852, @param iter iterator pointing to the entry
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,863,* Build an entry from an iterator point to an element.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,865,* @param iter Iterator pointing to the entry.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,879,  Iterator class to do iteration over just the non-zero elements.
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,880,"  <p>This implementation is fail-fast, so cannot be used to modify any zero element."
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,892,* Iterator class to do iteration over just the non-zero elements.
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,893,"* This implementation is fail-fast, so cannot be used to modify"
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,894,* any zero element.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,137, @exception MatrixIndexException  if the indices are not valid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,137,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,138,* the indices are not valid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,149, @exception MatrixIndexException if row or column selections are not valid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,150,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,151,* the indices are not valid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,163, @exception MatrixIndexException if the indices are not valid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,165,* @throws org.apache.commons.math.exception.OutOfRangeException if the
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,166,* indices are not valid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,166,"oid copySubMatrix(int startRow, int endRow, int startColumn, int endColumn,"
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,167,ouble[][] destination);
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,169, Copy a submatrix. Rows and columns are indicated
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,170, counting from 0 to n-1.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,172, @param selectedRows Array of row indices.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,173, @param selectedColumns Array of column indices.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,174, @param destination The arrays where the submatrix data should be copied
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,175," (if larger than rows/columns counts, only the upper-left part will be used)"
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,176, @exception MatrixIndexException if the indices are not valid
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,177, @exception IllegalArgumentException if the destination array is too small
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,169,"void copySubMatrix(int startRow, int endRow, int startColumn, int endColumn,"
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,170,double[][] destination);
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,172,* Copy a submatrix. Rows and columns are indicated
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,173,* counting from 0 to n-1.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,175,* @param selectedRows Array of row indices.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,176,* @param selectedColumns Array of column indices.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,177,* @param destination The arrays where the submatrix data should be copied
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,178,"* (if larger than rows/columns counts, only the upper-left part will be used)"
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,179,* @throws org.apache.commons.math.exception.OutOfRangeException if the
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,180,* indices are not valid.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,181,* @exception IllegalArgumentException if the destination array is too small
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,201, @throws MatrixIndexException  if subMatrix does not fit into this
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,202,"    matrix from element in (row, column)"
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,203, @throws IllegalArgumentException if <code>subMatrix</code> is not rectangular
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,204,  (not all rows have the same length) or empty
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,205, @throws NullPointerException if <code>subMatrix</code> is null
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,205,* @throws org.apache.commons.math.exception.ZeroException if
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,206,* {@code subMatrix} does not contain at least one column.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,207,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,208,* {@code subMatrix} does not fit into this matrix from element in
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,209,"* {@code (row, column)}."
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,210,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,211,* if {@code subMatrix} is not rectangular.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,212,* (not all rows have the same length) or empty.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,213,* @throws org.apache.commons.math.exception.NullArgumentException if
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,214,* {@code subMatrix} is {@code null}.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,211, Returns the entries in row number <code>row</code>
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,220,* Geet the entries at the given row index
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,214, @param row the row to be fetched
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,215, @return row matrix
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,216, @throws MatrixIndexException if the specified row index is invalid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,223,* @param row Row to be fetched.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,224,* @return row Matrix.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,225,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,226,* the specified row index is invalid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,221, Sets the entries in row number <code>row</code>
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,231,* Set the entries at the given row index
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,224, @param row the row to be set
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,225, @param matrix row matrix (must have one row and the same number of columns
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,226, as the instance)
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,227, @throws MatrixIndexException if the specified row index is invalid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,234,* @param row Row to be set.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,235,* @param matrix Row matrix (must have one row and the same number of
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,236,* columns as the instance).
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,237,* @throws org.apache.commons.math.exception.OutOfRangeException if the
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,238,* specified row index is invalid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,234, Returns the entries in column number <code>column</code>
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,245,* Get the entries at the given column index
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,237, @param column the column to be fetched
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,238, @return column matrix
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,239, @throws MatrixIndexException if the specified column index is invalid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,248,* @param column Column to be fetched.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,249,* @return column Matrix.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,250,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,251,* the specified column index is invalid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,244, Sets the entries in column number <code>column</code>
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,256,* Set the entries at the given column index
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,247, @param column the column to be set
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,248, @param matrix column matrix (must have one column and the same number of rows
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,249, as the instance)
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,250, @throws MatrixIndexException if the specified column index is invalid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,259,* @param column Column to be set.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,260,* @param matrix Column matrix (must have one column and the same number
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,261,* of rows as the instance).
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,262,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,263,* the specified column index is invalid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,252, if the matrix dimensions do not match one instance column.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,265,* if the {@code matrix} dimensions do not match one instance column.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,260, @param row the row to be fetched
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,261, @return row vector
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,262, @throws MatrixIndexException if the specified row index is invalid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,273,* @param row Row to be fetched.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,274,* @return a row vector.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,275,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,276,* the specified row index is invalid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,267, Sets the entries in row number <code>row</code>
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,281,* Set the entries at the given row index.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,270, @param row the row to be set
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,284,* @param row Row to be set.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,272, as the instance)
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,273, @throws MatrixIndexException if the specified row index is invalid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,286,* as the instance).
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,287,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,288,* the specified row index is invalid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,280, Returns the entries in column number <code>column</code>
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,295,* Get the entries at the given column index
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,283, @param column the column to be fetched
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,284, @return column vector
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,285, @throws MatrixIndexException if the specified column index is invalid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,298,* @param column Column to be fetched.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,299,* @return a column vector.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,300,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,301,* the specified column index is invalid
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,290, Sets the entries in column number <code>column</code>
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,306,* Set the entries at the given column index
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,293, @param column the column to be set
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,294, @param vector column vector (must have the same number of rows as the instance)
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,295, @throws MatrixIndexException if the specified column index is invalid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,309,* @param column Column to be set.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,310,* @param vector column vector (must have the same number of rows as
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,311,* the instance).
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,312,* @throws org.apache.commons.math.exception.OutOfRangeException if the
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,313,* specified column index is invalid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,302, Returns the entries in row number <code>row</code> as an array.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,303, <p>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,304, Row indices start at 0.  A <code>MatrixIndexException</code> is thrown
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,305, unless {@code 0 <= row < rowDimension}.</p>
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,320,* Get the entries at the given row index.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,321,* Row indices start at 0.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,307, @param row the row to be fetched
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,308, @return array of entries in the row
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,309, @throws MatrixIndexException if the specified row index is not valid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,323,* @param row Row to be fetched.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,324,* @return the array of entries in the row.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,325,* @throws org.apache.commons.math.exception.OutOfRangeException if the
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,326,* specified row index is not valid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,314, Sets the entries in row number <code>row</code>
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,331,* Set the entries at the given row index
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,317, @param row the row to be set
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,318, @param array row matrix (must have the same number of columns as the instance)
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,319, @throws MatrixIndexException if the specified row index is invalid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,334,* @param row Row to be set.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,335,* @param array Row matrix (must have the same number of columns as
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,336,* the instance)
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,337,* @throws org.apache.commons.math.exception.OutOfRangeException if the
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,338,* specified row index is invalid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,326, Returns the entries in column number <code>col</code> as an array.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,327, <p>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,328, Column indices start at 0.  A <code>MatrixIndexException</code> is thrown
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,329, unless {@code 0 <= column < columnDimension}.</p>
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,345,* Get the entries at the given column index as an array.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,346,* Column indices start at 0.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,331, @param column the column to be fetched
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,332, @return array of entries in the column
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,333, @throws MatrixIndexException if the specified column index is not valid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,348,* @param column Column to be fetched.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,349,* @return the array of entries in the column.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,350,* @throws org.apache.commons.math.exception.OutOfRangeException if the
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,351,* specified column index is not valid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,338, Sets the entries in column number <code>column</code>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,339, as a column matrix.  Column indices start at 0.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,356,* Set the entries at the given column index
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,357,* as a column matrix array.  Column indices start at 0.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,341, @param column the column to be set
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,342, @param array column array (must have the same number of rows as the instance)
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,343, @throws MatrixIndexException if the specified column index is invalid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,359,* @param column Column to be set.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,360,* @param array Column array (must have the same number of rows as
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,361,* the instance).
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,362,* @throws org.apache.commons.math.exception.OutOfRangeException if the
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,363,* specified column index is invalid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,350, Returns the entry in the specified row and column.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,351, <p>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,352, Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,353, <ul>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,354, <li>{@code 0 <= row < rowDimension}</li>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,355, <li>{@code 0 <= column < columnDimension}</li>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,356, </ul>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,357, otherwise a <code>MatrixIndexException</code> is thrown.</p>
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,370,* Get the entry in the specified row and column.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,371,* Row and column indices start at 0.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,359, @param row  row location of entry to be fetched
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,360, @param column  column location of entry to be fetched
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,361," @return matrix entry in row,column"
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,362, @throws MatrixIndexException if the row or column index is not valid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,373,* @param row Row location of entry to be fetched.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,374,* @param column Column location of entry to be fetched.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,375,"* @return the matrix entry at {@code (row, column)}."
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,376,* @throws org.apache.commons.math.exception.OutOfRangeException if the
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,377,* row or column index is not valid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,368, <p>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,369, Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,370, <ul>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,371, <li>{@code 0 <= row < rowDimension}</li>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,372, <li>{@code 0 <= column < columnDimension}</li>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,373, </ul>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,374, otherwise a <code>MatrixIndexException</code> is thrown.</p>
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,383,* Row and column indices start at 0.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,376, @param row  row location of entry to be set
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,377, @param column  column location of entry to be set
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,378," @param value matrix entry to be set in row,column"
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,379, @throws MatrixIndexException if the row or column index is not valid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,385,* @param row Row location of entry to be set.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,386,* @param column Column location of entry to be set.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,387,* @param value matrix entry to be set.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,388,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,389,* the row or column index is not valid
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,386, <p>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,387, Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,388, <ul>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,389, <li>{@code 0 <= row < rowDimension}</li>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,390, <li>{@code 0 <= column < columnDimension}</li>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,391, </ul>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,392, otherwise a <code>MatrixIndexException</code> is thrown.</p>
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,396,* Row and column indices start at 0.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,394, @param row  row location of entry to be set
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,395, @param column  column location of entry to be set
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,396," @param increment value to add to the current matrix entry in row,column"
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,397, @throws MatrixIndexException if the row or column index is not valid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,398,* @param row Row location of entry to be set.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,399,* @param column Column location of entry to be set.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,400,* @param increment value to add to the matrix entry.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,401,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,402,* the row or column index is not valid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,404, <p>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,405, Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,406, <ul>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,407, <li>{@code 0 <= row < rowDimension}</li>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,408, <li>{@code 0 <= column < columnDimension}</li>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,409, </ul>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,410, otherwise a <code>MatrixIndexException</code> is thrown.</p>
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,409,* Row and column indices start at 0.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,412, @param row  row location of entry to be set
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,413, @param column  column location of entry to be set
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,414," @param factor multiplication factor for the current matrix entry in row,column"
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,415, @throws MatrixIndexException if the row or column index is not valid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,411,* @param row Row location of entry to be set.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,412,* @param column Column location of entry to be set.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,413,* @param factor Multiplication factor for the matrix entry.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,414,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,415,* the row or column index is not valid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,516, @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,516,* @throws MatrixVisitorException if the visitor cannot process an entry
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,539, @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,539,* @throws MatrixVisitorException if the visitor cannot process an entry
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,566, @exception  MatrixVisitorException if the visitor cannot process an entry
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,567, @exception MatrixIndexException  if the indices are not valid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,566,* @throws MatrixVisitorException if the visitor cannot process an entry
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,567,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,568,* the indices are not valid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,595, @exception  MatrixVisitorException if the visitor cannot process an entry
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,596, @exception MatrixIndexException  if the indices are not valid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,596,* @throws MatrixVisitorException if the visitor cannot process an entry
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,597,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,598,* the indices are not valid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,620, @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,622,* @throws MatrixVisitorException if the visitor cannot process an entry
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,643, @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,645,* @throws MatrixVisitorException if the visitor cannot process an entry
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,670, @exception  MatrixVisitorException if the visitor cannot process an entry
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,671, @exception MatrixIndexException  if the indices are not valid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,672,* @throws MatrixVisitorException if the visitor cannot process an entry
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,673,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,674,* the indices are not valid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,699, @exception  MatrixVisitorException if the visitor cannot process an entry
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,700, @exception MatrixIndexException  if the indices are not valid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,702,* @throws MatrixVisitorException if the visitor cannot process an entry
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,703,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,704,* the indices are not valid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,723, @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,727,* @throws MatrixVisitorException if the visitor cannot process an entry
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,745, @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,749,* @throws MatrixVisitorException if the visitor cannot process an entry
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,771, @exception  MatrixVisitorException if the visitor cannot process an entry
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,772, @exception MatrixIndexException  if the indices are not valid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,775,* @throws MatrixVisitorException if the visitor cannot process an entry
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,776,* @throws org.apache.commons.math.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,777,* the indices are not valid.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,799, @exception  MatrixVisitorException if the visitor cannot process an entry
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,800, @exception MatrixIndexException  if the indices are not valid
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,804,* @throws MatrixVisitorException if the visitor cannot process an entry
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,805,* @throws org.apache.commons.math.exception.OutOfRangeException if the
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,806,* indices are not valid.
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,18,ackage org.apache.commons.math.linear;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,20,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,22,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,23,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,26, Implementation of RealMatrix using a double[][] array to store entries and
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,27," <a href=""http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf"">"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,28, LU decomposition</a> to support linear system
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,29, solution and inverse.
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,30, <p>
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,31," The LU decomposition is performed as needed, to support the following operations: <ul>"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,32, <li>solve</li>
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,33, <li>isSingular</li>
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,34, <li>getDeterminant</li>
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,35, <li>inverse</li> </ul></p>
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,36, <p>
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,37, <strong>Usage notes</strong>:<br>
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,38, <ul><li>
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,39, The LU decomposition is cached and reused on subsequent calls.
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,40, If data are modified via references to the underlying array obtained using
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,41," <code>getDataRef()</code>, then the stored LU decomposition will not be"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,42," discarded.  In this case, you need to explicitly invoke"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,43, <code>LUDecompose()</code> to recompute the decomposition
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,44, before using any of the methods above.</li>
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,45, <li>
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,46," As specified in the {@link RealMatrix} interface, matrix element indexing"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,47," is 0-based -- e.g., <code>getEntry(0, 0)</code>"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,48," returns the element in the first row, first column of the matrix.</li></ul>"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,49, </p>
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,51, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,52, @deprecated as of 2.0 replaced by {@link Array2DRowRealMatrix}
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,54,Deprecated
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,55,ublic class RealMatrixImpl extends AbstractRealMatrix implements Serializable {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,57,** Serializable version identifier */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,58,rivate static final long serialVersionUID = -1067294169172445528L;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,60,** Entries of the matrix */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,61,rotected double data[][];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,64, Creates a matrix with no data
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,66,ublic RealMatrixImpl() {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,70, Create a new RealMatrix with the supplied row and column dimensions.
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,72, @param rowDimension  the number of rows in the new matrix
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,73, @param columnDimension  the number of columns in the new matrix
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,74, @throws IllegalArgumentException if row or column dimension is not
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,75,  positive
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,77,"ublic RealMatrixImpl(final int rowDimension, final int columnDimension)"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,78,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,79,"uper(rowDimension, columnDimension);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,80,ata = new double[rowDimension][columnDimension];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,84, Create a new RealMatrix using the input array as the underlying
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,85, data array.
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,86," <p>The input array is copied, not referenced. This constructor has"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,87," the same effect as calling {@link #RealMatrixImpl(double[][], boolean)}"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,88, with the second argument set to <code>true</code>.</p>
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,90, @param d data for new matrix
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,91, @throws IllegalArgumentException if <code>d</code> is not rectangular
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,92,  (not all rows have the same length) or empty
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,93, @throws NullPointerException if <code>d</code> is null
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,94," @see #RealMatrixImpl(double[][], boolean)"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,96,ublic RealMatrixImpl(final double[][] d)
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,97,"hrows IllegalArgumentException, NullPointerException {"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,98,opyIn(d);
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,102, Create a new RealMatrix using the input array as the underlying
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,103, data array.
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,104, <p>If an array is built specially in order to be embedded in a
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,105," RealMatrix and not used directly, the <code>copyArray</code> may be"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,106, set to <code>false</code. This will prevent the copying and improve
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,107, performance as no new array will be built and no data will be copied.</p>
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,108, @param d data for new matrix
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,109," @param copyArray if true, the input array will be copied, otherwise"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,110, it will be referenced
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,111, @throws IllegalArgumentException if <code>d</code> is not rectangular
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,112,  (not all rows have the same length) or empty
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,113, @throws NullPointerException if <code>d</code> is null
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,114, @see #RealMatrixImpl(double[][])
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,116,"ublic RealMatrixImpl(final double[][] d, final boolean copyArray)"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,117,"hrows IllegalArgumentException, NullPointerException {"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,118,f (copyArray) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,119,opyIn(d);
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,120, else {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,121,f (d == null) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,122,hrow new NullPointerException();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,124,inal int nRows = d.length;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,125,f (nRows == 0) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,126,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_ROW);
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,128,inal int nCols = d[0].length;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,129,f (nCols == 0) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,130,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,132,or (int r = 1; r < nRows; r++) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,133,f (d[r].length != nCols) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,134,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,135,"ocalizedFormats.DIFFERENT_ROWS_LENGTHS,"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,136,"Cols, d[r].length);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,139,ata = d;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,144, Create a new (column) RealMatrix using <code>v</code> as the
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,145, data for the unique column of the <code>v.length x 1</code> matrix
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,146, created.
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,147," <p>The input array is copied, not referenced.</p>"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,149, @param v column vector holding data for new matrix
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,151,ublic RealMatrixImpl(final double[] v) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,152,inal int nRows = v.length;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,153,ata = new double[nRows][1];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,154,or (int row = 0; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,155,ata[row][0] = v[row];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,159,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,160,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,161,"ublic RealMatrix createMatrix(final int rowDimension, final int columnDimension)"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,162,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,163,"eturn new RealMatrixImpl(rowDimension, columnDimension);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,166,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,167,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,168,ublic RealMatrix copy() {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,169,"eturn new RealMatrixImpl(copyOut(), false);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,172,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,173,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,174,ublic RealMatrix add(final RealMatrix m)
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,175,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,176,ry {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,177,eturn add((RealMatrixImpl) m);
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,178, catch (ClassCastException cce) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,179,eturn super.add(m);
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,184, Compute the sum of this and <code>m</code>.
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,186, @param m    matrix to be added
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,187, @return     this + m
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,188, @throws  IllegalArgumentException if m is not the same size as this
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,190,ublic RealMatrixImpl add(final RealMatrixImpl m)
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,191,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,193,/ safety check
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,194,"atrixUtils.checkAdditionCompatible(this, m);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,196,inal int rowCount    = getRowDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,197,inal int columnCount = getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,198,inal double[][] outData = new double[rowCount][columnCount];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,199,or (int row = 0; row < rowCount; row++) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,200,inal double[] dataRow    = data[row];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,201,inal double[] mRow       = m.data[row];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,202,inal double[] outDataRow = outData[row];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,203,or (int col = 0; col < columnCount; col++) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,204,utDataRow[col] = dataRow[col] + mRow[col];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,208,"eturn new RealMatrixImpl(outData, false);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,212,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,213,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,214,ublic RealMatrix subtract(final RealMatrix m)
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,215,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,216,ry {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,217,eturn subtract((RealMatrixImpl) m);
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,218, catch (ClassCastException cce) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,219,eturn super.subtract(m);
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,224, Compute  this minus <code>m</code>.
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,226, @param m    matrix to be subtracted
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,227, @return     this + m
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,228, @throws  IllegalArgumentException if m is not the same size as this
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,230,ublic RealMatrixImpl subtract(final RealMatrixImpl m)
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,231,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,233,/ safety check
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,234,"atrixUtils.checkSubtractionCompatible(this, m);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,236,inal int rowCount    = getRowDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,237,inal int columnCount = getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,238,inal double[][] outData = new double[rowCount][columnCount];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,239,or (int row = 0; row < rowCount; row++) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,240,inal double[] dataRow    = data[row];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,241,inal double[] mRow       = m.data[row];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,242,inal double[] outDataRow = outData[row];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,243,or (int col = 0; col < columnCount; col++) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,244,utDataRow[col] = dataRow[col] - mRow[col];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,248,"eturn new RealMatrixImpl(outData, false);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,252,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,253,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,254,ublic RealMatrix multiply(final RealMatrix m)
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,255,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,256,ry {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,257,eturn multiply((RealMatrixImpl) m);
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,258, catch (ClassCastException cce) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,259,eturn super.multiply(m);
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,264, Returns the result of postmultiplying this by <code>m</code>.
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,265, @param m    matrix to postmultiply by
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,266, @return     this*m
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,267, @throws     IllegalArgumentException
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,268,             if columnDimension(this) != rowDimension(m)
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,270,ublic RealMatrixImpl multiply(final RealMatrixImpl m)
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,271,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,273,/ safety check
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,274,"atrixUtils.checkMultiplicationCompatible(this, m);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,276,inal int nRows = this.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,277,inal int nCols = m.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,278,inal int nSum = this.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,279,inal double[][] outData = new double[nRows][nCols];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,280,or (int row = 0; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,281,inal double[] dataRow    = data[row];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,282,inal double[] outDataRow = outData[row];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,283,or (int col = 0; col < nCols; col++) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,284,ouble sum = 0;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,285,or (int i = 0; i < nSum; i++) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,286,um += dataRow[i] * m.data[i][col];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,288,utDataRow[col] = sum;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,292,"eturn new RealMatrixImpl(outData, false);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,296,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,297,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,298,ublic double[][] getData() {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,299,eturn copyOut();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,303, Returns a reference to the underlying data array.
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,304, <p>
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,305, Does <strong>not</strong> make a fresh copy of the underlying data.</p>
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,307, @return 2-dimensional array of entries
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,309,ublic double[][] getDataRef() {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,310,eturn data;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,313,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,314,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,315,"ublic void setSubMatrix(final double[][] subMatrix, final int row, final int column)"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,316,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,317,f (data == null) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,318,f (row > 0) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,319,hrow MathRuntimeException.createIllegalStateException(
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,320,"ocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET,"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,321,ow);
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,323,f (column > 0) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,324,hrow MathRuntimeException.createIllegalStateException(
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,325,"ocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,326,olumn);
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,328,inal int nRows = subMatrix.length;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,329,f (nRows == 0) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,330,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_ROW);
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,333,inal int nCols = subMatrix[0].length;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,334,f (nCols == 0) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,335,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,337,ata = new double[subMatrix.length][nCols];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,338,or (int i = 0; i < data.length; ++i) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,339,f (subMatrix[i].length != nCols) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,340,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,341,"ocalizedFormats.DIFFERENT_ROWS_LENGTHS,"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,342,"Cols, subMatrix[i].length);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,344,"ystem.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,346, else {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,347,"uper.setSubMatrix(subMatrix, row, column);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,352,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,353,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,354,"ublic double getEntry(final int row, final int column)"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,355,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,356,ry {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,357,eturn data[row][column];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,358, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,359,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,360,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY,"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,361,"ow, column, getRowDimension(), getColumnDimension());"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,365,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,366,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,367,"ublic void setEntry(final int row, final int column, final double value)"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,368,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,369,ry {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,370,ata[row][column] = value;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,371, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,372,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,373,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY,"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,374,"ow, column, getRowDimension(), getColumnDimension());"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,378,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,379,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,380,"ublic void addToEntry(final int row, final int column, final double increment)"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,381,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,382,ry {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,383,ata[row][column] += increment;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,384, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,385,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,386,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY,"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,387,"ow, column, getRowDimension(), getColumnDimension());"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,391,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,392,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,393,"ublic void multiplyEntry(final int row, final int column, final double factor)"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,394,hrows MatrixIndexException {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,395,ry {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,396,ata[row][column] *= factor;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,397, catch (ArrayIndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,398,hrow new MatrixIndexException(
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,399,"ocalizedFormats.NO_SUCH_MATRIX_ENTRY,"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,400,"ow, column, getRowDimension(), getColumnDimension());"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,404,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,405,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,406,ublic int getRowDimension() {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,407,eturn (data == null) ? 0 : data.length;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,410,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,411,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,412,ublic int getColumnDimension() {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,413,eturn ((data == null) || (data[0] == null)) ? 0 : data[0].length;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,416,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,417,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,418,ublic double[] operate(final double[] v)
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,419,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,420,inal int nRows = this.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,421,inal int nCols = this.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,422,f (v.length != nCols) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,423,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,424,"ocalizedFormats.VECTOR_LENGTH_MISMATCH,"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,425,".length, nCols);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,427,inal double[] out = new double[nRows];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,428,or (int row = 0; row < nRows; row++) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,429,inal double[] dataRow = data[row];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,430,ouble sum = 0;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,431,or (int i = 0; i < nCols; i++) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,432,um += dataRow[i] * v[i];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,434,ut[row] = sum;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,436,eturn out;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,439,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,440,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,441,ublic double[] preMultiply(final double[] v)
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,442,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,444,inal int nRows = getRowDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,445,inal int nCols = getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,446,f (v.length != nRows) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,447,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,448,"ocalizedFormats.VECTOR_LENGTH_MISMATCH,"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,449,".length, nRows);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,452,inal double[] out = new double[nCols];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,453,or (int col = 0; col < nCols; ++col) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,454,ouble sum = 0;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,455,or (int i = 0; i < nRows; ++i) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,456,um += data[i][col] * v[i];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,458,ut[col] = sum;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,461,eturn out;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,465,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,466,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,467,ublic double walkInRowOrder(final RealMatrixChangingVisitor visitor)
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,468,hrows MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,469,inal int rows    = getRowDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,470,inal int columns = getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,471,"isitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,472,or (int i = 0; i < rows; ++i) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,473,inal double[] rowI = data[i];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,474,or (int j = 0; j < columns; ++j) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,475,"owI[j] = visitor.visit(i, j, rowI[j]);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,478,eturn visitor.end();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,481,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,482,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,483,ublic double walkInRowOrder(final RealMatrixPreservingVisitor visitor)
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,484,hrows MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,485,inal int rows    = getRowDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,486,inal int columns = getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,487,"isitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,488,or (int i = 0; i < rows; ++i) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,489,inal double[] rowI = data[i];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,490,or (int j = 0; j < columns; ++j) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,491,"isitor.visit(i, j, rowI[j]);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,494,eturn visitor.end();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,497,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,498,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,499,"ublic double walkInRowOrder(final RealMatrixChangingVisitor visitor,"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,500,"inal int startRow, final int endRow,"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,501,"inal int startColumn, final int endColumn)"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,502,"hrows MatrixIndexException, MatrixVisitorException {"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,503,"atrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,504,"isitor.start(getRowDimension(), getColumnDimension(),"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,505,"tartRow, endRow, startColumn, endColumn);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,506,or (int i = startRow; i <= endRow; ++i) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,507,inal double[] rowI = data[i];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,508,or (int j = startColumn; j <= endColumn; ++j) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,509,"owI[j] = visitor.visit(i, j, rowI[j]);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,512,eturn visitor.end();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,515,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,516,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,517,"ublic double walkInRowOrder(final RealMatrixPreservingVisitor visitor,"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,518,"inal int startRow, final int endRow,"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,519,"inal int startColumn, final int endColumn)"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,520,"hrows MatrixIndexException, MatrixVisitorException {"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,521,"atrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,522,"isitor.start(getRowDimension(), getColumnDimension(),"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,523,"tartRow, endRow, startColumn, endColumn);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,524,or (int i = startRow; i <= endRow; ++i) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,525,inal double[] rowI = data[i];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,526,or (int j = startColumn; j <= endColumn; ++j) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,527,"isitor.visit(i, j, rowI[j]);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,530,eturn visitor.end();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,533,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,534,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,535,ublic double walkInColumnOrder(final RealMatrixChangingVisitor visitor)
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,536,hrows MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,537,inal int rows    = getRowDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,538,inal int columns = getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,539,"isitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,540,or (int j = 0; j < columns; ++j) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,541,or (int i = 0; i < rows; ++i) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,542,inal double[] rowI = data[i];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,543,"owI[j] = visitor.visit(i, j, rowI[j]);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,546,eturn visitor.end();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,549,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,550,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,551,ublic double walkInColumnOrder(final RealMatrixPreservingVisitor visitor)
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,552,hrows MatrixVisitorException {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,553,inal int rows    = getRowDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,554,inal int columns = getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,555,"isitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,556,or (int j = 0; j < columns; ++j) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,557,or (int i = 0; i < rows; ++i) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,558,"isitor.visit(i, j, data[i][j]);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,561,eturn visitor.end();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,564,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,565,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,566,"ublic double walkInColumnOrder(final RealMatrixChangingVisitor visitor,"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,567,"inal int startRow, final int endRow,"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,568,"inal int startColumn, final int endColumn)"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,569,"hrows MatrixIndexException, MatrixVisitorException {"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,570,"atrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,571,"isitor.start(getRowDimension(), getColumnDimension(),"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,572,"tartRow, endRow, startColumn, endColumn);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,573,or (int j = startColumn; j <= endColumn; ++j) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,574,or (int i = startRow; i <= endRow; ++i) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,575,inal double[] rowI = data[i];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,576,"owI[j] = visitor.visit(i, j, rowI[j]);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,579,eturn visitor.end();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,582,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,583,Override
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,584,"ublic double walkInColumnOrder(final RealMatrixPreservingVisitor visitor,"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,585,"inal int startRow, final int endRow,"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,586,"inal int startColumn, final int endColumn)"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,587,"hrows MatrixIndexException, MatrixVisitorException {"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,588,"atrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,589,"isitor.start(getRowDimension(), getColumnDimension(),"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,590,"tartRow, endRow, startColumn, endColumn);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,591,or (int j = startColumn; j <= endColumn; ++j) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,592,or (int i = startRow; i <= endRow; ++i) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,593,"isitor.visit(i, j, data[i][j]);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,596,eturn visitor.end();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,600, Returns a fresh copy of the underlying data array.
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,602, @return a copy of the underlying data array.
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,604,rivate double[][] copyOut() {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,605,inal int nRows = this.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,606,inal double[][] out = new double[nRows][this.getColumnDimension()];
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,607,"/ can't copy 2-d array in one shot, otherwise get row references"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,608,or (int i = 0; i < nRows; i++) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,609,"ystem.arraycopy(data[i], 0, out[i], 0, data[i].length);"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,611,eturn out;
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,615, Replaces data with a fresh copy of the input array.
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,616, <p>
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,617, Verifies that the input array is rectangular and non-empty.</p>
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,619, @param in data to copy in
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,620, @throws IllegalArgumentException if input array is empty or not
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,621,    rectangular
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,622, @throws NullPointerException if input array is null
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,624,rivate void copyIn(final double[][] in) {
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,625,"etSubMatrix(in, 0, 0);"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,52, Entry e = null;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,53, for(Iterator<Entry> it = iterator(); it.hasNext(); e = it.next()) {
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,54,   e.setValue(function.value(e.getValue()));
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,56, @param function to apply to each successive entry
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,57, @return this vector
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,58, @throws FunctionEvaluationException if function throws it on application to any entry
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,51,* <pre>
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,52,*  Entry e = null;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,53,*  for(Iterator<Entry> it = iterator(); it.hasNext(); e = it.next()) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,54,*      e.setValue(function.value(e.getValue()));
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,56,* </pre>
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,58,* @param function Function to apply to each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,59,* @return this vector.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,60,* @throws FunctionEvaluationException if the function throws it.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,64, return copy().map(function);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,65, @param function to apply to each successive entry
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,66, @return a new vector
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,67, @throws FunctionEvaluationException if function throws it on application to any entry
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,66,* <pre>
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,67,*  return copy().map(function);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,68,* </pre>
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,70,* @param function Functin to apply to each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,71,* @return a new vector.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,72,* @throws FunctionEvaluationException if the function throws it.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,77,** Get the value of the entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,78, @return value of the entry
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,82,* Get the value of the entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,84,* @return the value of the entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,82,** Set the value of the entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,83, @param value new value for the entry
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,88,* Set the value of the entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,90,* @param value New value for the entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,87,** Get the index of the entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,88, @return index of the entry
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,94,* Get the index of the entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,96,* @return the index of the entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,94,** Set the index of the entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,95, @param index new index for the entry
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,102,* Set the index of the entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,104,* @param index New index for the entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,104," Generic dense iterator - starts with index == zero, and hasNext() == true until index == getDimension();"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,112,* Generic dense iterator.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,113,* It iterates in increasing order of the vector index.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,110," Specialized implementations may choose to not iterate over all dimensions, either because those values are"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,111," unset, or are equal to defaultValue(), or are small enough to be ignored for the purposes of iteration."
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,120,* Specialized implementations may choose to not iterate over all
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,121,"* dimensions, either because those values are unset, or are equal"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,122,"* to defaultValue(), or are small enough to be ignored for the"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,123,* purposes of iteration.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,113," In dense implementations, this method will often delegate to {@link #iterator()}"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,125,"* In dense implementations, this method will often delegate to"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,126,* {@link #iterator()}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,119, Returns a (deep) copy of this.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,120, @return vector copy
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,133,* Returns a (deep) copy of this vector.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,135,* @return a vector copy.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,125, Compute the sum of this and v.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,126, @param v vector to be added
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,127, @return this + v
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,128, @throws IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,140,* Compute the sum of this vector and {@code v}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,142,* @param v Vector to be added.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,143,* @return {@code this} + {@code v}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,144,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,145,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,130,ealVector add(RealVector v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,131,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,147,RealVector add(RealVector v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,134, Compute the sum of this and v.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,135, @param v vector to be added
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,136, @return this + v
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,137, @throws IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,150,* Compute the sum of this vector and {@code v}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,152,* @param v Vector to be added.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,153,* @return {@code this} + {@code v}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,154,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,155,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,139,ealVector add(double[] v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,140,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,157,RealVector add(double[] v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,143, Compute this minus v.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,144, @param v vector to be subtracted
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,145, @return this + v
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,146, @throws IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,161,* Subtract {@code v} from this vector.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,163,* @param v Vector to be subtracted.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,164,* @return {@code this} - {@code v}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,165,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,166,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,148,ealVector subtract(RealVector v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,149,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,168,RealVector subtract(RealVector v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,152, Compute this minus v.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,153, @param v vector to be subtracted
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,154, @return this - v
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,155, @throws IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,171,* Subtract {@code v} from this vector.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,173,* @param v Vector to be subtracted.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,174,* @return {@code this} - {@code v}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,175,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,176,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,157,ealVector subtract(double[] v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,158,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,178,RealVector subtract(double[] v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,161, Map an addition operation to each entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,162, @param d value to be added to each entry
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,163, @return this + d
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,181,* Add a value to each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,183,* @param d Value to be added to each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,184,* @return {@code this} + {@code d}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,168, Map an addition operation to each entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,169, <p>The instance <strong>is</strong> changed by this method.</p>
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,170, @param d value to be added to each entry
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,171," @return for convenience, return this"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,189,* Add a value to each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,190,* The instance is changed in-place.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,192,* @param d Value to be added to each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,193,* @return {@code this}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,176, Map a subtraction operation to each entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,177, @param d value to be subtracted to each entry
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,178, @return this - d
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,198,* Subtract a value from each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,200,* @param d Value to be subtracted.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,201,* @return {@code this} - {@code d}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,183, Map a subtraction operation to each entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,184, <p>The instance <strong>is</strong> changed by this method.</p>
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,185, @param d value to be subtracted to each entry
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,186," @return for convenience, return this"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,206,* Subtract a value from each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,207,* The instance is changed in-place.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,209,* @param d Value to be subtracted.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,210,* @return {@code this}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,191, Map a multiplication operation to each entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,192, @param d value to multiply all entries by
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,193, @return this * d
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,215,* Multiply each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,217,* @param d Multiplication factor.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,218,* @return {@code this} * {@code d}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,198, Map a multiplication operation to each entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,199, <p>The instance <strong>is</strong> changed by this method.</p>
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,200, @param d value to multiply all entries by
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,201," @return for convenience, return this"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,223,* Multiply each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,224,* The instance is changed in-place.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,226,* @param d Multiplication factor.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,227,* @return {@code this}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,206, Map a division operation to each entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,207, @param d value to divide all entries by
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,208, @return this / d
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,232,* Divide each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,234,* @param d Value to divide by.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,235,* @return {@code this} / {@code d}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,213, Map a division operation to each entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,214, <p>The instance <strong>is</strong> changed by this method.</p>
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,215, @param d value to divide all entries by
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,216," @return for convenience, return this"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,240,* Divide each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,241,* The instance is changed in-place.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,243,* @param d Value to divide by.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,244,* @return {@code this}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,222, @param d value to raise all entries to
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,223, @return this ^ d
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,251,* @param d Operator value.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,252,* @return a mapped copy of the vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,229, <p>The instance <strong>is</strong> changed by this method.</p>
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,230, @param d value to raise all entries to
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,231," @return for convenience, return this"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,258,* The instance is changed in-place.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,260,* @param d Operator value.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,261,* @return the mapped vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,237, @return a vector containing the result of applying the function to each entry
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,268,* @return a mapped copy of the vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,242, Map the {@link Math#exp(double)} function to each entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,243, <p>The instance <strong>is</strong> changed by this method.</p>
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,244," @return for convenience, return this"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,273,* Map {@link Math#exp(double)} operation to each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,274,* The instance is changed in-place.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,276,* @return the mapped vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,538, @throws IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,570,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,571,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,540,ealVector ebeMultiply(RealVector v) throws IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,573,RealVector ebeMultiply(RealVector v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,546, @throws IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,579,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,580,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,548,ealVector ebeMultiply(double[] v) throws IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,582,RealVector ebeMultiply(double[] v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,554, @throws IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,588,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,589,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,556,ealVector ebeDivide(RealVector v) throws IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,591,RealVector ebeDivide(RealVector v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,562, @throws IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,597,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,598,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,564,ealVector ebeDivide(double[] v) throws IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,600,RealVector ebeDivide(double[] v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,576, @exception IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,612,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,613,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,578,ouble dotProduct(RealVector v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,579,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,615,double dotProduct(RealVector v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,585, @exception IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,621,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,622,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,587,ouble dotProduct(double[] v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,588,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,624,double dotProduct(double[] v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,630, @exception IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,666,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,667,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,635,ouble getDistance(RealVector v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,636,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,672,double getDistance(RealVector v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,645, @exception IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,681,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,682,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,650,ouble getDistance(double[] v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,651,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,687,double getDistance(double[] v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,660, @exception IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,696,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,697,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,665,ouble getL1Distance(RealVector v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,666,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,702,double getL1Distance(RealVector v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,675, @exception IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,711,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,712,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,680,ouble getL1Distance(double[] v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,681,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,717,double getL1Distance(double[] v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,690, @exception IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,726,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,727,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,695,ouble getLInfDistance(RealVector v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,696,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,732,double getLInfDistance(RealVector v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,705, @exception IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,741,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,742,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,710,ouble getLInfDistance(double[] v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,711,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,747,double getLInfDistance(double[] v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,722, @exception ArithmeticException if the norm is null
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,758,* @throws  org.apache.commons.math.exception.MathArithmeticException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,759,* if the norm is zero.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,729, @throws IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,766,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,767,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,731,ealVector projection(RealVector v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,732,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,769,RealVector projection(RealVector v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,737, @throws IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,774,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,775,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,739,ealVector projection(double[] v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,740,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,777,RealVector projection(double[] v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,746, @exception IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,783,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,784,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,748,ealMatrix outerProduct(RealVector v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,749,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,786,RealMatrix outerProduct(RealVector v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,755, @exception IllegalArgumentException if v is not the same size as this
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,792,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,793,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,757,ealMatrix outerProduct(double[] v)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,758,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,795,RealMatrix outerProduct(double[] v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,762, <p>
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,763," The index start at 0 and must be lesser than the size,"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,764, otherwise a {@link MatrixIndexException} is thrown.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,765, </p>
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,766, @param index  index location of entry to be fetched
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,767, @return vector entry at index
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,768, @throws MatrixIndexException if the index is not valid
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,800,* @param index Index location of entry to be fetched.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,801,* @return the vector entry at {@code index}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,802,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,803,* if the index is not valid.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,771,ouble getEntry(int index)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,772,hrows MatrixIndexException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,806,double getEntry(int index);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,778, @exception MatrixIndexException if the index is
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,779, inconsistent with vector size
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,812,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,813,* if the index is not valid.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,782,"oid setEntry(int index, double value)"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,783,hrows MatrixIndexException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,816,"void setEntry(int index, double value);"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,817, @exception MatrixIndexException if the index is
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,818, inconsistent with vector size
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,850,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,851,* if the index is not valid.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,820,"ealVector getSubVector(int index, int n)"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,821,hrows MatrixIndexException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,853,"RealVector getSubVector(int index, int n);"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,827, @exception MatrixIndexException if the index is
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,828, inconsistent with vector size
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,859,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,860,* if the index is not valid.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,831,"oid setSubVector(int index, RealVector v)"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,832,hrows MatrixIndexException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,863,"void setSubVector(int index, RealVector v);"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,838, @exception MatrixIndexException if the index is
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,839, inconsistent with vector size
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,869,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,870,* if the index is not valid.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,842,"oid setSubVector(int index, double[] v)"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,843,hrows MatrixIndexException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,873,"void setSubVector(int index, double[] v);"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,860, Returns true if any coordinate of this vector is NaN; false otherwise
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,861, @return  true if any coordinate of this vector is NaN; false otherwise
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,890,* Check whether any coordinate of this vector is {@code NaN}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,891,"* @return {@code true} if any coordinate of this vector is {@code NaN},"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,892,* {@code false} otherwise.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,866, Returns true if any coordinate of this vector is infinite and none are NaN;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,867, false otherwise
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,868, @return  true if any coordinate of this vector is infinite and none are NaN;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,869, false otherwise
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,897,* Check whether any coordinate of this vector is infinite and none are {@code NaN}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,899,* @return {@code true} if any coordinate of this vector is infinite and
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,900,"* none are {@code NaN}, {@code false} otherwise."
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,32,  Serial id
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,31,/** Serialization identifier. */
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,38, row dimension
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,35,/** Row dimension. */
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,42, column dimension
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,37,/** Column dimension. */
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,48, Creates a matrix with no data.
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,49, @param field field to which the elements belong
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,41,* Create a matrix with no data.
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,43,* @param field Field to which the elements belong.
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,59, Create a new SparseFieldMatrix<T> with the supplied row and column dimensions.
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,53,* Create a new SparseFieldMatrix<T> with the supplied row and column
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,54,* dimensions.
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,61, @param field field to which the elements belong
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,62, @param rowDimension  the number of rows in the new matrix
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,63, @param columnDimension  the number of columns in the new matrix
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,64, @throws IllegalArgumentException if row or column dimension is not positive
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,56,* @param field Field to which the elements belong.
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,57,* @param rowDimension Number of rows in the new matrix.
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,58,* @param columnDimension Number of columns in the new matrix.
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,59,* @throws org.apache.commons.math.exception.NotStrictlyPositiveException
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,60,* if row or column dimension is not positive.
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,67,"inal int rowDimension, final int columnDimension)"
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,68,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,63,"final int rowDimension, final int columnDimension) {"
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,77, @param other The instance to copy
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,73,* @param other Instance to copy.
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,88, @param other The instance to copy
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,85,* @param other Instance to copy.
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,104,"ublic void addToEntry(int row, int column, T increment)"
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,105,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,101,"public void addToEntry(int row, int column, T increment) {"
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,126,"ublic FieldMatrix<T> createMatrix(int rowDimension, int columnDimension)"
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,127,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,121,"public FieldMatrix<T> createMatrix(int rowDimension, int columnDimension) {"
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,139,"ublic T getEntry(int row, int column) throws MatrixIndexException {"
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,133,"public T getEntry(int row, int column) {"
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,153,"ublic void multiplyEntry(int row, int column, T factor)"
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,154,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,147,"public void multiplyEntry(int row, int column, T factor) {"
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,169,"ublic void setEntry(int row, int column, T value)"
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,170,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,162,"public void setEntry(int row, int column, T value) {"
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,181, Compute the key to access a matrix element
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,182, @param row row index of the matrix element
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,183, @param column column index of the matrix element
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,184, @return key within the map to access the matrix element
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,173,* Compute the key to access a matrix element.
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,175,* @param row Row index of the matrix element.
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,176,* @param column Column index of the matrix element.
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,177,* @return the key within the map to access the matrix element.
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,24,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,25,mport org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,24,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,25,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,37,  Serial version id
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,35,/**  Serialization identifier. */
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,49, <p>Zero-length vectors may be used to initialize construction of vectors
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,46,* Zero-length vectors may be used to initialize construction of vectors
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,52," or one of the <code>append</code> method ({@link #append(FieldElement)},"
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,49,"* or one of the {@code append} method ({@link #append(FieldElement)},"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,54, {@link #append(SparseFieldVector)}) to gather data into this vector.</p>
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,55, @param field field to which the elements belong
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,51,* {@link #append(SparseFieldVector)}) to gather data into this vector.
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,53,* @param field Field to which the elements belong.
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,63, Construct a (dimension)-length vector of zeros.
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,64, @param field field to which the elements belong
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,65, @param dimension Size of the vector
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,61,* Construct a vector of zeroes.
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,63,* @param field Field to which the elements belong.
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,64,* @param dimension Size of the vector.
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,75, @param v The original vector
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,76, @param resize The amount to resize it
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,75,* @param v Original vector
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,76,* @param resize Amount to add.
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,87, @param field field to which the elements belong
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,88, @param dimension The size of the vector
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,89, @param expectedSize The expected number of non-zero entries
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,88,* @param field Field to which the elements belong.
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,89,* @param dimension Size of the vector.
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,90,* @param expectedSize Expected number of non-zero entries.
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,99, Only non-zero entries will be stored
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,100, @param field field to which the elements belong
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,101, @param values The set of values to create from
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,100,* Only non-zero entries will be stored.
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,102,* @param field Field to which the elements belong.
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,103,* @param values Set of values to create from.
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,117, @param v The instance to copy from
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,118,* @param v Instance to copy.
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,127, @return entries of this instance
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,129,* @return the entries of this instance
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,135, @param v vector to add
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,136, @return The sum of <code>this</code> and <code>v</code>
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,137, @throws IllegalArgumentException If the dimensions don't match
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,138,* @param v Vector to add.
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,139,* @return the sum of {@code this} and {@code v}.
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,140,* @throws DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,141,* if the dimensions do not match.
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,139,ublic FieldVector<T> add(SparseFieldVector<T> v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,143,public FieldVector<T> add(SparseFieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,159,ublic FieldVector<T> add(T[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,163,public FieldVector<T> add(T[] v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,170, @param v vector to append to this one.
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,171, @return a new vector
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,175,* @param v Vector to append to this one.
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,176,* @return a new vector.
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,214,ublic T dotProduct(FieldVector<T> v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,219,public T dotProduct(FieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,226,ublic T dotProduct(T[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,231,public T dotProduct(T[] v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,242,ublic FieldVector<T> ebeDivide(FieldVector<T> v)
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,243,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,247,public FieldVector<T> ebeDivide(FieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,255,ublic FieldVector<T> ebeDivide(T[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,259,public FieldVector<T> ebeDivide(T[] v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,267,ublic FieldVector<T> ebeMultiply(FieldVector<T> v)throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,271,public FieldVector<T> ebeMultiply(FieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,279,ublic FieldVector<T> ebeMultiply(T[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,283,public FieldVector<T> ebeMultiply(T[] v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,307,ublic T getEntry(int index) throws MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,311,public T getEntry(int index) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,318,"ublic FieldVector<T> getSubVector(int index, int n)"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,319,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,322,"public FieldVector<T> getSubVector(int index, int n) {"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,402, Optimized method to compute outer product when both vectors are sparse.
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,403, @param v vector with which outer product should be computed
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,404, @return the square matrix outer product between instance and v
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,405, @throws IllegalArgumentException if v is not the same size as {@code this}
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,407,ublic FieldMatrix<T> outerProduct(SparseFieldVector<T> v)
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,408,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,405,* Optimized method to compute outer product when both vectors are sparse.
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,406,* @param v vector with which outer product should be computed
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,407,* @return the square matrix outer product between instance and v
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,408,* @throws DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,409,* if the dimensions do not match.
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,411,public FieldMatrix<T> outerProduct(SparseFieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,424,ublic FieldMatrix<T> outerProduct(T[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,427,public FieldMatrix<T> outerProduct(T[] v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,440,ublic FieldMatrix<T> outerProduct(FieldVector<T> v)
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,441,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,443,public FieldMatrix<T> outerProduct(FieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,449,ublic FieldVector<T> projection(FieldVector<T> v)
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,450,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,451,public FieldVector<T> projection(FieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,456,ublic FieldVector<T> projection(T[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,457,public FieldVector<T> projection(T[] v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,469,"ublic void setEntry(int index, T value) throws MatrixIndexException {"
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,470,"public void setEntry(int index, T value) {"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,475,"ublic void setSubVector(int index, FieldVector<T> v)"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,476,hrows MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,476,"public void setSubVector(int index, FieldVector<T> v) {"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,483,"ublic void setSubVector(int index, T[] v) throws MatrixIndexException {"
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,483,"public void setSubVector(int index, T[] v) {"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,494, @param v The vector to subtract from <code>this</code>
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,495, @return The difference of <code>this</code> and <code>v</code>
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,496, @throws IllegalArgumentException If the dimensions don't match
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,495,* @param v Vector to subtract.
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,496,* @return the difference between {@code this} and {@code v}.
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,497,* @throws DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,498,* if the dimensions do not match.
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,498,ublic SparseFieldVector<T> subtract(SparseFieldVector<T> v) throws IllegalArgumentException{
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,500,public SparseFieldVector<T> subtract(SparseFieldVector<T> v){
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,515,ublic FieldVector<T> subtract(FieldVector<T> v)
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,516,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,517,public FieldVector<T> subtract(FieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,524,ublic FieldVector<T> subtract(T[] v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,525,public FieldVector<T> subtract(T[] v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,543, Check if an index is valid.
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,544,* Check whether an index is valid.
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,545, @param index
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,546,            index to check
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,547, @exception MatrixIndexException
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,548,                if index is not valid
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,546,* @param index Index to check.
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,547,* @throws OutOfRangeException if the dimensions do not match.
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,550,rivate void checkIndex(final int index) throws MatrixIndexException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,549,private void checkIndex(final int index) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,552,"hrow new MatrixIndexException(LocalizedFormats.INDEX_OUT_OF_RANGE,"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,553,"ndex, 0, getDimension() - 1);"
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,551,"throw new OutOfRangeException(index, 0, getDimension() - 1);"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,560, @param n
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,561,            expected dimension.
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,562, @exception IllegalArgumentException
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,563,                if the dimension is inconsistent with vector size
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,558,* @param n Expected dimension.
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,559,* @throws DimensionMismatchException if the dimensions do not match.
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,565,rotected void checkVectorDimensions(int n) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,561,protected void checkVectorDimensions(int n) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,567,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,568,"ocalizedFormats.VECTOR_LENGTH_MISMATCH,"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,569,"etDimension(), n);"
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,563,"throw new DimensionMismatchException(getDimension(), n);"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,575,ublic FieldVector<T> add(FieldVector<T> v) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,568,public FieldVector<T> add(FieldVector<T> v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,583,** Build an array of elements.
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,584, @param length size of the array to build
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,585, @return a new array
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,577,* Build an array of elements.
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,579,* @param length Size of the array to build.
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,580,* @return a new array.
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,24,import org.apache.commons.math.exception.OutOfRangeException;
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,25,import org.apache.commons.math.exception.ZeroException;
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,26,import org.apache.commons.math.exception.NumberIsTooSmallException;
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,319,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,320, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,322,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,323,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,325,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,326, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,328,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,329,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,336,"ail (""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,337, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,339,"fail (""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,340,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,397,"ail(""Expecting MatrixIndexException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,400,"fail(""Expecting OutOfRangeException or NumberIsTooSmallException or ZeroException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,399, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,402,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,403,if (!mustFail) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,404,throw e;
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,406,} catch (NumberIsTooSmallException e) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,407,if (!mustFail) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,408,throw e;
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,410,} catch (ZeroException e) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,413,"ail(""Expecting MatrixIndexException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,424,"fail(""Expecting OutOfRangeException or NumberIsTooSmallException or ZeroException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,426,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,427,if (!mustFail) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,428,throw e;
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,430,} catch (NumberIsTooSmallException e) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,431,if (!mustFail) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,432,throw e;
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,415, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,434,} catch (ZeroException e) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,452,"ail(""Expecting MatrixIndexException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,471,"fail(""Expecting OutOfRangeException or NumberIsTooSmallException or ZeroException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,454, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,473,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,474,if (!mustFail) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,475,throw e;
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,477,} catch (NumberIsTooSmallException e) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,478,if (!mustFail) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,479,throw e;
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,481,} catch (ZeroException e) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,471,"ail(""Expecting MatrixIndexException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,498,"fail(""Expecting OutOfRangeException or NumberIsTooSmallException or ZeroException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,500,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,501,if (!mustFail) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,502,throw e;
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,504,} catch (NumberIsTooSmallException e) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,505,if (!mustFail) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,506,throw e;
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,473, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,508,} catch (ZeroException e) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,490,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,491, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,525,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,526,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,496,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,497, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,531,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,532,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,510,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,511, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,545,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,546,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,532,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,533, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,567,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,568,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,538,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,539, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,573,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,574,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,552,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,553, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,587,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,588,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,572,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,573, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,607,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,608,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,578,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,579, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,613,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,614,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,592,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,593, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,627,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,628,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,612,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,613, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,647,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,648,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,618,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,619, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,653,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,654,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,632,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,633, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,667,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,668,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,658,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,659, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,693,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,694,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,664,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,665, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,699,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,700,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,677,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,678, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,712,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,713,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,697,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,698, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,732,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,733,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,703,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,704, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,738,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,739,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,717,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,718, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,752,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,753,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,786,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,787, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,821,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,822,} catch (OutOfRangeException e) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,793,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,794, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,828,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,829,} catch (OutOfRangeException e) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,799,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,800, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,834,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,835,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,29,import org.apache.commons.math.exception.OutOfRangeException;
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,368,"ail(""MatrixIndexException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,369, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,369,"fail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,370,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,378,"ail(""MatrixIndexException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,379, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,379,"fail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,380,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,389,"ail(""MatrixIndexException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,390, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,390,"fail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,391,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,411,"ail(""MatrixIndexException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,412, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,412,"fail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,413,} catch (OutOfRangeException ex) {
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,28,import org.apache.commons.math.exception.OutOfRangeException;
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,658,"ail(""MatrixIndexException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,659, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,659,"fail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,660,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,668,"ail(""MatrixIndexException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,669, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,669,"fail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,670,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,679,"ail(""MatrixIndexException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,680, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,680,"fail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,681,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,701,"ail(""MatrixIndexException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,702, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,702,"fail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,703,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,15, limitations under the License.
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,17,ackage org.apache.commons.math.linear;
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,19,mport java.math.BigDecimal;
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,21,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,25, Test cases for the {@link BigMatrixImpl} class.
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,27, @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,29,Deprecated
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,30,ublic final class BigMatrixImplTest extends TestCase {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,32,/ Test data for String constructors
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,33,"rotected  String[][] testDataString = { {""1"",""2"",""3""}, {""2"",""5"",""3""}, {""1"",""0"",""8""} };"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,35,/ 3 x 3 identity matrix
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,36,"rotected double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,38,/ Test data for group operations
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,39,"rotected double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,40,"rotected double[][] testDataLU = {{2d, 5d, 3d}, {.5d, -2.5d, 6.5d}, {0.5d, 0.2d, .2d}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,41,"rotected double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,42,"rotected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,43,"-1d,0d,-8d} };"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,44,"rotected double[] testDataRow1 = {1d,2d,3d};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,45,"rotected double[] testDataCol3 = {3d,3d,8d};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,46,rotected double[][] testDataInv =
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,47," {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,48,"rotected double[] preMultTest = {8,12,33};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,49,"rotected double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,50,"rotected double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,51,rotected double[][] testDataPlusInv =
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,52," {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,54,/ lu decomposition tests
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,55,"rotected double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,56,"rotected double[][] luDataLUDecomposition = { {6d,9d,8d}, {0d,5d,7d},"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,57,"0.33333333333333,0d,0.33333333333333} };"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,59,/ singular matrices
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,60,"rotected double[][] singular = { {2d,3d}, {2d,3d} };"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,61,"rotected double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,62,"7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,63,"rotected double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,64,"rotected double[][] detData2 = { {1d, 3d}, {2d, 4d}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,66,/ vectors
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,67,"rotected double[] testVector = {1,2,3};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,68,"rotected double[] testVector2 = {1,2,3,4};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,70,/ submatrix accessor tests
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,71,"rotected double[][] subTestData = {{1, 2, 3, 4}, {1.5, 2.5, 3.5, 4.5},"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,72,"2, 4, 6, 8}, {4, 5, 6, 7}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,73,/ array selections
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,74,"rotected double[][] subRows02Cols13 = { {2, 4}, {4, 8}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,75,"rotected double[][] subRows03Cols12 = { {2, 3}, {5, 6}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,76,"rotected double[][] subRows03Cols123 = { {2, 3, 4} , {5, 6, 7}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,77,/ effective permutations
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,78,"rotected double[][] subRows20Cols123 = { {4, 6, 8} , {2, 3, 4}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,79,"rotected double[][] subRows31Cols31 = {{7, 5}, {4.5, 2.5}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,80,/ contiguous ranges
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,81,"rotected double[][] subRows01Cols23 = {{3,4} , {3.5, 4.5}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,82,"rotected double[][] subRows23Cols00 = {{2} , {4}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,83,rotected double[][] subRows00Cols33 = {{4}};
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,84,/ row matrices
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,85,"rotected double[][] subRow0 = {{1,2,3,4}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,86,"rotected double[][] subRow3 = {{4,5,6,7}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,87,/ column matrices
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,88,"rotected double[][] subColumn1 = {{2}, {2.5}, {4}, {5}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,89,"rotected double[][] subColumn3 = {{4}, {4.5}, {8}, {7}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,91,/ tolerances
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,92,rotected double entryTolerance = 10E-16;
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,93,rotected double normTolerance = 10E-14;
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,95,ublic BigMatrixImplTest(String name) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,96,uper(name);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,99,ublic static final double[] asDouble(BigDecimal[] data) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,100,ouble d[] = new double[data.length];
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,101,or (int i=0;i<d.length;i++) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,102,[i] = data[i].doubleValue();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,104,eturn d;
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,107,ublic static final double[][] asDouble(BigDecimal[][] data) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,108,ouble d[][] = new double[data.length][data[0].length];
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,109,or (int i=0;i<d.length;i++) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,110,or (int j=0;j<d[i].length;j++)
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,111,[i][j] = data[i][j].doubleValue();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,113,eturn d;
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,116,ublic static final BigDecimal[] asBigDecimal(double [] data) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,117,igDecimal d[] = new BigDecimal[data.length];
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,118,or (int i=0;i<d.length;i++) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,119,[i] = new BigDecimal(data[i]);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,121,eturn d;
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,124,ublic static final BigDecimal[][] asBigDecimal(double [][] data) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,125,igDecimal d[][] = new BigDecimal[data.length][data[0].length];
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,126,or (int i=0;i<d.length;i++) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,127,or (int j=0;j<data[i].length;j++) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,128,[i][j] = new BigDecimal(data[i][j]);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,131,eturn d;
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,134,** test dimensions */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,135,ublic void testDimensions() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,136,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,137,igMatrixImpl m2 = new BigMatrixImpl(testData2);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,138,"ssertEquals(""testData row dimension"",3,m.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,139,"ssertEquals(""testData column dimension"",3,m.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,140,"ssertTrue(""testData is square"",m.isSquare());"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,141,"ssertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,142,"ssertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,143,"ssertTrue(""testData2 is not square"",!m2.isSquare());"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,146,** test copy functions */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,147,ublic void testCopyFunctions() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,148,igMatrixImpl m1 = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,149,igMatrixImpl m2 = new BigMatrixImpl(m1.getData());
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,150,"ssertEquals(m2,m1);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,151,igMatrixImpl m3 = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,152,"igMatrixImpl m4 = new BigMatrixImpl(m3.getData(), false);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,153,"ssertEquals(m4,m3);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,156,** test constructors */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,157,ublic void testConstructors() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,158,igMatrix m1 = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,159,igMatrix m2 = new BigMatrixImpl(testDataString);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,160,igMatrix m3 = new BigMatrixImpl(asBigDecimal(testData));
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,161,"igMatrix m4 = new BigMatrixImpl(asBigDecimal(testData), true);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,162,"igMatrix m5 = new BigMatrixImpl(asBigDecimal(testData), false);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,163,"ssertClose(""double, string"", m1, m2, Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,164,"ssertClose(""double, BigDecimal"", m1, m3, Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,165,"ssertClose(""string, BigDecimal"", m2, m3, Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,166,"ssertClose(""double, BigDecimal/true"", m1, m4, Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,167,"ssertClose(""double, BigDecimal/false"", m1, m5, Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,168,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,169,"ew BigMatrixImpl(new String[][] {{""0"", ""hello"", ""1""}});"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,170,"ail(""Expecting NumberFormatException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,171, catch (NumberFormatException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,172,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,174,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,175,ew BigMatrixImpl(new String[][] {});
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,176,"ail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,177, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,178,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,180,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,181,"ew BigMatrixImpl(new String[][] {{},{}});"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,182,"ail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,183, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,184,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,186,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,187,"ew BigMatrixImpl(new String[][] {{""a"", ""b""},{""c""}});"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,188,"ail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,189, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,190,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,193,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,194,"ew BigMatrixImpl(0, 1);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,195,"ail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,196, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,197,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,199,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,200,"ew BigMatrixImpl(1, 0);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,201,"ail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,202, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,203,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,207,** test add */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,208,ublic void testAdd() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,209,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,210,igMatrixImpl mInv = new BigMatrixImpl(testDataInv);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,211,igMatrix mPlusMInv = m.add(mInv);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,212,ouble[][] sumEntries = asDouble(mPlusMInv.getData());
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,213,or (int row = 0; row < m.getRowDimension(); row++) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,214,or (int col = 0; col < m.getColumnDimension(); col++) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,215,"ssertEquals(""sum entry entry"","
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,216,"estDataPlusInv[row][col],sumEntries[row][col],"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,217,ntryTolerance);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,222,** test add failure */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,223,ublic void testAddFail() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,224,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,225,igMatrixImpl m2 = new BigMatrixImpl(testData2);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,226,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,227,.add(m2);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,228,"ail(""IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,229, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,230,/ ignored
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,234,** test norm */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,235,ublic void testNorm() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,236,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,237,igMatrixImpl m2 = new BigMatrixImpl(testData2);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,238,"ssertEquals(""testData norm"",14d,m.getNorm().doubleValue(),entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,239,"ssertEquals(""testData2 norm"",7d,m2.getNorm().doubleValue(),entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,242,** test m-n = m + -n */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,243,ublic void testPlusMinus() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,244,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,245,igMatrixImpl m2 = new BigMatrixImpl(testDataInv);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,246,"ssertClose(""m-n = m + -n"",m.subtract(m2),"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,247,"2.scalarMultiply(new BigDecimal(-1d)).add(m),entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,248,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,249,.subtract(new BigMatrixImpl(testData2));
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,250,"ail(""Expecting illegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,251, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,252,/ ignored
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,256,** test multiply */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,257,ublic void testMultiply() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,258,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,259,igMatrixImpl mInv = new BigMatrixImpl(testDataInv);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,260,igMatrixImpl identity = new BigMatrixImpl(id);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,261,igMatrixImpl m2 = new BigMatrixImpl(testData2);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,262,"ssertClose(""inverse multiply"",m.multiply(mInv),"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,263,"dentity,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,264,"ssertClose(""inverse multiply"",mInv.multiply(m),"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,265,"dentity,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,266,"ssertClose(""identity multiply"",m.multiply(identity),"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,267,",entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,268,"ssertClose(""identity multiply"",identity.multiply(mInv),"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,269,"Inv,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,270,"ssertClose(""identity multiply"",m2.multiply(identity),"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,271,"2,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,272,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,273,.multiply(new BigMatrixImpl(bigSingular));
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,274,"ail(""Expecting illegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,275, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,276,/ ignored
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,280,/Additional Test for BigMatrixImplTest.testMultiply
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,282,"rivate double[][] d3 = new double[][] {{1,2,3,4},{5,6,7,8}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,283,"rivate double[][] d4 = new double[][] {{1},{2},{3},{4}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,284,"rivate double[][] d5 = new double[][] {{30},{70}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,286,ublic void testMultiply2() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,287,igMatrix m3 = new BigMatrixImpl(d3);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,288,igMatrix m4 = new BigMatrixImpl(d4);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,289,igMatrix m5 = new BigMatrixImpl(d5);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,290,"ssertClose(""m3*m4=m5"", m3.multiply(m4), m5, entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,293,** test isSingular */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,294,ublic void testIsSingular() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,295,igMatrixImpl m = new BigMatrixImpl(singular);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,296,"ssertTrue(""singular"",m.isSingular());"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,297, = new BigMatrixImpl(bigSingular);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,298,"ssertTrue(""big singular"",m.isSingular());"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,299, = new BigMatrixImpl(id);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,300,"ssertTrue(""identity nonsingular"",!m.isSingular());"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,301, = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,302,"ssertTrue(""testData nonsingular"",!m.isSingular());"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,305,** test inverse */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,306,ublic void testInverse() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,307,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,308,igMatrix mInv = new BigMatrixImpl(testDataInv);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,309,"ssertClose(""inverse"",mInv,m.inverse(),normTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,310,"ssertClose(""inverse^2"",m,m.inverse().inverse(),10E-12);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,312,/ Not square
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,313, = new BigMatrixImpl(testData2);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,314,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,315,.inverse();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,316,"ail(""Expecting InvalidMatrixException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,317, catch (InvalidMatrixException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,318,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,321,/ Singular
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,322, = new BigMatrixImpl(singular);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,323,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,324,.inverse();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,325,"ail(""Expecting InvalidMatrixException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,326, catch (InvalidMatrixException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,327,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,331,** test solve */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,332,ublic void testSolve() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,333,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,334,igMatrix mInv = new BigMatrixImpl(testDataInv);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,335,/ being a bit slothful here -- actually testing that X = A^-1 * B
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,336,"ssertClose(""inverse-operate"","
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,337,"sDouble(mInv.operate(asBigDecimal(testVector))),"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,338,"sDouble(m.solve(asBigDecimal(testVector))),"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,339,ormTolerance);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,340,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,341,sDouble(m.solve(asBigDecimal(testVector2)));
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,342,"ail(""expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,343, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,344,/ ignored
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,346,igMatrix bs = new BigMatrixImpl(bigSingular);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,347,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,348,s.solve(bs);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,349,"ail(""Expecting InvalidMatrixException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,350, catch (InvalidMatrixException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,351,/ ignored
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,353,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,354,.solve(bs);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,355,"ail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,356, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,357,/ ignored
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,359,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,360,ew BigMatrixImpl(testData2).solve(bs);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,361,"ail(""Expecting illegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,362, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,363,/ ignored
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,365,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,366,new BigMatrixImpl(testData2)).luDecompose();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,367,"ail(""Expecting InvalidMatrixException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,368, catch (InvalidMatrixException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,369,/ ignored
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,373,** test determinant */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,374,ublic void testDeterminant() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,375,igMatrix m = new BigMatrixImpl(bigSingular);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,376,"ssertEquals(""singular determinant"",0,m.getDeterminant().doubleValue(),0);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,377, = new BigMatrixImpl(detData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,378,"ssertEquals(""nonsingular test"",-3d,m.getDeterminant().doubleValue(),normTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,380,"/ Examples verified against R (version 1.8.1, Red Hat Linux 9)"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,381, = new BigMatrixImpl(detData2);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,382,"ssertEquals(""nonsingular R test 1"",-2d,m.getDeterminant().doubleValue(),normTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,383, = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,384,"ssertEquals(""nonsingular  R test 2"",-1d,m.getDeterminant().doubleValue(),normTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,386,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,387,ouble d = new BigMatrixImpl(testData2).getDeterminant().doubleValue();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,388,"ail(""Expecting InvalidMatrixException, got "" + d);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,389, catch (InvalidMatrixException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,390,/ ignored
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,394,** test trace */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,395,ublic void testTrace() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,396,igMatrix m = new BigMatrixImpl(id);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,397,"ssertEquals(""identity trace"",3d,m.getTrace().doubleValue(),entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,398, = new BigMatrixImpl(testData2);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,399,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,400,ouble t = m.getTrace().doubleValue();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,401,"ail(""Expecting NonSquareMatrixException, got "" + t);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,402, catch (NonSquareMatrixException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,403,/ ignored
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,407,** test sclarAdd */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,408,ublic void testScalarAdd() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,409,igMatrix m = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,410,"ssertClose(""scalar add"",new BigMatrixImpl(testDataPlus2),"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,411,".scalarAdd(new BigDecimal(2d)),entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,414,** test operate */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,415,ublic void testOperate() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,416,igMatrix m = new BigMatrixImpl(id);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,417,ouble[] x = asDouble(m.operate(asBigDecimal(testVector)));
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,418,"ssertClose(""identity operate"",testVector,x,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,419, = new BigMatrixImpl(bigSingular);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,420,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,421,sDouble(m.operate(asBigDecimal(testVector)));
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,422,"ail(""Expecting illegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,423, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,424,/ ignored
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,428,** test issue MATH-209 */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,429,ublic void testMath209() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,430,igMatrix a = new BigMatrixImpl(new BigDecimal[][] {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,431," new BigDecimal(1), new BigDecimal(2) },"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,432," new BigDecimal(3), new BigDecimal(4) },"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,433," new BigDecimal(5), new BigDecimal(6) }"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,434,", false);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,435,"igDecimal[] b = a.operate(new BigDecimal[] { new BigDecimal(1), new BigDecimal(1) });"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,436,"ssertEquals(a.getRowDimension(), b.length);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,437,"ssertEquals( 3.0, b[0].doubleValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,438,"ssertEquals( 7.0, b[1].doubleValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,439,"ssertEquals(11.0, b[2].doubleValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,442,** test transpose */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,443,ublic void testTranspose() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,444,igMatrix m = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,445,"ssertClose(""inverse-transpose"",m.inverse().transpose(),"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,446,".transpose().inverse(),normTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,447, = new BigMatrixImpl(testData2);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,448,igMatrix mt = new BigMatrixImpl(testData2T);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,449,"ssertClose(""transpose"",mt,m.transpose(),normTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,452,** test preMultiply by vector */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,453,ublic void testPremultiplyVector() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,454,igMatrix m = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,455,"ssertClose(""premultiply"",asDouble(m.preMultiply(asBigDecimal(testVector))),preMultTest,normTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,456, = new BigMatrixImpl(bigSingular);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,457,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,458,.preMultiply(asBigDecimal(testVector));
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,459,"ail(""expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,460, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,461,/ ignored
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,465,ublic void testPremultiply() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,466,igMatrix m3 = new BigMatrixImpl(d3);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,467,igMatrix m4 = new BigMatrixImpl(d4);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,468,igMatrix m5 = new BigMatrixImpl(d5);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,469,"ssertClose(""m3*m4=m5"", m4.preMultiply(m3), m5, entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,471,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,472,igMatrixImpl mInv = new BigMatrixImpl(testDataInv);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,473,igMatrixImpl identity = new BigMatrixImpl(id);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,474,ew BigMatrixImpl(testData2);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,475,"ssertClose(""inverse multiply"",m.preMultiply(mInv),"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,476,"dentity,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,477,"ssertClose(""inverse multiply"",mInv.preMultiply(m),"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,478,"dentity,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,479,"ssertClose(""identity multiply"",m.preMultiply(identity),"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,480,",entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,481,"ssertClose(""identity multiply"",identity.preMultiply(mInv),"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,482,"Inv,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,483,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,484,.preMultiply(new BigMatrixImpl(bigSingular));
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,485,"ail(""Expecting illegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,486, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,487,/ ignored
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,491,ublic void testGetVectors() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,492,igMatrix m = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,493,"ssertClose(""get row"",m.getRowAsDoubleArray(0),testDataRow1,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,494,"ssertClose(""get col"",m.getColumnAsDoubleArray(2),testDataCol3,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,495,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,496,.getRowAsDoubleArray(10);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,497,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,498, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,499,/ ignored
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,501,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,502,.getColumnAsDoubleArray(-1);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,503,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,504, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,505,/ ignored
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,509,ublic void testLUDecomposition() throws Exception {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,510,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,511,igMatrix lu = m.getLUMatrix();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,512,"ssertClose(""LU decomposition"", lu, new BigMatrixImpl(testDataLU), normTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,513,"erifyDecomposition(m, lu);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,514, = new BigMatrixImpl(luData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,515,u = m.getLUMatrix();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,516,"ssertClose(""LU decomposition"", lu, new BigMatrixImpl(luDataLUDecomposition), normTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,517,"erifyDecomposition(m, lu);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,518, = new BigMatrixImpl(testDataMinus);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,519,u = m.getLUMatrix();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,520,"erifyDecomposition(m, lu);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,521, = new BigMatrixImpl(id);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,522,u = m.getLUMatrix();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,523,"erifyDecomposition(m, lu);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,524,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,525, = new BigMatrixImpl(bigSingular); // singular
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,526,u = m.getLUMatrix();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,527,"ail(""Expecting InvalidMatrixException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,528, catch (InvalidMatrixException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,529,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,531,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,532, = new BigMatrixImpl(testData2);  // not square
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,533,u = m.getLUMatrix();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,534,"ail(""Expecting InvalidMatrixException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,535, catch (InvalidMatrixException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,536,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,541, test submatrix accessors
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,543,ublic void testSubMatrix() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,544,igMatrix m = new BigMatrixImpl(subTestData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,545,igMatrix mRows23Cols00 = new BigMatrixImpl(subRows23Cols00);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,546,igMatrix mRows00Cols33 = new BigMatrixImpl(subRows00Cols33);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,547,igMatrix mRows01Cols23 = new BigMatrixImpl(subRows01Cols23);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,548,igMatrix mRows02Cols13 = new BigMatrixImpl(subRows02Cols13);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,549,igMatrix mRows03Cols12 = new BigMatrixImpl(subRows03Cols12);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,550,igMatrix mRows03Cols123 = new BigMatrixImpl(subRows03Cols123);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,551,igMatrix mRows20Cols123 = new BigMatrixImpl(subRows20Cols123);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,552,igMatrix mRows31Cols31 = new BigMatrixImpl(subRows31Cols31);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,553,"ssertEquals(""Rows23Cols00"", mRows23Cols00,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,554,".getSubMatrix(2 , 3 , 0, 0));"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,555,"ssertEquals(""Rows00Cols33"", mRows00Cols33,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,556,".getSubMatrix(0 , 0 , 3, 3));"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,557,"ssertEquals(""Rows01Cols23"", mRows01Cols23,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,558,".getSubMatrix(0 , 1 , 2, 3));"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,559,"ssertEquals(""Rows02Cols13"", mRows02Cols13,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,560,".getSubMatrix(new int[] {0,2}, new int[] {1,3}));"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,561,"ssertEquals(""Rows03Cols12"", mRows03Cols12,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,562,".getSubMatrix(new int[] {0,3}, new int[] {1,2}));"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,563,"ssertEquals(""Rows03Cols123"", mRows03Cols123,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,564,".getSubMatrix(new int[] {0,3}, new int[] {1,2,3}));"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,565,"ssertEquals(""Rows20Cols123"", mRows20Cols123,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,566,".getSubMatrix(new int[] {2,0}, new int[] {1,2,3}));"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,567,"ssertEquals(""Rows31Cols31"", mRows31Cols31,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,568,".getSubMatrix(new int[] {3,1}, new int[] {3,1}));"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,569,"ssertEquals(""Rows31Cols31"", mRows31Cols31,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,570,".getSubMatrix(new int[] {3,1}, new int[] {3,1}));"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,572,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,573,".getSubMatrix(1,0,2,4);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,574,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,575, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,576,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,578,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,579,".getSubMatrix(-1,1,2,2);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,580,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,581, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,582,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,584,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,585,".getSubMatrix(1,0,2,2);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,586,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,587, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,588,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,590,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,591,".getSubMatrix(1,0,2,4);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,592,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,593, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,594,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,596,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,597,".getSubMatrix(new int[] {}, new int[] {0});"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,598,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,599, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,600,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,602,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,603,".getSubMatrix(new int[] {0}, new int[] {4});"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,604,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,605, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,606,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,610,ublic void testGetColumnMatrix() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,611,igMatrix m = new BigMatrixImpl(subTestData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,612,igMatrix mColumn1 = new BigMatrixImpl(subColumn1);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,613,igMatrix mColumn3 = new BigMatrixImpl(subColumn3);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,614,"ssertEquals(""Column1"", mColumn1,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,615,.getColumnMatrix(1));
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,616,"ssertEquals(""Column3"", mColumn3,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,617,.getColumnMatrix(3));
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,618,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,619,.getColumnMatrix(-1);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,620,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,621, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,622,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,624,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,625,.getColumnMatrix(4);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,626,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,627, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,628,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,632,ublic void testGetRowMatrix() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,633,igMatrix m = new BigMatrixImpl(subTestData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,634,igMatrix mRow0 = new BigMatrixImpl(subRow0);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,635,igMatrix mRow3 = new BigMatrixImpl(subRow3);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,636,"ssertEquals(""Row0"", mRow0,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,637,.getRowMatrix(0));
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,638,"ssertEquals(""Row3"", mRow3,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,639,.getRowMatrix(3));
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,640,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,641,.getRowMatrix(-1);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,642,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,643, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,644,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,646,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,647,.getRowMatrix(4);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,648,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,649, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,650,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,654,ublic void testEqualsAndHashCode() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,655,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,656,igMatrixImpl m1 = (BigMatrixImpl) m.copy();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,657,igMatrixImpl mt = (BigMatrixImpl) m.transpose();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,658,ssertTrue(m.hashCode() != mt.hashCode());
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,659,"ssertEquals(m.hashCode(), m1.hashCode());"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,660,"ssertEquals(m, m);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,661,"ssertEquals(m, m1);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,662,ssertFalse(m.equals(null));
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,663,ssertFalse(m.equals(mt));
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,664,ssertFalse(m.equals(new BigMatrixImpl(bigSingular)));
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,665,"/ Different scales make BigDecimals, so matrices unequal"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,666," = new BigMatrixImpl(new String[][] {{""2.0""}});"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,667,"1 = new BigMatrixImpl(new String[][] {{""2.00""}});"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,668,ssertTrue(m.hashCode() != m1.hashCode());
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,669,ssertFalse(m.equals(m1));
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,672,ublic void testToString() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,673,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,674,"ssertEquals(""BigMatrixImpl{{1,2,3},{2,5,3},{1,0,8}}"","
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,675,.toString());
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,676, = new BigMatrixImpl();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,677,"ssertEquals(""BigMatrixImpl{}"","
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,678,.toString());
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,681,ublic void testSetSubMatrix() throws Exception {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,682,igDecimal[][] detData3 =
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,683,atrixUtils.createBigMatrix(detData2).getData();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,684,igMatrixImpl m = new BigMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,685,".setSubMatrix(detData3,1,1);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,686,igMatrix expected = MatrixUtils.createBigMatrix
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,687,"new double[][] {{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,688,"ssertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,690,".setSubMatrix(detData3,0,0);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,691,xpected = MatrixUtils.createBigMatrix
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,692,"new double[][] {{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,693,"ssertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,695,igDecimal[][] testDataPlus3 =
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,696,atrixUtils.createBigMatrix(testDataPlus2).getData();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,697,".setSubMatrix(testDataPlus3,0,0);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,698,xpected = MatrixUtils.createBigMatrix
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,699,"new double[][] {{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,700,"ssertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,702,/ javadoc example
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,703,igMatrixImpl matrix = (BigMatrixImpl) MatrixUtils.createBigMatrix
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,704,"new double[][] {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 0, 1 , 2}});"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,705,"atrix.setSubMatrix(new BigDecimal[][] {{new BigDecimal(3),"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,706,"ew BigDecimal(4)}, {new BigDecimal(5), new BigDecimal(6)}}, 1, 1);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,707,xpected = MatrixUtils.createBigMatrix
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,708,"new BigDecimal[][] {{new BigDecimal(1), new BigDecimal(2),"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,709,"ew BigDecimal(3), new BigDecimal(4)}, {new BigDecimal(5),"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,710,"ew BigDecimal(3), new BigDecimal(4), new BigDecimal(8)},"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,711,"new BigDecimal(9), new BigDecimal(5) , new BigDecimal(6),"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,712,ew BigDecimal(2)}});
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,713,"ssertEquals(expected, matrix);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,715,/ dimension overflow
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,716,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,717,".setSubMatrix(matrix.getData(),1,1);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,718,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,719, catch (MatrixIndexException e) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,720,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,723,/ null
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,724,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,725,".setSubMatrix(null,1,1);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,726,"ail(""expecting NullPointerException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,727, catch (NullPointerException e) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,728,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,731,/ ragged
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,732,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,733,".setSubMatrix(new BigDecimal[][] {{new BigDecimal(1)},"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,734,"new BigDecimal(2), new BigDecimal(3)}}, 0, 0);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,735,"ail(""expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,736, catch (IllegalArgumentException e) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,737,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,740,/ empty
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,741,ry {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,742,".setSubMatrix(new BigDecimal[][] {{}}, 0, 0);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,743,"ail(""expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,744, catch (IllegalArgumentException e) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,745,/ expected
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,750,/--------------- -----------------Protected methods
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,752,** verifies that two matrices are close (1-norm) */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,753,"rotected void assertClose(String msg, BigMatrix m, BigMatrix n,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,754,ouble tolerance) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,755,"ssertTrue(msg,m.subtract(n).getNorm().doubleValue() < tolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,758,** verifies that two vectors are close (sup norm) */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,759,"rotected void assertClose(String msg, double[] m, double[] n,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,760,ouble tolerance) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,761,f (m.length != n.length) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,762,"ail(""vectors not same length"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,764,or (int i = 0; i < m.length; i++) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,765,"ssertEquals(msg + "" "" +  i + "" elements differ"","
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,766,"[i],n[i],tolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,770,** extracts the l  and u matrices from compact lu representation */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,771,"rotected void splitLU(BigMatrix lu, BigDecimal[][] lowerData, BigDecimal[][] upperData) throws InvalidMatrixException {"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,772,f (!lu.isSquare() || lowerData.length != lowerData[0].length || upperData.length != upperData[0].length ||
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,773,owerData.length != upperData.length
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,774,| lowerData.length != lu.getRowDimension()) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,775,"hrow new InvalidMatrixException(""incorrect dimensions"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,777,nt n = lu.getRowDimension();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,778,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,779,or (int j = 0; j < n; j++) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,780,f (j < i) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,781,"owerData[i][j] = lu.getEntry(i, j);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,782,pperData[i][j] = new BigDecimal(0);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,783, else if (i == j) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,784,owerData[i][j] = new BigDecimal(1);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,785,"pperData[i][j] = lu.getEntry(i, j);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,786, else {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,787,owerData[i][j] = new BigDecimal(0);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,788,"pperData[i][j] = lu.getEntry(i, j);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,794,** Returns the result of applying the given row permutation to the matrix */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,795,"rotected BigMatrix permuteRows(BigMatrix matrix, int[] permutation) {"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,796,f (!matrix.isSquare() || matrix.getRowDimension() != permutation.length) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,797,"hrow new IllegalArgumentException(""dimension mismatch"");"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,799,nt n = matrix.getRowDimension();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,800,nt m = matrix.getColumnDimension();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,801,igDecimal out[][] = new BigDecimal[m][n];
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,802,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,803,or (int j = 0; j < m; j++) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,804,"ut[i][j] = matrix.getEntry(permutation[i], j);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,807,eturn new BigMatrixImpl(out);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,810,** Extracts l and u matrices from lu and verifies that matrix = l times u modulo permutation */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,811,"rotected void verifyDecomposition(BigMatrix matrix, BigMatrix lu) throws Exception{"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,812,nt n = matrix.getRowDimension();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,813,igDecimal[][] lowerData = new BigDecimal[n][n];
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,814,igDecimal[][] upperData = new BigDecimal[n][n];
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,815,"plitLU(lu, lowerData, upperData);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,816,igMatrix lower =new BigMatrixImpl(lowerData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,817,igMatrix upper = new BigMatrixImpl(upperData);
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,818,nt[] permutation = ((BigMatrixImpl) matrix).getPermutation();
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,819,"igMatrix permuted = permuteRows(matrix, permutation);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,820,"ssertClose(""lu decomposition does not work"", permuted,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,821,"ower.multiply(upper), normTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,824,/    /** Useful for debugging */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,825,/    private void dumpMatrix(BigMatrix m) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,826,/          for (int i = 0; i < m.getRowDimension(); i++) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,827,"/              String os = """";"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,828,/              for (int j = 0; j < m.getColumnDimension(); j++) {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,829,"/                  os += m.getEntry(i, j) + "" "";"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,831,/              System.out.println(os);
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,27,import org.apache.commons.math.exception.OutOfRangeException;
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,28,import org.apache.commons.math.exception.ZeroException;
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,29,import org.apache.commons.math.exception.NumberIsTooSmallException;
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,419,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,420, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,422,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,423,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,425,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,426, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,428,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,429,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,436,"ail (""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,437, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,439,"fail (""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,440,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,497,"ail(""Expecting MatrixIndexException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,500,"fail(""Expecting OutOfRangeException or NumberIsTooSmallException or ZeroException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,499, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,502,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,503,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,504,throw e;
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,506,} catch (NumberIsTooSmallException e) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,507,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,508,throw e;
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,510,} catch (ZeroException e) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,513,"ail(""Expecting MatrixIndexException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,524,"fail(""Expecting OutOfRangeException or NumberIsTooSmallExceptiono r ZeroException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,526,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,527,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,528,throw e;
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,530,} catch (NumberIsTooSmallException e) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,531,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,532,throw e;
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,515, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,534,} catch (ZeroException e) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,571,"ail(""Expecting MatrixIndexException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,590,"fail(""Expecting OutOfRangeException or NumberIsTooSmallException or ZeroException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,573, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,592,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,593,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,594,throw e;
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,596,} catch (NumberIsTooSmallException e) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,597,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,598,throw e;
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,600,} catch (ZeroException e) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,590,"ail(""Expecting MatrixIndexException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,617,"fail(""Expecting OutOfRangeException or NumberIsTooSmallException or ZeroException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,619,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,620,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,621,throw e;
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,623,} catch (NumberIsTooSmallException e) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,624,if (reference != null) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,625,throw e;
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,592, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,627,} catch (ZeroException e) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,607,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,608, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,642,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,643,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,613,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,614, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,648,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,649,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,627,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,628, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,662,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,663,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,666,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,667, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,701,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,702,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,672,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,673, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,707,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,708,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,686,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,687, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,721,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,722,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,725,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,726, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,760,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,761,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,731,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,732, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,766,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,767,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,745,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,746, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,780,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,781,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,784,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,785, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,819,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,820,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,790,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,791, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,825,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,826,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,804,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,805, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,839,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,840,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,849,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,850, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,884,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,885,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,855,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,856, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,890,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,891,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,868,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,869, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,903,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,904,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,908,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,909, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,943,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,944,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,914,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,915, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,949,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,950,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,928,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,929, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,963,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,964,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1022,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1023, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1057,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1058,} catch (OutOfRangeException e) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1029,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1030, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1064,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1065,} catch (OutOfRangeException e) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1035,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1036, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1070,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1071,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,27,import org.apache.commons.math.exception.NullArgumentException;
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,28,import org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,86,"ail(""Expecting NullPointerException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,87, catch (NullPointerException ex) {
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,88,"fail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,89,} catch (NullArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,111,"ail(""Expecting NullPointerException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,112, catch (NullPointerException ex) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,113,/ expected
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,117,Deprecated
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,118,ublic void testCreateBigMatrix() {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,119,"ssertEquals(new BigMatrixImpl(testData),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,120,atrixUtils.createBigMatrix(testData));
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,121,"ssertEquals(new BigMatrixImpl(BigMatrixImplTest.asBigDecimal(testData), true),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,122,"atrixUtils.createBigMatrix(BigMatrixImplTest.asBigDecimal(testData), false));"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,123,"ssertEquals(new BigMatrixImpl(BigMatrixImplTest.asBigDecimal(testData), false),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,124,"atrixUtils.createBigMatrix(BigMatrixImplTest.asBigDecimal(testData), true));"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,125,"ssertEquals(new BigMatrixImpl(bigColMatrix),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,126,atrixUtils.createBigMatrix(bigColMatrix));
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,127,"ssertEquals(new BigMatrixImpl(stringColMatrix),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,128,atrixUtils.createBigMatrix(stringColMatrix));
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,129,ry {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,130,"atrixUtils.createBigMatrix(new double[][] {{1}, {1,2}});  // ragged"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,131,"ail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,132, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,133,/ expected
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,135,ry {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,136,"atrixUtils.createBigMatrix(new double[][] {{}, {}});  // no columns"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,137,"ail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,138, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,139,/ expected
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,141,ry {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,142,atrixUtils.createBigMatrix(nullMatrix);  // null
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,143,"ail(""Expecting NullPointerException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,144, catch (NullPointerException ex) {
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,113,"fail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,114,} catch (NullArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,154,"ail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,155, catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,124,"fail(""Expecting NotStrictlyPositiveException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,125,} catch (NotStrictlyPositiveException ex) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,160,"ail(""Expecting NullPointerException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,161, catch (NullPointerException ex) {
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,130,"fail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,131,} catch (NullArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,179,"ail(""Expecting NullPointerException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,180, catch (NullPointerException ex) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,181,/ expected
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,185,Deprecated
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,186,ublic void testCreateRowBigMatrix() {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,187,"ssertEquals(MatrixUtils.createRowBigMatrix(row),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,188,ew BigMatrixImpl(rowMatrix));
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,189,"ssertEquals(MatrixUtils.createRowBigMatrix(bigRow),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,190,ew BigMatrixImpl(bigRowMatrix));
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,191,"ssertEquals(MatrixUtils.createRowBigMatrix(stringRow),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,192,ew BigMatrixImpl(stringRowMatrix));
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,193,ry {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,194,atrixUtils.createRowBigMatrix(new double[] {});  // empty
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,195,"ail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,196, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,197,/ expected
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,199,ry {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,200,atrixUtils.createRowBigMatrix(nullDoubleArray);  // null
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,201,"ail(""Expecting NullPointerException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,202, catch (NullPointerException ex) {
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,149,"fail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,150,} catch (NullArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,218,"ail(""Expecting NullPointerException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,219, catch (NullPointerException ex) {
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,166,"fail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,167,} catch (NullArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,238,"ail(""Expecting NullPointerException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,239, catch (NullPointerException ex) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,240,/ expected
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,244,Deprecated
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,245,ublic void testCreateColumnBigMatrix() {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,246,"ssertEquals(MatrixUtils.createColumnBigMatrix(col),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,247,ew BigMatrixImpl(colMatrix));
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,248,"ssertEquals(MatrixUtils.createColumnBigMatrix(bigCol),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,249,ew BigMatrixImpl(bigColMatrix));
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,250,"ssertEquals(MatrixUtils.createColumnBigMatrix(stringCol),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,251,ew BigMatrixImpl(stringColMatrix));
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,253,ry {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,254,atrixUtils.createColumnBigMatrix(new double[] {});  // empty
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,255,"ail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,256, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,257,/ expected
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,259,ry {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,260,atrixUtils.createColumnBigMatrix(nullDoubleArray);  // null
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,261,"ail(""Expecting NullPointerException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,262, catch (NullPointerException ex) {
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,186,"fail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,187,} catch (NullArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,375, Verifies that the matrix is an identity matrix
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,377,Deprecated
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,378,rotected void checkIdentityBigMatrix(BigMatrix m) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,379,or (int i = 0; i < m.getRowDimension(); i++) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,380,or (int j =0; j < m.getColumnDimension(); j++) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,381,f (i == j) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,382,"ssertEquals(m.getEntry(i, j), BigMatrixImpl.ONE);"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,383, else {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,384,"ssertEquals(m.getEntry(i, j), BigMatrixImpl.ZERO);"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,390,Deprecated
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,391,ublic void testCreateBigIdentityMatrix() {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,392,heckIdentityBigMatrix(MatrixUtils.createBigIdentityMatrix(3));
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,393,heckIdentityBigMatrix(MatrixUtils.createBigIdentityMatrix(2));
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,394,heckIdentityBigMatrix(MatrixUtils.createBigIdentityMatrix(1));
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,395,ry {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,396,atrixUtils.createRealIdentityMatrix(0);
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,397,"ail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,398, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,399,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,15, limitations under the License.
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,17,ackage org.apache.commons.math.linear;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,19,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,21,mport org.apache.commons.math.TestUtils;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,22,mport org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,23,mport org.apache.commons.math.exception.MatrixDimensionMismatchException;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,26, Test cases for the {@link RealMatrixImpl} class.
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,28, @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,30,Deprecated
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,31,ublic final class RealMatrixImplTest extends TestCase {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,33,/ 3 x 3 identity matrix
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,34,"rotected double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,36,/ Test data for group operations
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,37,"rotected double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,38,"rotected double[][] testDataLU = {{2d, 5d, 3d}, {.5d, -2.5d, 6.5d}, {0.5d, 0.2d, .2d}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,39,"rotected double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,40,"rotected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,41,"-1d,0d,-8d} };"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,42,"rotected double[] testDataRow1 = {1d,2d,3d};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,43,"rotected double[] testDataCol3 = {3d,3d,8d};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,44,rotected double[][] testDataInv =
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,45," {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,46,"rotected double[] preMultTest = {8,12,33};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,47,"rotected double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,48,"rotected double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,49,rotected double[][] testDataPlusInv =
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,50," {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,52,/ lu decomposition tests
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,53,"rotected double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,54,"rotected double[][] luDataLUDecomposition = { {6d,9d,8d}, {0d,5d,7d},"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,55,"0.33333333333333,0d,0.33333333333333} };"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,57,/ singular matrices
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,58,"rotected double[][] singular = { {2d,3d}, {2d,3d} };"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,59,"rotected double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,60,"7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,61,"rotected double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,62,"rotected double[][] detData2 = { {1d, 3d}, {2d, 4d}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,64,/ vectors
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,65,"rotected double[] testVector = {1,2,3};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,66,"rotected double[] testVector2 = {1,2,3,4};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,68,/ submatrix accessor tests
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,69,"rotected double[][] subTestData = {{1, 2, 3, 4}, {1.5, 2.5, 3.5, 4.5},"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,70,"2, 4, 6, 8}, {4, 5, 6, 7}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,71,/ array selections
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,72,"rotected double[][] subRows02Cols13 = { {2, 4}, {4, 8}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,73,"rotected double[][] subRows03Cols12 = { {2, 3}, {5, 6}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,74,"rotected double[][] subRows03Cols123 = { {2, 3, 4} , {5, 6, 7}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,75,/ effective permutations
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,76,"rotected double[][] subRows20Cols123 = { {4, 6, 8} , {2, 3, 4}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,77,"rotected double[][] subRows31Cols31 = {{7, 5}, {4.5, 2.5}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,78,/ contiguous ranges
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,79,"rotected double[][] subRows01Cols23 = {{3,4} , {3.5, 4.5}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,80,"rotected double[][] subRows23Cols00 = {{2} , {4}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,81,rotected double[][] subRows00Cols33 = {{4}};
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,82,/ row matrices
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,83,"rotected double[][] subRow0 = {{1,2,3,4}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,84,"rotected double[][] subRow3 = {{4,5,6,7}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,85,/ column matrices
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,86,"rotected double[][] subColumn1 = {{2}, {2.5}, {4}, {5}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,87,"rotected double[][] subColumn3 = {{4}, {4.5}, {8}, {7}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,89,/ tolerances
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,90,rotected double entryTolerance = 10E-16;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,91,rotected double normTolerance = 10E-14;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,93,ublic RealMatrixImplTest(String name) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,94,uper(name);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,97,** test dimensions */
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,98,ublic void testDimensions() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,99,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,100,ealMatrixImpl m2 = new RealMatrixImpl(testData2);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,101,"ssertEquals(""testData row dimension"",3,m.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,102,"ssertEquals(""testData column dimension"",3,m.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,103,"ssertTrue(""testData is square"",m.isSquare());"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,104,"ssertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,105,"ssertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,106,"ssertTrue(""testData2 is not square"",!m2.isSquare());"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,109,** test copy functions */
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,110,ublic void testCopyFunctions() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,111,ealMatrixImpl m1 = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,112,ealMatrixImpl m2 = new RealMatrixImpl(m1.getData());
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,113,"ssertEquals(m2,m1);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,114,ealMatrixImpl m3 = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,115,"ealMatrixImpl m4 = new RealMatrixImpl(m3.getData(), false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,116,"ssertEquals(m4,m3);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,119,** test add */
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,120,ublic void testAdd() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,121,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,122,ealMatrixImpl mInv = new RealMatrixImpl(testDataInv);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,123,ealMatrix mPlusMInv = m.add(mInv);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,124,ouble[][] sumEntries = mPlusMInv.getData();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,125,or (int row = 0; row < m.getRowDimension(); row++) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,126,or (int col = 0; col < m.getColumnDimension(); col++) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,127,"ssertEquals(""sum entry entry"","
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,128,"estDataPlusInv[row][col],sumEntries[row][col],"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,129,ntryTolerance);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,134,** test add failure */
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,135,ublic void testAddFail() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,136,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,137,ealMatrixImpl m2 = new RealMatrixImpl(testData2);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,138,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,139,.add(m2);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,140,"ail(""IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,141, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,142,/ ignored
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,146,** test norm */
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,147,ublic void testNorm() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,148,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,149,ealMatrixImpl m2 = new RealMatrixImpl(testData2);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,150,"ssertEquals(""testData norm"",14d,m.getNorm(),entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,151,"ssertEquals(""testData2 norm"",7d,m2.getNorm(),entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,154,** test Frobenius norm */
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,155,ublic void testFrobeniusNorm() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,156,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,157,ealMatrixImpl m2 = new RealMatrixImpl(testData2);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,158,"ssertEquals(""testData Frobenius norm"", FastMath.sqrt(117.0), m.getFrobeniusNorm(), entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,159,"ssertEquals(""testData2 Frobenius norm"", FastMath.sqrt(52.0), m2.getFrobeniusNorm(), entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,162,** test m-n = m + -n */
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,163,ublic void testPlusMinus() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,164,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,165,ealMatrixImpl m2 = new RealMatrixImpl(testDataInv);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,166,"estUtils.assertEquals(""m-n = m + -n"",m.subtract(m2),"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,167,"2.scalarMultiply(-1d).add(m),entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,168,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,169,.subtract(new RealMatrixImpl(testData2));
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,170,"ail(""Expecting illegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,171, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,172,/ ignored
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,176,** test multiply */
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,177,ublic void testMultiply() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,178,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,179,ealMatrixImpl mInv = new RealMatrixImpl(testDataInv);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,180,ealMatrixImpl identity = new RealMatrixImpl(id);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,181,ealMatrixImpl m2 = new RealMatrixImpl(testData2);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,182,"estUtils.assertEquals(""inverse multiply"",m.multiply(mInv),"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,183,"dentity,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,184,"estUtils.assertEquals(""inverse multiply"",mInv.multiply(m),"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,185,"dentity,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,186,"estUtils.assertEquals(""identity multiply"",m.multiply(identity),"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,187,",entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,188,"estUtils.assertEquals(""identity multiply"",identity.multiply(mInv),"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,189,"Inv,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,190,"estUtils.assertEquals(""identity multiply"",m2.multiply(identity),"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,191,"2,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,192,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,193,.multiply(new RealMatrixImpl(bigSingular));
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,194,"ail(""Expecting illegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,195, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,196,/ ignored
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,200,/Additional Test for RealMatrixImplTest.testMultiply
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,202,"rivate double[][] d3 = new double[][] {{1,2,3,4},{5,6,7,8}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,203,"rivate double[][] d4 = new double[][] {{1},{2},{3},{4}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,204,"rivate double[][] d5 = new double[][] {{30},{70}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,206,ublic void testMultiply2() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,207,ealMatrix m3 = new RealMatrixImpl(d3);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,208,ealMatrix m4 = new RealMatrixImpl(d4);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,209,ealMatrix m5 = new RealMatrixImpl(d5);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,210,"estUtils.assertEquals(""m3*m4=m5"", m3.multiply(m4), m5, entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,213,** test trace */
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,214,ublic void testTrace() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,215,ealMatrix m = new RealMatrixImpl(id);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,216,"ssertEquals(""identity trace"",3d,m.getTrace(),entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,217, = new RealMatrixImpl(testData2);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,218,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,219,.getTrace();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,220,"ail(""Expecting NonSquareMatrixException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,221, catch (NonSquareMatrixException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,222,/ ignored
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,226,** test sclarAdd */
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,227,ublic void testScalarAdd() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,228,ealMatrix m = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,229,"estUtils.assertEquals(""scalar add"",new RealMatrixImpl(testDataPlus2),"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,230,".scalarAdd(2d),entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,233,** test operate */
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,234,ublic void testOperate() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,235,ealMatrix m = new RealMatrixImpl(id);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,236,"estUtils.assertEquals(""identity operate"", testVector,"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,237,".operate(testVector), entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,238,"estUtils.assertEquals(""identity operate"", testVector,"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,239,".operate(new ArrayRealVector(testVector)).getData(), entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,240, = new RealMatrixImpl(bigSingular);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,241,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,242,.operate(testVector);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,243,"ail(""Expecting illegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,244, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,245,/ ignored
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,249,** test issue MATH-209 */
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,250,ublic void testMath209() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,251,ealMatrix a = new RealMatrixImpl(new double[][] {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,252," 1, 2 }, { 3, 4 }, { 5, 6 }"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,253,", false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,254,"ouble[] b = a.operate(new double[] { 1, 1 });"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,255,"ssertEquals(a.getRowDimension(), b.length);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,256,"ssertEquals( 3.0, b[0], 1.0e-12);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,257,"ssertEquals( 7.0, b[1], 1.0e-12);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,258,"ssertEquals(11.0, b[2], 1.0e-12);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,261,** test transpose */
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,262,ublic void testTranspose() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,263,ealMatrix m = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,264,ealMatrix mIT = new LUDecompositionImpl(m).getSolver().getInverse().transpose();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,265,ealMatrix mTI = new LUDecompositionImpl(m.transpose()).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,266,"estUtils.assertEquals(""inverse-transpose"", mIT, mTI, normTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,267, = new RealMatrixImpl(testData2);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,268,ealMatrix mt = new RealMatrixImpl(testData2T);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,269,"estUtils.assertEquals(""transpose"",mt,m.transpose(),normTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,272,** test preMultiply by vector */
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,273,ublic void testPremultiplyVector() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,274,ealMatrix m = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,275,"estUtils.assertEquals(""premultiply"", m.preMultiply(testVector),"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,276,"reMultTest, normTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,277,"estUtils.assertEquals(""premultiply"", m.preMultiply(new ArrayRealVector(testVector).getData()),"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,278,"reMultTest, normTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,279, = new RealMatrixImpl(bigSingular);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,280,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,281,.preMultiply(testVector);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,282,"ail(""expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,283, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,284,/ ignored
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,288,ublic void testPremultiply() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,289,ealMatrix m3 = new RealMatrixImpl(d3);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,290,ealMatrix m4 = new RealMatrixImpl(d4);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,291,ealMatrix m5 = new RealMatrixImpl(d5);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,292,"estUtils.assertEquals(""m3*m4=m5"", m4.preMultiply(m3), m5, entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,294,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,295,ealMatrixImpl mInv = new RealMatrixImpl(testDataInv);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,296,ealMatrixImpl identity = new RealMatrixImpl(id);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,297,"estUtils.assertEquals(""inverse multiply"",m.preMultiply(mInv),"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,298,"dentity,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,299,"estUtils.assertEquals(""inverse multiply"",mInv.preMultiply(m),"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,300,"dentity,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,301,"estUtils.assertEquals(""identity multiply"",m.preMultiply(identity),"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,302,",entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,303,"estUtils.assertEquals(""identity multiply"",identity.preMultiply(mInv),"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,304,"Inv,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,305,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,306,.preMultiply(new RealMatrixImpl(bigSingular));
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,307,"ail(""Expecting illegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,308, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,309,/ ignored
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,313,ublic void testGetVectors() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,314,ealMatrix m = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,315,"estUtils.assertEquals(""get row"",m.getRow(0),testDataRow1,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,316,"estUtils.assertEquals(""get col"",m.getColumn(2),testDataCol3,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,317,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,318,.getRow(10);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,319,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,320, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,321,/ ignored
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,323,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,324,.getColumn(-1);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,325,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,326, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,327,/ ignored
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,331,ublic void testGetEntry() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,332,ealMatrix m = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,333,"ssertEquals(""get entry"",m.getEntry(0,1),2d,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,334,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,335,".getEntry(10, 4);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,336,"ail (""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,337, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,338,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,342,** test examples in user guide */
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,343,ublic void testExamples() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,344,/ Create a real matrix with two rows and three columns
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,345,"ouble[][] matrixData = { {1d,2d,3d}, {2d,5d,3d}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,346,ealMatrix m = new RealMatrixImpl(matrixData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,347,"/ One more with three rows, two columns"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,348,"ouble[][] matrixData2 = { {1d,2d}, {2d,5d}, {1d, 7d}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,349,ealMatrix n = new RealMatrixImpl(matrixData2);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,350,/ Now multiply m by n
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,351,ealMatrix p = m.multiply(n);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,352,"ssertEquals(2, p.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,353,"ssertEquals(2, p.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,354,/ Invert p
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,355,ealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,356,"ssertEquals(2, pInverse.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,357,"ssertEquals(2, pInverse.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,359,/ Solve example
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,360,"ouble[][] coefficientsData = {{2, 3, -2}, {-1, 7, 6}, {4, -3, -5}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,361,ealMatrix coefficients = new RealMatrixImpl(coefficientsData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,362,"ouble[] constants = {1, -2, 1};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,363,ouble[] solution = new LUDecompositionImpl(coefficients).getSolver().solve(constants);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,364,"ssertEquals(2 * solution[0] + 3 * solution[1] -2 * solution[2], constants[0], 1E-12);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,365,"ssertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2], constants[1], 1E-12);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,366,"ssertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,370,/ test submatrix accessors
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,371,ublic void testGetSubMatrix() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,372,ealMatrix m = new RealMatrixImpl(subTestData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,373,"heckGetSubMatrix(m, subRows23Cols00,  2 , 3 , 0, 0, false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,374,"heckGetSubMatrix(m, subRows00Cols33,  0 , 0 , 3, 3, false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,375,"heckGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,376,"heckGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,377,"heckGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,378,"heckGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,379,"heckGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,380,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,381,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,382,"heckGetSubMatrix(m, null,  1, 0, 2, 4, true);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,383,"heckGetSubMatrix(m, null, -1, 1, 2, 2, true);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,384,"heckGetSubMatrix(m, null,  1, 0, 2, 2, true);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,385,"heckGetSubMatrix(m, null,  1, 0, 2, 4, true);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,386,"heckGetSubMatrix(m, null, new int[] {},    new int[] { 0 }, true);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,387,"heckGetSubMatrix(m, null, new int[] { 0 }, new int[] { 4 }, true);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,390,"rivate void checkGetSubMatrix(RealMatrix m, double[][] reference,"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,391,"nt startRow, int endRow, int startColumn, int endColumn,"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,392,oolean mustFail) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,393,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,394,"ealMatrix sub = m.getSubMatrix(startRow, endRow, startColumn, endColumn);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,395,"ssertEquals(new RealMatrixImpl(reference), sub);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,396,f (mustFail) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,397,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,399, catch (MatrixIndexException e) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,400,f (!mustFail) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,401,hrow e;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,406,"rivate void checkGetSubMatrix(RealMatrix m, double[][] reference,"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,407,"nt[] selectedRows, int[] selectedColumns,"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,408,oolean mustFail) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,409,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,410,"ealMatrix sub = m.getSubMatrix(selectedRows, selectedColumns);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,411,"ssertEquals(new RealMatrixImpl(reference), sub);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,412,f (mustFail) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,413,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,415, catch (MatrixIndexException e) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,416,f (!mustFail) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,417,hrow e;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,422,ublic void testCopySubMatrix() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,423,ealMatrix m = new RealMatrixImpl(subTestData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,424,"heckCopy(m, subRows23Cols00,  2 , 3 , 0, 0, false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,425,"heckCopy(m, subRows00Cols33,  0 , 0 , 3, 3, false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,426,"heckCopy(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,427,"heckCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,428,"heckCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,429,"heckCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,430,"heckCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,431,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,432,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,434,"heckCopy(m, null,  1, 0, 2, 4, true);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,435,"heckCopy(m, null, -1, 1, 2, 2, true);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,436,"heckCopy(m, null,  1, 0, 2, 2, true);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,437,"heckCopy(m, null,  1, 0, 2, 4, true);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,438,"heckCopy(m, null, new int[] {},    new int[] { 0 }, true);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,439,"heckCopy(m, null, new int[] { 0 }, new int[] { 4 }, true);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,442,"rivate void checkCopy(RealMatrix m, double[][] reference,"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,443,"nt startRow, int endRow, int startColumn, int endColumn,"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,444,oolean mustFail) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,445,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,446,ouble[][] sub = (reference == null) ?
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,447,ew double[1][1] :
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,448,ew double[reference.length][reference[0].length];
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,449,".copySubMatrix(startRow, endRow, startColumn, endColumn, sub);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,450,"ssertEquals(new RealMatrixImpl(reference), new RealMatrixImpl(sub));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,451,f (mustFail) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,452,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,454, catch (MatrixIndexException e) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,455,f (!mustFail) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,456,hrow e;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,461,"rivate void checkCopy(RealMatrix m, double[][] reference,"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,462,"nt[] selectedRows, int[] selectedColumns,"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,463,oolean mustFail) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,464,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,465,ouble[][] sub = (reference == null) ?
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,466,ew double[1][1] :
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,467,ew double[reference.length][reference[0].length];
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,468,".copySubMatrix(selectedRows, selectedColumns, sub);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,469,"ssertEquals(new RealMatrixImpl(reference), new RealMatrixImpl(sub));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,470,f (mustFail) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,471,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,473, catch (MatrixIndexException e) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,474,f (!mustFail) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,475,hrow e;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,480,ublic void testGetRowMatrix() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,481,ealMatrix m = new RealMatrixImpl(subTestData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,482,ealMatrix mRow0 = new RealMatrixImpl(subRow0);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,483,ealMatrix mRow3 = new RealMatrixImpl(subRow3);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,484,"ssertEquals(""Row0"", mRow0,"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,485,.getRowMatrix(0));
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,486,"ssertEquals(""Row3"", mRow3,"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,487,.getRowMatrix(3));
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,488,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,489,.getRowMatrix(-1);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,490,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,491, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,492,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,494,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,495,.getRowMatrix(4);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,496,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,497, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,498,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,502,ublic void testSetRowMatrix() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,503,ealMatrix m = new RealMatrixImpl(subTestData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,504,ealMatrix mRow3 = new RealMatrixImpl(subRow3);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,505,"ssertNotSame(mRow3, m.getRowMatrix(0));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,506,".setRowMatrix(0, mRow3);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,507,"ssertEquals(mRow3, m.getRowMatrix(0));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,508,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,509,".setRowMatrix(-1, mRow3);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,510,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,511, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,512,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,514,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,515,".setRowMatrix(0, m);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,516,"ail(""Expecting MatrixDimensionMismatchException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,517, catch (MatrixDimensionMismatchException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,518,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,522,ublic void testGetColumnMatrix() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,523,ealMatrix m = new RealMatrixImpl(subTestData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,524,ealMatrix mColumn1 = new RealMatrixImpl(subColumn1);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,525,ealMatrix mColumn3 = new RealMatrixImpl(subColumn3);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,526,"ssertEquals(""Column1"", mColumn1,"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,527,.getColumnMatrix(1));
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,528,"ssertEquals(""Column3"", mColumn3,"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,529,.getColumnMatrix(3));
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,530,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,531,.getColumnMatrix(-1);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,532,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,533, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,534,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,536,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,537,.getColumnMatrix(4);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,538,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,539, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,540,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,544,ublic void testSetColumnMatrix() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,545,ealMatrix m = new RealMatrixImpl(subTestData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,546,ealMatrix mColumn3 = new RealMatrixImpl(subColumn3);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,547,"ssertNotSame(mColumn3, m.getColumnMatrix(1));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,548,".setColumnMatrix(1, mColumn3);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,549,"ssertEquals(mColumn3, m.getColumnMatrix(1));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,550,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,551,".setColumnMatrix(-1, mColumn3);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,552,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,553, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,554,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,556,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,557,".setColumnMatrix(0, m);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,558,"ail(""Expecting MatrixDimensionMismatchException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,559, catch (MatrixDimensionMismatchException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,560,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,564,ublic void testGetRowVector() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,565,ealMatrix m = new RealMatrixImpl(subTestData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,566,ealVector mRow0 = new ArrayRealVector(subRow0[0]);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,567,ealVector mRow3 = new ArrayRealVector(subRow3[0]);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,568,"ssertEquals(""Row0"", mRow0, m.getRowVector(0));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,569,"ssertEquals(""Row3"", mRow3, m.getRowVector(3));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,570,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,571,.getRowVector(-1);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,572,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,573, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,574,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,576,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,577,.getRowVector(4);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,578,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,579, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,580,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,584,ublic void testSetRowVector() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,585,ealMatrix m = new RealMatrixImpl(subTestData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,586,ealVector mRow3 = new ArrayRealVector(subRow3[0]);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,587,"ssertNotSame(mRow3, m.getRowMatrix(0));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,588,".setRowVector(0, mRow3);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,589,"ssertEquals(mRow3, m.getRowVector(0));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,590,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,591,".setRowVector(-1, mRow3);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,592,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,593, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,594,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,596,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,597,".setRowVector(0, new ArrayRealVector(5));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,598,"ail(""Expecting MatrixDimensionMismatchException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,599, catch (MatrixDimensionMismatchException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,600,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,604,ublic void testGetColumnVector() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,605,ealMatrix m = new RealMatrixImpl(subTestData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,606,ealVector mColumn1 = columnToVector(subColumn1);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,607,ealVector mColumn3 = columnToVector(subColumn3);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,608,"ssertEquals(""Column1"", mColumn1, m.getColumnVector(1));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,609,"ssertEquals(""Column3"", mColumn3, m.getColumnVector(3));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,610,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,611,.getColumnVector(-1);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,612,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,613, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,614,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,616,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,617,.getColumnVector(4);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,618,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,619, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,620,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,624,ublic void testSetColumnVector() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,625,ealMatrix m = new RealMatrixImpl(subTestData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,626,ealVector mColumn3 = columnToVector(subColumn3);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,627,"ssertNotSame(mColumn3, m.getColumnVector(1));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,628,".setColumnVector(1, mColumn3);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,629,"ssertEquals(mColumn3, m.getColumnVector(1));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,630,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,631,".setColumnVector(-1, mColumn3);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,632,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,633, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,634,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,636,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,637,".setColumnVector(0, new ArrayRealVector(5));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,638,"ail(""Expecting MatrixDimensionMismatchException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,639, catch (MatrixDimensionMismatchException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,640,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,644,rivate RealVector columnToVector(double[][] column) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,645,ouble[] data = new double[column.length];
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,646,or (int i = 0; i < data.length; ++i) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,647,ata[i] = column[i][0];
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,649,"eturn new ArrayRealVector(data, false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,652,ublic void testGetRow() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,653,ealMatrix m = new RealMatrixImpl(subTestData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,654,"heckArrays(subRow0[0], m.getRow(0));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,655,"heckArrays(subRow3[0], m.getRow(3));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,656,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,657,.getRow(-1);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,658,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,659, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,660,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,662,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,663,.getRow(4);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,664,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,665, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,666,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,670,ublic void testSetRow() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,671,ealMatrix m = new RealMatrixImpl(subTestData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,672,ssertTrue(subRow3[0][0] != m.getRow(0)[0]);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,673,".setRow(0, subRow3[0]);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,674,"heckArrays(subRow3[0], m.getRow(0));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,675,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,676,".setRow(-1, subRow3[0]);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,677,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,678, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,679,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,681,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,682,".setRow(0, new double[5]);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,683,"ail(""Expecting MatrixDimensionMismatchException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,684, catch (MatrixDimensionMismatchException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,685,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,689,ublic void testGetColumn() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,690,ealMatrix m = new RealMatrixImpl(subTestData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,691,ouble[] mColumn1 = columnToArray(subColumn1);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,692,ouble[] mColumn3 = columnToArray(subColumn3);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,693,"heckArrays(mColumn1, m.getColumn(1));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,694,"heckArrays(mColumn3, m.getColumn(3));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,695,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,696,.getColumn(-1);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,697,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,698, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,699,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,701,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,702,.getColumn(4);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,703,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,704, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,705,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,709,ublic void testSetColumn() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,710,ealMatrix m = new RealMatrixImpl(subTestData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,711,ouble[] mColumn3 = columnToArray(subColumn3);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,712,ssertTrue(mColumn3[0] != m.getColumn(1)[0]);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,713,".setColumn(1, mColumn3);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,714,"heckArrays(mColumn3, m.getColumn(1));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,715,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,716,".setColumn(-1, mColumn3);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,717,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,718, catch (MatrixIndexException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,719,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,721,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,722,".setColumn(0, new double[5]);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,723,"ail(""Expecting MatrixDimensionMismatchException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,724, catch (MatrixDimensionMismatchException ex) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,725,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,729,rivate double[] columnToArray(double[][] column) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,730,ouble[] data = new double[column.length];
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,731,or (int i = 0; i < data.length; ++i) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,732,ata[i] = column[i][0];
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,734,eturn data;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,737,"rivate void checkArrays(double[] expected, double[] actual) {"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,738,"ssertEquals(expected.length, actual.length);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,739,or (int i = 0; i < expected.length; ++i) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,740,"ssertEquals(expected[i], actual[i]);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,744,ublic void testEqualsAndHashCode() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,745,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,746,ealMatrixImpl m1 = (RealMatrixImpl) m.copy();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,747,ealMatrixImpl mt = (RealMatrixImpl) m.transpose();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,748,ssertTrue(m.hashCode() != mt.hashCode());
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,749,"ssertEquals(m.hashCode(), m1.hashCode());"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,750,"ssertEquals(m, m);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,751,"ssertEquals(m, m1);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,752,ssertFalse(m.equals(null));
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,753,ssertFalse(m.equals(mt));
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,754,ssertFalse(m.equals(new RealMatrixImpl(bigSingular)));
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,757,ublic void testToString() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,758,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,759,"ssertEquals(""RealMatrixImpl{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,760,.toString());
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,761, = new RealMatrixImpl();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,762,"ssertEquals(""RealMatrixImpl{}"","
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,763,.toString());
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,766,ublic void testSetSubMatrix() throws Exception {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,767,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,768,".setSubMatrix(detData2,1,1);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,769,ealMatrix expected = MatrixUtils.createRealMatrix
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,770,"new double[][] {{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,771,"ssertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,773,".setSubMatrix(detData2,0,0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,774,xpected = MatrixUtils.createRealMatrix
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,775,"new double[][] {{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,776,"ssertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,778,".setSubMatrix(testDataPlus2,0,0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,779,xpected = MatrixUtils.createRealMatrix
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,780,"new double[][] {{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,781,"ssertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,783,/ dimension overflow
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,784,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,785,".setSubMatrix(testData,1,1);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,786,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,787, catch (MatrixIndexException e) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,788,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,790,/ dimension underflow
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,791,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,792,".setSubMatrix(testData,-1,1);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,793,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,794, catch (MatrixIndexException e) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,795,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,797,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,798,".setSubMatrix(testData,1,-1);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,799,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,800, catch (MatrixIndexException e) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,801,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,804,/ null
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,805,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,806,".setSubMatrix(null,1,1);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,807,"ail(""expecting NullPointerException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,808, catch (NullPointerException e) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,809,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,811,ealMatrixImpl m2 = new RealMatrixImpl();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,812,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,813,"2.setSubMatrix(testData,0,1);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,814,"ail(""expecting IllegalStateException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,815, catch (IllegalStateException e) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,816,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,818,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,819,"2.setSubMatrix(testData,1,0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,820,"ail(""expecting IllegalStateException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,821, catch (IllegalStateException e) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,822,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,825,/ ragged
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,826,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,827,".setSubMatrix(new double[][] {{1}, {2, 3}}, 0, 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,828,"ail(""expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,829, catch (IllegalArgumentException e) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,830,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,833,/ empty
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,834,ry {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,835,".setSubMatrix(new double[][] {{}}, 0, 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,836,"ail(""expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,837, catch (IllegalArgumentException e) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,838,/ expected
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,843,ublic void testWalk() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,844,nt rows    = 150;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,845,nt columns = 75;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,847,"ealMatrix m = new RealMatrixImpl(rows, columns);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,848,.walkInRowOrder(new SetVisitor());
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,849,etVisitor getVisitor = new GetVisitor();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,850,.walkInOptimizedOrder(getVisitor);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,851,"ssertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,853," = new RealMatrixImpl(rows, columns);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,854,".walkInRowOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,855,etVisitor = new GetVisitor();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,856,".walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,857,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,858,or (int i = 0; i < rows; ++i) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,859,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,860,"ssertEquals(0.0, m.getEntry(i, columns - 1), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,862,or (int j = 0; j < columns; ++j) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,863,"ssertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,864,"ssertEquals(0.0, m.getEntry(rows - 1, j), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,867," = new RealMatrixImpl(rows, columns);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,868,.walkInColumnOrder(new SetVisitor());
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,869,etVisitor = new GetVisitor();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,870,.walkInOptimizedOrder(getVisitor);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,871,"ssertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,873," = new RealMatrixImpl(rows, columns);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,874,".walkInColumnOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,875,etVisitor = new GetVisitor();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,876,".walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,877,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,878,or (int i = 0; i < rows; ++i) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,879,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,880,"ssertEquals(0.0, m.getEntry(i, columns - 1), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,882,or (int j = 0; j < columns; ++j) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,883,"ssertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,884,"ssertEquals(0.0, m.getEntry(rows - 1, j), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,887," = new RealMatrixImpl(rows, columns);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,888,.walkInOptimizedOrder(new SetVisitor());
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,889,etVisitor = new GetVisitor();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,890,.walkInRowOrder(getVisitor);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,891,"ssertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,893," = new RealMatrixImpl(rows, columns);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,894,".walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,895,etVisitor = new GetVisitor();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,896,".walkInRowOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,897,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,898,or (int i = 0; i < rows; ++i) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,899,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,900,"ssertEquals(0.0, m.getEntry(i, columns - 1), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,902,or (int j = 0; j < columns; ++j) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,903,"ssertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,904,"ssertEquals(0.0, m.getEntry(rows - 1, j), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,907," = new RealMatrixImpl(rows, columns);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,908,.walkInOptimizedOrder(new SetVisitor());
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,909,etVisitor = new GetVisitor();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,910,.walkInColumnOrder(getVisitor);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,911,"ssertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,913," = new RealMatrixImpl(rows, columns);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,914,".walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,915,etVisitor = new GetVisitor();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,916,".walkInColumnOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,917,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,918,or (int i = 0; i < rows; ++i) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,919,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,920,"ssertEquals(0.0, m.getEntry(i, columns - 1), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,922,or (int j = 0; j < columns; ++j) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,923,"ssertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,924,"ssertEquals(0.0, m.getEntry(rows - 1, j), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,929,ublic void testSerial()  {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,930,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,931,"ssertEquals(m,TestUtils.serializeAndRecover(m));"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,935,rivate static class SetVisitor extends DefaultRealMatrixChangingVisitor {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,936,Override
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,937,"ublic double visit(int i, int j, double value) {"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,938,eturn i + j / 1024.0;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,942,rivate static class GetVisitor extends DefaultRealMatrixPreservingVisitor {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,943,rivate int count = 0;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,944,Override
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,945,"ublic void visit(int i, int j, double value) {"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,946,+count;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,947,"ssertEquals(i + j / 1024.0, value, 0.0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,949,ublic int getCount() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,950,eturn count;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,954,/--------------- -----------------Protected methods
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,956,** extracts the l  and u matrices from compact lu representation */
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,957,"rotected void splitLU(RealMatrix lu, double[][] lowerData, double[][] upperData)  {"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,958,f (!lu.isSquare() ||
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,959,owerData.length != lowerData[0].length ||
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,960,pperData.length != upperData[0].length ||
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,961,owerData.length != upperData.length ||
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,962,owerData.length != lu.getRowDimension()) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,963,"hrow new IllegalArgumentException(""incorrect dimensions"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,965,nt n = lu.getRowDimension();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,966,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,967,or (int j = 0; j < n; j++) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,968,f (j < i) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,969,"owerData[i][j] = lu.getEntry(i, j);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,970,pperData[i][j] = 0d;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,971, else if (i == j) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,972,owerData[i][j] = 1d;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,973,"pperData[i][j] = lu.getEntry(i, j);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,974, else {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,975,owerData[i][j] = 0d;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,976,"pperData[i][j] = lu.getEntry(i, j);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,982,** Returns the result of applying the given row permutation to the matrix */
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,983,"rotected RealMatrix permuteRows(RealMatrix matrix, int[] permutation) {"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,984,f (!matrix.isSquare() || matrix.getRowDimension() != permutation.length) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,985,"hrow new IllegalArgumentException(""dimension mismatch"");"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,987,nt n = matrix.getRowDimension();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,988,nt m = matrix.getColumnDimension();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,989,ouble out[][] = new double[m][n];
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,990,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,991,or (int j = 0; j < m; j++) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,992,"ut[i][j] = matrix.getEntry(permutation[i], j);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,995,eturn new RealMatrixImpl(out);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,998,/    /** Useful for debugging */
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,999,/    private void dumpMatrix(RealMatrix m) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,1000,/          for (int i = 0; i < m.getRowDimension(); i++) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,1001,"/              String os = """";"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,1002,/              for (int j = 0; j < m.getColumnDimension(); j++) {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,1003,"/                  os += m.getEntry(i, j) + "" "";"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,1005,/              System.out.println(os);
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,22,import org.apache.commons.math.exception.OutOfRangeException;
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,23,import org.apache.commons.math.exception.ZeroException;
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,24,import org.apache.commons.math.exception.NumberIsTooSmallException;
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,327,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,328, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,330,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,331,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,333,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,334, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,336,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,337,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,344,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,345, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,347,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,348,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,411,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,412, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,414,"fail(""Expecting NumberIsTooSmallException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,415,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,417,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,418, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,420,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,421,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,423,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,424, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,426,"fail(""Expecting NumberIsTooSmallException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,427,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,429,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,430, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,432,"fail(""Expecting NumberIsTooSmallException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,433,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,435,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,436, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,438,"fail(""Expecting ZeroException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,439,} catch (ZeroException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,441,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,442, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,444,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,445,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,455,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,456, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,458,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,459,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,461,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,462, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,464,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,465,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,475,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,476, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,478,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,479,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,481,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,482, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,484,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,485,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,495,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,496, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,498,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,499,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,501,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,502, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,504,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,505,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,515,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,516, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,518,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,519,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,521,"ail(""Expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,522, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,524,"fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,525,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,585,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,586, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,588,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,589,} catch (OutOfRangeException e) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,592,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,593, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,595,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,596,} catch (OutOfRangeException e) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,598,"ail(""expecting MatrixIndexException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,599, catch (MatrixIndexException e) {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,601,"fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,602,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,28,import org.apache.commons.math.exception.OutOfRangeException;
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,639,"ail(""MatrixIndexException expected"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,640, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,640,"fail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,641,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,649,"ail(""MatrixIndexException expected"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,650, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,650,"fail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,651,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,660,"ail(""MatrixIndexException expected"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,661, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,661,"fail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,662,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,671,"ail(""MatrixIndexException expected"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,672, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,672,"fail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,673,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,682,"ail(""MatrixIndexException expected"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,683, catch (MatrixIndexException ex) {
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,683,"fail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,684,} catch (OutOfRangeException ex) {

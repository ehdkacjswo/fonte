is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,92,final int m = matrix.getColumnDimension();
False,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,93,inal int m = lu.length;
False,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,108,inal double[] luColumnCol = new double[m];
False,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,109,or (int i = 0; i < m; i++) {
False,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,110,uColumnCol[i] = lu[i][col];
False,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,118,um -= luRow[i] * luColumnCol[i];
True,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,114,sum -= luRow[i] * lu[i][col];
False,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,121,uColumnCol[row] = sum;
False,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,131,um -= luRow[i] * luColumnCol[i];
True,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,126,sum -= luRow[i] * lu[i][col];
False,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,134,uColumnCol[row] = sum;
False,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,144,f (FastMath.abs(luColumnCol[max]) < singularityThreshold) {
True,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,138,if (FastMath.abs(lu[max][col]) < singularityThreshold) {
True,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,145,double tmp = 0;
False,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,154,inal double tmp = luMax[i];
True,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,149,tmp = luMax[i];
False,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,158,inal int temp = pivot[max];
True,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,src/main/java/org/apache/commons/math3/linear/LUDecomposition.java,153,int temp = pivot[max];

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,25, @version $Revision: 1.16 $ $Date: 2004/06/02 00:15:16 $
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,25,* @version $Revision: 1.17 $ $Date: 2004/06/06 16:38:05 $
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,27,ublic class ExponentialDistributionImpl
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,28,"mplements ExponentialDistribution, Serializable  {"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,27,public class ExponentialDistributionImpl extends AbstractContinuousDistribution
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,28,"implements ExponentialDistribution, Serializable {"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,98,* @throws IllegalArgumentException if p < 0 or p > 1.
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,99,ublic double inverseCumulativeProbability(double p) throws MathException{
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,100,public double inverseCumulativeProbability(double p) throws MathException {
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,103,et = Double.NaN;
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,104,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,105,"(""probability argument must be between 0 and 1 (inclusive)"");"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,114," For this disbution, X, this method returns P(x0 &lt; X &lt; x1)."
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,115, @param x0 the lower bound
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,116, @param x1 the upper bound
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,117, @return the cumulative probability.
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,118, @throws MathException if the cumulative probability can not be
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,119,            computed due to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,116,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,117,* bracket a CDF root.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,119,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,120,"* @return domain value lower bound, i.e."
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,121,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,123,protected double getDomainLowerBound(double p) {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,124,return 0;
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,128,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,129,* bracket a CDF root.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,131,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,132,"* @return domain value upper bound, i.e."
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,133,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,135,protected double getDomainUpperBound(double p) {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,136,// NOTE: exponential is skewed to the left
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,137,"// NOTE: therefore, P(X < &mu;) > .5"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,139,if (p < .5) {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,140,// use mean
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,141,return getMean();
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,142,} else {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,143,// use max
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,144,return Double.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,149,"* Access the initial domain value, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,150,* bracket a CDF root.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,152,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,153,* @return initial domain value
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,121,"ublic double cumulativeProbability(double x0, double x1) throws MathException{"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,122,eturn cumulativeProbability(x1) - cumulativeProbability(x0);
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,155,protected double getInitialDomain(double p) {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,156,// TODO: try to improve on this estimate
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,157,"// Exponential is skewed to the left, therefore, P(X < &mu;) > .5"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,158,if (p < .5) {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,159,// use 1/2 mean
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,160,return getMean() * .5;
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,161,} else {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,162,// use mean
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,163,return getMean();

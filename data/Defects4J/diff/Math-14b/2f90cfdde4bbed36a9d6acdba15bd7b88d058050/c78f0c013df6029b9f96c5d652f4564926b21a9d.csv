is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/random/SynchronizedRandomGenerator.java,src/main/java/org/apache/commons/math3/random/SynchronizedRandomGenerator.java,85,eturn wrapped.nextInt();
True,src/main/java/org/apache/commons/math3/random/SynchronizedRandomGenerator.java,src/main/java/org/apache/commons/math3/random/SynchronizedRandomGenerator.java,85,return wrapped.nextInt(n);
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,17,package org.apache.commons.math3.random;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,19,import java.util.List;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,20,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,21,import java.util.Arrays;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,22,import java.util.concurrent.TimeUnit;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,23,import java.util.concurrent.Executors;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,24,import java.util.concurrent.ExecutorService;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,25,import java.util.concurrent.Callable;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,26,import java.util.concurrent.Future;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,27,import java.util.concurrent.ExecutionException;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,29,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,30,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,32,public class SynchronizedRandomGeneratorTest {
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,33,private final int numberOfThreads = 5;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,34,private final int numberOfGenerators = 5;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,35,private final int numberOfSamples = 100000;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,37,@Test
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,38,public void testAdapter() {
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,39,final int seed = 12345;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,40,final RandomGenerator orig = new MersenneTwister(seed);
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,41,final RandomGenerator wrap
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,42,= new SynchronizedRandomGenerator(new MersenneTwister(seed));
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,44,final int bSize = 67;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,45,final byte[] bOrig = new byte[bSize];
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,46,final byte[] bWrap = new byte[bSize];
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,48,for (int i = 0; i < 100; i++) {
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,49,orig.nextBytes(bOrig);
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,50,wrap.nextBytes(bWrap);
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,51,for (int k = 0; k < bSize; k++) {
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,52,"Assert.assertEquals(bOrig[k], bWrap[k]);"
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,55,"Assert.assertEquals(orig.nextInt(), wrap.nextInt());"
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,57,final int range = (i + 1) * 89;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,58,"Assert.assertEquals(orig.nextInt(range), wrap.nextInt(range));"
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,60,"Assert.assertEquals(orig.nextLong(), wrap.nextLong());"
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,61,"Assert.assertEquals(orig.nextBoolean(), wrap.nextBoolean());"
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,62,"Assert.assertEquals(orig.nextFloat(), wrap.nextFloat(), 0);"
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,63,"Assert.assertEquals(orig.nextDouble(), wrap.nextDouble(), 0);"
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,64,"Assert.assertEquals(orig.nextGaussian(), wrap.nextGaussian(), 0);"
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,69,@Test
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,70,public void testMath899Sync() throws Throwable {
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,71,double[] v = null;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,72,try {
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,73,// Running the test several times in order to decrease the
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,74,// probability that a non-thread-safe code did not trigger
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,75,// a concurrency problem.
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,76,for (int i = 0; i < 10; i++) {
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,77,"v = doTestMath899(true, numberOfThreads, numberOfGenerators, numberOfSamples);"
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,79,} catch (InterruptedException e) {
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,80,Assert.fail(e.getMessage());
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,81,} catch (ExecutionException e) {
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,82,throw e.getCause();
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,87,* @param sync Whether to use a synchronizing wrapper.
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,89,"private double[] doTestMath899(final boolean sync,"
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,90,"final int numThreads,"
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,91,"final int numGenerators,"
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,92,final int numSamples)
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,93,"throws InterruptedException,"
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,94,ExecutionException {
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,95,final RandomGenerator rng = new MersenneTwister();
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,96,final RandomGenerator wrapper = sync ? new SynchronizedRandomGenerator(rng) : rng;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,98,final List<Callable<Double>> tasks = new ArrayList<Callable<Double>>();
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,99,for (int i = 0; i < numGenerators; i++) {
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,100,tasks.add(new Callable<Double>() {
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,101,public Double call() {
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,102,Double lastValue = 0d;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,103,for (int j = 0; j < numSamples; j++) {
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,104,lastValue = wrapper.nextGaussian();
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,106,return lastValue;
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,111,final ExecutorService exec = Executors.newFixedThreadPool(numThreads);
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,112,final List<Future<Double>> results = exec.invokeAll(tasks);
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,114,final double[] values = new double[numGenerators];
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,115,for (int i = 0; i < numGenerators; i++) {
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,116,values[i] = results.get(i).get();
True,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java,118,return values;

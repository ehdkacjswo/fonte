is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,18,package org.apache.commons.math.estimation;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,20,import java.util.Arrays;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,22,import org.apache.commons.math.linear.InvalidMatrixException;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,23,import org.apache.commons.math.linear.MatrixUtils;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,24,import org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,25,import org.apache.commons.math.linear.decomposition.LUDecompositionImpl;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,28,* Base class for implementing estimators.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,29,* <p>This base class handles the boilerplates methods associated to thresholds
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,30,"* settings, jacobian and error estimation.</p>"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,31,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,32,* @since 1.2
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,33,"* @deprecated as of 2.0, everything in package org.apache.commons.math.estimation has"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,34,* been deprecated and replaced by package org.apache.commons.math.optimization.general
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,37,@Deprecated
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,38,public abstract class AbstractEstimator implements Estimator {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,40,/** Default maximal number of cost evaluations allowed. */
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,41,public static final int DEFAULT_MAX_COST_EVALUATIONS = 100;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,44,* Build an abstract estimator for least squares problems.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,45,* <p>The maximal number of cost evaluations allowed is set
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,46,* to its default value {@link #DEFAULT_MAX_COST_EVALUATIONS}.</p>
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,48,protected AbstractEstimator() {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,49,setMaxCostEval(DEFAULT_MAX_COST_EVALUATIONS);
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,53,* Set the maximal number of cost evaluations allowed.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,55,* @param maxCostEval maximal number of cost evaluations allowed
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,56,* @see #estimate
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,58,public final void setMaxCostEval(int maxCostEval) {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,59,this.maxCostEval = maxCostEval;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,63,* Get the number of cost evaluations.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,65,* @return number of cost evaluations
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,67,public final int getCostEvaluations() {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,68,return costEvaluations;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,72,* Get the number of jacobian evaluations.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,74,* @return number of jacobian evaluations
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,76,public final int getJacobianEvaluations() {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,77,return jacobianEvaluations;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,81,* Update the jacobian matrix.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,83,protected void updateJacobian() {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,84,incrementJacobianEvaluationsCounter();
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,85,"Arrays.fill(jacobian, 0);"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,86,"for (int i = 0, index = 0; i < rows; i++) {"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,87,WeightedMeasurement wm = measurements[i];
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,88,double factor = -Math.sqrt(wm.getWeight());
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,89,for (int j = 0; j < cols; ++j) {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,90,jacobian[index++] = factor * wm.getPartial(parameters[j]);
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,96,* Increment the jacobian evaluations counter.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,98,protected final void incrementJacobianEvaluationsCounter() {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,99,++jacobianEvaluations;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,103,* Update the residuals array and cost function value.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,104,* @exception EstimationException if the number of cost evaluations
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,105,* exceeds the maximum allowed
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,107,protected void updateResidualsAndCost()
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,108,throws EstimationException {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,110,if (++costEvaluations > maxCostEval) {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,111,"throw new EstimationException(""maximal number of evaluations exceeded ({0})"","
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,112,maxCostEval);
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,115,cost = 0;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,116,"for (int i = 0, index = 0; i < rows; i++, index += cols) {"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,117,WeightedMeasurement wm = measurements[i];
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,118,double residual = wm.getResidual();
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,119,residuals[i] = Math.sqrt(wm.getWeight()) * residual;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,120,cost += wm.getWeight() * residual * residual;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,122,cost = Math.sqrt(cost);
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,127,* Get the Root Mean Square value.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,128,"* Get the Root Mean Square value, i.e. the root of the arithmetic"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,129,* mean of the square of all weighted residuals. This is related to the
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,130,* criterion that is minimized by the estimator as follows: if
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,131,"* <em>c</em> if the criterion, and <em>n</em> is the number of"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,132,"* measurements, then the RMS is <em>sqrt (c/n)</em>."
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,134,* @param problem estimation problem
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,135,* @return RMS value
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,137,public double getRMS(EstimationProblem problem) {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,138,WeightedMeasurement[] wm = problem.getMeasurements();
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,139,double criterion = 0;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,140,for (int i = 0; i < wm.length; ++i) {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,141,double residual = wm[i].getResidual();
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,142,criterion += wm[i].getWeight() * residual * residual;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,144,return Math.sqrt(criterion / wm.length);
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,148,* Get the Chi-Square value.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,149,* @param problem estimation problem
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,150,* @return chi-square value
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,152,public double getChiSquare(EstimationProblem problem) {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,153,WeightedMeasurement[] wm = problem.getMeasurements();
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,154,double chiSquare = 0;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,155,for (int i = 0; i < wm.length; ++i) {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,156,double residual = wm[i].getResidual();
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,157,chiSquare += residual * residual / wm[i].getWeight();
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,159,return chiSquare;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,163,* Get the covariance matrix of unbound estimated parameters.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,164,* @param problem estimation problem
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,165,* @return covariance matrix
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,166,* @exception EstimationException if the covariance matrix
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,167,* cannot be computed (singular problem)
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,169,public double[][] getCovariances(EstimationProblem problem)
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,170,throws EstimationException {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,172,// set up the jacobian
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,173,updateJacobian();
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,175,"// compute transpose(J).J, avoiding building big intermediate matrices"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,176,final int rows = problem.getMeasurements().length;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,177,final int cols = problem.getUnboundParameters().length;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,178,final int max  = cols * rows;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,179,double[][] jTj = new double[cols][cols];
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,180,for (int i = 0; i < cols; ++i) {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,181,for (int j = i; j < cols; ++j) {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,182,double sum = 0;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,183,for (int k = 0; k < max; k += cols) {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,184,sum += jacobian[k + i] * jacobian[k + j];
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,186,jTj[i][j] = sum;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,187,jTj[j][i] = sum;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,191,try {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,192,// compute the covariances matrix
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,193,RealMatrix inverse =
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,194,new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,195,return inverse.getData();
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,196,} catch (InvalidMatrixException ime) {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,197,"throw new EstimationException(""unable to compute covariances: singular problem"");"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,203,* Guess the errors in unbound estimated parameters.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,204,"* <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,205,* @param problem estimation problem
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,206,* @return errors in estimated parameters
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,207,* @exception EstimationException if the covariances matrix cannot be computed
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,208,* or the number of degrees of freedom is not positive (number of measurements
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,209,* lesser or equal to number of parameters)
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,211,public double[] guessParametersErrors(EstimationProblem problem)
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,212,throws EstimationException {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,213,int m = problem.getMeasurements().length;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,214,int p = problem.getUnboundParameters().length;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,215,if (m <= p) {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,216,throw new EstimationException(
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,217,"""no degrees of freedom ({0} measurements, {1} parameters)"","
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,218,"m, p);"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,220,double[] errors = new double[problem.getUnboundParameters().length];
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,221,final double c = Math.sqrt(getChiSquare(problem) / (m - p));
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,222,double[][] covar = getCovariances(problem);
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,223,for (int i = 0; i < errors.length; ++i) {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,224,errors[i] = Math.sqrt(covar[i][i]) * c;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,226,return errors;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,230,* Initialization of the common parts of the estimation.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,231,* <p>This method <em>must</em> be called at the start
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,232,* of the {@link #estimate(EstimationProblem) estimate}
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,233,* method.</p>
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,234,* @param problem estimation problem to solve
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,236,protected void initializeEstimate(EstimationProblem problem) {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,238,// reset counters
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,239,costEvaluations     = 0;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,240,jacobianEvaluations = 0;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,242,// retrieve the equations and the parameters
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,243,measurements = problem.getMeasurements();
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,244,parameters   = problem.getUnboundParameters();
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,246,// arrays shared with the other private methods
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,247,rows      = measurements.length;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,248,cols      = parameters.length;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,249,jacobian  = new double[rows * cols];
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,250,residuals = new double[rows];
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,252,cost = Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,257,* Solve an estimation problem.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,259,* <p>The method should set the parameters of the problem to several
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,260,* trial values until it reaches convergence. If this method returns
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,261,"* normally (i.e. without throwing an exception), then the best"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,262,* estimate of the parameters can be retrieved from the problem
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,263,"* itself, through the {@link EstimationProblem#getAllParameters"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,264,* EstimationProblem.getAllParameters} method.</p>
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,266,* @param problem estimation problem to solve
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,267,* @exception EstimationException if the problem cannot be solved
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,270,public abstract void estimate(EstimationProblem problem)
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,271,throws EstimationException;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,273,/** Array of measurements. */
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,274,protected WeightedMeasurement[] measurements;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,276,/** Array of parameters. */
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,277,protected EstimatedParameter[] parameters;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,280,* Jacobian matrix.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,281,* <p>This matrix is in canonical form just after the calls to
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,282,"* {@link #updateJacobian()}, but may be modified by the solver"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,283,* in the derived class (the {@link LevenbergMarquardtEstimator
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,284,* Levenberg-Marquardt estimator} does this).</p>
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,286,protected double[] jacobian;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,288,/** Number of columns of the jacobian matrix. */
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,289,protected int cols;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,291,/** Number of rows of the jacobian matrix. */
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,292,protected int rows;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,294,/** Residuals array.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,295,* <p>This array is in canonical form just after the calls to
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,296,"* {@link #updateJacobian()}, but may be modified by the solver"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,297,* in the derived class (the {@link LevenbergMarquardtEstimator
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,298,* Levenberg-Marquardt estimator} does this).</p>
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,300,protected double[] residuals;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,302,/** Cost value (square root of the sum of the residuals). */
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,303,protected double cost;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,305,/** Maximal allowed number of cost evaluations. */
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,306,private int maxCostEval;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,308,/** Number of cost evaluations. */
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,309,private int costEvaluations;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,311,/** Number of jacobian evaluations. */
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,312,private int jacobianEvaluations;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,18,package org.apache.commons.math.estimation;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,22,/** This class represents the estimated parameters of an estimation problem.
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,24,"* <p>The parameters of an estimation problem have a name, a value and"
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,25,* a bound flag. The value of bound parameters is considered trusted
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,26,"* and the solvers should not adjust them. On the other hand, the"
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,27,* solvers should adjust the value of unbounds parameters until they
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,28,* satisfy convergence criterions specific to each solver.</p>
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,30,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,31,* @since 1.2
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,32,"* @deprecated as of 2.0, everything in package org.apache.commons.math.estimation has"
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,33,* been deprecated and replaced by package org.apache.commons.math.optimization.general
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,36,@Deprecated
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,37,public class EstimatedParameter
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,38,implements Serializable {
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,40,/** Simple constructor.
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,41,"* Build an instance from a first estimate of the parameter,"
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,42,* initially considered unbound.
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,43,* @param name name of the parameter
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,44,* @param firstEstimate first estimate of the parameter
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,46,"public EstimatedParameter(String name, double firstEstimate) {"
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,47,this.name = name;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,48,estimate  = firstEstimate;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,49,bound     = false;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,52,/** Simple constructor.
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,53,* Build an instance from a first estimate of the parameter and a
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,54,* bound flag
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,55,* @param name name of the parameter
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,56,* @param firstEstimate first estimate of the parameter
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,57,"* @param bound flag, should be true if the parameter is bound"
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,59,"public EstimatedParameter(String name,"
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,60,"double firstEstimate,"
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,61,boolean bound) {
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,62,this.name  = name;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,63,estimate   = firstEstimate;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,64,this.bound = bound;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,67,/** Copy constructor.
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,68,* Build a copy of a parameter
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,69,* @param parameter instance to copy
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,71,public EstimatedParameter(EstimatedParameter parameter) {
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,72,name     = parameter.name;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,73,estimate = parameter.estimate;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,74,bound    = parameter.bound;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,77,/** Set a new estimated value for the parameter.
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,78,* @param estimate new estimate for the parameter
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,80,public void setEstimate(double estimate) {
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,81,this.estimate = estimate;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,84,/** Get the current estimate of the parameter
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,85,* @return current estimate
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,87,public double getEstimate() {
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,88,return estimate;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,91,/** get the name of the parameter
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,92,* @return parameter name
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,94,public String getName() {
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,95,return name;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,98,/** Set the bound flag of the parameter
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,99,* @param bound this flag should be set to true if the parameter is
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,100,* bound (i.e. if it should not be adjusted by the solver).
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,102,public void setBound(boolean bound) {
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,103,this.bound = bound;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,106,/** Check if the parameter is bound
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,107,* @return true if the parameter is bound */
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,108,public boolean isBound() {
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,109,return bound;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,112,/** Name of the parameter */
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,113,private   String  name;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,115,/** Current value of the parameter */
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,116,protected double  estimate;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,118,/** Indicator for bound parameters
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,119,* (ie parameters that should not be estimated)
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,121,private   boolean bound;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,123,/** Serializable version identifier */
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,124,private static final long serialVersionUID = -555440800213416949L;
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,18,package org.apache.commons.math.estimation;
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,20,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,23,* This class represents exceptions thrown by the estimation solvers.
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,25,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,26,* @since 1.2
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,27,"* @deprecated as of 2.0, everything in package org.apache.commons.math.estimation has"
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,28,* been deprecated and replaced by package org.apache.commons.math.optimization.general
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,31,@Deprecated
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,32,public class EstimationException
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,33,extends MathException {
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,35,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,36,private static final long serialVersionUID = -573038581493881337L;
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,39,* Simple constructor.
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,40,* Build an exception by translating and formating a message
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,41,* @param specifier format specifier (to be translated)
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,42,* @param parts to insert in the format (no translation)
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,44,"public EstimationException(String specifier, Object ... parts) {"
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/estimation/EstimationException.java,45,"super(specifier, parts);"
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,18,package org.apache.commons.math.estimation;
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,21,* This interface represents an estimation problem.
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,23,* <p>This interface should be implemented by all real estimation
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,24,* problems before they can be handled by the estimators through the
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,25,* {@link Estimator#estimate Estimator.estimate} method.</p>
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,27,"* <p>An estimation problem, as seen by a solver is a set of"
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,28,* parameters and a set of measurements. The parameters are adjusted
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,29,* during the estimation through the {@link #getUnboundParameters
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,30,* getUnboundParameters} and {@link EstimatedParameter#setEstimate
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,31,* EstimatedParameter.setEstimate} methods. The measurements both have
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,32,* a measured value which is generally fixed at construction and a
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,33,* theoretical value which depends on the model and hence varies as
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,34,* the parameters are adjusted. The purpose of the solver is to reduce
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,35,"* the residual between these values, it can retrieve the measurements"
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,36,* through the {@link #getMeasurements getMeasurements} method.</p>
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,38,* @see Estimator
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,39,* @see WeightedMeasurement
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,41,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,42,* @since 1.2
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,43,"* @deprecated as of 2.0, everything in package org.apache.commons.math.estimation has"
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,44,* been deprecated and replaced by package org.apache.commons.math.optimization.general
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,47,@Deprecated
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,48,public interface EstimationProblem {
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,50,* Get the measurements of an estimation problem.
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,51,* @return measurements
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,53,public WeightedMeasurement[] getMeasurements();
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,56,* Get the unbound parameters of the problem.
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,57,* @return unbound parameters
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,59,public EstimatedParameter[] getUnboundParameters();
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,62,* Get all the parameters of the problem.
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,63,* @return parameters
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/estimation/EstimationProblem.java,65,public EstimatedParameter[] getAllParameters();
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,18,package org.apache.commons.math.estimation;
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,21,* This interface represents solvers for estimation problems.
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,23,* <p>The classes which are devoted to solve estimation problems
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,24,* should implement this interface. The problems which can be handled
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,25,* should implement the {@link EstimationProblem} interface which
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,26,* gather all the information needed by the solver.</p>
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,28,* <p>The interface is composed only of the {@link #estimate estimate}
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,29,* method.</p>
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,31,* @see EstimationProblem
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,33,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,34,* @since 1.2
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,35,"* @deprecated as of 2.0, everything in package org.apache.commons.math.estimation has"
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,36,* been deprecated and replaced by package org.apache.commons.math.optimization.general
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,39,@Deprecated
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,40,public interface Estimator {
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,43,* Solve an estimation problem.
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,45,* <p>The method should set the parameters of the problem to several
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,46,* trial values until it reaches convergence. If this method returns
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,47,"* normally (i.e. without throwing an exception), then the best"
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,48,* estimate of the parameters can be retrieved from the problem
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,49,"* itself, through the {@link EstimationProblem#getAllParameters"
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,50,* EstimationProblem.getAllParameters} method.</p>
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,52,* @param problem estimation problem to solve
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,53,* @exception EstimationException if the problem cannot be solved
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,56,public void estimate(EstimationProblem problem)
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,57,throws EstimationException;
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,60,* Get the Root Mean Square value.
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,61,"* Get the Root Mean Square value, i.e. the root of the arithmetic"
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,62,* mean of the square of all weighted residuals. This is related to the
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,63,* criterion that is minimized by the estimator as follows: if
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,64,"* <em>c</em> is the criterion, and <em>n</em> is the number of"
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,65,"* measurements, then the RMS is <em>sqrt (c/n)</em>."
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,66,* @see #guessParametersErrors(EstimationProblem)
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,68,* @param problem estimation problem
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,69,* @return RMS value
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,71,public double getRMS(EstimationProblem problem);
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,74,* Get the covariance matrix of estimated parameters.
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,75,* @param problem estimation problem
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,76,* @return covariance matrix
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,77,* @exception EstimationException if the covariance matrix
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,78,* cannot be computed (singular problem)
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,80,public double[][] getCovariances(EstimationProblem problem)
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,81,throws EstimationException;
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,84,* Guess the errors in estimated parameters.
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,85,* @see #getRMS(EstimationProblem)
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,86,* @param problem estimation problem
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,87,* @return errors in estimated parameters
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,88,* @exception EstimationException if the error cannot be guessed
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,90,public double[] guessParametersErrors(EstimationProblem problem)
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/estimation/Estimator.java,91,throws EstimationException;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,18,package org.apache.commons.math.estimation;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,22,import org.apache.commons.math.linear.InvalidMatrixException;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,23,import org.apache.commons.math.linear.MatrixUtils;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,24,import org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,25,import org.apache.commons.math.linear.RealVector;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,26,import org.apache.commons.math.linear.RealVectorImpl;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,27,import org.apache.commons.math.linear.decomposition.LUDecompositionImpl;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,30,* This class implements a solver for estimation problems.
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,32,* <p>This class solves estimation problems using a weighted least
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,33,* squares criterion on the measurement residuals. It uses a
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,34,* Gauss-Newton algorithm.</p>
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,36,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,37,* @since 1.2
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,38,"* @deprecated as of 2.0, everything in package org.apache.commons.math.estimation has"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,39,* been deprecated and replaced by package org.apache.commons.math.optimization.general
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,42,@Deprecated
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,43,public class GaussNewtonEstimator extends AbstractEstimator implements Serializable {
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,45,/** Serializable version identifier */
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,46,private static final long serialVersionUID = 5485001826076289109L;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,48,/** Default threshold for cost steady state detection. */
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,49,private static final double DEFAULT_STEADY_STATE_THRESHOLD = 1.0e-6;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,51,/** Default threshold for cost convergence. */
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,52,private static final double DEFAULT_CONVERGENCE = 1.0e-6;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,54,/** Threshold for cost steady state detection. */
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,55,private double steadyStateThreshold;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,57,/** Threshold for cost convergence. */
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,58,private double convergence;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,60,/** Simple constructor with default settings.
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,61,* <p>
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,62,* The estimator is built with default values for all settings.
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,63,* </p>
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,64,* @see #DEFAULT_STEADY_STATE_THRESHOLD
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,65,* @see #DEFAULT_CONVERGENCE
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,66,* @see AbstractEstimator#DEFAULT_MAX_COST_EVALUATIONS
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,68,public GaussNewtonEstimator() {
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,69,this.steadyStateThreshold = DEFAULT_STEADY_STATE_THRESHOLD;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,70,this.convergence          = DEFAULT_CONVERGENCE;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,74,* Simple constructor.
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,76,* <p>This constructor builds an estimator and stores its convergence
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,77,* characteristics.</p>
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,79,* <p>An estimator is considered to have converged whenever either
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,80,* the criterion goes below a physical threshold under which
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,81,* improvements are considered useless or when the algorithm is
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,82,* unable to improve it (even if it is still high). The first
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,83,* condition that is met stops the iterations.</p>
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,85,* <p>The fact an estimator has converged does not mean that the
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,86,* model accurately fits the measurements. It only means no better
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,87,"* solution can be found, it does not mean this one is good. Such an"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,88,* analysis is left to the caller.</p>
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,90,* <p>If neither conditions are fulfilled before a given number of
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,91,"* iterations, the algorithm is considered to have failed and an"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,92,* {@link EstimationException} is thrown.</p>
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,94,* @param maxCostEval maximal number of cost evaluations allowed
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,95,* @param convergence criterion threshold below which we do not need
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,96,* to improve the criterion anymore
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,97,"* @param steadyStateThreshold steady state detection threshold, the"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,98,* problem has converged has reached a steady state if
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,99,* <code>Math.abs(J<sub>n</sub> - J<sub>n-1</sub>) &lt;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,100,"* J<sub>n</sub> &times convergence</code>, where <code>J<sub>n</sub></code>"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,101,* and <code>J<sub>n-1</sub></code> are the current and preceding criterion
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,102,* values (square sum of the weighted residuals of considered measurements).
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,104,"public GaussNewtonEstimator(final int maxCostEval, final double convergence,"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,105,final double steadyStateThreshold) {
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,106,setMaxCostEval(maxCostEval);
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,107,this.steadyStateThreshold = steadyStateThreshold;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,108,this.convergence          = convergence;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,112,* Set the convergence criterion threshold.
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,113,* @param convergence criterion threshold below which we do not need
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,114,* to improve the criterion anymore
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,116,public void setConvergence(final double convergence) {
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,117,this.convergence = convergence;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,121,* Set the steady state detection threshold.
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,122,* <p>
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,123,* The problem has converged has reached a steady state if
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,124,* <code>Math.abs(J<sub>n</sub> - J<sub>n-1</sub>) &lt;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,125,"* J<sub>n</sub> &times convergence</code>, where <code>J<sub>n</sub></code>"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,126,* and <code>J<sub>n-1</sub></code> are the current and preceding criterion
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,127,* values (square sum of the weighted residuals of considered measurements).
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,128,* </p>
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,129,* @param steadyStateThreshold steady state detection threshold
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,131,public void setSteadyStateThreshold(final double steadyStateThreshold) {
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,132,this.steadyStateThreshold = steadyStateThreshold;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,136,* Solve an estimation problem using a least squares criterion.
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,138,* <p>This method set the unbound parameters of the given problem
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,139,* starting from their current values through several iterations. At
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,140,"* each step, the unbound parameters are changed in order to"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,141,* minimize a weighted least square criterion based on the
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,142,* measurements of the problem.</p>
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,144,* <p>The iterations are stopped either when the criterion goes
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,145,* below a physical threshold under which improvement are considered
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,146,* useless or when the algorithm is unable to improve it (even if it
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,147,* is still high). The first condition that is met stops the
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,148,* iterations. If the convergence it not reached before the maximum
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,149,"* number of iterations, an {@link EstimationException} is"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,150,* thrown.</p>
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,152,* @param problem estimation problem to solve
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,153,* @exception EstimationException if the problem cannot be solved
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,155,* @see EstimationProblem
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,158,public void estimate(EstimationProblem problem)
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,159,throws EstimationException {
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,161,initializeEstimate(problem);
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,163,// work matrices
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,164,double[] grad             = new double[parameters.length];
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,165,RealVectorImpl bDecrement = new RealVectorImpl(parameters.length);
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,166,double[] bDecrementData   = bDecrement.getDataRef();
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,167,"RealMatrix wGradGradT     = MatrixUtils.createRealMatrix(parameters.length, parameters.length);"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,169,// iterate until convergence is reached
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,170,double previous = Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,171,do {
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,173,// build the linear problem
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,174,incrementJacobianEvaluationsCounter();
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,175,RealVector b = new RealVectorImpl(parameters.length);
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,176,"RealMatrix a = MatrixUtils.createRealMatrix(parameters.length, parameters.length);"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,177,for (int i = 0; i < measurements.length; ++i) {
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,178,if (! measurements [i].isIgnored()) {
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,180,double weight   = measurements[i].getWeight();
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,181,double residual = measurements[i].getResidual();
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,183,// compute the normal equation
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,184,for (int j = 0; j < parameters.length; ++j) {
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,185,grad[j] = measurements[i].getPartial(parameters[j]);
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,186,bDecrementData[j] = weight * residual * grad[j];
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,189,// build the contribution matrix for measurement i
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,190,for (int k = 0; k < parameters.length; ++k) {
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,191,double gk = grad[k];
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,192,for (int l = 0; l < parameters.length; ++l) {
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,193,"wGradGradT.setEntry(k, l, weight * gk * grad[l]);"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,197,// update the matrices
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,198,a = a.add(wGradGradT);
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,199,b = b.add(bDecrement);
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,204,try {
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,206,// solve the linearized least squares problem
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,207,RealVector dX = new LUDecompositionImpl(a).getSolver().solve(b);
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,209,// update the estimated parameters
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,210,for (int i = 0; i < parameters.length; ++i) {
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,211,parameters[i].setEstimate(parameters[i].getEstimate() + dX.getEntry(i));
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,214,} catch(InvalidMatrixException e) {
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,215,"throw new EstimationException(""unable to solve: singular problem"");"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,219,previous = cost;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,220,updateResidualsAndCost();
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,222,} while ((getCostEvaluations() < 2) ||
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,223,(Math.abs(previous - cost) > (cost * steadyStateThreshold) &&
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,224,(Math.abs(cost) > convergence)));
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,17,package org.apache.commons.math.estimation;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,19,import java.io.Serializable;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,20,import java.util.Arrays;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,24,* This class solves a least squares problem.
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,26,* <p>This implementation <em>should</em> work even for over-determined systems
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,27,* (i.e. systems having more variables than equations). Over-determined systems
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,28,* are solved by ignoring the variables which have the smallest impact according
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,29,* to their jacobian column norm. Only the rank of the matrix and some loop bounds
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,30,* are changed to implement this.</p>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,32,* <p>The resolution engine is a simple translation of the MINPACK <a
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,33,"* href=""http://www.netlib.org/minpack/lmder.f"">lmder</a> routine with minor"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,34,* changes. The changes include the over-determined resolution and the Q.R.
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,35,* decomposition which has been rewritten following the algorithm described in the
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,36,* P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,37,"* appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986. The"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,38,* redistribution policy for MINPACK is available <a
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,39,"* href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for convenience, it"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,40,* is reproduced below.</p>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,42,"* <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,43,* <tr><td>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,44,*    Minpack Copyright Notice (1999) University of Chicago.
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,45,*    All rights reserved
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,46,* </td></tr>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,47,* <tr><td>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,48,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,49,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,50,* are met:
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,51,* <ol>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,52,*  <li>Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,53,"*      notice, this list of conditions and the following disclaimer.</li>"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,54,* <li>Redistributions in binary form must reproduce the above
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,55,"*     copyright notice, this list of conditions and the following"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,56,*     disclaimer in the documentation and/or other materials provided
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,57,*     with the distribution.</li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,58,"* <li>The end-user documentation included with the redistribution, if any,"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,59,*     must include the following acknowledgment:
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,60,*     <code>This product includes software developed by the University of
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,61,"*           Chicago, as Operator of Argonne National Laboratory.</code>"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,62,"*     Alternately, this acknowledgment may appear in the software itself,"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,63,*     if and wherever such third-party acknowledgments normally appear.</li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,64,"* <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,65,"*     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,66,"*     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,67,"*     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,68,"*     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,69,"*     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,70,"*     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,71,"*     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,72,"*     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,73,"*     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,74,*     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,75,"*     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,76,*     BE CORRECTED.</strong></li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,77,* <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,78,"*     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,79,"*     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,80,"*     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,81,"*     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,82,"*     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,83,"*     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,84,"*     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,85,*     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,86,*     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,87,* <ol></td></tr>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,88,* </table>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,90,* @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran)
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,91,* @author Burton S. Garbow (original fortran)
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,92,* @author Kenneth E. Hillstrom (original fortran)
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,93,* @author Jorge J. More (original fortran)
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,95,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,96,* @since 1.2
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,97,"* @deprecated as of 2.0, everything in package org.apache.commons.math.estimation has"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,98,* been deprecated and replaced by package org.apache.commons.math.optimization.general
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,101,@Deprecated
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,102,public class LevenbergMarquardtEstimator extends AbstractEstimator implements Serializable {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,105,* Build an estimator for least squares problems.
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,106,* <p>The default values for the algorithm settings are:
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,107,*   <ul>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,108,*    <li>{@link #setInitialStepBoundFactor initial step bound factor}: 100.0</li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,109,*    <li>{@link #setMaxCostEval maximal cost evaluations}: 1000</li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,110,*    <li>{@link #setCostRelativeTolerance cost relative tolerance}: 1.0e-10</li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,111,*    <li>{@link #setParRelativeTolerance parameters relative tolerance}: 1.0e-10</li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,112,*    <li>{@link #setOrthoTolerance orthogonality tolerance}: 1.0e-10</li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,113,*   </ul>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,114,* </p>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,116,public LevenbergMarquardtEstimator() {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,118,// set up the superclass with a default  max cost evaluations setting
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,119,setMaxCostEval(1000);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,121,// default values for the tuning parameters
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,122,setInitialStepBoundFactor(100.0);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,123,setCostRelativeTolerance(1.0e-10);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,124,setParRelativeTolerance(1.0e-10);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,125,setOrthoTolerance(1.0e-10);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,130,* Set the positive input variable used in determining the initial step bound.
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,131,"* This bound is set to the product of initialStepBoundFactor and the euclidean norm of diag*x if nonzero,"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,132,* or else to initialStepBoundFactor itself. In most cases factor should lie
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,133,"* in the interval (0.1, 100.0). 100.0 is a generally recommended value"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,135,* @param initialStepBoundFactor initial step bound factor
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,136,* @see #estimate
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,138,public void setInitialStepBoundFactor(double initialStepBoundFactor) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,139,this.initialStepBoundFactor = initialStepBoundFactor;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,143,* Set the desired relative error in the sum of squares.
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,145,* @param costRelativeTolerance desired relative error in the sum of squares
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,146,* @see #estimate
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,148,public void setCostRelativeTolerance(double costRelativeTolerance) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,149,this.costRelativeTolerance = costRelativeTolerance;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,153,* Set the desired relative error in the approximate solution parameters.
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,155,* @param parRelativeTolerance desired relative error
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,156,* in the approximate solution parameters
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,157,* @see #estimate
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,159,public void setParRelativeTolerance(double parRelativeTolerance) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,160,this.parRelativeTolerance = parRelativeTolerance;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,164,* Set the desired max cosine on the orthogonality.
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,166,* @param orthoTolerance desired max cosine on the orthogonality
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,167,* between the function vector and the columns of the jacobian
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,168,* @see #estimate
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,170,public void setOrthoTolerance(double orthoTolerance) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,171,this.orthoTolerance = orthoTolerance;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,175,* Solve an estimation problem using the Levenberg-Marquardt algorithm.
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,176,"* <p>The algorithm used is a modified Levenberg-Marquardt one, based"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,177,"* on the MINPACK <a href=""http://www.netlib.org/minpack/lmder.f"">lmder</a>"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,178,* routine. The algorithm settings must have been set up before this method
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,179,"* is called with the {@link #setInitialStepBoundFactor},"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,180,"* {@link #setMaxCostEval}, {@link #setCostRelativeTolerance},"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,181,* {@link #setParRelativeTolerance} and {@link #setOrthoTolerance} methods.
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,182,"* If these methods have not been called, the default values set up by the"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,183,* {@link #LevenbergMarquardtEstimator() constructor} will be used.</p>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,184,* <p>The authors of the original fortran function are:</p>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,185,* <ul>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,186,*   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,187,*   <li>Burton  S. Garbow</li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,188,*   <li>Kenneth E. Hillstrom</li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,189,*   <li>Jorge   J. More</li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,190,*   </ul>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,191,* <p>Luc Maisonobe did the Java translation.</p>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,193,* @param problem estimation problem to solve
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,194,* @exception EstimationException if convergence cannot be
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,195,* reached with the specified algorithm settings or if there are more variables
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,196,* than equations
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,197,* @see #setInitialStepBoundFactor
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,198,* @see #setCostRelativeTolerance
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,199,* @see #setParRelativeTolerance
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,200,* @see #setOrthoTolerance
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,202,public void estimate(EstimationProblem problem)
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,203,throws EstimationException {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,205,initializeEstimate(problem);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,207,// arrays shared with the other private methods
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,208,"solvedCols  = Math.min(rows, cols);"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,209,diagR       = new double[cols];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,210,jacNorm     = new double[cols];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,211,beta        = new double[cols];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,212,permutation = new int[cols];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,213,lmDir       = new double[cols];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,215,// local variables
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,216,"double   delta   = 0, xNorm = 0;"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,217,double[] diag    = new double[cols];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,218,double[] oldX    = new double[cols];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,219,double[] oldRes  = new double[rows];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,220,double[] work1   = new double[cols];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,221,double[] work2   = new double[cols];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,222,double[] work3   = new double[cols];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,224,// evaluate the function at the starting point and calculate its norm
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,225,updateResidualsAndCost();
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,227,// outer loop
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,228,lmPar = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,229,boolean firstIteration = true;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,230,while (true) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,232,// compute the Q.R. decomposition of the jacobian matrix
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,233,updateJacobian();
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,234,qrDecomposition();
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,236,// compute Qt.res
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,237,qTy(residuals);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,239,"// now we don't need Q anymore,"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,240,// so let jacobian contain the R matrix with its diagonal elements
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,241,for (int k = 0; k < solvedCols; ++k) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,242,int pk = permutation[k];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,243,jacobian[k * cols + pk] = diagR[pk];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,246,if (firstIteration) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,248,// scale the variables according to the norms of the columns
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,249,// of the initial jacobian
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,250,xNorm = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,251,for (int k = 0; k < cols; ++k) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,252,double dk = jacNorm[k];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,253,if (dk == 0) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,254,dk = 1.0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,256,double xk = dk * parameters[k].getEstimate();
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,257,xNorm  += xk * xk;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,258,diag[k] = dk;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,260,xNorm = Math.sqrt(xNorm);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,262,// initialize the step bound delta
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,263,delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,267,// check orthogonality between function vector and jacobian columns
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,268,double maxCosine = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,269,if (cost != 0) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,270,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,271,int    pj = permutation[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,272,double s  = jacNorm[pj];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,273,if (s != 0) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,274,double sum = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,275,"for (int i = 0, index = pj; i <= j; ++i, index += cols) {"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,276,sum += jacobian[index] * residuals[i];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,278,"maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,282,if (maxCosine <= orthoTolerance) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,283,return;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,286,// rescale if necessary
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,287,for (int j = 0; j < cols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,288,"diag[j] = Math.max(diag[j], jacNorm[j]);"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,291,// inner loop
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,292,for (double ratio = 0; ratio < 1.0e-4;) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,294,// save the state
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,295,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,296,int pj = permutation[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,297,oldX[pj] = parameters[pj].getEstimate();
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,299,double previousCost = cost;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,300,double[] tmpVec = residuals;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,301,residuals = oldRes;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,302,oldRes    = tmpVec;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,304,// determine the Levenberg-Marquardt parameter
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,305,"determineLMParameter(oldRes, delta, diag, work1, work2, work3);"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,307,// compute the new point and the norm of the evolution direction
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,308,double lmNorm = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,309,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,310,int pj = permutation[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,311,lmDir[pj] = -lmDir[pj];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,312,parameters[pj].setEstimate(oldX[pj] + lmDir[pj]);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,313,double s = diag[pj] * lmDir[pj];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,314,lmNorm  += s * s;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,316,lmNorm = Math.sqrt(lmNorm);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,318,"// on the first iteration, adjust the initial step bound."
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,319,if (firstIteration) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,320,"delta = Math.min(delta, lmNorm);"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,323,// evaluate the function at x + p and calculate its norm
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,324,updateResidualsAndCost();
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,326,// compute the scaled actual reduction
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,327,double actRed = -1.0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,328,if (0.1 * cost < previousCost) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,329,double r = cost / previousCost;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,330,actRed = 1.0 - r * r;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,333,// compute the scaled predicted reduction
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,334,// and the scaled directional derivative
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,335,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,336,int pj = permutation[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,337,double dirJ = lmDir[pj];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,338,work1[j] = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,339,"for (int i = 0, index = pj; i <= j; ++i, index += cols) {"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,340,work1[i] += jacobian[index] * dirJ;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,343,double coeff1 = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,344,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,345,coeff1 += work1[j] * work1[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,347,double pc2 = previousCost * previousCost;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,348,coeff1 = coeff1 / pc2;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,349,double coeff2 = lmPar * lmNorm * lmNorm / pc2;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,350,double preRed = coeff1 + 2 * coeff2;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,351,double dirDer = -(coeff1 + coeff2);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,353,// ratio of the actual to the predicted reduction
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,354,ratio = (preRed == 0) ? 0 : (actRed / preRed);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,356,// update the step bound
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,357,if (ratio <= 0.25) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,358,double tmp =
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,359,(actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,360,if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,361,tmp = 0.1;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,363,"delta = tmp * Math.min(delta, 10.0 * lmNorm);"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,364,lmPar /= tmp;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,365,} else if ((lmPar == 0) || (ratio >= 0.75)) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,366,delta = 2 * lmNorm;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,367,lmPar *= 0.5;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,370,// test for successful iteration.
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,371,if (ratio >= 1.0e-4) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,372,"// successful iteration, update the norm"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,373,firstIteration = false;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,374,xNorm = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,375,for (int k = 0; k < cols; ++k) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,376,double xK = diag[k] * parameters[k].getEstimate();
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,377,xNorm    += xK * xK;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,379,xNorm = Math.sqrt(xNorm);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,380,} else {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,381,"// failed iteration, reset the previous values"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,382,cost = previousCost;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,383,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,384,int pj = permutation[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,385,parameters[pj].setEstimate(oldX[pj]);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,387,tmpVec    = residuals;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,388,residuals = oldRes;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,389,oldRes    = tmpVec;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,392,// tests for convergence.
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,393,if (((Math.abs(actRed) <= costRelativeTolerance) &&
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,394,(preRed <= costRelativeTolerance) &&
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,395,(ratio <= 2.0)) ||
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,396,(delta <= parRelativeTolerance * xNorm)) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,397,return;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,400,// tests for termination and stringent tolerances
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,401,// (2.2204e-16 is the machine epsilon for IEEE754)
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,402,if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,403,"throw new EstimationException(""cost relative tolerance is too small ({0}),"" +"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,404,""" no further reduction in the"" +"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,405,""" sum of squares is possible"","
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,406,costRelativeTolerance);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,407,} else if (delta <= 2.2204e-16 * xNorm) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,408,"throw new EstimationException(""parameters relative tolerance is too small"" +"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,409,""" ({0}), no further improvement in"" +"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,410,""" the approximate solution is possible"","
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,411,parRelativeTolerance);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,412,} else if (maxCosine <= 2.2204e-16)  {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,413,"throw new EstimationException(""orthogonality tolerance is too small ({0}),"" +"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,414,""" solution is orthogonal to the jacobian"","
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,415,orthoTolerance);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,425,* Determine the Levenberg-Marquardt parameter.
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,426,* <p>This implementation is a translation in Java of the MINPACK
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,427,"* <a href=""http://www.netlib.org/minpack/lmpar.f"">lmpar</a>"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,428,* routine.</p>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,429,* <p>This method sets the lmPar and lmDir attributes.</p>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,430,* <p>The authors of the original fortran function are:</p>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,431,* <ul>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,432,*   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,433,*   <li>Burton  S. Garbow</li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,434,*   <li>Kenneth E. Hillstrom</li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,435,*   <li>Jorge   J. More</li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,436,* </ul>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,437,* <p>Luc Maisonobe did the Java translation.</p>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,439,* @param qy array containing qTy
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,440,* @param delta upper bound on the euclidean norm of diagR * lmDir
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,441,* @param diag diagonal matrix
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,442,* @param work1 work array
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,443,* @param work2 work array
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,444,* @param work3 work array
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,446,"private void determineLMParameter(double[] qy, double delta, double[] diag,"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,447,"double[] work1, double[] work2, double[] work3) {"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,449,"// compute and store in x the gauss-newton direction, if the"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,450,"// jacobian is rank-deficient, obtain a least squares solution"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,451,for (int j = 0; j < rank; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,452,lmDir[permutation[j]] = qy[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,454,for (int j = rank; j < cols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,455,lmDir[permutation[j]] = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,457,for (int k = rank - 1; k >= 0; --k) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,458,int pk = permutation[k];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,459,double ypk = lmDir[pk] / diagR[pk];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,460,"for (int i = 0, index = pk; i < k; ++i, index += cols) {"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,461,lmDir[permutation[i]] -= ypk * jacobian[index];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,463,lmDir[pk] = ypk;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,466,"// evaluate the function at the origin, and test"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,467,// for acceptance of the Gauss-Newton direction
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,468,double dxNorm = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,469,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,470,int pj = permutation[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,471,double s = diag[pj] * lmDir[pj];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,472,work1[pj] = s;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,473,dxNorm += s * s;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,475,dxNorm = Math.sqrt(dxNorm);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,476,double fp = dxNorm - delta;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,477,if (fp <= 0.1 * delta) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,478,lmPar = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,479,return;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,482,"// if the jacobian is not rank deficient, the Newton step provides"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,483,"// a lower bound, parl, for the zero of the function,"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,484,// otherwise set this bound to zero
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,485,"double sum2, parl = 0;"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,486,if (rank == solvedCols) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,487,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,488,int pj = permutation[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,489,work1[pj] *= diag[pj] / dxNorm;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,491,sum2 = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,492,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,493,int pj = permutation[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,494,double sum = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,495,"for (int i = 0, index = pj; i < j; ++i, index += cols) {"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,496,sum += jacobian[index] * work1[permutation[i]];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,498,double s = (work1[pj] - sum) / diagR[pj];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,499,work1[pj] = s;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,500,sum2 += s * s;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,502,parl = fp / (delta * sum2);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,505,"// calculate an upper bound, paru, for the zero of the function"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,506,sum2 = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,507,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,508,int pj = permutation[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,509,double sum = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,510,"for (int i = 0, index = pj; i <= j; ++i, index += cols) {"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,511,sum += jacobian[index] * qy[i];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,513,sum /= diag[pj];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,514,sum2 += sum * sum;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,516,double gNorm = Math.sqrt(sum2);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,517,double paru = gNorm / delta;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,518,if (paru == 0) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,519,// 2.2251e-308 is the smallest positive real for IEE754
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,520,"paru = 2.2251e-308 / Math.min(delta, 0.1);"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,523,"// if the input par lies outside of the interval (parl,paru),"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,524,// set par to the closer endpoint
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,525,"lmPar = Math.min(paru, Math.max(lmPar, parl));"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,526,if (lmPar == 0) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,527,lmPar = gNorm / dxNorm;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,530,for (int countdown = 10; countdown >= 0; --countdown) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,532,// evaluate the function at the current value of lmPar
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,533,if (lmPar == 0) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,534,"lmPar = Math.max(2.2251e-308, 0.001 * paru);"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,536,double sPar = Math.sqrt(lmPar);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,537,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,538,int pj = permutation[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,539,work1[pj] = sPar * diag[pj];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,541,"determineLMDirection(qy, work1, work2, work3);"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,543,dxNorm = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,544,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,545,int pj = permutation[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,546,double s = diag[pj] * lmDir[pj];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,547,work3[pj] = s;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,548,dxNorm += s * s;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,550,dxNorm = Math.sqrt(dxNorm);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,551,double previousFP = fp;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,552,fp = dxNorm - delta;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,554,"// if the function is small enough, accept the current value"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,555,"// of lmPar, also test for the exceptional cases where parl is zero"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,556,if ((Math.abs(fp) <= 0.1 * delta) ||
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,557,((parl == 0) && (fp <= previousFP) && (previousFP < 0))) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,558,return;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,561,// compute the Newton correction
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,562,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,563,int pj = permutation[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,564,work1[pj] = work3[pj] * diag[pj] / dxNorm;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,566,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,567,int pj = permutation[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,568,work1[pj] /= work2[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,569,double tmp = work1[pj];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,570,for (int i = j + 1; i < solvedCols; ++i) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,571,work1[permutation[i]] -= jacobian[i * cols + pj] * tmp;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,574,sum2 = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,575,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,576,double s = work1[permutation[j]];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,577,sum2 += s * s;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,579,double correction = fp / (delta * sum2);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,581,"// depending on the sign of the function, update parl or paru."
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,582,if (fp > 0) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,583,"parl = Math.max(parl, lmPar);"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,584,} else if (fp < 0) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,585,"paru = Math.min(paru, lmPar);"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,588,// compute an improved estimate for lmPar
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,589,"lmPar = Math.max(parl, lmPar + correction);"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,595,* Solve a*x = b and d*x = 0 in the least squares sense.
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,596,* <p>This implementation is a translation in Java of the MINPACK
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,597,"* <a href=""http://www.netlib.org/minpack/qrsolv.f"">qrsolv</a>"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,598,* routine.</p>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,599,* <p>This method sets the lmDir and lmDiag attributes.</p>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,600,* <p>The authors of the original fortran function are:</p>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,601,* <ul>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,602,*   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,603,*   <li>Burton  S. Garbow</li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,604,*   <li>Kenneth E. Hillstrom</li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,605,*   <li>Jorge   J. More</li>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,606,* </ul>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,607,* <p>Luc Maisonobe did the Java translation.</p>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,609,* @param qy array containing qTy
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,610,* @param diag diagonal matrix
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,611,* @param lmDiag diagonal elements associated with lmDir
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,612,* @param work work array
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,614,"private void determineLMDirection(double[] qy, double[] diag,"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,615,"double[] lmDiag, double[] work) {"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,617,// copy R and Qty to preserve input and initialize s
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,618,"//  in particular, save the diagonal elements of R in lmDir"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,619,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,620,int pj = permutation[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,621,for (int i = j + 1; i < solvedCols; ++i) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,622,jacobian[i * cols + pj] = jacobian[j * cols + permutation[i]];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,624,lmDir[j] = diagR[pj];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,625,work[j]  = qy[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,628,// eliminate the diagonal matrix d using a Givens rotation
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,629,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,631,"// prepare the row of d to be eliminated, locating the"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,632,// diagonal element using p from the Q.R. factorization
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,633,int pj = permutation[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,634,double dpj = diag[pj];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,635,if (dpj != 0) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,636,"Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,638,lmDiag[j] = dpj;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,640,//  the transformations to eliminate the row of d
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,641,// modify only a single element of Qty
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,642,"// beyond the first n, which is initially zero."
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,643,double qtbpj = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,644,for (int k = j; k < solvedCols; ++k) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,645,int pk = permutation[k];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,647,// determine a Givens rotation which eliminates the
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,648,// appropriate element in the current row of d
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,649,if (lmDiag[k] != 0) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,651,"double sin, cos;"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,652,double rkk = jacobian[k * cols + pk];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,653,if (Math.abs(rkk) < Math.abs(lmDiag[k])) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,654,double cotan = rkk / lmDiag[k];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,655,sin   = 1.0 / Math.sqrt(1.0 + cotan * cotan);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,656,cos   = sin * cotan;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,657,} else {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,658,double tan = lmDiag[k] / rkk;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,659,cos = 1.0 / Math.sqrt(1.0 + tan * tan);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,660,sin = cos * tan;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,663,// compute the modified diagonal element of R and
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,664,"// the modified element of (Qty,0)"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,665,jacobian[k * cols + pk] = cos * rkk + sin * lmDiag[k];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,666,double temp = cos * work[k] + sin * qtbpj;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,667,qtbpj = -sin * work[k] + cos * qtbpj;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,668,work[k] = temp;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,670,// accumulate the tranformation in the row of s
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,671,for (int i = k + 1; i < solvedCols; ++i) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,672,double rik = jacobian[i * cols + pk];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,673,temp = cos * rik + sin * lmDiag[i];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,674,lmDiag[i] = -sin * rik + cos * lmDiag[i];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,675,jacobian[i * cols + pk] = temp;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,681,// store the diagonal element of s and restore
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,682,// the corresponding diagonal element of R
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,683,int index = j * cols + permutation[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,684,lmDiag[j]       = jacobian[index];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,685,jacobian[index] = lmDir[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,689,"// solve the triangular system for z, if the system is"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,690,"// singular, then obtain a least squares solution"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,691,int nSing = solvedCols;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,692,for (int j = 0; j < solvedCols; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,693,if ((lmDiag[j] == 0) && (nSing == solvedCols)) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,694,nSing = j;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,696,if (nSing < solvedCols) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,697,work[j] = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,700,if (nSing > 0) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,701,for (int j = nSing - 1; j >= 0; --j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,702,int pj = permutation[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,703,double sum = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,704,for (int i = j + 1; i < nSing; ++i) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,705,sum += jacobian[i * cols + pj] * work[i];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,707,work[j] = (work[j] - sum) / lmDiag[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,711,// permute the components of z back to components of lmDir
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,712,for (int j = 0; j < lmDir.length; ++j) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,713,lmDir[permutation[j]] = work[j];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,719,* Decompose a matrix A as A.P = Q.R using Householder transforms.
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,720,* <p>As suggested in the P. Lascaux and R. Theodor book
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,721,* <i>Analyse num&eacute;rique matricielle appliqu&eacute;e &agrave;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,722,"* l'art de l'ing&eacute;nieur</i> (Masson, 1986), instead of representing"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,723,* the Householder transforms with u<sub>k</sub> unit vectors such that:
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,724,* <pre>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,725,* H<sub>k</sub> = I - 2u<sub>k</sub>.u<sub>k</sub><sup>t</sup>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,726,* </pre>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,727,* we use <sub>k</sub> non-unit vectors such that:
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,728,* <pre>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,729,* H<sub>k</sub> = I - beta<sub>k</sub>v<sub>k</sub>.v<sub>k</sub><sup>t</sup>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,730,* </pre>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,731,* where v<sub>k</sub> = a<sub>k</sub> - alpha<sub>k</sub> e<sub>k</sub>.
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,732,* The beta<sub>k</sub> coefficients are provided upon exit as recomputing
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,733,* them from the v<sub>k</sub> vectors would be costly.</p>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,734,* <p>This decomposition handles rank deficient cases since the tranformations
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,735,* are performed in non-increasing columns norms order thanks to columns
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,736,* pivoting. The diagonal elements of the R matrix are therefore also in
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,737,* non-increasing absolute values order.</p>
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,738,* @exception EstimationException if the decomposition cannot be performed
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,740,private void qrDecomposition() throws EstimationException {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,742,// initializations
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,743,for (int k = 0; k < cols; ++k) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,744,permutation[k] = k;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,745,double norm2 = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,746,for (int index = k; index < jacobian.length; index += cols) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,747,double akk = jacobian[index];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,748,norm2 += akk * akk;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,750,jacNorm[k] = Math.sqrt(norm2);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,753,// transform the matrix column after column
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,754,for (int k = 0; k < cols; ++k) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,756,// select the column with the greatest norm on active components
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,757,int nextColumn = -1;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,758,double ak2 = Double.NEGATIVE_INFINITY;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,759,for (int i = k; i < cols; ++i) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,760,double norm2 = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,761,int iDiag = k * cols + permutation[i];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,762,for (int index = iDiag; index < jacobian.length; index += cols) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,763,double aki = jacobian[index];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,764,norm2 += aki * aki;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,766,if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,767,throw new EstimationException(
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,768,"""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix"","
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,769,"rows, cols);"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,771,if (norm2 > ak2) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,772,nextColumn = i;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,773,ak2        = norm2;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,776,if (ak2 == 0) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,777,rank = k;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,778,return;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,780,int pk                  = permutation[nextColumn];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,781,permutation[nextColumn] = permutation[k];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,782,permutation[k]          = pk;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,784,// choose alpha such that Hk.u = alpha ek
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,785,int    kDiag = k * cols + pk;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,786,double akk   = jacobian[kDiag];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,787,double alpha = (akk > 0) ? -Math.sqrt(ak2) : Math.sqrt(ak2);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,788,double betak = 1.0 / (ak2 - akk * alpha);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,789,beta[pk]     = betak;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,791,// transform the current column
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,792,diagR[pk]        = alpha;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,793,jacobian[kDiag] -= alpha;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,795,// transform the remaining columns
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,796,for (int dk = cols - 1 - k; dk > 0; --dk) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,797,int dkp = permutation[k + dk] - pk;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,798,double gamma = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,799,for (int index = kDiag; index < jacobian.length; index += cols) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,800,gamma += jacobian[index] * jacobian[index + dkp];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,802,gamma *= betak;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,803,for (int index = kDiag; index < jacobian.length; index += cols) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,804,jacobian[index + dkp] -= gamma * jacobian[index];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,810,rank = solvedCols;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,815,* Compute the product Qt.y for some Q.R. decomposition.
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,817,* @param y vector to multiply (will be overwritten with the result)
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,819,private void qTy(double[] y) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,820,for (int k = 0; k < cols; ++k) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,821,int pk = permutation[k];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,822,int kDiag = k * cols + pk;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,823,double gamma = 0;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,824,"for (int i = k, index = kDiag; i < rows; ++i, index += cols) {"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,825,gamma += jacobian[index] * y[i];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,827,gamma *= beta[pk];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,828,"for (int i = k, index = kDiag; i < rows; ++i, index += cols) {"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,829,y[i] -= gamma * jacobian[index];
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,834,/** Number of solved variables. */
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,835,private int solvedCols;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,837,/** Diagonal elements of the R matrix in the Q.R. decomposition. */
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,838,private double[] diagR;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,840,/** Norms of the columns of the jacobian matrix. */
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,841,private double[] jacNorm;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,843,/** Coefficients of the Householder transforms vectors. */
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,844,private double[] beta;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,846,/** Columns permutation array. */
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,847,private int[] permutation;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,849,/** Rank of the jacobian matrix. */
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,850,private int rank;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,852,/** Levenberg-Marquardt parameter. */
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,853,private double lmPar;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,855,/** Parameters evolution direction associated with lmPar. */
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,856,private double[] lmDir;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,858,/** Positive input variable used in determining the initial step bound. */
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,859,private double initialStepBoundFactor;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,861,/** Desired relative error in the sum of squares. */
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,862,private double costRelativeTolerance;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,864,/**  Desired relative error in the approximate solution parameters. */
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,865,private double parRelativeTolerance;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,867,/** Desired max cosine on the orthogonality between the function vector
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,868,* and the columns of the jacobian. */
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,869,private double orthoTolerance;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,871,/** Serializable version identifier */
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,872,private static final long serialVersionUID = -5705952631533171019L;
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,18,package org.apache.commons.math.estimation;
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,20,import java.util.ArrayList;
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,21,import java.util.List;
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,24,* Simple implementation of the {@link EstimationProblem
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,25,* EstimationProblem} interface for boilerplate data handling.
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,26,* <p>This class <em>only</em> handles parameters and measurements
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,27,* storage and unbound parameters filtering. It does not compute
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,28,* anything by itself. It should either be used with measurements
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,29,* implementation that are smart enough to know about the
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,30,* various parameters in order to compute the partial derivatives
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,31,* appropriately. Since the problem-specific logic is mainly related to
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,32,"* the various measurements models, the simplest way to use this class"
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,33,* is by extending it and using one internal class extending
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,34,* {@link WeightedMeasurement WeightedMeasurement} for each measurement
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,35,* type. The instances of the internal classes would have access to the
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,36,* various parameters and their current estimate.</p>
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,38,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,39,* @since 1.2
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,40,"* @deprecated as of 2.0, everything in package org.apache.commons.math.estimation has"
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,41,* been deprecated and replaced by package org.apache.commons.math.optimization.general
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,44,@Deprecated
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,45,public class SimpleEstimationProblem implements EstimationProblem {
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,48,* Build an empty instance without parameters nor measurements.
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,50,public SimpleEstimationProblem() {
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,51,parameters   = new ArrayList<EstimatedParameter>();
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,52,measurements = new ArrayList<WeightedMeasurement>();
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,56,* Get all the parameters of the problem.
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,57,* @return parameters
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,59,public EstimatedParameter[] getAllParameters() {
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,60,return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,64,* Get the unbound parameters of the problem.
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,65,* @return unbound parameters
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,67,public EstimatedParameter[] getUnboundParameters() {
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,69,// filter the unbound parameters
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,70,List<EstimatedParameter> unbound = new ArrayList<EstimatedParameter>(parameters.size());
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,71,for (EstimatedParameter p : parameters) {
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,72,if (! p.isBound()) {
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,73,unbound.add(p);
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,77,// convert to an array
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,78,return (EstimatedParameter[]) unbound.toArray(new EstimatedParameter[unbound.size()]);
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,83,* Get the measurements of an estimation problem.
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,84,* @return measurements
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,86,public WeightedMeasurement[] getMeasurements() {
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,87,return (WeightedMeasurement[]) measurements.toArray(new WeightedMeasurement[measurements.size()]);
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,90,/** Add a parameter to the problem.
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,91,* @param p parameter to add
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,93,protected void addParameter(EstimatedParameter p) {
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,94,parameters.add(p);
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,98,* Add a new measurement to the set.
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,99,* @param m measurement to add
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,101,protected void addMeasurement(WeightedMeasurement m) {
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,102,measurements.add(m);
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,105,/** Estimated parameters. */
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,106,private final List<EstimatedParameter> parameters;
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,108,/** Measurements. */
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,109,private final List<WeightedMeasurement> measurements;
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,18,package org.apache.commons.math.estimation;
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,23,* This class represents measurements in estimation problems.
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,25,* <p>This abstract class implements all the methods needed to handle
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,26,* measurements in a general way. It defines neither the {@link
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,27,* #getTheoreticalValue getTheoreticalValue} nor the {@link
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,28,"* #getPartial getPartial} methods, which should be defined by"
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,29,* sub-classes according to the specific problem.</p>
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,31,* <p>The {@link #getTheoreticalValue getTheoreticalValue} and {@link
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,32,* #getPartial getPartial} methods must always use the current
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,33,* estimate of the parameters set by the solver in the problem. These
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,34,* parameters can be retrieved through the {@link
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,35,* EstimationProblem#getAllParameters
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,36,* EstimationProblem.getAllParameters} method if the measurements are
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,37,"* independent of the problem, or directly if they are implemented as"
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,38,* inner classes of the problem.</p>
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,40,* <p>The instances for which the <code>ignored</code> flag is set
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,41,* through the {@link #setIgnored setIgnored} method are ignored by the
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,42,* solvers. This can be used to reject wrong measurements at some
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,43,* steps of the estimation.</p>
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,45,* @see EstimationProblem
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,47,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,48,* @since 1.2
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,49,"* @deprecated as of 2.0, everything in package org.apache.commons.math.estimation has"
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,50,* been deprecated and replaced by package org.apache.commons.math.optimization.general
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,53,@Deprecated
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,54,public abstract class WeightedMeasurement implements Serializable {
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,56,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,57,private static final long serialVersionUID = 4360046376796901941L;
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,60,* Simple constructor.
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,61,"* Build a measurement with the given parameters, and set its ignore"
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,62,* flag to false.
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,63,* @param weight weight of the measurement in the least squares problem
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,64,"* (two common choices are either to use 1.0 for all measurements, or to"
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,65,* use a value proportional to the inverse of the variance of the measurement
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,66,* type)
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,68,* @param measuredValue measured value
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,70,"public WeightedMeasurement(double weight, double measuredValue) {"
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,71,this.weight        = weight;
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,72,this.measuredValue = measuredValue;
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,73,ignored            = false;
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,76,/** Simple constructor.
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,78,* Build a measurement with the given parameters
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,80,* @param weight weight of the measurement in the least squares problem
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,81,* @param measuredValue measured value
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,82,* @param ignored true if the measurement should be ignored
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,84,"public WeightedMeasurement(double weight, double measuredValue,"
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,85,boolean ignored) {
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,86,this.weight        = weight;
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,87,this.measuredValue = measuredValue;
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,88,this.ignored       = ignored;
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,92,* Get the weight of the measurement in the least squares problem
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,94,* @return weight
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,96,public double getWeight() {
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,97,return weight;
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,101,* Get the measured value
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,103,* @return measured value
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,105,public double getMeasuredValue() {
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,106,return measuredValue;
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,110,* Get the residual for this measurement
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,111,* The residual is the measured value minus the theoretical value.
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,113,* @return residual
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,115,public double getResidual() {
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,116,return measuredValue - getTheoreticalValue();
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,120,* Get the theoretical value expected for this measurement
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,121,* <p>The theoretical value is the value expected for this measurement
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,122,* if the model and its parameter were all perfectly known.</p>
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,123,* <p>The value must be computed using the current estimate of the parameters
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,124,* set by the solver in the problem.</p>
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,126,* @return theoretical value
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,128,public abstract double getTheoreticalValue();
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,131,* Get the partial derivative of the {@link #getTheoreticalValue
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,132,* theoretical value} according to the parameter.
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,133,* <p>The value must be computed using the current estimate of the parameters
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,134,* set by the solver in the problem.</p>
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,136,* @param parameter parameter against which the partial derivative
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,137,* should be computed
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,138,* @return partial derivative of the {@link #getTheoreticalValue
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,139,* theoretical value}
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,141,public abstract double getPartial(EstimatedParameter parameter);
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,144,* Set the ignore flag to the specified value
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,145,* Setting the ignore flag to true allow to reject wrong
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,146,"* measurements, which sometimes can be detected only rather late."
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,148,* @param ignored value for the ignore flag
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,150,public void setIgnored(boolean ignored) {
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,151,this.ignored = ignored;
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,155,* Check if this measurement should be ignored
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,157,* @return true if the measurement should be ignored
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,159,public boolean isIgnored() {
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,160,return ignored;
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,163,/** Measurement weight. */
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,164,private final double  weight;
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,166,/** Value of the measurements. */
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,167,private final double  measuredValue;
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,169,/** Ignore measurement indicator. */
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,170,private       boolean ignored;
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,18,package org.apache.commons.math.estimation;
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,20,import org.apache.commons.math.estimation.EstimatedParameter;
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,22,import junit.framework.*;
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,24,@Deprecated
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,25,public class EstimatedParameterTest
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,26,extends TestCase {
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,28,public EstimatedParameterTest(String name) {
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,29,super(name);
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,32,public void testConstruction() {
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,34,"EstimatedParameter p1 = new EstimatedParameter(""p1"", 1.0);"
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,35,"assertTrue(p1.getName().equals(""p1""));"
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,36,"checkValue(p1.getEstimate(), 1.0);"
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,37,assertTrue(! p1.isBound());
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,39,"EstimatedParameter p2 = new EstimatedParameter(""p2"", 2.0, true);"
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,40,"assertTrue(p2.getName().equals(""p2""));"
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,41,"checkValue(p2.getEstimate(), 2.0);"
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,42,assertTrue(p2.isBound());
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,46,public void testBound() {
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,48,"EstimatedParameter p = new EstimatedParameter(""p"", 0.0);"
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,49,assertTrue(! p.isBound());
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,50,p.setBound(true);
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,51,assertTrue(p.isBound());
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,52,p.setBound(false);
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,53,assertTrue(! p.isBound());
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,57,public void testEstimate() {
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,59,"EstimatedParameter p = new EstimatedParameter(""p"", 0.0);"
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,60,"checkValue(p.getEstimate(), 0.0);"
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,62,for (double e = 0.0; e < 10.0; e += 0.5) {
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,63,p.setEstimate(e);
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,64,"checkValue(p.getEstimate(), e);"
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,69,public static Test suite() {
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,70,return new TestSuite(EstimatedParameterTest.class);
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,73,"private void checkValue(double value, double expected) {"
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,74,assertTrue(Math.abs(value - expected) < 1.0e-10);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,18,package org.apache.commons.math.estimation;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,20,import java.util.ArrayList;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,21,import java.util.HashSet;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,23,import junit.framework.Test;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,24,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,25,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,28,* <p>Some of the unit tests are re-implementations of the MINPACK <a
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,29,"* href=""http://www.netlib.org/minpack/ex/file17"">file17</a> and <a"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,30,"* href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,31,* The redistribution policy for MINPACK is available <a
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,32,"* href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,33,"* convenience, it is reproduced below.</p>"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,35,"* <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,36,* <tr><td>
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,37,*    Minpack Copyright Notice (1999) University of Chicago.
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,38,*    All rights reserved
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,39,* </td></tr>
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,40,* <tr><td>
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,41,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,42,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,43,* are met:
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,44,* <ol>
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,45,*  <li>Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,46,"*      notice, this list of conditions and the following disclaimer.</li>"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,47,* <li>Redistributions in binary form must reproduce the above
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,48,"*     copyright notice, this list of conditions and the following"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,49,*     disclaimer in the documentation and/or other materials provided
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,50,*     with the distribution.</li>
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,51,"* <li>The end-user documentation included with the redistribution, if any,"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,52,*     must include the following acknowledgment:
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,53,*     <code>This product includes software developed by the University of
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,54,"*           Chicago, as Operator of Argonne National Laboratory.</code>"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,55,"*     Alternately, this acknowledgment may appear in the software itself,"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,56,*     if and wherever such third-party acknowledgments normally appear.</li>
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,57,"* <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,58,"*     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,59,"*     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,60,"*     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,61,"*     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,62,"*     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,63,"*     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,64,"*     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,65,"*     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,66,"*     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,67,*     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,68,"*     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,69,*     BE CORRECTED.</strong></li>
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,70,* <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,71,"*     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,72,"*     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,73,"*     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,74,"*     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,75,"*     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,76,"*     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,77,"*     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,78,*     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,79,*     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,80,* <ol></td></tr>
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,81,* </table>
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,83,* @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran minpack tests)
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,84,* @author Burton S. Garbow (original fortran minpack tests)
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,85,* @author Kenneth E. Hillstrom (original fortran minpack tests)
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,86,* @author Jorge J. More (original fortran minpack tests)
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,87,* @author Luc Maisonobe (non-minpack tests and minpack tests Java translation)
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,89,@Deprecated
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,90,public class GaussNewtonEstimatorTest
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,91,extends TestCase {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,93,public GaussNewtonEstimatorTest(String name) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,94,super(name);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,97,public void testTrivial() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,98,LinearProblem problem =
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,99,new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,100,"new LinearMeasurement(new double[] {2},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,101,new EstimatedParameter[] {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,102,"new EstimatedParameter(""p0"", 0)"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,103,"}, 3.0)"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,105,"GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,106,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,107,"assertEquals(0, estimator.getRMS(problem), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,108,"assertEquals(1.5,"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,109,"problem.getUnboundParameters()[0].getEstimate(),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,110,1.0e-10);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,113,public void testQRColumnsPermutation() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,115,EstimatedParameter[] x = {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,116,"new EstimatedParameter(""p0"", 0), new EstimatedParameter(""p1"", 0)"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,118,LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,119,"new LinearMeasurement(new double[] { 1.0, -1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,120,"new EstimatedParameter[] { x[0], x[1] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,121,"4.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,122,"new LinearMeasurement(new double[] { 2.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,123,"new EstimatedParameter[] { x[1] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,124,"6.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,125,"new LinearMeasurement(new double[] { 1.0, -2.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,126,"new EstimatedParameter[] { x[0], x[1] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,127,1.0)
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,130,"GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,131,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,132,"assertEquals(0, estimator.getRMS(problem), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,133,"assertEquals(7.0, x[0].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,134,"assertEquals(3.0, x[1].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,138,public void testNoDependency() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,139,EstimatedParameter[] p = new EstimatedParameter[] {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,140,"new EstimatedParameter(""p0"", 0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,141,"new EstimatedParameter(""p1"", 0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,142,"new EstimatedParameter(""p2"", 0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,143,"new EstimatedParameter(""p3"", 0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,144,"new EstimatedParameter(""p4"", 0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,145,"new EstimatedParameter(""p5"", 0)"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,147,LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,148,"new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[0] }, 0.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,149,"new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[1] }, 1.1),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,150,"new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[2] }, 2.2),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,151,"new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[3] }, 3.3),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,152,"new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[4] }, 4.4),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,153,"new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[5] }, 5.5)"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,155,"GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,156,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,157,"assertEquals(0, estimator.getRMS(problem), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,158,for (int i = 0; i < p.length; ++i) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,159,"assertEquals(0.55 * i, p[i].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,163,public void testOneSet() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,165,EstimatedParameter[] p = {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,166,"new EstimatedParameter(""p0"", 0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,167,"new EstimatedParameter(""p1"", 0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,168,"new EstimatedParameter(""p2"", 0)"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,170,LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,171,"new LinearMeasurement(new double[] { 1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,172,"new EstimatedParameter[] { p[0] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,173,"1.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,174,"new LinearMeasurement(new double[] { -1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,175,"new EstimatedParameter[] { p[0], p[1] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,176,"1.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,177,"new LinearMeasurement(new double[] { -1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,178,"new EstimatedParameter[] { p[1], p[2] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,179,1.0)
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,182,"GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,183,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,184,"assertEquals(0, estimator.getRMS(problem), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,185,"assertEquals(1.0, p[0].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,186,"assertEquals(2.0, p[1].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,187,"assertEquals(3.0, p[2].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,191,public void testTwoSets() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,192,EstimatedParameter[] p = {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,193,"new EstimatedParameter(""p0"", 0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,194,"new EstimatedParameter(""p1"", 1),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,195,"new EstimatedParameter(""p2"", 2),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,196,"new EstimatedParameter(""p3"", 3),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,197,"new EstimatedParameter(""p4"", 4),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,198,"new EstimatedParameter(""p5"", 5)"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,201,double epsilon = 1.0e-7;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,202,LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,204,// 4 elements sub-problem
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,205,"new LinearMeasurement(new double[] {  2.0,  1.0,  4.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,206,"new EstimatedParameter[] { p[0], p[1], p[3] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,207,"2.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,208,"new LinearMeasurement(new double[] { -4.0, -2.0,   3.0, -7.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,209,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,210,"-9.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,211,"new LinearMeasurement(new double[] {  4.0,  1.0,  -2.0,  8.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,212,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,213,"2.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,214,"new LinearMeasurement(new double[] { -3.0, -12.0, -1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,215,"new EstimatedParameter[] { p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,216,"2.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,218,// 2 elements sub-problem
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,219,"new LinearMeasurement(new double[] { epsilon, 1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,220,"new EstimatedParameter[] { p[4], p[5] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,221,"1.0 + epsilon * epsilon),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,222,"new LinearMeasurement(new double[] {  1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,223,"new EstimatedParameter[] { p[4], p[5] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,224,2.0)
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,228,"GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,229,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,230,"assertEquals(0, estimator.getRMS(problem), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,231,"assertEquals( 3.0, p[0].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,232,"assertEquals( 4.0, p[1].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,233,"assertEquals(-1.0, p[2].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,234,"assertEquals(-2.0, p[3].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,235,"assertEquals( 1.0 + epsilon, p[4].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,236,"assertEquals( 1.0 - epsilon, p[5].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,240,public void testNonInversible() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,242,EstimatedParameter[] p = {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,243,"new EstimatedParameter(""p0"", 0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,244,"new EstimatedParameter(""p1"", 0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,245,"new EstimatedParameter(""p2"", 0)"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,247,LinearMeasurement[] m = new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,248,"new LinearMeasurement(new double[] {  1.0, 2.0, -3.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,249,"new EstimatedParameter[] { p[0], p[1], p[2] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,250,"1.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,251,"new LinearMeasurement(new double[] {  2.0, 1.0,  3.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,252,"new EstimatedParameter[] { p[0], p[1], p[2] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,253,"1.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,254,"new LinearMeasurement(new double[] { -3.0, -9.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,255,"new EstimatedParameter[] { p[0], p[2] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,256,1.0)
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,258,LinearProblem problem = new LinearProblem(m);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,260,"GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,261,try {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,262,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,263,"fail(""an exception should have been caught"");"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,264,} catch (EstimationException ee) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,265,// expected behavior
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,266,} catch (Exception e) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,267,"fail(""wrong exception type caught"");"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,271,public void testIllConditioned() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,272,EstimatedParameter[] p = {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,273,"new EstimatedParameter(""p0"", 0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,274,"new EstimatedParameter(""p1"", 1),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,275,"new EstimatedParameter(""p2"", 2),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,276,"new EstimatedParameter(""p3"", 3)"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,279,LinearProblem problem1 = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,280,"new LinearMeasurement(new double[] { 10.0, 7.0,  8.0,  7.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,281,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,282,"32.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,283,"new LinearMeasurement(new double[] {  7.0, 5.0,  6.0,  5.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,284,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,285,"23.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,286,"new LinearMeasurement(new double[] {  8.0, 6.0, 10.0,  9.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,287,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,288,"33.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,289,"new LinearMeasurement(new double[] {  7.0, 5.0,  9.0, 10.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,290,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,291,31.0)
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,293,"GaussNewtonEstimator estimator1 = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,294,estimator1.estimate(problem1);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,295,"assertEquals(0, estimator1.getRMS(problem1), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,296,"assertEquals(1.0, p[0].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,297,"assertEquals(1.0, p[1].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,298,"assertEquals(1.0, p[2].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,299,"assertEquals(1.0, p[3].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,301,LinearProblem problem2 = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,302,"new LinearMeasurement(new double[] { 10.0, 7.0,  8.1,  7.2 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,303,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,304,"32.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,305,"new LinearMeasurement(new double[] {  7.08, 5.04,  6.0,  5.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,306,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,307,"23.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,308,"new LinearMeasurement(new double[] {  8.0, 5.98, 9.89,  9.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,309,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,310,"33.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,311,"new LinearMeasurement(new double[] {  6.99, 4.99,  9.0, 9.98 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,312,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,313,31.0)
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,315,"GaussNewtonEstimator estimator2 = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,316,estimator2.estimate(problem2);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,317,"assertEquals(0, estimator2.getRMS(problem2), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,318,"assertEquals(-81.0, p[0].getEstimate(), 1.0e-8);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,319,"assertEquals(137.0, p[1].getEstimate(), 1.0e-8);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,320,"assertEquals(-34.0, p[2].getEstimate(), 1.0e-8);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,321,"assertEquals( 22.0, p[3].getEstimate(), 1.0e-8);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,325,public void testMoreEstimatedParametersSimple() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,327,EstimatedParameter[] p = {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,328,"new EstimatedParameter(""p0"", 7),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,329,"new EstimatedParameter(""p1"", 6),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,330,"new EstimatedParameter(""p2"", 5),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,331,"new EstimatedParameter(""p3"", 4)"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,333,LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,334,"new LinearMeasurement(new double[] { 3.0, 2.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,335,"new EstimatedParameter[] { p[0], p[1] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,336,"7.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,337,"new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,338,"new EstimatedParameter[] { p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,339,"3.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,340,"new LinearMeasurement(new double[] { 2.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,341,"new EstimatedParameter[] { p[0], p[2] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,342,5.0)
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,345,"GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,346,try {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,347,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,348,"fail(""an exception should have been caught"");"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,349,} catch (EstimationException ee) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,350,// expected behavior
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,351,} catch (Exception e) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,352,"fail(""wrong exception type caught"");"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,357,public void testMoreEstimatedParametersUnsorted() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,358,EstimatedParameter[] p = {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,359,"new EstimatedParameter(""p0"", 2),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,360,"new EstimatedParameter(""p1"", 2),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,361,"new EstimatedParameter(""p2"", 2),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,362,"new EstimatedParameter(""p3"", 2),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,363,"new EstimatedParameter(""p4"", 2),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,364,"new EstimatedParameter(""p5"", 2)"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,366,LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,367,"new LinearMeasurement(new double[] { 1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,368,"new EstimatedParameter[] { p[0], p[1] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,369,"3.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,370,"new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,371,"new EstimatedParameter[] { p[2], p[3], p[4] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,372,"12.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,373,"new LinearMeasurement(new double[] { 1.0, -1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,374,"new EstimatedParameter[] { p[4], p[5] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,375,"-1.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,376,"new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,377,"new EstimatedParameter[] { p[3], p[2], p[5] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,378,"7.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,379,"new LinearMeasurement(new double[] { 1.0, -1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,380,"new EstimatedParameter[] { p[4], p[3] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,381,1.0)
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,384,"GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,385,try {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,386,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,387,"fail(""an exception should have been caught"");"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,388,} catch (EstimationException ee) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,389,// expected behavior
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,390,} catch (Exception e) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,391,"fail(""wrong exception type caught"");"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,396,public void testRedundantEquations() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,397,EstimatedParameter[] p = {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,398,"new EstimatedParameter(""p0"", 1),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,399,"new EstimatedParameter(""p1"", 1)"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,401,LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,402,"new LinearMeasurement(new double[] { 1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,403,"new EstimatedParameter[] { p[0], p[1] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,404,"3.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,405,"new LinearMeasurement(new double[] { 1.0, -1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,406,"new EstimatedParameter[] { p[0], p[1] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,407,"1.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,408,"new LinearMeasurement(new double[] { 1.0, 3.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,409,"new EstimatedParameter[] { p[0], p[1] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,410,5.0)
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,413,"GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,414,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,415,"assertEquals(0, estimator.getRMS(problem), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,416,EstimatedParameter[] all = problem.getAllParameters();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,417,for (int i = 0; i < all.length; ++i) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,418,"assertEquals(all[i].getName().equals(""p0"") ? 2.0 : 1.0,"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,419,"all[i].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,424,public void testInconsistentEquations() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,425,EstimatedParameter[] p = {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,426,"new EstimatedParameter(""p0"", 1),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,427,"new EstimatedParameter(""p1"", 1)"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,429,LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,430,"new LinearMeasurement(new double[] { 1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,431,"new EstimatedParameter[] { p[0], p[1] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,432,"3.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,433,"new LinearMeasurement(new double[] { 1.0, -1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,434,"new EstimatedParameter[] { p[0], p[1] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,435,"1.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,436,"new LinearMeasurement(new double[] { 1.0, 3.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,437,"new EstimatedParameter[] { p[0], p[1] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,438,4.0)
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,441,"GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,442,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,443,assertTrue(estimator.getRMS(problem) > 0.1);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,447,public void testBoundParameters() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,448,EstimatedParameter[] p = {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,449,"new EstimatedParameter(""unbound0"", 2, false),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,450,"new EstimatedParameter(""unbound1"", 2, false),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,451,"new EstimatedParameter(""bound"",    2, true)"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,453,LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,454,"new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,455,"new EstimatedParameter[] { p[0], p[1], p[2] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,456,"3.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,457,"new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,458,"new EstimatedParameter[] { p[0], p[1], p[2] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,459,"1.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,460,"new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,461,"new EstimatedParameter[] { p[0], p[1], p[2] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,462,7.0)
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,465,"GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,466,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,467,assertTrue(estimator.getRMS(problem) < 1.0e-10);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,468,double[][] covariances = estimator.getCovariances(problem);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,469,"int i0 = 0, i1 = 1;"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,470,"if (problem.getUnboundParameters()[0].getName().endsWith(""1"")) {"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,471,i0 = 1;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,472,i1 = 0;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,474,"assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,475,"assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,476,"assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,477,"assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,479,double[] errors = estimator.guessParametersErrors(problem);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,480,"assertEquals(0, errors[i0], 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,481,"assertEquals(0, errors[i1], 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,485,public void testMaxIterations() {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,486,"Circle circle = new Circle(98.680, 47.345);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,487,"circle.addPoint( 30.0,  68.0);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,488,"circle.addPoint( 50.0,  -6.0);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,489,"circle.addPoint(110.0, -20.0);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,490,"circle.addPoint( 35.0,  15.0);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,491,"circle.addPoint( 45.0,  97.0);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,492,try {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,493,"GaussNewtonEstimator estimator = new GaussNewtonEstimator(4, 1.0e-14, 1.0e-14);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,494,estimator.estimate(circle);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,495,"fail(""an exception should have been caught"");"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,496,} catch (EstimationException ee) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,497,// expected behavior
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,498,} catch (Exception e) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,499,"fail(""wrong exception type caught"");"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,503,public void testCircleFitting() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,504,"Circle circle = new Circle(98.680, 47.345);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,505,"circle.addPoint( 30.0,  68.0);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,506,"circle.addPoint( 50.0,  -6.0);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,507,"circle.addPoint(110.0, -20.0);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,508,"circle.addPoint( 35.0,  15.0);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,509,"circle.addPoint( 45.0,  97.0);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,510,"GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-10, 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,511,estimator.estimate(circle);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,512,double rms = estimator.getRMS(circle);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,513,"assertEquals(1.768262623567235,  Math.sqrt(circle.getM()) * rms,  1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,514,"assertEquals(69.96016176931406, circle.getRadius(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,515,"assertEquals(96.07590211815305, circle.getX(),      1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,516,"assertEquals(48.13516790438953, circle.getY(),      1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,519,public void testCircleFittingBadInit() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,520,"Circle circle = new Circle(-12, -12);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,521,double[][] points = new double[][] {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,522,"{-0.312967,  0.072366}, {-0.339248,  0.132965}, {-0.379780,  0.202724},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,523,"{-0.390426,  0.260487}, {-0.361212,  0.328325}, {-0.346039,  0.392619},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,524,"{-0.280579,  0.444306}, {-0.216035,  0.470009}, {-0.149127,  0.493832},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,525,"{-0.075133,  0.483271}, {-0.007759,  0.452680}, { 0.060071,  0.410235},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,526,"{ 0.103037,  0.341076}, { 0.118438,  0.273884}, { 0.131293,  0.192201},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,527,"{ 0.115869,  0.129797}, { 0.072223,  0.058396}, { 0.022884,  0.000718},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,528,"{-0.053355, -0.020405}, {-0.123584, -0.032451}, {-0.216248, -0.032862},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,529,"{-0.278592, -0.005008}, {-0.337655,  0.056658}, {-0.385899,  0.112526},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,530,"{-0.405517,  0.186957}, {-0.415374,  0.262071}, {-0.387482,  0.343398},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,531,"{-0.347322,  0.397943}, {-0.287623,  0.458425}, {-0.223502,  0.475513},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,532,"{-0.135352,  0.478186}, {-0.061221,  0.483371}, { 0.003711,  0.422737},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,533,"{ 0.065054,  0.375830}, { 0.108108,  0.297099}, { 0.123882,  0.222850},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,534,"{ 0.117729,  0.134382}, { 0.085195,  0.056820}, { 0.029800, -0.019138},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,535,"{-0.027520, -0.072374}, {-0.102268, -0.091555}, {-0.200299, -0.106578},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,536,"{-0.292731, -0.091473}, {-0.356288, -0.051108}, {-0.420561,  0.014926},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,537,"{-0.471036,  0.074716}, {-0.488638,  0.182508}, {-0.485990,  0.254068},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,538,"{-0.463943,  0.338438}, {-0.406453,  0.404704}, {-0.334287,  0.466119},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,539,"{-0.254244,  0.503188}, {-0.161548,  0.495769}, {-0.075733,  0.495560},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,540,"{ 0.001375,  0.434937}, { 0.082787,  0.385806}, { 0.115490,  0.323807},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,541,"{ 0.141089,  0.223450}, { 0.138693,  0.131703}, { 0.126415,  0.049174},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,542,"{ 0.066518, -0.010217}, {-0.005184, -0.070647}, {-0.080985, -0.103635},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,543,"{-0.177377, -0.116887}, {-0.260628, -0.100258}, {-0.335756, -0.056251},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,544,"{-0.405195, -0.000895}, {-0.444937,  0.085456}, {-0.484357,  0.175597},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,545,"{-0.472453,  0.248681}, {-0.438580,  0.347463}, {-0.402304,  0.422428},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,546,"{-0.326777,  0.479438}, {-0.247797,  0.505581}, {-0.152676,  0.519380},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,547,"{-0.071754,  0.516264}, { 0.015942,  0.472802}, { 0.076608,  0.419077},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,548,"{ 0.127673,  0.330264}, { 0.159951,  0.262150}, { 0.153530,  0.172681},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,549,"{ 0.140653,  0.089229}, { 0.078666,  0.024981}, { 0.023807, -0.037022},"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,550,"{-0.048837, -0.077056}, {-0.127729, -0.075338}, {-0.221271, -0.067526}"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,552,for (int i = 0; i < points.length; ++i) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,553,"circle.addPoint(points[i][0], points[i][1]);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,555,"GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,556,try {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,557,estimator.estimate(circle);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,558,"fail(""an exception should have been caught"");"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,559,} catch (EstimationException ee) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,560,// expected behavior
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,561,} catch (Exception e) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,562,"fail(""wrong exception type caught"");"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,566,private static class LinearProblem extends SimpleEstimationProblem {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,568,public LinearProblem(LinearMeasurement[] measurements) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,569,HashSet<EstimatedParameter> set = new HashSet<EstimatedParameter>();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,570,for (int i = 0; i < measurements.length; ++i) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,571,addMeasurement(measurements[i]);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,572,EstimatedParameter[] parameters = measurements[i].getParameters();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,573,for (int j = 0; j < parameters.length; ++j) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,574,set.add(parameters[j]);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,577,for (EstimatedParameter p : set) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,578,addParameter(p);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,584,private static class LinearMeasurement extends WeightedMeasurement {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,586,"public LinearMeasurement(double[] factors, EstimatedParameter[] parameters,"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,587,double setPoint) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,588,"super(1.0, setPoint, true);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,589,this.factors = factors;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,590,this.parameters = parameters;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,591,setIgnored(false);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,594,public double getTheoreticalValue() {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,595,double v = 0;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,596,for (int i = 0; i < factors.length; ++i) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,597,v += factors[i] * parameters[i].getEstimate();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,599,return v;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,602,public double getPartial(EstimatedParameter parameter) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,603,for (int i = 0; i < parameters.length; ++i) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,604,if (parameters[i] == parameter) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,605,return factors[i];
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,608,return 0;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,611,public EstimatedParameter[] getParameters() {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,612,return parameters;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,615,private double[] factors;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,616,private EstimatedParameter[] parameters;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,617,private static final long serialVersionUID = -3922448707008868580L;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,621,private static class Circle implements EstimationProblem {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,623,"public Circle(double cx, double cy) {"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,624,"this.cx = new EstimatedParameter(""cx"", cx);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,625,"this.cy = new EstimatedParameter(new EstimatedParameter(""cy"", cy));"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,626,points  = new ArrayList<PointModel>();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,629,"public void addPoint(double px, double py) {"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,630,"points.add(new PointModel(px, py));"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,633,public int getM() {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,634,return points.size();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,637,public WeightedMeasurement[] getMeasurements() {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,638,return (WeightedMeasurement[]) points.toArray(new PointModel[points.size()]);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,641,public EstimatedParameter[] getAllParameters() {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,642,"return new EstimatedParameter[] { cx, cy };"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,645,public EstimatedParameter[] getUnboundParameters() {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,646,"return new EstimatedParameter[] { cx, cy };"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,649,public double getPartialRadiusX() {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,650,double dRdX = 0;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,651,for (PointModel point : points) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,652,dRdX += point.getPartialDiX();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,654,return dRdX / points.size();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,657,public double getPartialRadiusY() {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,658,double dRdY = 0;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,659,for (PointModel point : points) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,660,dRdY += point.getPartialDiY();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,662,return dRdY / points.size();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,665,public double getRadius() {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,666,double r = 0;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,667,for (PointModel point : points) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,668,r += point.getCenterDistance();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,670,return r / points.size();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,673,public double getX() {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,674,return cx.getEstimate();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,677,public double getY() {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,678,return cy.getEstimate();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,681,private class PointModel extends WeightedMeasurement {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,683,"public PointModel(double px, double py) {"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,684,"super(1.0, 0.0);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,685,this.px = px;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,686,this.py = py;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,689,public double getPartial(EstimatedParameter parameter) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,690,if (parameter == cx) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,691,return getPartialDiX() - getPartialRadiusX();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,692,} else if (parameter == cy) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,693,return getPartialDiY() - getPartialRadiusY();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,695,return 0;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,698,public double getCenterDistance() {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,699,double dx = px - cx.getEstimate();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,700,double dy = py - cy.getEstimate();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,701,return Math.sqrt(dx * dx + dy * dy);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,704,public double getPartialDiX() {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,705,return (cx.getEstimate() - px) / getCenterDistance();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,708,public double getPartialDiY() {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,709,return (cy.getEstimate() - py) / getCenterDistance();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,712,public double getTheoreticalValue() {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,713,return getCenterDistance() - getRadius();
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,716,private double px;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,717,private double py;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,718,private static final long serialVersionUID = 1L;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,722,private EstimatedParameter cx;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,723,private EstimatedParameter cy;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,724,private ArrayList<PointModel> points;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,728,public static Test suite() {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,729,return new TestSuite(GaussNewtonEstimatorTest.class);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,18,package org.apache.commons.math.estimation;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,20,import java.util.ArrayList;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,21,import java.util.HashSet;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,23,import junit.framework.Test;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,24,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,25,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,28,* <p>Some of the unit tests are re-implementations of the MINPACK <a
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,29,"* href=""http://www.netlib.org/minpack/ex/file17"">file17</a> and <a"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,30,"* href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,31,* The redistribution policy for MINPACK is available <a
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,32,"* href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,33,"* convenience, it is reproduced below.</p>"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,35,"* <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,36,* <tr><td>
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,37,*    Minpack Copyright Notice (1999) University of Chicago.
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,38,*    All rights reserved
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,39,* </td></tr>
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,40,* <tr><td>
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,41,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,42,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,43,* are met:
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,44,* <ol>
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,45,*  <li>Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,46,"*      notice, this list of conditions and the following disclaimer.</li>"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,47,* <li>Redistributions in binary form must reproduce the above
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,48,"*     copyright notice, this list of conditions and the following"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,49,*     disclaimer in the documentation and/or other materials provided
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,50,*     with the distribution.</li>
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,51,"* <li>The end-user documentation included with the redistribution, if any,"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,52,*     must include the following acknowledgment:
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,53,*     <code>This product includes software developed by the University of
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,54,"*           Chicago, as Operator of Argonne National Laboratory.</code>"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,55,"*     Alternately, this acknowledgment may appear in the software itself,"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,56,*     if and wherever such third-party acknowledgments normally appear.</li>
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,57,"* <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,58,"*     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,59,"*     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,60,"*     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,61,"*     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,62,"*     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,63,"*     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,64,"*     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,65,"*     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,66,"*     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,67,*     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,68,"*     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,69,*     BE CORRECTED.</strong></li>
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,70,* <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,71,"*     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,72,"*     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,73,"*     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,74,"*     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,75,"*     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,76,"*     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,77,"*     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,78,*     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,79,*     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,80,* <ol></td></tr>
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,81,* </table>
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,83,* @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran minpack tests)
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,84,* @author Burton S. Garbow (original fortran minpack tests)
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,85,* @author Kenneth E. Hillstrom (original fortran minpack tests)
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,86,* @author Jorge J. More (original fortran minpack tests)
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,87,* @author Luc Maisonobe (non-minpack tests and minpack tests Java translation)
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,89,@Deprecated
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,90,public class LevenbergMarquardtEstimatorTest
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,91,extends TestCase {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,93,public LevenbergMarquardtEstimatorTest(String name) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,94,super(name);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,97,public void testTrivial() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,98,LinearProblem problem =
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,99,new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,100,"new LinearMeasurement(new double[] {2},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,101,new EstimatedParameter[] {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,102,"new EstimatedParameter(""p0"", 0)"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,103,"}, 3.0)"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,105,LevenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,106,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,107,"assertEquals(0, estimator.getRMS(problem), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,108,try {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,109,estimator.guessParametersErrors(problem);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,110,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,111,} catch (EstimationException ee) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,112,// expected behavior
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,113,} catch (Exception e) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,114,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,116,"assertEquals(1.5,"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,117,"problem.getUnboundParameters()[0].getEstimate(),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,118,1.0e-10);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,121,public void testQRColumnsPermutation() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,123,EstimatedParameter[] x = {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,124,"new EstimatedParameter(""p0"", 0), new EstimatedParameter(""p1"", 0)"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,126,LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,127,"new LinearMeasurement(new double[] { 1.0, -1.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,128,"new EstimatedParameter[] { x[0], x[1] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,129,"4.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,130,"new LinearMeasurement(new double[] { 2.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,131,"new EstimatedParameter[] { x[1] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,132,"6.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,133,"new LinearMeasurement(new double[] { 1.0, -2.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,134,"new EstimatedParameter[] { x[0], x[1] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,135,1.0)
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,138,LevenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,139,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,140,"assertEquals(0, estimator.getRMS(problem), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,141,"assertEquals(7.0, x[0].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,142,"assertEquals(3.0, x[1].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,146,public void testNoDependency() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,147,EstimatedParameter[] p = new EstimatedParameter[] {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,148,"new EstimatedParameter(""p0"", 0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,149,"new EstimatedParameter(""p1"", 0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,150,"new EstimatedParameter(""p2"", 0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,151,"new EstimatedParameter(""p3"", 0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,152,"new EstimatedParameter(""p4"", 0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,153,"new EstimatedParameter(""p5"", 0)"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,155,LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,156,"new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[0] }, 0.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,157,"new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[1] }, 1.1),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,158,"new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[2] }, 2.2),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,159,"new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[3] }, 3.3),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,160,"new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[4] }, 4.4),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,161,"new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[5] }, 5.5)"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,163,LevenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,164,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,165,"assertEquals(0, estimator.getRMS(problem), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,166,for (int i = 0; i < p.length; ++i) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,167,"assertEquals(0.55 * i, p[i].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,171,public void testOneSet() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,173,EstimatedParameter[] p = {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,174,"new EstimatedParameter(""p0"", 0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,175,"new EstimatedParameter(""p1"", 0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,176,"new EstimatedParameter(""p2"", 0)"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,178,LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,179,"new LinearMeasurement(new double[] { 1.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,180,"new EstimatedParameter[] { p[0] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,181,"1.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,182,"new LinearMeasurement(new double[] { -1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,183,"new EstimatedParameter[] { p[0], p[1] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,184,"1.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,185,"new LinearMeasurement(new double[] { -1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,186,"new EstimatedParameter[] { p[1], p[2] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,187,1.0)
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,190,LevenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,191,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,192,"assertEquals(0, estimator.getRMS(problem), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,193,"assertEquals(1.0, p[0].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,194,"assertEquals(2.0, p[1].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,195,"assertEquals(3.0, p[2].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,199,public void testTwoSets() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,200,EstimatedParameter[] p = {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,201,"new EstimatedParameter(""p0"", 0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,202,"new EstimatedParameter(""p1"", 1),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,203,"new EstimatedParameter(""p2"", 2),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,204,"new EstimatedParameter(""p3"", 3),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,205,"new EstimatedParameter(""p4"", 4),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,206,"new EstimatedParameter(""p5"", 5)"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,209,double epsilon = 1.0e-7;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,210,LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,212,// 4 elements sub-problem
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,213,"new LinearMeasurement(new double[] {  2.0,  1.0,  4.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,214,"new EstimatedParameter[] { p[0], p[1], p[3] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,215,"2.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,216,"new LinearMeasurement(new double[] { -4.0, -2.0,   3.0, -7.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,217,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,218,"-9.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,219,"new LinearMeasurement(new double[] {  4.0,  1.0,  -2.0,  8.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,220,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,221,"2.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,222,"new LinearMeasurement(new double[] { -3.0, -12.0, -1.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,223,"new EstimatedParameter[] { p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,224,"2.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,226,// 2 elements sub-problem
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,227,"new LinearMeasurement(new double[] { epsilon, 1.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,228,"new EstimatedParameter[] { p[4], p[5] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,229,"1.0 + epsilon * epsilon),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,230,"new LinearMeasurement(new double[] {  1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,231,"new EstimatedParameter[] { p[4], p[5] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,232,2.0)
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,236,LevenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,237,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,238,"assertEquals(0, estimator.getRMS(problem), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,239,"assertEquals( 3.0, p[0].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,240,"assertEquals( 4.0, p[1].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,241,"assertEquals(-1.0, p[2].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,242,"assertEquals(-2.0, p[3].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,243,"assertEquals( 1.0 + epsilon, p[4].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,244,"assertEquals( 1.0 - epsilon, p[5].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,248,public void testNonInversible() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,250,EstimatedParameter[] p = {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,251,"new EstimatedParameter(""p0"", 0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,252,"new EstimatedParameter(""p1"", 0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,253,"new EstimatedParameter(""p2"", 0)"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,255,LinearMeasurement[] m = new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,256,"new LinearMeasurement(new double[] {  1.0, 2.0, -3.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,257,"new EstimatedParameter[] { p[0], p[1], p[2] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,258,"1.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,259,"new LinearMeasurement(new double[] {  2.0, 1.0,  3.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,260,"new EstimatedParameter[] { p[0], p[1], p[2] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,261,"1.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,262,"new LinearMeasurement(new double[] { -3.0, -9.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,263,"new EstimatedParameter[] { p[0], p[2] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,264,1.0)
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,266,LinearProblem problem = new LinearProblem(m);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,268,LevenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,269,double initialCost = estimator.getRMS(problem);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,270,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,271,assertTrue(estimator.getRMS(problem) < initialCost);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,272,assertTrue(Math.sqrt(m.length) * estimator.getRMS(problem) > 0.6);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,273,try {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,274,estimator.getCovariances(problem);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,275,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,276,} catch (EstimationException ee) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,277,// expected behavior
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,278,} catch (Exception e) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,279,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,281,double dJ0 = 2 * (m[0].getResidual() * m[0].getPartial(p[0])
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,282,+ m[1].getResidual() * m[1].getPartial(p[0])
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,283,+ m[2].getResidual() * m[2].getPartial(p[0]));
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,284,double dJ1 = 2 * (m[0].getResidual() * m[0].getPartial(p[1])
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,285,+ m[1].getResidual() * m[1].getPartial(p[1]));
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,286,double dJ2 = 2 * (m[0].getResidual() * m[0].getPartial(p[2])
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,287,+ m[1].getResidual() * m[1].getPartial(p[2])
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,288,+ m[2].getResidual() * m[2].getPartial(p[2]));
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,289,"assertEquals(0, dJ0, 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,290,"assertEquals(0, dJ1, 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,291,"assertEquals(0, dJ2, 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,295,public void testIllConditioned() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,296,EstimatedParameter[] p = {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,297,"new EstimatedParameter(""p0"", 0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,298,"new EstimatedParameter(""p1"", 1),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,299,"new EstimatedParameter(""p2"", 2),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,300,"new EstimatedParameter(""p3"", 3)"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,303,LinearProblem problem1 = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,304,"new LinearMeasurement(new double[] { 10.0, 7.0,  8.0,  7.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,305,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,306,"32.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,307,"new LinearMeasurement(new double[] {  7.0, 5.0,  6.0,  5.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,308,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,309,"23.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,310,"new LinearMeasurement(new double[] {  8.0, 6.0, 10.0,  9.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,311,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,312,"33.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,313,"new LinearMeasurement(new double[] {  7.0, 5.0,  9.0, 10.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,314,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,315,31.0)
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,317,LevenbergMarquardtEstimator estimator1 = new LevenbergMarquardtEstimator();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,318,estimator1.estimate(problem1);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,319,"assertEquals(0, estimator1.getRMS(problem1), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,320,"assertEquals(1.0, p[0].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,321,"assertEquals(1.0, p[1].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,322,"assertEquals(1.0, p[2].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,323,"assertEquals(1.0, p[3].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,325,LinearProblem problem2 = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,326,"new LinearMeasurement(new double[] { 10.0, 7.0,  8.1,  7.2 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,327,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,328,"32.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,329,"new LinearMeasurement(new double[] {  7.08, 5.04,  6.0,  5.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,330,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,331,"23.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,332,"new LinearMeasurement(new double[] {  8.0, 5.98, 9.89,  9.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,333,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,334,"33.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,335,"new LinearMeasurement(new double[] {  6.99, 4.99,  9.0, 9.98 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,336,"new EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,337,31.0)
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,339,LevenbergMarquardtEstimator estimator2 = new LevenbergMarquardtEstimator();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,340,estimator2.estimate(problem2);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,341,"assertEquals(0, estimator2.getRMS(problem2), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,342,"assertEquals(-81.0, p[0].getEstimate(), 1.0e-8);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,343,"assertEquals(137.0, p[1].getEstimate(), 1.0e-8);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,344,"assertEquals(-34.0, p[2].getEstimate(), 1.0e-8);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,345,"assertEquals( 22.0, p[3].getEstimate(), 1.0e-8);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,349,public void testMoreEstimatedParametersSimple() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,351,EstimatedParameter[] p = {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,352,"new EstimatedParameter(""p0"", 7),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,353,"new EstimatedParameter(""p1"", 6),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,354,"new EstimatedParameter(""p2"", 5),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,355,"new EstimatedParameter(""p3"", 4)"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,357,LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,358,"new LinearMeasurement(new double[] { 3.0, 2.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,359,"new EstimatedParameter[] { p[0], p[1] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,360,"7.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,361,"new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,362,"new EstimatedParameter[] { p[1], p[2], p[3] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,363,"3.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,364,"new LinearMeasurement(new double[] { 2.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,365,"new EstimatedParameter[] { p[0], p[2] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,366,5.0)
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,369,LevenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,370,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,371,"assertEquals(0, estimator.getRMS(problem), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,375,public void testMoreEstimatedParametersUnsorted() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,376,EstimatedParameter[] p = {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,377,"new EstimatedParameter(""p0"", 2),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,378,"new EstimatedParameter(""p1"", 2),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,379,"new EstimatedParameter(""p2"", 2),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,380,"new EstimatedParameter(""p3"", 2),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,381,"new EstimatedParameter(""p4"", 2),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,382,"new EstimatedParameter(""p5"", 2)"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,384,LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,385,"new LinearMeasurement(new double[] { 1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,386,"new EstimatedParameter[] { p[0], p[1] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,387,"3.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,388,"new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,389,"new EstimatedParameter[] { p[2], p[3], p[4] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,390,"12.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,391,"new LinearMeasurement(new double[] { 1.0, -1.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,392,"new EstimatedParameter[] { p[4], p[5] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,393,"-1.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,394,"new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,395,"new EstimatedParameter[] { p[3], p[2], p[5] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,396,"7.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,397,"new LinearMeasurement(new double[] { 1.0, -1.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,398,"new EstimatedParameter[] { p[4], p[3] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,399,1.0)
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,402,LevenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,403,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,404,"assertEquals(0, estimator.getRMS(problem), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,405,"assertEquals(3.0, p[2].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,406,"assertEquals(4.0, p[3].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,407,"assertEquals(5.0, p[4].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,408,"assertEquals(6.0, p[5].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,412,public void testRedundantEquations() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,413,EstimatedParameter[] p = {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,414,"new EstimatedParameter(""p0"", 1),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,415,"new EstimatedParameter(""p1"", 1)"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,417,LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,418,"new LinearMeasurement(new double[] { 1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,419,"new EstimatedParameter[] { p[0], p[1] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,420,"3.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,421,"new LinearMeasurement(new double[] { 1.0, -1.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,422,"new EstimatedParameter[] { p[0], p[1] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,423,"1.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,424,"new LinearMeasurement(new double[] { 1.0, 3.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,425,"new EstimatedParameter[] { p[0], p[1] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,426,5.0)
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,429,LevenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,430,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,431,"assertEquals(0, estimator.getRMS(problem), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,432,"assertEquals(2.0, p[0].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,433,"assertEquals(1.0, p[1].getEstimate(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,437,public void testInconsistentEquations() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,438,EstimatedParameter[] p = {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,439,"new EstimatedParameter(""p0"", 1),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,440,"new EstimatedParameter(""p1"", 1)"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,442,LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,443,"new LinearMeasurement(new double[] { 1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,444,"new EstimatedParameter[] { p[0], p[1] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,445,"3.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,446,"new LinearMeasurement(new double[] { 1.0, -1.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,447,"new EstimatedParameter[] { p[0], p[1] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,448,"1.0),"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,449,"new LinearMeasurement(new double[] { 1.0, 3.0 },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,450,"new EstimatedParameter[] { p[0], p[1] },"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,451,4.0)
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,454,LevenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,455,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,456,assertTrue(estimator.getRMS(problem) > 0.1);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,460,public void testControlParameters() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,461,"Circle circle = new Circle(98.680, 47.345);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,462,"circle.addPoint( 30.0,  68.0);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,463,"circle.addPoint( 50.0,  -6.0);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,464,"circle.addPoint(110.0, -20.0);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,465,"circle.addPoint( 35.0,  15.0);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,466,"circle.addPoint( 45.0,  97.0);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,467,"checkEstimate(circle, 0.1, 10, 1.0e-14, 1.0e-16, 1.0e-10, false);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,468,"checkEstimate(circle, 0.1, 10, 1.0e-15, 1.0e-17, 1.0e-10, true);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,469,"checkEstimate(circle, 0.1,  5, 1.0e-15, 1.0e-16, 1.0e-10, true);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,470,"circle.addPoint(300, -300);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,471,"checkEstimate(circle, 0.1, 20, 1.0e-18, 1.0e-16, 1.0e-10, true);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,474,"private void checkEstimate(EstimationProblem problem,"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,475,"double initialStepBoundFactor, int maxCostEval,"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,476,"double costRelativeTolerance, double parRelativeTolerance,"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,477,"double orthoTolerance, boolean shouldFail) {"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,478,try {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,479,LevenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,480,estimator.setInitialStepBoundFactor(initialStepBoundFactor);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,481,estimator.setMaxCostEval(maxCostEval);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,482,estimator.setCostRelativeTolerance(costRelativeTolerance);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,483,estimator.setParRelativeTolerance(parRelativeTolerance);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,484,estimator.setOrthoTolerance(orthoTolerance);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,485,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,486,assertTrue(! shouldFail);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,487,} catch (EstimationException ee) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,488,assertTrue(shouldFail);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,489,} catch (Exception e) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,490,"fail(""wrong exception type caught"");"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,494,public void testCircleFitting() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,495,"Circle circle = new Circle(98.680, 47.345);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,496,"circle.addPoint( 30.0,  68.0);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,497,"circle.addPoint( 50.0,  -6.0);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,498,"circle.addPoint(110.0, -20.0);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,499,"circle.addPoint( 35.0,  15.0);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,500,"circle.addPoint( 45.0,  97.0);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,501,LevenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,502,estimator.estimate(circle);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,503,assertTrue(estimator.getCostEvaluations() < 10);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,504,assertTrue(estimator.getJacobianEvaluations() < 10);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,505,double rms = estimator.getRMS(circle);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,506,"assertEquals(1.768262623567235,  Math.sqrt(circle.getM()) * rms,  1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,507,"assertEquals(69.96016176931406, circle.getRadius(), 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,508,"assertEquals(96.07590211815305, circle.getX(),      1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,509,"assertEquals(48.13516790438953, circle.getY(),      1.0e-10);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,510,double[][] cov = estimator.getCovariances(circle);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,511,"assertEquals(1.839, cov[0][0], 0.001);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,512,"assertEquals(0.731, cov[0][1], 0.001);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,513,"assertEquals(cov[0][1], cov[1][0], 1.0e-14);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,514,"assertEquals(0.786, cov[1][1], 0.001);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,515,double[] errors = estimator.guessParametersErrors(circle);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,516,"assertEquals(1.384, errors[0], 0.001);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,517,"assertEquals(0.905, errors[1], 0.001);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,519,// add perfect measurements and check errors are reduced
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,520,double cx = circle.getX();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,521,double cy = circle.getY();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,522,double  r = circle.getRadius();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,523,for (double d= 0; d < 2 * Math.PI; d += 0.01) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,524,"circle.addPoint(cx + r * Math.cos(d), cy + r * Math.sin(d));"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,526,estimator = new LevenbergMarquardtEstimator();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,527,estimator.estimate(circle);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,528,cov = estimator.getCovariances(circle);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,529,"assertEquals(0.004, cov[0][0], 0.001);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,530,"assertEquals(6.40e-7, cov[0][1], 1.0e-9);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,531,"assertEquals(cov[0][1], cov[1][0], 1.0e-14);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,532,"assertEquals(0.003, cov[1][1], 0.001);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,533,errors = estimator.guessParametersErrors(circle);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,534,"assertEquals(0.004, errors[0], 0.001);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,535,"assertEquals(0.004, errors[1], 0.001);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,539,public void testCircleFittingBadInit() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,540,"Circle circle = new Circle(-12, -12);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,541,double[][] points = new double[][] {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,542,"{-0.312967,  0.072366}, {-0.339248,  0.132965}, {-0.379780,  0.202724},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,543,"{-0.390426,  0.260487}, {-0.361212,  0.328325}, {-0.346039,  0.392619},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,544,"{-0.280579,  0.444306}, {-0.216035,  0.470009}, {-0.149127,  0.493832},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,545,"{-0.075133,  0.483271}, {-0.007759,  0.452680}, { 0.060071,  0.410235},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,546,"{ 0.103037,  0.341076}, { 0.118438,  0.273884}, { 0.131293,  0.192201},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,547,"{ 0.115869,  0.129797}, { 0.072223,  0.058396}, { 0.022884,  0.000718},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,548,"{-0.053355, -0.020405}, {-0.123584, -0.032451}, {-0.216248, -0.032862},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,549,"{-0.278592, -0.005008}, {-0.337655,  0.056658}, {-0.385899,  0.112526},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,550,"{-0.405517,  0.186957}, {-0.415374,  0.262071}, {-0.387482,  0.343398},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,551,"{-0.347322,  0.397943}, {-0.287623,  0.458425}, {-0.223502,  0.475513},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,552,"{-0.135352,  0.478186}, {-0.061221,  0.483371}, { 0.003711,  0.422737},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,553,"{ 0.065054,  0.375830}, { 0.108108,  0.297099}, { 0.123882,  0.222850},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,554,"{ 0.117729,  0.134382}, { 0.085195,  0.056820}, { 0.029800, -0.019138},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,555,"{-0.027520, -0.072374}, {-0.102268, -0.091555}, {-0.200299, -0.106578},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,556,"{-0.292731, -0.091473}, {-0.356288, -0.051108}, {-0.420561,  0.014926},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,557,"{-0.471036,  0.074716}, {-0.488638,  0.182508}, {-0.485990,  0.254068},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,558,"{-0.463943,  0.338438}, {-0.406453,  0.404704}, {-0.334287,  0.466119},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,559,"{-0.254244,  0.503188}, {-0.161548,  0.495769}, {-0.075733,  0.495560},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,560,"{ 0.001375,  0.434937}, { 0.082787,  0.385806}, { 0.115490,  0.323807},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,561,"{ 0.141089,  0.223450}, { 0.138693,  0.131703}, { 0.126415,  0.049174},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,562,"{ 0.066518, -0.010217}, {-0.005184, -0.070647}, {-0.080985, -0.103635},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,563,"{-0.177377, -0.116887}, {-0.260628, -0.100258}, {-0.335756, -0.056251},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,564,"{-0.405195, -0.000895}, {-0.444937,  0.085456}, {-0.484357,  0.175597},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,565,"{-0.472453,  0.248681}, {-0.438580,  0.347463}, {-0.402304,  0.422428},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,566,"{-0.326777,  0.479438}, {-0.247797,  0.505581}, {-0.152676,  0.519380},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,567,"{-0.071754,  0.516264}, { 0.015942,  0.472802}, { 0.076608,  0.419077},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,568,"{ 0.127673,  0.330264}, { 0.159951,  0.262150}, { 0.153530,  0.172681},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,569,"{ 0.140653,  0.089229}, { 0.078666,  0.024981}, { 0.023807, -0.037022},"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,570,"{-0.048837, -0.077056}, {-0.127729, -0.075338}, {-0.221271, -0.067526}"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,572,for (int i = 0; i < points.length; ++i) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,573,"circle.addPoint(points[i][0], points[i][1]);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,575,LevenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,576,estimator.estimate(circle);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,577,assertTrue(estimator.getCostEvaluations() < 15);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,578,assertTrue(estimator.getJacobianEvaluations() < 10);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,579,"assertEquals( 0.030184491196225207, estimator.getRMS(circle), 1.0e-9);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,580,"assertEquals( 0.2922350065939634,   circle.getRadius(), 1.0e-9);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,581,"assertEquals(-0.15173845023862165,  circle.getX(),      1.0e-8);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,582,"assertEquals( 0.20750021499570379,  circle.getY(),      1.0e-8);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,585,public void testMath199() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,586,try {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,587,QuadraticProblem problem = new QuadraticProblem();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,588,"problem.addPoint (0, -3.182591015485607, 0.0);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,589,"problem.addPoint (1, -2.5581184967730577, 4.4E-323);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,590,"problem.addPoint (2, -2.1488478161387325, 1.0);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,591,"problem.addPoint (3, -1.9122489313410047, 4.4E-323);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,592,"problem.addPoint (4, 1.7785661310051026, 0.0);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,593,new LevenbergMarquardtEstimator().estimate(problem);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,594,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,595,} catch (EstimationException ee) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,596,// expected behavior
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,601,private static class LinearProblem implements EstimationProblem {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,603,public LinearProblem(LinearMeasurement[] measurements) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,604,this.measurements = measurements;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,607,public WeightedMeasurement[] getMeasurements() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,608,return measurements;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,611,public EstimatedParameter[] getUnboundParameters() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,612,return getAllParameters();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,615,public EstimatedParameter[] getAllParameters() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,616,HashSet<EstimatedParameter> set = new HashSet<EstimatedParameter>();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,617,for (int i = 0; i < measurements.length; ++i) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,618,EstimatedParameter[] parameters = measurements[i].getParameters();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,619,for (int j = 0; j < parameters.length; ++j) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,620,set.add(parameters[j]);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,623,return (EstimatedParameter[]) set.toArray(new EstimatedParameter[set.size()]);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,626,private LinearMeasurement[] measurements;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,630,private static class LinearMeasurement extends WeightedMeasurement {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,632,"public LinearMeasurement(double[] factors, EstimatedParameter[] parameters,"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,633,double setPoint) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,634,"super(1.0, setPoint);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,635,this.factors = factors;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,636,this.parameters = parameters;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,639,public double getTheoreticalValue() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,640,double v = 0;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,641,for (int i = 0; i < factors.length; ++i) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,642,v += factors[i] * parameters[i].getEstimate();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,644,return v;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,647,public double getPartial(EstimatedParameter parameter) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,648,for (int i = 0; i < parameters.length; ++i) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,649,if (parameters[i] == parameter) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,650,return factors[i];
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,653,return 0;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,656,public EstimatedParameter[] getParameters() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,657,return parameters;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,660,private double[] factors;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,661,private EstimatedParameter[] parameters;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,662,private static final long serialVersionUID = -3922448707008868580L;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,666,private static class Circle implements EstimationProblem {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,668,"public Circle(double cx, double cy) {"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,669,"this.cx = new EstimatedParameter(""cx"", cx);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,670,"this.cy = new EstimatedParameter(""cy"", cy);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,671,points  = new ArrayList<PointModel>();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,674,"public void addPoint(double px, double py) {"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,675,"points.add(new PointModel(px, py));"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,678,public int getM() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,679,return points.size();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,682,public WeightedMeasurement[] getMeasurements() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,683,return (WeightedMeasurement[]) points.toArray(new PointModel[points.size()]);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,686,public EstimatedParameter[] getAllParameters() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,687,"return new EstimatedParameter[] { cx, cy };"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,690,public EstimatedParameter[] getUnboundParameters() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,691,"return new EstimatedParameter[] { cx, cy };"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,694,public double getPartialRadiusX() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,695,double dRdX = 0;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,696,for (PointModel point : points) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,697,dRdX += point.getPartialDiX();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,699,return dRdX / points.size();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,702,public double getPartialRadiusY() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,703,double dRdY = 0;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,704,for (PointModel point : points) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,705,dRdY += point.getPartialDiY();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,707,return dRdY / points.size();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,710,public double getRadius() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,711,double r = 0;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,712,for (PointModel point : points) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,713,r += point.getCenterDistance();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,715,return r / points.size();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,718,public double getX() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,719,return cx.getEstimate();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,722,public double getY() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,723,return cy.getEstimate();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,726,private class PointModel extends WeightedMeasurement {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,728,"public PointModel(double px, double py) {"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,729,"super(1.0, 0.0);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,730,this.px = px;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,731,this.py = py;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,734,public double getPartial(EstimatedParameter parameter) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,735,if (parameter == cx) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,736,return getPartialDiX() - getPartialRadiusX();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,737,} else if (parameter == cy) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,738,return getPartialDiY() - getPartialRadiusY();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,740,return 0;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,743,public double getCenterDistance() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,744,double dx = px - cx.getEstimate();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,745,double dy = py - cy.getEstimate();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,746,return Math.sqrt(dx * dx + dy * dy);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,749,public double getPartialDiX() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,750,return (cx.getEstimate() - px) / getCenterDistance();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,753,public double getPartialDiY() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,754,return (cy.getEstimate() - py) / getCenterDistance();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,757,public double getTheoreticalValue() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,758,return getCenterDistance() - getRadius();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,761,private double px;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,762,private double py;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,763,private static final long serialVersionUID = 1L;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,767,private EstimatedParameter cx;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,768,private EstimatedParameter cy;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,769,private ArrayList<PointModel> points;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,773,private static class QuadraticProblem extends SimpleEstimationProblem {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,775,private EstimatedParameter a;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,776,private EstimatedParameter b;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,777,private EstimatedParameter c;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,779,public QuadraticProblem() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,780,"a = new EstimatedParameter(""a"", 0.0);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,781,"b = new EstimatedParameter(""b"", 0.0);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,782,"c = new EstimatedParameter(""c"", 0.0);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,783,addParameter(a);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,784,addParameter(b);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,785,addParameter(c);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,788,"public void addPoint(double x, double y, double w) {"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,789,"addMeasurement(new LocalMeasurement(x, y, w));"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,792,public double getA() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,793,return a.getEstimate();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,796,public double getB() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,797,return b.getEstimate();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,800,public double getC() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,801,return c.getEstimate();
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,804,public double theoreticalValue(double x) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,805,return ( (a.getEstimate() * x + b.getEstimate() ) * x + c.getEstimate());
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,808,"private double partial(double x, EstimatedParameter parameter) {"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,809,if (parameter == a) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,810,return x * x;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,811,} else if (parameter == b) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,812,return x;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,813,} else {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,814,return 1.0;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,818,private class LocalMeasurement extends WeightedMeasurement {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,820,private static final long serialVersionUID = 1555043155023729130L;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,821,private final double x;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,823,// constructor
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,824,"public LocalMeasurement(double x, double y, double w) {"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,825,"super(w, y);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,826,this.x = x;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,829,public double getTheoreticalValue() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,830,return theoreticalValue(x);
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,833,public double getPartial(EstimatedParameter parameter) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,834,"return partial(x, parameter);"
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,840,public static Test suite() {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,841,return new TestSuite(LevenbergMarquardtEstimatorTest.class);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,18,package org.apache.commons.math.estimation;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,20,import java.util.Arrays;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,22,import org.apache.commons.math.estimation.EstimatedParameter;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,23,import org.apache.commons.math.estimation.EstimationException;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,24,import org.apache.commons.math.estimation.EstimationProblem;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,25,import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,26,import org.apache.commons.math.estimation.WeightedMeasurement;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,28,import junit.framework.*;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,31,* <p>Some of the unit tests are re-implementations of the MINPACK <a
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,32,"* href=""http://www.netlib.org/minpack/ex/file17"">file17</a> and <a"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,33,"* href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,34,* The redistribution policy for MINPACK is available <a
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,35,"* href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,36,"* convenience, it is reproduced below.</p>"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,38,"* <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,39,* <tr><td>
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,40,*    Minpack Copyright Notice (1999) University of Chicago.
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,41,*    All rights reserved
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,42,* </td></tr>
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,43,* <tr><td>
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,44,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,45,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,46,* are met:
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,47,* <ol>
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,48,*  <li>Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,49,"*      notice, this list of conditions and the following disclaimer.</li>"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,50,* <li>Redistributions in binary form must reproduce the above
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,51,"*     copyright notice, this list of conditions and the following"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,52,*     disclaimer in the documentation and/or other materials provided
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,53,*     with the distribution.</li>
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,54,"* <li>The end-user documentation included with the redistribution, if any,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,55,*     must include the following acknowledgment:
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,56,*     <code>This product includes software developed by the University of
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,57,"*           Chicago, as Operator of Argonne National Laboratory.</code>"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,58,"*     Alternately, this acknowledgment may appear in the software itself,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,59,*     if and wherever such third-party acknowledgments normally appear.</li>
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,60,"* <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,61,"*     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,62,"*     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,63,"*     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,64,"*     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,65,"*     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,66,"*     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,67,"*     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,68,"*     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,69,"*     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,70,*     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,71,"*     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,72,*     BE CORRECTED.</strong></li>
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,73,* <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,74,"*     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,75,"*     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,76,"*     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,77,"*     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,78,"*     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,79,"*     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,80,"*     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,81,*     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,82,*     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,83,* <ol></td></tr>
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,84,* </table>
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,86,* @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran minpack tests)
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,87,* @author Burton S. Garbow (original fortran minpack tests)
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,88,* @author Kenneth E. Hillstrom (original fortran minpack tests)
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,89,* @author Jorge J. More (original fortran minpack tests)
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,90,* @author Luc Maisonobe (non-minpack tests and minpack tests Java translation)
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,92,@Deprecated
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,93,public class MinpackTest
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,94,extends TestCase {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,96,public MinpackTest(String name) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,97,super(name);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,100,public void testMinpackLinearFullRank()
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,101,throws EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,102,"minpackTest(new LinearFullRankFunction(10, 5, 1.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,103,"5.0, 2.23606797749979), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,104,"minpackTest(new LinearFullRankFunction(50, 5, 1.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,105,"8.06225774829855, 6.70820393249937), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,108,public void testMinpackLinearRank1()
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,109,throws EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,110,"minpackTest(new LinearRank1Function(10, 5, 1.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,111,"291.521868819476, 1.4638501094228), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,112,"minpackTest(new LinearRank1Function(50, 5, 1.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,113,"3101.60039334535, 3.48263016573496), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,116,public void testMinpackLinearRank1ZeroColsAndRows()
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,117,throws EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,118,"minpackTest(new LinearRank1ZeroColsAndRowsFunction(10, 5, 1.0), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,119,"minpackTest(new LinearRank1ZeroColsAndRowsFunction(50, 5, 1.0), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,122,public void testMinpackRosenbrok()
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,123,throws EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,124,"minpackTest(new RosenbrockFunction(new double[] { -1.2, 1.0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,125,"Math.sqrt(24.2)), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,126,"minpackTest(new RosenbrockFunction(new double[] { -12.0, 10.0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,127,"Math.sqrt(1795769.0)), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,128,"minpackTest(new RosenbrockFunction(new double[] { -120.0, 100.0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,129,"11.0 * Math.sqrt(169000121.0)), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,132,public void testMinpackHelicalValley()
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,133,throws EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,134,"minpackTest(new HelicalValleyFunction(new double[] { -1.0, 0.0, 0.0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,135,"50.0), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,136,"minpackTest(new HelicalValleyFunction(new double[] { -10.0, 0.0, 0.0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,137,"102.95630140987), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,138,"minpackTest(new HelicalValleyFunction(new double[] { -100.0, 0.0, 0.0},"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,139,"991.261822123701), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,142,public void testMinpackPowellSingular()
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,143,throws EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,144,"minpackTest(new PowellSingularFunction(new double[] { 3.0, -1.0, 0.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,145,"14.6628782986152), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,146,"minpackTest(new PowellSingularFunction(new double[] { 30.0, -10.0, 0.0, 10.0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,147,"1270.9838708654), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,148,"minpackTest(new PowellSingularFunction(new double[] { 300.0, -100.0, 0.0, 100.0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,149,"126887.903284750), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,152,public void testMinpackFreudensteinRoth()
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,153,throws EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,154,"minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,155,"20.0124960961895, 6.99887517584575,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,156,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,157,"11.4124844654993,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,158,-0.896827913731509
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,159,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,160,"minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,161,"12432.833948863, 6.9988751744895,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,162,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,163,"11.4130046614746,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,164,-0.896796038685958
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,165,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,166,"minpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,167,"11426454.595762, 6.99887517242903,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,168,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,169,"11.4127817857886,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,170,-0.89680510749204
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,171,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,174,public void testMinpackBard()
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,175,throws EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,176,"minpackTest(new BardFunction(1.0, 6.45613629515967, 0.0906359603390466,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,177,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,178,"0.0824105765758334,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,179,"1.1330366534715,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,180,2.34369463894115
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,181,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,182,"minpackTest(new BardFunction(10.0, 36.1418531596785, 4.17476870138539,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,183,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,184,"0.840666673818329,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,185,"-158848033.259565,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,186,-164378671.653535
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,187,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,188,"minpackTest(new BardFunction(100.0, 384.114678637399, 4.17476870135969,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,189,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,190,"0.840666673867645,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,191,"-158946167.205518,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,192,-164464906.857771
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,193,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,196,public void testMinpackKowalikOsborne()
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,197,throws EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,198,"minpackTest(new KowalikOsborneFunction(new double[] { 0.25, 0.39, 0.415, 0.39 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,199,"0.0728915102882945,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,200,"0.017535837721129,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,201,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,202,"0.192807810476249,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,203,"0.191262653354071,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,204,"0.123052801046931,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,205,0.136053221150517
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,206,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,207,"minpackTest(new KowalikOsborneFunction(new double[] { 2.5, 3.9, 4.15, 3.9 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,208,"2.97937007555202,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,209,"0.032052192917937,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,210,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,211,"728675.473768287,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,212,"-14.0758803129393,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,213,"-32977797.7841797,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,214,-20571594.1977912
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,215,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,216,"minpackTest(new KowalikOsborneFunction(new double[] { 25.0, 39.0, 41.5, 39.0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,217,"29.9590617016037,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,218,"0.0175364017658228,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,219,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,220,"0.192948328597594,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,221,"0.188053165007911,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,222,"0.122430604321144,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,223,0.134575665392506
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,224,"}), true);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,227,public void testMinpackMeyer()
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,228,throws EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,229,"minpackTest(new MeyerFunction(new double[] { 0.02, 4000.0, 250.0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,230,"41153.4665543031, 9.37794514651874,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,231,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,232,"0.00560963647102661,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,233,"6181.34634628659,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,234,345.223634624144
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,235,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,236,"minpackTest(new MeyerFunction(new double[] { 0.2, 40000.0, 2500.0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,237,"4168216.89130846, 792.917871779501,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,238,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,239,"1.42367074157994e-11,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,240,"33695.7133432541,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,241,901.268527953801
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,242,"}), true);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,245,public void testMinpackWatson()
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,246,throws EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,248,"minpackTest(new WatsonFunction(6, 0.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,249,"5.47722557505166, 0.0478295939097601,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,250,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,251,"-0.0157249615083782, 1.01243488232965,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,252,"-0.232991722387673,  1.26043101102818,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,253,"-1.51373031394421,   0.99299727291842"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,254,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,255,"minpackTest(new WatsonFunction(6, 10.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,256,"6433.12578950026, 0.0478295939096951,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,257,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,258,"-0.0157251901386677, 1.01243485860105,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,259,"-0.232991545843829,  1.26042932089163,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,260,"-1.51372776706575,   0.99299573426328"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,261,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,262,"minpackTest(new WatsonFunction(6, 100.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,263,"674256.040605213, 0.047829593911544,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,264,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,265,"-0.0157247019712586, 1.01243490925658,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,266,"-0.232991922761641,  1.26043292929555,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,267,"-1.51373320452707,   0.99299901922322"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,268,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,270,"minpackTest(new WatsonFunction(9, 0.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,271,"5.47722557505166, 0.00118311459212420,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,272,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,273,"-0.153070644166722e-4, 0.999789703934597,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,274,"0.0147639634910978,   0.146342330145992,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,275,"1.00082109454817,    -2.61773112070507,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,276,"4.10440313943354,    -3.14361226236241,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,277,1.05262640378759
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,278,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,279,"minpackTest(new WatsonFunction(9, 10.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,280,"12088.127069307, 0.00118311459212513,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,281,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,282,"-0.153071334849279e-4, 0.999789703941234,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,283,"0.0147639629786217,   0.146342334818836,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,284,"1.00082107321386,    -2.61773107084722,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,285,"4.10440307655564,    -3.14361222178686,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,286,1.05262639322589
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,287,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,288,"minpackTest(new WatsonFunction(9, 100.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,289,"1269109.29043834, 0.00118311459212384,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,290,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,291,"-0.153069523352176e-4, 0.999789703958371,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,292,"0.0147639625185392,   0.146342341096326,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,293,"1.00082104729164,    -2.61773101573645,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,294,"4.10440301427286,    -3.14361218602503,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,295,1.05262638516774
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,296,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,298,"minpackTest(new WatsonFunction(12, 0.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,299,"5.47722557505166, 0.217310402535861e-4,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,300,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,301,"-0.660266001396382e-8, 1.00000164411833,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,302,"-0.000563932146980154, 0.347820540050756,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,303,"-0.156731500244233,    1.05281515825593,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,304,"-3.24727109519451,     7.2884347837505,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,305,"-10.271848098614,       9.07411353715783,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,306,"-4.54137541918194,     1.01201187975044"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,307,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,308,"minpackTest(new WatsonFunction(12, 10.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,309,"19220.7589790951, 0.217310402518509e-4,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,310,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,311,"-0.663710223017410e-8, 1.00000164411787,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,312,"-0.000563932208347327, 0.347820540486998,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,313,"-0.156731503955652,    1.05281517654573,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,314,"-3.2472711515214,      7.28843489430665,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,315,"-10.2718482369638,      9.07411364383733,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,316,"-4.54137546533666,     1.01201188830857"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,317,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,318,"minpackTest(new WatsonFunction(12, 100.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,319,"2018918.04462367, 0.217310402539845e-4,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,320,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,321,"-0.663806046485249e-8, 1.00000164411786,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,322,"-0.000563932210324959, 0.347820540503588,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,323,"-0.156731504091375,    1.05281517718031,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,324,"-3.24727115337025,     7.28843489775302,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,325,"-10.2718482410813,      9.07411364688464,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,326,"-4.54137546660822,     1.0120118885369"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,327,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,331,public void testMinpackBox3Dimensional()
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,332,throws EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,333,"minpackTest(new Box3DimensionalFunction(10, new double[] { 0.0, 10.0, 20.0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,334,"32.1115837449572), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,337,public void testMinpackJennrichSampson()
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,338,throws EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,339,"minpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,340,"64.5856498144943, 11.1517793413499,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,341,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,342,"0.257819926636811, 0.257829976764542"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,343,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,346,public void testMinpackBrownDennis()
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,347,throws EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,348,"minpackTest(new BrownDennisFunction(20,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,349,"new double[] { 25.0, 5.0, -5.0, -1.0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,350,"2815.43839161816, 292.954288244866,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,351,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,352,"-11.59125141003, 13.2024883984741,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,353,"-0.403574643314272, 0.236736269844604"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,354,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,355,"minpackTest(new BrownDennisFunction(20,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,356,"new double[] { 250.0, 50.0, -50.0, -10.0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,357,"555073.354173069, 292.954270581415,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,358,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,359,"-11.5959274272203, 13.2041866926242,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,360,"-0.403417362841545, 0.236771143410386"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,361,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,362,"minpackTest(new BrownDennisFunction(20,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,363,"new double[] { 2500.0, 500.0, -500.0, -100.0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,364,"61211252.2338581, 292.954306151134,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,365,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,366,"-11.5902596937374, 13.2020628854665,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,367,"-0.403688070279258, 0.236665033746463"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,368,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,371,public void testMinpackChebyquad()
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,372,throws EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,373,"minpackTest(new ChebyquadFunction(1, 8, 1.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,374,"1.88623796907732, 1.88623796907732,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,375,"new double[] { 0.5 }), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,376,"minpackTest(new ChebyquadFunction(1, 8, 10.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,377,"5383344372.34005, 1.88424820499951,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,378,"new double[] { 0.9817314924684 }), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,379,"minpackTest(new ChebyquadFunction(1, 8, 100.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,380,"0.118088726698392e19, 1.88424820499347,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,381,"new double[] { 0.9817314852934 }), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,382,"minpackTest(new ChebyquadFunction(8, 8, 1.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,383,"0.196513862833975, 0.0593032355046727,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,384,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,385,"0.0431536648587336, 0.193091637843267,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,386,"0.266328593812698,  0.499999334628884,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,387,"0.500000665371116,  0.733671406187302,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,388,"0.806908362156733,  0.956846335141266"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,389,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,390,"minpackTest(new ChebyquadFunction(9, 9, 1.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,391,"0.16994993465202, 0.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,392,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,393,"0.0442053461357828, 0.199490672309881,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,394,"0.23561910847106,   0.416046907892598,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,395,"0.5,                0.583953092107402,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,396,"0.764380891528940,  0.800509327690119,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,397,0.955794653864217
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,398,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,399,"minpackTest(new ChebyquadFunction(10, 10, 1.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,400,"0.183747831178711, 0.0806471004038253,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,401,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,402,"0.0596202671753563, 0.166708783805937,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,403,"0.239171018813509,  0.398885290346268,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,404,"0.398883667870681,  0.601116332129320,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,405,"0.60111470965373,   0.760828981186491,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,406,"0.833291216194063,  0.940379732824644"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,407,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,410,public void testMinpackBrownAlmostLinear()
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,411,throws EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,412,"minpackTest(new BrownAlmostLinearFunction(10, 0.5,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,413,"16.5302162063499, 0.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,414,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,415,"0.979430303349862, 0.979430303349862,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,416,"0.979430303349862, 0.979430303349862,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,417,"0.979430303349862, 0.979430303349862,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,418,"0.979430303349862, 0.979430303349862,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,419,"0.979430303349862, 1.20569696650138"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,420,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,421,"minpackTest(new BrownAlmostLinearFunction(10, 5.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,422,"9765624.00089211, 0.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,423,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,424,"0.979430303349865, 0.979430303349865,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,425,"0.979430303349865, 0.979430303349865,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,426,"0.979430303349865, 0.979430303349865,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,427,"0.979430303349865, 0.979430303349865,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,428,"0.979430303349865, 1.20569696650135"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,429,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,430,"minpackTest(new BrownAlmostLinearFunction(10, 50.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,431,"0.9765625e17, 0.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,432,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,433,"1.0, 1.0, 1.0, 1.0, 1.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,434,"1.0, 1.0, 1.0, 1.0, 1.0"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,435,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,436,"minpackTest(new BrownAlmostLinearFunction(30, 0.5,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,437,"83.476044467848, 0.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,438,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,439,"0.997754216442807, 0.997754216442807,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,440,"0.997754216442807, 0.997754216442807,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,441,"0.997754216442807, 0.997754216442807,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,442,"0.997754216442807, 0.997754216442807,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,443,"0.997754216442807, 0.997754216442807,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,444,"0.997754216442807, 0.997754216442807,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,445,"0.997754216442807, 0.997754216442807,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,446,"0.997754216442807, 0.997754216442807,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,447,"0.997754216442807, 0.997754216442807,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,448,"0.997754216442807, 0.997754216442807,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,449,"0.997754216442807, 0.997754216442807,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,450,"0.997754216442807, 0.997754216442807,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,451,"0.997754216442807, 0.997754216442807,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,452,"0.997754216442807, 0.997754216442807,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,453,"0.997754216442807, 1.06737350671578"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,454,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,455,"minpackTest(new BrownAlmostLinearFunction(40, 0.5,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,456,"128.026364472323, 0.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,457,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,458,"1.00000000000002, 1.00000000000002,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,459,"1.00000000000002, 1.00000000000002,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,460,"1.00000000000002, 1.00000000000002,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,461,"1.00000000000002, 1.00000000000002,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,462,"1.00000000000002, 1.00000000000002,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,463,"1.00000000000002, 1.00000000000002,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,464,"1.00000000000002, 1.00000000000002,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,465,"1.00000000000002, 1.00000000000002,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,466,"1.00000000000002, 1.00000000000002,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,467,"1.00000000000002, 1.00000000000002,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,468,"1.00000000000002, 1.00000000000002,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,469,"1.00000000000002, 1.00000000000002,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,470,"1.00000000000002, 1.00000000000002,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,471,"1.00000000000002, 1.00000000000002,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,472,"1.00000000000002, 1.00000000000002,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,473,"1.00000000000002, 1.00000000000002,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,474,"1.00000000000002, 1.00000000000002,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,475,0.999999999999121
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,476,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,479,public void testMinpackOsborne1()
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,480,throws EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,481,"minpackTest(new Osborne1Function(new double[] { 0.5, 1.5, -1.0, 0.01, 0.02, },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,482,"0.937564021037838, 0.00739249260904843,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,483,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,484,"0.375410049244025, 1.93584654543108,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,485,"-1.46468676748716, 0.0128675339110439,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,486,0.0221227011813076
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,487,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,490,public void testMinpackOsborne2()
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,491,throws EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,493,minpackTest(new Osborne2Function(new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,494,"1.3, 0.65, 0.65, 0.7, 0.6,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,495,"3.0, 5.0, 7.0, 2.0, 4.5, 5.5"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,497,"1.44686540984712, 0.20034404483314,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,498,new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,499,"1.30997663810096,  0.43155248076,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,500,"0.633661261602859, 0.599428560991695,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,501,"0.754179768272449, 0.904300082378518,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,502,"1.36579949521007, 4.82373199748107,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,503,"2.39868475104871, 4.56887554791452,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,504,5.67534206273052
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,505,"}), false);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,508,"private void minpackTest(MinpackFunction function, boolean exceptionExpected) {"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,509,LevenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,510,estimator.setMaxCostEval(100 * (function.getN() + 1));
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,511,estimator.setCostRelativeTolerance(Math.sqrt(2.22044604926e-16));
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,512,estimator.setParRelativeTolerance(Math.sqrt(2.22044604926e-16));
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,513,estimator.setOrthoTolerance(2.22044604926e-16);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,514,assertTrue(function.checkTheoreticalStartCost(estimator.getRMS(function)));
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,515,try {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,516,estimator.estimate(function);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,517,assertFalse(exceptionExpected);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,518,} catch (EstimationException lsse) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,519,assertTrue(exceptionExpected);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,521,assertTrue(function.checkTheoreticalMinCost(estimator.getRMS(function)));
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,522,assertTrue(function.checkTheoreticalMinParams());
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,525,private static abstract class MinpackFunction implements EstimationProblem {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,527,"protected MinpackFunction(int m,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,528,"double[] startParams,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,529,"double   theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,530,"double   theoreticalMinCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,531,double[] theoreticalMinParams) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,532,this.m = m;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,533,this.n = startParams.length;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,534,parameters = new EstimatedParameter[n];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,535,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,536,"parameters[i] = new EstimatedParameter(""p"" + i, startParams[i]);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,538,this.theoreticalStartCost = theoreticalStartCost;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,539,this.theoreticalMinCost   = theoreticalMinCost;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,540,this.theoreticalMinParams = theoreticalMinParams;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,541,this.costAccuracy         = 1.0e-8;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,542,this.paramsAccuracy       = 1.0e-5;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,545,"protected static double[] buildArray(int n, double x) {"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,546,double[] array = new double[n];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,547,"Arrays.fill(array, x);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,548,return array;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,551,protected void setCostAccuracy(double costAccuracy) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,552,this.costAccuracy = costAccuracy;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,555,protected void setParamsAccuracy(double paramsAccuracy) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,556,this.paramsAccuracy = paramsAccuracy;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,559,public int getN() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,560,return parameters.length;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,563,public boolean checkTheoreticalStartCost(double rms) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,564,double threshold = costAccuracy * (1.0 + theoreticalStartCost);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,565,return Math.abs(Math.sqrt(m) * rms - theoreticalStartCost) <= threshold;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,568,public boolean checkTheoreticalMinCost(double rms) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,569,double threshold = costAccuracy * (1.0 + theoreticalMinCost);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,570,return Math.abs(Math.sqrt(m) * rms - theoreticalMinCost) <= threshold;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,573,public boolean checkTheoreticalMinParams() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,574,if (theoreticalMinParams != null) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,575,for (int i = 0; i < theoreticalMinParams.length; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,576,double mi = theoreticalMinParams[i];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,577,double vi = parameters[i].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,578,if (Math.abs(mi - vi) > (paramsAccuracy * (1.0 + Math.abs(mi)))) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,579,return false;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,583,return true;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,586,public WeightedMeasurement[] getMeasurements() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,587,WeightedMeasurement[] measurements = new WeightedMeasurement[m];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,588,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,589,measurements[i] = new MinpackMeasurement(i);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,591,return measurements;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,594,public EstimatedParameter[] getUnboundParameters() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,595,return parameters;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,598,public EstimatedParameter[] getAllParameters() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,599,return parameters;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,602,protected abstract double[][] getJacobian();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,604,protected abstract double[] getResiduals();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,606,private class MinpackMeasurement extends WeightedMeasurement {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,608,public MinpackMeasurement(int index) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,609,"super(1.0, 0.0);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,610,this.index = index;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,613,public double getTheoreticalValue() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,614,// this is obviously NOT efficient as we recompute the whole vector
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,615,"// each time we need only one element, but it is only for test"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,616,// purposes and is simpler to check.
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,617,"// This implementation should NOT be taken as an example, it is ugly!"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,618,return getResiduals()[index];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,621,public double getPartial(EstimatedParameter parameter) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,622,// this is obviously NOT efficient as we recompute the whole jacobian
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,623,"// each time we need only one element, but it is only for test"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,624,// purposes and is simpler to check.
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,625,"// This implementation should NOT be taken as an example, it is ugly!"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,626,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,627,if (parameter == parameters[j]) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,628,return getJacobian()[index][j];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,631,return 0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,634,private int index;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,635,private static final long serialVersionUID = 1L;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,639,protected int                  n;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,640,protected int                  m;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,641,protected EstimatedParameter[] parameters;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,642,protected double               theoreticalStartCost;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,643,protected double               theoreticalMinCost;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,644,protected double[]             theoreticalMinParams;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,645,protected double               costAccuracy;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,646,protected double               paramsAccuracy;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,650,private static class LinearFullRankFunction extends MinpackFunction {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,652,"public LinearFullRankFunction(int m, int n, double x0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,653,"double theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,654,double theoreticalMinCost) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,655,"super(m, buildArray(n, x0), theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,656,"theoreticalMinCost, buildArray(n, -1.0));"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,659,protected double[][] getJacobian() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,660,double t = 2.0 / m;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,661,double[][] jacobian = new double[m][];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,662,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,663,jacobian[i] = new double[n];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,664,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,665,jacobian[i][j] = (i == j) ? (1 - t) : -t;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,668,return jacobian;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,671,protected double[] getResiduals() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,672,double sum = 0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,673,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,674,sum += parameters[i].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,676,double t  = 1 + 2 * sum / m;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,677,double[] f = new double[m];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,678,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,679,f[i] = parameters[i].getEstimate() - t;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,681,"Arrays.fill(f, n, m, -t);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,682,return f;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,687,private static class LinearRank1Function extends MinpackFunction {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,689,"public LinearRank1Function(int m, int n, double x0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,690,"double theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,691,double theoreticalMinCost) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,692,"super(m, buildArray(n, x0), theoreticalStartCost, theoreticalMinCost, null);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,695,protected double[][] getJacobian() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,696,double[][] jacobian = new double[m][];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,697,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,698,jacobian[i] = new double[n];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,699,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,700,jacobian[i][j] = (i + 1) * (j + 1);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,703,return jacobian;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,706,protected double[] getResiduals() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,707,double[] f = new double[m];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,708,double sum = 0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,709,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,710,sum += (i + 1) * parameters[i].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,712,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,713,f[i] = (i + 1) * sum - 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,715,return f;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,720,private static class LinearRank1ZeroColsAndRowsFunction extends MinpackFunction {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,722,"public LinearRank1ZeroColsAndRowsFunction(int m, int n, double x0) {"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,723,"super(m, buildArray(n, x0),"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,724,"Math.sqrt(m + (n+1)*(n-2)*(m-2)*(m-1) * ((n+1)*(n-2)*(2*m-3) - 12) / 24.0),"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,725,"Math.sqrt((m * (m + 3) - 6) / (2.0 * (2 * m - 3))),"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,726,null);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,729,protected double[][] getJacobian() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,730,double[][] jacobian = new double[m][];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,731,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,732,jacobian[i] = new double[n];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,733,jacobian[i][0] = 0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,734,for (int j = 1; j < (n - 1); ++j) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,735,if (i == 0) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,736,jacobian[i][j] = 0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,737,} else if (i != (m - 1)) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,738,jacobian[i][j] = i * (j + 1);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,739,} else {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,740,jacobian[i][j] = 0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,743,jacobian[i][n - 1] = 0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,745,return jacobian;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,748,protected double[] getResiduals() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,749,double[] f = new double[m];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,750,double sum = 0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,751,for (int i = 1; i < (n - 1); ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,752,sum += (i + 1) * parameters[i].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,754,for (int i = 0; i < (m - 1); ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,755,f[i] = i * sum - 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,757,f[m - 1] = -1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,758,return f;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,763,private static class RosenbrockFunction extends MinpackFunction {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,765,"public RosenbrockFunction(double[] startParams, double theoreticalStartCost) {"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,766,"super(2, startParams, theoreticalStartCost, 0.0, buildArray(2, 1.0));"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,769,protected double[][] getJacobian() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,770,double x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,771,"return new double[][] { { -20 * x1, 10 }, { -1, 0 } };"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,774,protected double[] getResiduals() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,775,double x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,776,double x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,777,"return new double[] { 10 * (x2 - x1 * x1), 1 - x1 };"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,782,private static class HelicalValleyFunction extends MinpackFunction {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,784,"public HelicalValleyFunction(double[] startParams,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,785,double theoreticalStartCost) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,786,"super(3, startParams, theoreticalStartCost, 0.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,787,"new double[] { 1.0, 0.0, 0.0 });"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,790,protected double[][] getJacobian() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,791,double x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,792,double x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,793,double tmpSquare = x1 * x1 + x2 * x2;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,794,double tmp1 = twoPi * tmpSquare;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,795,double tmp2 = Math.sqrt(tmpSquare);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,796,return new double[][] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,797,"{  100 * x2 / tmp1, -100 * x1 / tmp1, 10 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,798,"{ 10 * x1 / tmp2, 10 * x2 / tmp2, 0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,799,"{ 0, 0, 1 }"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,803,protected double[] getResiduals() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,804,double x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,805,double x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,806,double x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,807,double tmp1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,808,if (x1 == 0) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,809,tmp1 = (x2 >= 0) ? 0.25 : -0.25;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,810,} else {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,811,tmp1 = Math.atan(x2 / x1) / twoPi;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,812,if (x1 < 0) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,813,tmp1 += 0.5;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,816,double tmp2 = Math.sqrt(x1 * x1 + x2 * x2);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,817,return new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,818,"10.0 * (x3 - 10 * tmp1),"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,819,"10.0 * (tmp2 - 1),"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,820,x3
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,824,private static final double twoPi = 2.0 * Math.PI;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,828,private static class PowellSingularFunction extends MinpackFunction {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,830,"public PowellSingularFunction(double[] startParams,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,831,double theoreticalStartCost) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,832,"super(4, startParams, theoreticalStartCost, 0.0, buildArray(4, 0.0));"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,835,protected double[][] getJacobian() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,836,double x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,837,double x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,838,double x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,839,double x4 = parameters[3].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,840,return new double[][] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,841,"{ 1, 10, 0, 0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,842,"{ 0, 0, sqrt5, -sqrt5 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,843,"{ 0, 2 * (x2 - 2 * x3), -4 * (x2 - 2 * x3), 0 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,844,"{ 2 * sqrt10 * (x1 - x4), 0, 0, -2 * sqrt10 * (x1 - x4) }"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,848,protected double[] getResiduals() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,849,double x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,850,double x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,851,double x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,852,double x4 = parameters[3].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,853,return new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,854,"x1 + 10 * x2,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,855,"sqrt5 * (x3 - x4),"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,856,"(x2 - 2 * x3) * (x2 - 2 * x3),"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,857,sqrt10 * (x1 - x4) * (x1 - x4)
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,861,private static final double sqrt5  = Math.sqrt( 5.0);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,862,private static final double sqrt10 = Math.sqrt(10.0);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,866,private static class FreudensteinRothFunction extends MinpackFunction {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,868,"public FreudensteinRothFunction(double[] startParams,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,869,"double theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,870,"double theoreticalMinCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,871,double[] theoreticalMinParams) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,872,"super(2, startParams, theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,873,"theoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,876,protected double[][] getJacobian() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,877,double x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,878,return new double[][] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,879,"{ 1, x2 * (10 - 3 * x2) -  2 },"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,880,"{ 1, x2 * ( 2 + 3 * x2) - 14, }"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,884,protected double[] getResiduals() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,885,double x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,886,double x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,887,return new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,888,"-13.0 + x1 + ((5.0 - x2) * x2 -  2.0) * x2,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,889,-29.0 + x1 + ((1.0 + x2) * x2 - 14.0) * x2
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,895,private static class BardFunction extends MinpackFunction {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,897,"public BardFunction(double x0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,898,"double theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,899,"double theoreticalMinCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,900,double[] theoreticalMinParams) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,901,"super(15, buildArray(3, x0), theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,902,"theoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,905,protected double[][] getJacobian() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,906,double   x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,907,double   x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,908,double[][] jacobian = new double[m][];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,909,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,910,double tmp1 = i  + 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,911,double tmp2 = 15 - i;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,912,double tmp3 = (i <= 7) ? tmp1 : tmp2;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,913,double tmp4 = x2 * tmp2 + x3 * tmp3;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,914,tmp4 *= tmp4;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,915,"jacobian[i] = new double[] { -1, tmp1 * tmp2 / tmp4, tmp1 * tmp3 / tmp4 };"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,917,return jacobian;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,920,protected double[] getResiduals() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,921,double   x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,922,double   x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,923,double   x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,924,double[] f = new double[m];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,925,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,926,double tmp1 = i + 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,927,double tmp2 = 15 - i;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,928,double tmp3 = (i <= 7) ? tmp1 : tmp2;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,929,f[i] = y[i] - (x1 + tmp1 / (x2 * tmp2 + x3 * tmp3));
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,931,return f;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,934,private static final double[] y = {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,935,"0.14, 0.18, 0.22, 0.25, 0.29,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,936,"0.32, 0.35, 0.39, 0.37, 0.58,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,937,"0.73, 0.96, 1.34, 2.10, 4.39"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,942,private static class KowalikOsborneFunction extends MinpackFunction {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,944,"public KowalikOsborneFunction(double[] startParams,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,945,"double theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,946,"double theoreticalMinCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,947,double[] theoreticalMinParams) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,948,"super(11, startParams, theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,949,"theoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,950,if (theoreticalStartCost > 20.0) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,951,setCostAccuracy(2.0e-4);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,952,setParamsAccuracy(5.0e-3);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,956,protected double[][] getJacobian() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,957,double   x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,958,double   x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,959,double   x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,960,double   x4 = parameters[3].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,961,double[][] jacobian = new double[m][];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,962,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,963,double tmp = v[i] * (v[i] + x3) + x4;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,964,double j1  = -v[i] * (v[i] + x2) / tmp;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,965,double j2  = -v[i] * x1 / tmp;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,966,double j3  = j1 * j2;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,967,double j4  = j3 / v[i];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,968,"jacobian[i] = new double[] { j1, j2, j3, j4 };"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,970,return jacobian;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,973,protected double[] getResiduals() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,974,double x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,975,double x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,976,double x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,977,double x4 = parameters[3].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,978,double[] f = new double[m];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,979,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,980,f[i] = y[i] - x1 * (v[i] * (v[i] + x2)) / (v[i] * (v[i] + x3) + x4);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,982,return f;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,985,private static final double[] v = {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,986,"4.0, 2.0, 1.0, 0.5, 0.25, 0.167, 0.125, 0.1, 0.0833, 0.0714, 0.0625"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,989,private static final double[] y = {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,990,"0.1957, 0.1947, 0.1735, 0.1600, 0.0844, 0.0627,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,991,"0.0456, 0.0342, 0.0323, 0.0235, 0.0246"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,996,private static class MeyerFunction extends MinpackFunction {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,998,"public MeyerFunction(double[] startParams,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,999,"double theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1000,"double theoreticalMinCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1001,double[] theoreticalMinParams) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1002,"super(16, startParams, theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1003,"theoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1004,if (theoreticalStartCost > 1.0e6) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1005,setCostAccuracy(7.0e-3);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1006,setParamsAccuracy(2.0e-2);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1010,protected double[][] getJacobian() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1011,double   x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1012,double   x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1013,double   x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1014,double[][] jacobian = new double[m][];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1015,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1016,double temp = 5.0 * (i + 1) + 45.0 + x3;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1017,double tmp1 = x2 / temp;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1018,double tmp2 = Math.exp(tmp1);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1019,double tmp3 = x1 * tmp2 / temp;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1020,"jacobian[i] = new double[] { tmp2, tmp3, -tmp1 * tmp3 };"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1022,return jacobian;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1025,protected double[] getResiduals() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1026,double x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1027,double x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1028,double x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1029,double[] f = new double[m];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1030,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1031,f[i] = x1 * Math.exp(x2 / (5.0 * (i + 1) + 45.0 + x3)) - y[i];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1033,return f;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1036,private static final double[] y = {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1037,"34780.0, 28610.0, 23650.0, 19630.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1038,"16370.0, 13720.0, 11540.0,  9744.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1039,"8261.0,  7030.0,  6005.0,  5147.0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1040,"4427.0,  3820.0,  3307.0,  2872.0"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1045,private static class WatsonFunction extends MinpackFunction {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1047,"public WatsonFunction(int n, double x0,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1048,"double theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1049,"double theoreticalMinCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1050,double[] theoreticalMinParams) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1051,"super(31, buildArray(n, x0), theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1052,"theoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1055,protected double[][] getJacobian() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1057,double[][] jacobian = new double[m][];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1059,for (int i = 0; i < (m - 2); ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1060,double div = (i + 1) / 29.0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1061,double s2  = 0.0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1062,double dx  = 1.0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1063,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1064,s2 += dx * parameters[j].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1065,dx *= div;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1067,double temp= 2 * div * s2;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1068,dx = 1.0 / div;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1069,jacobian[i] = new double[n];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1070,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1071,jacobian[i][j] = dx * (j - temp);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1072,dx *= div;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1076,jacobian[m - 2]    = new double[n];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1077,jacobian[m - 2][0] = 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1079,jacobian[m - 1]   = new double[n];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1080,jacobian[m - 1][0]= -2 * parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1081,jacobian[m - 1][1]= 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1083,return jacobian;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1087,protected double[] getResiduals() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1088,double[] f = new double[m];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1089,for (int i = 0; i < (m - 2); ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1090,double div = (i + 1) / 29.0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1091,double s1 = 0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1092,double dx = 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1093,for (int j = 1; j < n; ++j) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1094,s1 += j * dx * parameters[j].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1095,dx *= div;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1097,double s2 =0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1098,dx =1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1099,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1100,s2 += dx * parameters[j].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1101,dx *= div;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1103,f[i] = s1 - s2 * s2 - 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1106,double x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1107,double x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1108,f[m - 2] = x1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1109,f[m - 1] = x2 - x1 * x1 - 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1111,return f;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1117,private static class Box3DimensionalFunction extends MinpackFunction {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1119,"public Box3DimensionalFunction(int m, double[] startParams,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1120,double theoreticalStartCost) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1121,"super(m, startParams, theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1122,"0.0, new double[] { 1.0, 10.0, 1.0 });"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1125,protected double[][] getJacobian() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1126,double   x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1127,double   x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1128,double[][] jacobian = new double[m][];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1129,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1130,double tmp = (i + 1) / 10.0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1131,jacobian[i] = new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1132,"-tmp * Math.exp(-tmp * x1),"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1133,"tmp * Math.exp(-tmp * x2),"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1134,Math.exp(-i - 1) - Math.exp(-tmp)
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1137,return jacobian;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1140,protected double[] getResiduals() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1141,double x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1142,double x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1143,double x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1144,double[] f = new double[m];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1145,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1146,double tmp = (i + 1) / 10.0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1147,f[i] = Math.exp(-tmp * x1) - Math.exp(-tmp * x2)
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1148,+ (Math.exp(-i - 1) - Math.exp(-tmp)) * x3;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1150,return f;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1155,private static class JennrichSampsonFunction extends MinpackFunction {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1157,"public JennrichSampsonFunction(int m, double[] startParams,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1158,"double theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1159,"double theoreticalMinCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1160,double[] theoreticalMinParams) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1161,"super(m, startParams, theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1162,"theoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1165,protected double[][] getJacobian() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1166,double   x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1167,double   x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1168,double[][] jacobian = new double[m][];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1169,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1170,double t = i + 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1171,"jacobian[i] = new double[] { -t * Math.exp(t * x1), -t * Math.exp(t * x2) };"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1173,return jacobian;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1176,protected double[] getResiduals() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1177,double x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1178,double x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1179,double[] f = new double[m];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1180,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1181,double temp = i + 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1182,f[i] = 2 + 2 * temp - Math.exp(temp * x1) - Math.exp(temp * x2);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1184,return f;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1189,private static class BrownDennisFunction extends MinpackFunction {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1191,"public BrownDennisFunction(int m, double[] startParams,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1192,"double theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1193,"double theoreticalMinCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1194,double[] theoreticalMinParams) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1195,"super(m, startParams, theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1196,"theoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1199,protected double[][] getJacobian() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1200,double   x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1201,double   x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1202,double   x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1203,double   x4 = parameters[3].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1204,double[][] jacobian = new double[m][];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1205,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1206,double temp = (i + 1) / 5.0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1207,double ti   = Math.sin(temp);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1208,double tmp1 = x1 + temp * x2 - Math.exp(temp);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1209,double tmp2 = x3 + ti   * x4 - Math.cos(temp);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1210,jacobian[i] = new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1211,"2 * tmp1, 2 * temp * tmp1, 2 * tmp2, 2 * ti * tmp2"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1214,return jacobian;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1217,protected double[] getResiduals() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1218,double x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1219,double x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1220,double x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1221,double x4 = parameters[3].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1222,double[] f = new double[m];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1223,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1224,double temp = (i + 1) / 5.0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1225,double tmp1 = x1 + temp * x2 - Math.exp(temp);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1226,double tmp2 = x3 + Math.sin(temp) * x4 - Math.cos(temp);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1227,f[i] = tmp1 * tmp1 + tmp2 * tmp2;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1229,return f;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1234,private static class ChebyquadFunction extends MinpackFunction {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1236,"private static double[] buildChebyquadArray(int n, double factor) {"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1237,double[] array = new double[n];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1238,double inv = factor / (n + 1);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1239,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1240,array[i] = (i + 1) * inv;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1242,return array;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1245,"public ChebyquadFunction(int n, int m, double factor,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1246,"double theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1247,"double theoreticalMinCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1248,double[] theoreticalMinParams) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1249,"super(m, buildChebyquadArray(n, factor), theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1250,"theoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1253,protected double[][] getJacobian() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1255,double[][] jacobian = new double[m][];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1256,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1257,jacobian[i] = new double[n];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1260,double dx = 1.0 / n;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1261,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1262,double tmp1 = 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1263,double tmp2 = 2 * parameters[j].getEstimate() - 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1264,double temp = 2 * tmp2;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1265,double tmp3 = 0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1266,double tmp4 = 2;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1267,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1268,jacobian[i][j] = dx * tmp4;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1269,double ti = 4 * tmp2 + temp * tmp4 - tmp3;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1270,tmp3 = tmp4;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1271,tmp4 = ti;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1272,ti   = temp * tmp2 - tmp1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1273,tmp1 = tmp2;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1274,tmp2 = ti;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1278,return jacobian;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1282,protected double[] getResiduals() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1284,double[] f = new double[m];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1286,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1287,double tmp1 = 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1288,double tmp2 = 2 * parameters[j].getEstimate() - 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1289,double temp = 2 * tmp2;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1290,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1291,f[i] += tmp2;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1292,double ti = temp * tmp2 - tmp1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1293,tmp1 = tmp2;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1294,tmp2 = ti;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1298,double dx = 1.0 / n;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1299,boolean iev = false;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1300,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1301,f[i] *= dx;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1302,if (iev) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1303,f[i] += 1.0 / (i * (i + 2));
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1305,iev = ! iev;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1308,return f;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1314,private static class BrownAlmostLinearFunction extends MinpackFunction {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1316,"public BrownAlmostLinearFunction(int m, double factor,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1317,"double theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1318,"double theoreticalMinCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1319,double[] theoreticalMinParams) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1320,"super(m, buildArray(m, factor), theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1321,"theoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1324,protected double[][] getJacobian() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1325,double[][] jacobian = new double[m][];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1326,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1327,jacobian[i] = new double[n];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1330,double prod = 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1331,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1332,prod *= parameters[j].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1333,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1334,jacobian[i][j] = 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1336,jacobian[j][j] = 2;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1339,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1340,EstimatedParameter vj = parameters[j];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1341,double temp = vj.getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1342,if (temp == 0) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1343,temp = 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1344,prod = 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1345,for (int k = 0; k < n; ++k) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1346,if (k != j) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1347,prod *= parameters[k].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1351,jacobian[n - 1][j] = prod / temp;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1354,return jacobian;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1358,protected double[] getResiduals() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1359,double[] f = new double[m];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1360,double sum  = -(n + 1);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1361,double prod = 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1362,for (int j = 0; j < n; ++j) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1363,sum  += parameters[j].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1364,prod *= parameters[j].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1366,for (int i = 0; i < n; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1367,f[i] = parameters[i].getEstimate() + sum;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1369,f[n - 1] = prod - 1;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1370,return f;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1375,private static class Osborne1Function extends MinpackFunction {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1377,"public Osborne1Function(double[] startParams,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1378,"double theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1379,"double theoreticalMinCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1380,double[] theoreticalMinParams) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1381,"super(33, startParams, theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1382,"theoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1385,protected double[][] getJacobian() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1386,double   x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1387,double   x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1388,double   x4 = parameters[3].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1389,double   x5 = parameters[4].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1390,double[][] jacobian = new double[m][];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1391,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1392,double temp = 10.0 * i;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1393,double tmp1 = Math.exp(-temp * x4);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1394,double tmp2 = Math.exp(-temp * x5);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1395,jacobian[i] = new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1396,"-1, -tmp1, -tmp2, temp * x2 * tmp1, temp * x3 * tmp2"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1399,return jacobian;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1402,protected double[] getResiduals() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1403,double x1 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1404,double x2 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1405,double x3 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1406,double x4 = parameters[3].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1407,double x5 = parameters[4].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1408,double[] f = new double[m];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1409,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1410,double temp = 10.0 * i;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1411,double tmp1 = Math.exp(-temp * x4);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1412,double tmp2 = Math.exp(-temp * x5);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1413,f[i] = y[i] - (x1 + x2 * tmp1 + x3 * tmp2);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1415,return f;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1418,private static final double[] y = {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1419,"0.844, 0.908, 0.932, 0.936, 0.925, 0.908, 0.881, 0.850, 0.818, 0.784, 0.751,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1420,"0.718, 0.685, 0.658, 0.628, 0.603, 0.580, 0.558, 0.538, 0.522, 0.506, 0.490,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1421,"0.478, 0.467, 0.457, 0.448, 0.438, 0.431, 0.424, 0.420, 0.414, 0.411, 0.406"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1426,private static class Osborne2Function extends MinpackFunction {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1428,"public Osborne2Function(double[] startParams,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1429,"double theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1430,"double theoreticalMinCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1431,double[] theoreticalMinParams) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1432,"super(65, startParams, theoreticalStartCost,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1433,"theoreticalMinCost, theoreticalMinParams);"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1436,protected double[][] getJacobian() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1437,double   x01 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1438,double   x02 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1439,double   x03 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1440,double   x04 = parameters[3].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1441,double   x05 = parameters[4].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1442,double   x06 = parameters[5].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1443,double   x07 = parameters[6].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1444,double   x08 = parameters[7].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1445,double   x09 = parameters[8].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1446,double   x10 = parameters[9].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1447,double   x11 = parameters[10].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1448,double[][] jacobian = new double[m][];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1449,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1450,double temp = i / 10.0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1451,double tmp1 = Math.exp(-x05 * temp);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1452,double tmp2 = Math.exp(-x06 * (temp - x09) * (temp - x09));
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1453,double tmp3 = Math.exp(-x07 * (temp - x10) * (temp - x10));
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1454,double tmp4 = Math.exp(-x08 * (temp - x11) * (temp - x11));
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1455,jacobian[i] = new double[] {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1456,"-tmp1,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1457,"-tmp2,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1458,"-tmp3,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1459,"-tmp4,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1460,"temp * x01 * tmp1,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1461,"x02 * (temp - x09) * (temp - x09) * tmp2,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1462,"x03 * (temp - x10) * (temp - x10) * tmp3,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1463,"x04 * (temp - x11) * (temp - x11) * tmp4,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1464,"-2 * x02 * x06 * (temp - x09) * tmp2,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1465,"-2 * x03 * x07 * (temp - x10) * tmp3,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1466,-2 * x04 * x08 * (temp - x11) * tmp4
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1469,return jacobian;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1472,protected double[] getResiduals() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1473,double x01 = parameters[0].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1474,double x02 = parameters[1].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1475,double x03 = parameters[2].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1476,double x04 = parameters[3].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1477,double x05 = parameters[4].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1478,double x06 = parameters[5].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1479,double x07 = parameters[6].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1480,double x08 = parameters[7].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1481,double x09 = parameters[8].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1482,double x10 = parameters[9].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1483,double x11 = parameters[10].getEstimate();
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1484,double[] f = new double[m];
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1485,for (int i = 0; i < m; ++i) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1486,double temp = i / 10.0;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1487,double tmp1 = Math.exp(-x05 * temp);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1488,double tmp2 = Math.exp(-x06 * (temp - x09) * (temp - x09));
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1489,double tmp3 = Math.exp(-x07 * (temp - x10) * (temp - x10));
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1490,double tmp4 = Math.exp(-x08 * (temp - x11) * (temp - x11));
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1491,f[i] = y[i] - (x01 * tmp1 + x02 * tmp2 + x03 * tmp3 + x04 * tmp4);
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1493,return f;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1496,private static final double[] y = {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1497,"1.366, 1.191, 1.112, 1.013, 0.991,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1498,"0.885, 0.831, 0.847, 0.786, 0.725,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1499,"0.746, 0.679, 0.608, 0.655, 0.616,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1500,"0.606, 0.602, 0.626, 0.651, 0.724,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1501,"0.649, 0.649, 0.694, 0.644, 0.624,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1502,"0.661, 0.612, 0.558, 0.533, 0.495,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1503,"0.500, 0.423, 0.395, 0.375, 0.372,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1504,"0.391, 0.396, 0.405, 0.428, 0.429,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1505,"0.523, 0.562, 0.607, 0.653, 0.672,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1506,"0.708, 0.633, 0.668, 0.645, 0.632,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1507,"0.591, 0.559, 0.597, 0.625, 0.739,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1508,"0.710, 0.729, 0.720, 0.636, 0.581,"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1509,"0.428, 0.292, 0.162, 0.098, 0.054"
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1514,public static Test suite() {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/estimation/MinpackTest.java,1515,return new TestSuite(MinpackTest.class);
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,18,package org.apache.commons.math.estimation;
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,20,import org.apache.commons.math.estimation.EstimatedParameter;
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,21,import org.apache.commons.math.estimation.WeightedMeasurement;
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,23,import junit.framework.*;
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,25,@Deprecated
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,26,public class WeightedMeasurementTest
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,27,extends TestCase {
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,29,public WeightedMeasurementTest(String name) {
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,30,super(name);
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,31,p1 = null;
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,32,p2 = null;
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,35,public void testConstruction() {
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,36,"WeightedMeasurement m = new MyMeasurement(3.0, theoretical() + 0.1, this);"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,37,"checkValue(m.getWeight(), 3.0);"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,38,"checkValue(m.getMeasuredValue(), theoretical() + 0.1);"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,41,public void testIgnored() {
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,42,"WeightedMeasurement m = new MyMeasurement(3.0, theoretical() + 0.1, this);"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,43,assertTrue(!m.isIgnored());
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,44,m.setIgnored(true);
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,45,assertTrue(m.isIgnored());
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,46,m.setIgnored(false);
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,47,assertTrue(!m.isIgnored());
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,50,public void testTheory() {
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,51,"WeightedMeasurement m = new MyMeasurement(3.0, theoretical() + 0.1, this);"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,52,"checkValue(m.getTheoreticalValue(), theoretical());"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,53,"checkValue(m.getResidual(), 0.1);"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,55,double oldP1 = p1.getEstimate();
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,56,p1.setEstimate(oldP1 + m.getResidual() / m.getPartial(p1));
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,57,"checkValue(m.getResidual(), 0.0);"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,58,p1.setEstimate(oldP1);
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,59,"checkValue(m.getResidual(), 0.1);"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,61,double oldP2 = p2.getEstimate();
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,62,p2.setEstimate(oldP2 + m.getResidual() / m.getPartial(p2));
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,63,"checkValue(m.getResidual(), 0.0);"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,64,p2.setEstimate(oldP2);
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,65,"checkValue(m.getResidual(), 0.1);"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,69,public static Test suite() {
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,70,return new TestSuite(WeightedMeasurementTest.class);
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,73,public void setUp() {
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,74,"p1 = new EstimatedParameter(""p1"", 1.0);"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,75,"p2 = new EstimatedParameter(""p2"", 2.0);"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,78,public void tearDown() {
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,79,p1 = null;
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,80,p2 = null;
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,83,"private void checkValue(double value, double expected) {"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,84,assertTrue(Math.abs(value - expected) < 1.0e-10);
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,87,private double theoretical() {
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,88,return 3 * p1.getEstimate() - p2.getEstimate();
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,91,private double partial(EstimatedParameter p) {
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,92,if (p == p1) {
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,93,return 3.0;
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,94,} else if (p == p2) {
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,95,return -1.0;
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,96,} else {
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,97,return 0.0;
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,101,private static class MyMeasurement
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,102,extends WeightedMeasurement {
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,104,"public MyMeasurement(double weight, double measuredValue,"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,105,WeightedMeasurementTest testInstance) {
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,106,"super(weight, measuredValue);"
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,107,this.testInstance = testInstance;
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,110,public double getTheoreticalValue() {
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,111,return testInstance.theoretical();
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,114,public double getPartial(EstimatedParameter p) {
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,115,return testInstance.partial(p);
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,118,private transient WeightedMeasurementTest testInstance;
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,120,private static final long serialVersionUID = -246712922500792332L;
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,124,private EstimatedParameter p1;
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,125,private EstimatedParameter p2;

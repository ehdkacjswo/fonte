is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,513,super.testBasicFunctions();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,520,"/ emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,521,ouble d_getNorm = v5.getNorm();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,522,"ssert.assertEquals(""compare values  "", 8.4261497731763586307, d_getNorm, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,524,"/ emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,525,ouble d_getL1Norm = v5.getL1Norm();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,526,"ssert.assertEquals(""compare values  "", 17.0, d_getL1Norm, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,528,"/ emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,529,ouble d_getLInfNorm = v5.getLInfNorm();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,530,"ssert.assertEquals(""compare values  "", 6.0, d_getLInfNorm, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,533,/octave =  sqrt(sumsq(v1-v2))
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,534,ouble dist = v1.getDistance(v2);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,535,"ssert.assertEquals(""compare values  "",v1.subtract(v2).getNorm(), dist, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,537,/octave =  sqrt(sumsq(v1-v2))
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,538,ouble dist_2 = v1.getDistance(v2_t);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,539,"ssert.assertEquals(""compare values  "", v1.subtract(v2).getNorm(),dist_2, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,541,/octave =  sqrt(sumsq(v1-v2))
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,542,ouble dist_3 = v1.getDistance(v2);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,543,"ssert.assertEquals(""compare values  "", v1.subtract(v2).getNorm(),dist_3, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,545,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,546,ouble d_getL1Distance = v1. getL1Distance(v2);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,547,"ssert.assertEquals(""compare values  "", 9d, d_getL1Distance, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,549,ouble d_getL1Distance_2 = v1.getL1Distance(v2_t);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,550,"ssert.assertEquals(""compare values  "", 9d, d_getL1Distance_2, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,552,ouble d_getL1Distance_3 = v1.getL1Distance(v2);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,553,"ssert.assertEquals(""compare values  "", 9d, d_getL1Distance_3, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,555,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,556,ouble d_getLInfDistance = v1.getLInfDistance(v2);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,557,"ssert.assertEquals(""compare values  "", 3d, d_getLInfDistance, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,559,ouble d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,560,"ssert.assertEquals(""compare values  "", 3d, d_getLInfDistance_2, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,562,ouble d_getLInfDistance_3 = v1. getLInfDistance(v2);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,563,"ssert.assertEquals(""compare values  "", 3d, d_getLInfDistance_3, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,565,/octave =  v1 + v2
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,566,rrayRealVector v_add = v1.add(v2);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,567,"ouble[] result_add = {5d, 7d, 9d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,568,"ssertClose(""compare vect"" ,v_add.toArray(), result_add, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,570,ealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,571,ealVector v_add_i = v1.add(vt2);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,572,"ouble[] result_add_i = {5d, 7d, 9d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,573,"ssertClose(""compare vect"" ,v_add_i.toArray(),result_add_i,normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,575,/octave =  v1 - v2
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,576,rrayRealVector v_subtract = v1.subtract(v2);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,577,"ouble[] result_subtract = {-3d, -3d, -3d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,578,"ssertClose(""compare vect"" ,v_subtract.toArray(),result_subtract,normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,580,ealVector v_subtract_i = v1.subtract(vt2);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,581,"ouble[] result_subtract_i = {-3d, -3d, -3d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,582,"ssertClose(""compare vect"" ,v_subtract_i.toArray(),result_subtract_i,normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,584,/ octave v1 .* v2
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,585,rrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,586,"ouble[] result_ebeMultiply = {4d, 10d, 18d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,587,"ssertClose(""compare vect"" ,v_ebeMultiply.toArray(),result_ebeMultiply,normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,589,ealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,590,"ouble[] result_ebeMultiply_2 = {4d, 10d, 18d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,591,"ssertClose(""compare vect"" ,v_ebeMultiply_2.toArray(),result_ebeMultiply_2,normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,593,ealVector  v_ebeMultiply_3 = v1.ebeMultiply(v2);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,594,"ouble[] result_ebeMultiply_3 = {4d, 10d, 18d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,595,"ssertClose(""compare vect"" ,v_ebeMultiply_3.toArray(),result_ebeMultiply_3,normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,597,/ octave v1 ./ v2
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,598,rrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,599,"ouble[] result_ebeDivide = {0.25d, 0.4d, 0.5d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,600,"ssertClose(""compare vect"" ,v_ebeDivide.toArray(),result_ebeDivide,normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,602,ealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,603,"ouble[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,604,"ssertClose(""compare vect"" ,v_ebeDivide_2.toArray(),result_ebeDivide_2,normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,606,ealVector  v_ebeDivide_3 = v1.ebeDivide(v2);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,607,"ouble[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,608,"ssertClose(""compare vect"" ,v_ebeDivide_3.toArray(),result_ebeDivide_3,normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,610,"/ octave  dot(v1,v2)"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,611,ouble dot =  v1.dotProduct(v2);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,612,"ssert.assertEquals(""compare val "",32d, dot, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,614,"/ octave  dot(v1,v2_t)"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,615,ouble dot_2 =  v1.dotProduct(v2_t);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,616,"ssert.assertEquals(""compare val "",32d, dot_2, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,618,ealMatrix m_outerProduct = v1.outerProduct(v2);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,619,"ssert.assertEquals(""compare val "",4d, m_outerProduct.getEntry(0,0), normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,621,ealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,622,"ssert.assertEquals(""compare val "",4d, m_outerProduct_2.getEntry(0,0), normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,624,ealMatrix m_outerProduct_3 = v1.outerProduct(v2);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,625,"ssert.assertEquals(""compare val "",4d, m_outerProduct_3.getEntry(0,0), normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,627,ealVector v_unitVector = v1.unitVector();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,628,ealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,629,"ssertClose(""compare vect"" ,v_unitVector.toArray(),v_unitVector_2.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,631,ry {
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,632,_null.unitVector();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,633,"ssert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,634, catch (MathArithmeticException ex) {
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,635,/ expected behavior
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,638,rrayRealVector v_unitize = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,639,_unitize.unitize();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,640,"ssertClose(""compare vect"" ,v_unitVector_2.toArray(),v_unitize.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,641,ry {
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,642,_null.unitize();
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,643,"ssert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,644, catch (MathArithmeticException ex) {
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,645,/ expected behavior
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,648,ealVector v_projection = v1.projection(v2);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,649,"ouble[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,650,"ssertClose(""compare vect"", v_projection.toArray(), result_projection, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,652,ealVector v_projection_2 = v1.projection(v2_t);
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,653,"ouble[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};"
False,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java,654,"ssertClose(""compare vect"", v_projection_2.toArray(), result_projection_2, normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,47,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,50,import org.apache.commons.math3.linear.ArrayRealVectorTest.RealVectorTestImpl;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,511,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,512,public void testBasicFunctions() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,513,final RealVector v1 = create(vec1);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,514,final RealVector v2 = create(vec2);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,515,final RealVector v5 = create(vec5);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,516,final RealVector v_null = create(vec_null);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,518,final RealVector v2_t = createAlien(vec2);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,520,"// emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,521,double d_getNorm = v5.getNorm();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,522,"Assert.assertEquals(""compare values  "", 8.4261497731763586307,"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,523,"d_getNorm, normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,525,"// emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,526,double d_getL1Norm = v5.getL1Norm();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,527,"Assert.assertEquals(""compare values  "", 17.0, d_getL1Norm,"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,528,normTolerance);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,530,"// emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,531,double d_getLInfNorm = v5.getLInfNorm();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,532,"Assert.assertEquals(""compare values  "", 6.0, d_getLInfNorm,"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,533,normTolerance);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,535,// octave = sqrt(sumsq(v1-v2))
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,536,double dist = v1.getDistance(v2);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,537,"Assert.assertEquals(""compare values  "", v1.subtract(v2).getNorm(),"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,538,"dist, normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,540,// octave = sqrt(sumsq(v1-v2))
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,541,double dist_2 = v1.getDistance(v2_t);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,542,"Assert.assertEquals(""compare values  "", v1.subtract(v2).getNorm(),"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,543,"dist_2, normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,545,// octave = ???
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,546,double d_getL1Distance = v1.getL1Distance(v2);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,547,"Assert.assertEquals(""compare values  "", 9d, d_getL1Distance,"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,548,normTolerance);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,550,double d_getL1Distance_2 = v1.getL1Distance(v2_t);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,551,"Assert.assertEquals(""compare values  "", 9d, d_getL1Distance_2,"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,552,normTolerance);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,554,// octave = ???
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,555,double d_getLInfDistance = v1.getLInfDistance(v2);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,556,"Assert.assertEquals(""compare values  "", 3d, d_getLInfDistance,"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,557,normTolerance);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,559,double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,560,"Assert.assertEquals(""compare values  "", 3d, d_getLInfDistance_2,"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,561,normTolerance);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,563,// octave = v1 + v2
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,564,final RealVector v_add = v1.add(v2);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,565,double[] result_add = {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,566,"5d, 7d, 9d"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,568,"assertClose(""compare vect"", v_add.toArray(), result_add, normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,570,final RealVector vt2 = createAlien(vec2);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,571,RealVector v_add_i = v1.add(vt2);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,572,double[] result_add_i = {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,573,"5d, 7d, 9d"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,575,"assertClose(""compare vect"", v_add_i.toArray(), result_add_i,"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,576,normTolerance);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,578,// octave = v1 - v2
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,579,final RealVector v_subtract = v1.subtract(v2);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,580,double[] result_subtract = {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,581,"-3d, -3d, -3d"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,583,"assertClose(""compare vect"", v_subtract.toArray(), result_subtract,"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,584,normTolerance);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,586,final RealVector v_subtract_i = v1.subtract(vt2);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,587,double[] result_subtract_i = {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,588,"-3d, -3d, -3d"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,590,"assertClose(""compare vect"", v_subtract_i.toArray(), result_subtract_i,"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,591,normTolerance);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,593,// octave v1 .* v2
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,594,final RealVector v_ebeMultiply = v1.ebeMultiply(v2);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,595,double[] result_ebeMultiply = {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,596,"4d, 10d, 18d"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,598,"assertClose(""compare vect"", v_ebeMultiply.toArray(),"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,599,"result_ebeMultiply, normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,601,final RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,602,double[] result_ebeMultiply_2 = {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,603,"4d, 10d, 18d"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,605,"assertClose(""compare vect"", v_ebeMultiply_2.toArray(),"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,606,"result_ebeMultiply_2, normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,608,// octave v1 ./ v2
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,609,final RealVector v_ebeDivide = v1.ebeDivide(v2);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,610,double[] result_ebeDivide = {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,611,"0.25d, 0.4d, 0.5d"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,613,"assertClose(""compare vect"", v_ebeDivide.toArray(), result_ebeDivide,"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,614,normTolerance);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,616,final RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,617,double[] result_ebeDivide_2 = {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,618,"0.25d, 0.4d, 0.5d"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,620,"assertClose(""compare vect"", v_ebeDivide_2.toArray(),"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,621,"result_ebeDivide_2, normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,623,"// octave dot(v1,v2)"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,624,double dot = v1.dotProduct(v2);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,625,"Assert.assertEquals(""compare val "", 32d, dot, normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,627,"// octave dot(v1,v2_t)"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,628,double dot_2 = v1.dotProduct(v2_t);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,629,"Assert.assertEquals(""compare val "", 32d, dot_2, normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,631,RealMatrix m_outerProduct = v1.outerProduct(v2);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,632,"Assert.assertEquals(""compare val "", 4d, m_outerProduct.getEntry(0, 0),"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,633,normTolerance);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,635,RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,636,"Assert.assertEquals(""compare val "", 4d,"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,637,"m_outerProduct_2.getEntry(0, 0), normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,639,RealVector v_unitVector = v1.unitVector();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,640,RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,641,"assertClose(""compare vect"", v_unitVector.toArray(),"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,642,"v_unitVector_2.toArray(), normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,644,try {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,645,v_null.unitVector();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,646,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,647,} catch (MathArithmeticException ex) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,648,// expected behavior
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,651,RealVector v_unitize = v1.copy();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,652,v_unitize.unitize();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,653,"assertClose(""compare vect"" ,v_unitVector_2.toArray(),v_unitize.toArray(),normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,654,try {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,655,v_null.unitize();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,656,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,657,} catch (MathArithmeticException ex) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,658,// expected behavior
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,661,RealVector v_projection = v1.projection(v2);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,662,"double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,663,"assertClose(""compare vect"", v_projection.toArray(), result_projection, normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,665,RealVector v_projection_2 = v1.projection(v2_t);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,666,"double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,667,"assertClose(""compare vect"", v_projection_2.toArray(), result_projection_2, normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,186,@Override
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,187,public void testBasicFunctions() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,189,"*  TODO this test is huge, and some of the methods being tested are not"
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,190,"*  supported by TestVectorImpl. For the time being, this test is skipped"
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,191,"*  (testBasicFunctions() is overriden, ommitting the @Test anotation)."
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,193,*  What should really be done: split testBasicFunctions() in many
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,194,"*  smaller unit tests, and skip only those tests which are not meaningfull"
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,195,*  for RealVector.
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,326,Test
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,327,ublic void testBasicFunctions() {
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,328,penMapRealVector v1 = new OpenMapRealVector(vec1);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,329,penMapRealVector v2 = new OpenMapRealVector(vec2);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,330,penMapRealVector v5 = new OpenMapRealVector(vec5);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,331,penMapRealVector v_null = new OpenMapRealVector(vec_null);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,333,parseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,335,"/ emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,336,ouble d_getNorm = v5.getNorm();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,337,"ssert.assertEquals(""compare values  "", 8.4261497731763586307, d_getNorm, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,339,"/ emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,340,ouble d_getL1Norm = v5.getL1Norm();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,341,"ssert.assertEquals(""compare values  "", 17.0, d_getL1Norm, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,343,"/ emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,344,ouble d_getLInfNorm = v5.getLInfNorm();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,345,"ssert.assertEquals(""compare values  "", 6.0, d_getLInfNorm, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,347,/octave =  sqrt(sumsq(v1-v2))
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,348,ouble dist = v1.getDistance(v2);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,349,"ssert.assertEquals(""compare values  "",v1.subtract(v2).getNorm(), dist, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,351,/octave =  sqrt(sumsq(v1-v2))
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,352,ouble dist_2 = v1.getDistance(v2_t);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,353,"ssert.assertEquals(""compare values  "", v1.subtract(v2).getNorm(),dist_2, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,355,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,356,ouble d_getL1Distance = v1. getL1Distance(v2);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,357,"ssert.assertEquals(""compare values  "", 9d, d_getL1Distance, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,359,ouble d_getL1Distance_2 = v1. getL1Distance(v2_t);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,360,"ssert.assertEquals(""compare values  "", 9d, d_getL1Distance_2, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,362,/octave =  ???
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,363,ouble d_getLInfDistance = v1. getLInfDistance(v2);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,364,"ssert.assertEquals(""compare values  "", 3d, d_getLInfDistance, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,366,ouble d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,367,"ssert.assertEquals(""compare values  "", 3d, d_getLInfDistance_2, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,369,/octave =  v1 + v2
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,370,penMapRealVector v_add = v1.add(v2);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,371,"ouble[] result_add = {5d, 7d, 9d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,372,"ssertClose(""compare vect"" ,v_add.toArray(),result_add,normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,374,parseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,375,ealVector v_add_i = v1.add(vt2);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,376,"ouble[] result_add_i = {5d, 7d, 9d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,377,"ssertClose(""compare vect"" ,v_add_i.toArray(),result_add_i,normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,379,/octave =  v1 - v2
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,380,penMapRealVector v_subtract = v1.subtract(v2);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,381,"ouble[] result_subtract = {-3d, -3d, -3d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,382,"ssertClose(""compare vect"" ,v_subtract.toArray(),result_subtract,normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,384,ealVector v_subtract_i = v1.subtract(vt2);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,385,"ouble[] result_subtract_i = {-3d, -3d, -3d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,386,"ssertClose(""compare vect"" ,v_subtract_i.toArray(),result_subtract_i,normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,388,/ octave v1 .* v2
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,389,ealVector  v_ebeMultiply = v1.ebeMultiply(v2);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,390,"ouble[] result_ebeMultiply = {4d, 10d, 18d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,391,"ssertClose(""compare vect"" ,v_ebeMultiply.toArray(),result_ebeMultiply,normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,393,ealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,394,"ouble[] result_ebeMultiply_2 = {4d, 10d, 18d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,395,"ssertClose(""compare vect"" ,v_ebeMultiply_2.toArray(),result_ebeMultiply_2,normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,397,/ octave v1 ./ v2
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,398,ealVector  v_ebeDivide = v1.ebeDivide(v2);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,399,"ouble[] result_ebeDivide = {0.25d, 0.4d, 0.5d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,400,"ssertClose(""compare vect"" ,v_ebeDivide.toArray(),result_ebeDivide,normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,402,ealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,403,"ouble[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,404,"ssertClose(""compare vect"" ,v_ebeDivide_2.toArray(),result_ebeDivide_2,normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,406,"/ octave  dot(v1,v2)"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,407,ouble dot =  v1.dotProduct(v2);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,408,"ssert.assertEquals(""compare val "",32d, dot, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,410,"/ octave  dot(v1,v2_t)"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,411,ouble dot_2 =  v1.dotProduct(v2_t);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,412,"ssert.assertEquals(""compare val "",32d, dot_2, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,414,ealMatrix m_outerProduct = v1.outerProduct(v2);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,415,"ssert.assertEquals(""compare val "",4d, m_outerProduct.getEntry(0,0), normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,417,ealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,418,"ssert.assertEquals(""compare val "",4d, m_outerProduct_2.getEntry(0,0), normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,420,ealVector v_unitVector = v1.unitVector();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,421,ealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,422,"ssertClose(""compare vect"" ,v_unitVector.toArray(),v_unitVector_2.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,424,ry {
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,425,_null.unitVector();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,426,"ssert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,427, catch (MathArithmeticException ex) {
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,428,/ expected behavior
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,431,penMapRealVector v_unitize = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,432,_unitize.unitize();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,433,"ssertClose(""compare vect"" ,v_unitVector_2.toArray(),v_unitize.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,434,ry {
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,435,_null.unitize();
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,436,"ssert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,437, catch (MathArithmeticException ex) {
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,438,/ expected behavior
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,441,ealVector v_projection = v1.projection(v2);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,442,"ouble[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,443,"ssertClose(""compare vect"", v_projection.toArray(), result_projection, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,445,ealVector v_projection_2 = v1.projection(v2_t);
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,446,"ouble[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,447,"ssertClose(""compare vect"", v_projection_2.toArray(), result_projection_2, normTolerance);"

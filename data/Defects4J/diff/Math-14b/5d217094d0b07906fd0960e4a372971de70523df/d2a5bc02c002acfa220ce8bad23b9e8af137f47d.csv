is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,82,"return test(values, begin, length, false);"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,86,"* This method is used by <code>evaluate(double[], int, int)</code> methods"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,87,* to verify that the input parameters designate a subarray of positive length.
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,88,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,89,* <ul>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,90,* <li>returns <code>true</code> iff the parameters designate a subarray of
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,91,* non-negative length</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,92,* <li>throws <code>IllegalArgumentException</code> if the array is null or
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,93,* or the indices are invalid</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,94,"* <li>returns <code>false</li> if the array is non-null, but"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,95,* <code>length</code> is 0 unless <code>allowEmpty</code> is <code>true</code>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,96,* </ul></p>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,98,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,99,* @param begin index of the first array element to include
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,100,* @param length the number of elements to include
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,101,* @param allowEmpty if <code>true</code> then zero length arrays are allowed
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,102,* @return true if the parameters are valid
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,103,* @throws IllegalArgumentException if the indices are invalid or the array is null
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,104,* @since 3.0
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,106,"protected boolean test(final double[] values, final int begin, final int length, final boolean allowEmpty){"
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,83,f (values == null) {
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,84,hrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,108,if (values == null) {
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,109,throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,87,f (begin < 0) {
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,88,"hrow new NotPositiveException(LocalizedFormats.START_POSITION, begin);"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,112,if (begin < 0) {
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,113,"throw new NotPositiveException(LocalizedFormats.START_POSITION, begin);"
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,91,f (length < 0) {
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,92,"hrow new NotPositiveException(LocalizedFormats.LENGTH, length);"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,116,if (length < 0) {
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,117,"throw new NotPositiveException(LocalizedFormats.LENGTH, length);"
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,95,f (begin + length > values.length) {
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,96,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,97,ocalizedFormats.SUBARRAY_ENDS_AFTER_ARRAY_END);
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,120,if (begin + length > values.length) {
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,121,throw MathRuntimeException.createIllegalArgumentException(
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,122,LocalizedFormats.SUBARRAY_ENDS_AFTER_ARRAY_END);
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,100,f (length == 0) {
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,101,eturn false;
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,125,if (length == 0 && !allowEmpty) {
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,126,return false;
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,104,eturn true;
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,129,return true;
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,167,"return test(values, weights, begin, length, false);"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,171,"* This method is used by <code>evaluate(double[], double[], int, int)</code> methods"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,172,* to verify that the begin and length parameters designate a subarray of positive length
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,173,"* and the weights are all non-negative, non-NaN, finite, and not all zero."
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,174,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,175,* <ul>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,176,* <li>returns <code>true</code> iff the parameters designate a subarray of
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,177,* non-negative length and the weights array contains legitimate values.</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,178,* <li>throws <code>IllegalArgumentException</code> if any of the following are true:
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,179,* <ul><li>the values array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,180,*     <li>the weights array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,181,*     <li>the weights array does not have the same length as the values array</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,182,*     <li>the weights array contains one or more infinite values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,183,*     <li>the weights array contains one or more NaN values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,184,*     <li>the weights array contains negative values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,185,*     <li>the start and length arguments do not determine a valid array</li></ul>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,186,* </li>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,187,"* <li>returns <code>false</li> if the array is non-null, but"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,188,* <code>length</code> is 0 unless <code>allowEmpty</code> is <code>true</code>.
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,189,* </ul></p>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,191,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,192,* @param weights the weights array
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,193,* @param begin index of the first array element to include
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,194,* @param length the number of elements to include
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,195,* @param allowEmpty if <code>true</code> than allow zero length arrays to pass
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,196,* @return true if the parameters are valid
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,197,* @throws IllegalArgumentException if the indices are invalid or the array is null
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,198,* @since 3.0
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,200,"protected boolean test(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty){"
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,175,"eturn test(values, begin, length);"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,234,"return test(values, begin, length, allowEmpty);"
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,28," If there are no values in the dataset, or any of the values are"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,28,"* If there are no values in the dataset, then 1 is returned."
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,29,*  If any of the values are
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,56,alue = Double.NaN;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,57,value = 1;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,74,f (n == 0) {
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,75,alue = d;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,76, else {
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,77,alue *= d;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,75,value *= d;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,102,alue = Double.NaN;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,99,value = 1;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,116, @return the product of the values or Double.NaN if length = 0
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,113,* @return the product of the values or 1 if length = 0
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,123,"f (test(values, begin, length)) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,120,"if (test(values, begin, length, true)) {"
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,156, @return the product of the values or Double.NaN if length = 0
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,153,* @return the product of the values or 1 if length = 0
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,163,"f (test(values, weights, begin, length)) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,160,"if (test(values, weights, begin, length, true)) {"
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,27," If there are no values in the dataset, or any of the values are"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,27,"* If there are no values in the dataset, then 0 is returned."
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,28,* If any of the values are
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,55,alue = Double.NaN;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,56,value = 0;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,73,f (n == 0) {
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,74,alue = d;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,75, else {
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,76,alue += d;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,74,value += d;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,101,alue = Double.NaN;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,98,value = 0;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,107," the input array, or <code>Double.NaN</code> if the designated subarray"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,104,"* the input array, or 0 if the designated subarray"
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,115, @return the sum of the values or Double.NaN if length = 0
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,112,* @return the sum of the values or 0 if length = 0
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,122,"f (test(values, begin, length)) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,119,"if (test(values, begin, length, true)) {"
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,133," the input array, or <code>Double.NaN</code> if the designated subarray"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,130,"* the input array, or 0 if the designated subarray"
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,154, @return the sum of the values or Double.NaN if length = 0
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,151,* @return the sum of the values or 0 if length = 0
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,161,"f (test(values, weights, begin, length)) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,158,"if (test(values, weights, begin, length, true)) {"
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,27," Uses {@link java.lang.Math#log(double)} to compute the logs.  Therefore,"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,27,"* Uses {@link org.apache.commons.Math.util.FastMath#log(double)} to compute the logs.  Therefore,"
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,90,f (n > 0) {
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,91,eturn value;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,92, else {
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,93,eturn Double.NaN;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,90,return value;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,125, @return the sum of the natural logs of the values or Double.NaN if
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,121,* @return the sum of the natural logs of the values or 0 if
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,133,"f (test(values, begin, length)) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,129,"if (test(values, begin, length, true)) {"
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,26," If there are no values in the dataset, or any of the values are"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,26,"* If there are no values in the dataset, then 0 is returned."
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,27,* If any of the values are
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,54,alue = Double.NaN;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,55,value = 0;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,72,f (n == 0) {
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,73,alue = d * d;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,74, else {
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,75,alue += d * d;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,73,value += d * d;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,100,alue = Double.NaN;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,97,value = 0;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,114, @return the sum of the squares of the values or Double.NaN if length = 0
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,111,* @return the sum of the squares of the values or 0 if length = 0
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,121,"f (test(values, begin, length)) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,118,"if (test(values, begin, length, true)) {"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,134,"estUtils.assertEquals(Double.NaN, StatUtils.sumSq(x), tolerance);"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,135,"estUtils.assertEquals(Double.NaN, StatUtils.sumSq(x, 0, 0), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,134,"TestUtils.assertEquals(0, StatUtils.sumSq(x), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,135,"TestUtils.assertEquals(0, StatUtils.sumSq(x, 0, 0), tolerance);"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,168,"estUtils.assertEquals(Double.NaN, StatUtils.product(x), tolerance);"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,169,"estUtils.assertEquals(Double.NaN, StatUtils.product(x, 0, 0), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,168,"TestUtils.assertEquals(1, StatUtils.product(x), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,169,"TestUtils.assertEquals(1, StatUtils.product(x, 0, 0), tolerance);"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,202,"estUtils.assertEquals(Double.NaN, StatUtils.sumLog(x), tolerance);"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,203,"estUtils.assertEquals(Double.NaN, StatUtils.sumLog(x, 0, 0), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,202,"TestUtils.assertEquals(0, StatUtils.sumLog(x), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,203,"TestUtils.assertEquals(0, StatUtils.sumLog(x, 0, 0), tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,48,"assertTrue(testStatistic.test(singletonArray, 0, 0, true));"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,71,ssertTrue(Double.isNaN(statistic.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,71,checkClearValue(statistic);
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,76,protected void checkClearValue(StorelessUnivariateStatistic statistic){
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,77,assertTrue(Double.isNaN(statistic.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,97,ssertTrue(Double.isNaN(statistic.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,101,checkClearValue(statistic);
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,19,import org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic;
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,68,ssertTrue(Double.isNaN(product.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,69,"assertEquals(1, product.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,88,protected void checkClearValue(StorelessUnivariateStatistic statistic){
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,89,"assertEquals(1, statistic.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,19,import org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic;
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,56,ssertTrue(Double.isNaN(sum.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,57,"assertEquals(0, sum.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,72,ssertTrue(Double.isNaN(sum.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,73,"assertEquals(0, sum.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,84,protected void checkClearValue(StorelessUnivariateStatistic statistic){
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,85,"assertEquals(0, statistic.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,19,import org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic;
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,56,ssertTrue(Double.isNaN(sumSq.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,57,"assertEquals(0, sumSq.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,70,protected void checkClearValue(StorelessUnivariateStatistic statistic){
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,71,"assertEquals(0, statistic.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,19,import org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic;
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,60,ssertTrue(Double.isNaN(sum.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,61,"assertEquals(0, sum.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,78,protected void checkClearValue(StorelessUnivariateStatistic statistic){
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,79,"assertEquals(0, statistic.getResult(), 0);"

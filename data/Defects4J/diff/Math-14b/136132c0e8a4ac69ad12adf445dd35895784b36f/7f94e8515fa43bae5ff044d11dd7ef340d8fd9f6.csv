is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,18,package org.apache.commons.math.analysis;
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,25,* Base class for {@link BivariateRealFunction} that can be composed with other functions.
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,27,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,29,public abstract class BinaryFunction implements BivariateRealFunction {
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,31,/** The + operator method wrapped as a {@link BinaryFunction}. */
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,32,public static final BinaryFunction ADD = new BinaryFunction() {
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,33,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,34,"public double value(double x, double y) {"
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,35,return x + y;
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,39,/** The - operator method wrapped as a {@link BinaryFunction}. */
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,40,public static final BinaryFunction SUBTRACT = new BinaryFunction() {
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,41,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,42,"public double value(double x, double y) {"
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,43,return x - y;
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,47,/** The * operator method wrapped as a {@link BinaryFunction}. */
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,48,public static final BinaryFunction MULTIPLY = new BinaryFunction() {
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,49,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,50,"public double value(double x, double y) {"
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,51,return x * y;
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,55,/** The / operator method wrapped as a {@link BinaryFunction}. */
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,56,public static final BinaryFunction DIVIDE = new BinaryFunction() {
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,57,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,58,"public double value(double x, double y) {"
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,59,return x / y;
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,63,/** The {@code Math.pow} method wrapped as a {@link BinaryFunction}. */
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,64,public static final BinaryFunction POW = new BinaryFunction() {
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,65,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,66,"public double value(double x, double y) {"
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,67,"return Math.pow(x, y);"
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,71,/** The {@code Math.atan2} method wrapped as a {@link BinaryFunction}. */
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,72,public static final BinaryFunction ATAN2 = new BinaryFunction() {
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,73,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,74,"public double value(double x, double y) {"
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,75,"return Math.atan2(x, y);"
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,79,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,80,"public abstract double value(double x, double y) throws FunctionEvaluationException;"
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,82,/** Get a composable function by fixing the first argument of the instance.
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,83,* @param fixedX fixed value of the first argument
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,84,"* @return a function such that {@code f.value(y) == value(fixedX, y)}"
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,86,public ComposableFunction fix1stArgument(final double fixedX) {
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,87,return new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,88,@Override
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,89,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,90,public double value(double x) throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,91,"return BinaryFunction.this.value(fixedX, x);"
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,96,/** Get a composable function by fixing the second argument of the instance.
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,97,* @param fixedY fixed value of the second argument
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,98,"* @return a function such that {@code f.value(x) == value(x, fixedY)}"
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,100,public ComposableFunction fix2ndArgument(final double fixedY) {
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,101,return new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,102,@Override
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,103,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,104,public double value(double x) throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,105,"return BinaryFunction.this.value(x, fixedY);"
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,18,package org.apache.commons.math.analysis;
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,25,* An interface representing a bivariate real function.
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,27,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,29,public interface BivariateRealFunction {
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,32,* Compute the value for the function.
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,33,* @param x abscissa for which the function value should be computed
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,34,* @param y ordinate for which the function value should be computed
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,35,* @return the value
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,36,* @throws FunctionEvaluationException if the function evaluation fails
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,38,"double value(double x, double y) throws FunctionEvaluationException;"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,18,package org.apache.commons.math.analysis;
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,24,* Base class for {@link UnivariateRealFunction} that can be composed with other functions.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,26,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,28,public abstract class ComposableFunction implements UnivariateRealFunction {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,30,/** The constant function always returning 0. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,31,public static final ComposableFunction ZERO = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,32,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,33,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,34,return 0;
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,38,/** The constant function always returning 1. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,39,public static final ComposableFunction ONE = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,40,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,41,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,42,return 1;
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,46,/** The identity function. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,47,public static final ComposableFunction IDENTITY = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,48,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,49,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,50,return d;
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,54,/** The {@code Math.abs} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,55,public static final ComposableFunction ABS = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,56,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,57,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,58,return Math.abs(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,62,/** The - operator wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,63,public static final ComposableFunction NEGATE = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,64,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,65,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,66,return -d;
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,70,/** The {@code Math.sin} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,71,public static final ComposableFunction SIN = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,72,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,73,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,74,return Math.sin(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,78,/** The {@code Math.sqrt} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,79,public static final ComposableFunction SQRT = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,80,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,81,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,82,return Math.sqrt(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,86,/** The {@code Math.sinh} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,87,public static final ComposableFunction SINH = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,88,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,89,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,90,return Math.sinh(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,94,/** The {@code Math.exp} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,95,public static final ComposableFunction EXP = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,96,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,97,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,98,return Math.exp(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,102,/** The {@code Math.expm1} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,103,public static final ComposableFunction EXPM1 = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,104,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,105,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,106,return Math.expm1(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,110,/** The {@code Math.asin} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,111,public static final ComposableFunction ASIN = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,112,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,113,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,114,return Math.asin(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,118,/** The {@code Math.atan} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,119,public static final ComposableFunction ATAN = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,120,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,121,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,122,return Math.atan(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,126,/** The {@code Math.tan} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,127,public static final ComposableFunction TAN = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,128,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,129,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,130,return Math.tan(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,134,/** The {@code Math.tanh} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,135,public static final ComposableFunction TANH = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,136,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,137,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,138,return Math.tanh(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,142,/** The {@code Math.cbrt} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,143,public static final ComposableFunction CBRT = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,144,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,145,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,146,return Math.cbrt(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,150,/** The {@code Math.ceil} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,151,public static final ComposableFunction CEIL = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,152,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,153,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,154,return Math.ceil(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,158,/** The {@code Math.floor} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,159,public static final ComposableFunction FLOOR = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,160,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,161,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,162,return Math.floor(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,166,/** The {@code Math.log} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,167,public static final ComposableFunction LOG = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,168,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,169,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,170,return Math.log(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,174,/** The {@code Math.log10} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,175,public static final ComposableFunction LOG10 = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,176,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,177,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,178,return Math.log10(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,182,/** The {@code Math.cos} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,183,public static final ComposableFunction COS = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,184,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,185,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,186,return Math.cos(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,190,/** The {@code Math.abs} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,191,public static final ComposableFunction ACOS = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,192,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,193,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,194,return Math.acos(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,198,/** The {@code Math.cosh} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,199,public static final ComposableFunction COSH = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,200,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,201,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,202,return Math.cosh(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,206,/** The {@code Math.rint} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,207,public static final ComposableFunction RINT = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,208,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,209,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,210,return Math.rint(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,214,/** The {@code Math.signum} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,215,public static final ComposableFunction SIGNUM = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,216,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,217,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,218,return Math.signum(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,222,/** The {@code Math.ulp} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,223,public static final ComposableFunction ULP = new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,224,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,225,public double value(double d) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,226,return Math.ulp(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,230,/** Precompose the instance with another function.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,231,* <p>
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,232,* The composed function h created by {@code h = g.of(f)} is such
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,233,* that {@code h.value(x) == g.value(f.value(x))} for all x.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,234,* </p>
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,235,* @param f function to compose with
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,236,* @return a new function which computes {@code this.value(f.value(x))}
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,237,* @see #postCompose(UnivariateRealFunction)
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,239,public ComposableFunction of(final UnivariateRealFunction f) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,240,return new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,241,@Override
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,242,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,243,public double value(double x) throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,244,return ComposableFunction.this.value(f.value(x));
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,249,/** Postcompose the instance with another function.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,250,* <p>
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,251,* The composed function h created by {@code h = g.postCompose(f)} is such
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,252,* that {@code h.value(x) == f.value(g.value(x))} for all x.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,253,* </p>
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,254,* @param f function to compose with
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,255,* @return a new function which computes {@code f.value(this.value(x))}
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,256,* @see #of(UnivariateRealFunction)
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,258,public ComposableFunction postCompose(final UnivariateRealFunction f) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,259,return new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,260,@Override
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,261,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,262,public double value(double x) throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,263,return f.value(ComposableFunction.this.value(x));
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,269,* Return a function combining the instance and another function.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,270,* <p>
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,271,"* The function h created by {@code h = g.combine(f, combiner)} is such that"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,272,"* {@code h.value(x) == combiner.value(g.value(x), f.value(x))} for all x."
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,273,* </p>
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,274,* @param f function to combine with the instance
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,275,* @param combiner bivariate function used for combining
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,276,"* @return a new function which computes {@code combine.value(this.value(x), f.value(x))}"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,278,"public ComposableFunction combine(final UnivariateRealFunction f,"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,279,final BivariateRealFunction combiner) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,280,return new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,281,@Override
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,282,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,283,public double value(double x) throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,284,"return combiner.value(ComposableFunction.this.value(x), f.value(x));"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,290,* Return a function adding the instance and another function.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,291,* @param f function to combine with the instance
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,292,* @return a new function which computes {@code this.value(x) + f.value(x)}
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,294,public ComposableFunction add(final UnivariateRealFunction f) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,295,return new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,296,@Override
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,297,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,298,public double value(double x) throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,299,return ComposableFunction.this.value(x) + f.value(x);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,305,* Return a function adding a constant term to the instance.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,306,* @param a term to add
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,307,* @return a new function which computes {@code this.value(x) + a}
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,309,public ComposableFunction add(final double a) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,310,return new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,311,@Override
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,312,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,313,public double value(double x) throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,314,return ComposableFunction.this.value(x) + a;
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,320,* Return a function subtracting another function from the instance.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,321,* @param f function to combine with the instance
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,322,* @return a new function which computes {@code this.value(x) - f.value(x)}
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,324,public ComposableFunction subtract(final UnivariateRealFunction f) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,325,return new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,326,@Override
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,327,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,328,public double value(double x) throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,329,return ComposableFunction.this.value(x) - f.value(x);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,335,* Return a function multiplying the instance and another function.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,336,* @param f function to combine with the instance
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,337,* @return a new function which computes {@code this.value(x) * f.value(x)}
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,339,public ComposableFunction multiply(final UnivariateRealFunction f) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,340,return new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,341,@Override
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,342,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,343,public double value(double x) throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,344,return ComposableFunction.this.value(x) * f.value(x);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,350,* Return a function scaling the instance by a constant factor.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,351,* @param scaleFactor constant scaling factor
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,352,* @return a new function which computes {@code this.value(x) * scaleFactor}
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,354,public ComposableFunction multiply(final double scaleFactor) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,355,return new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,356,@Override
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,357,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,358,public double value(double x) throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,359,return ComposableFunction.this.value(x) * scaleFactor;
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,364,* Return a function dividing the instance by another function.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,365,* @param f function to combine with the instance
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,366,* @return a new function which computes {@code this.value(x) / f.value(x)}
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,368,public ComposableFunction divide(final UnivariateRealFunction f) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,369,return new ComposableFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,370,@Override
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,371,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,372,public double value(double x) throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,373,return ComposableFunction.this.value(x) / f.value(x);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,379,* Generates a function that iteratively apply instance function on all
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,380,* elements of an array.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,381,* <p>
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,382,* The generated function behaves as follows:
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,383,* <ul>
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,384,*   <li>initialize result = initialValue</li>
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,385,"*   <li>iterate: {@code result = combiner.value(result,"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,386,*   this.value(nextMultivariateEntry));}</li>
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,387,*   <li>return result</li>
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,388,* </ul>
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,389,* </p>
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,390,* @param combiner combiner to use between entries
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,391,* @param initialValue initial value to use before first entry
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,392,* @return a new function that iteratively applie instance function on all
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,393,* elements of an array.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,395,"public MultivariateRealFunction asCollector(final BivariateRealFunction combiner,"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,396,final double initialValue) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,397,return new MultivariateRealFunction() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,398,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,399,public double value(double[] point)
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,400,"throws FunctionEvaluationException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,401,double result = initialValue;
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,402,for (final double entry : point) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,403,"result = combiner.value(result, ComposableFunction.this.value(entry));"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,405,return result;
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,411,* Generates a function that iteratively apply instance function on all
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,412,* elements of an array.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,413,* <p>
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,414,* Calling this method is equivalent to call {@link
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,415,"* #asCollector(BivariateRealFunction, double) asCollector(BivariateRealFunction, 0.0)}."
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,416,* </p>
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,417,* @param combiner combiner to use between entries
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,418,* @return a new function that iteratively applie instance function on all
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,419,* elements of an array.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,420,"* @see #asCollector(BivariateRealFunction, double)"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,422,public  MultivariateRealFunction asCollector(final BivariateRealFunction combiner) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,423,"return asCollector(combiner, 0.0);"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,427,* Generates a function that iteratively apply instance function on all
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,428,* elements of an array.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,429,* <p>
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,430,* Calling this method is equivalent to call {@link
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,431,"* #asCollector(BivariateRealFunction, double) asCollector(BinaryFunction.ADD, initialValue)}."
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,432,* </p>
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,433,* @param initialValue initial value to use before first entry
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,434,* @return a new function that iteratively applie instance function on all
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,435,* elements of an array.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,436,"* @see #asCollector(BivariateRealFunction, double)"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,437,* @see BinaryFunction#ADD
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,439,public  MultivariateRealFunction asCollector(final double initialValue) {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,440,"return asCollector(BinaryFunction.ADD, initialValue);"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,444,* Generates a function that iteratively apply instance function on all
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,445,* elements of an array.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,446,* <p>
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,447,* Calling this method is equivalent to call {@link
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,448,"* #asCollector(BivariateRealFunction, double) asCollector(BinaryFunction.ADD, 0.0)}."
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,449,* </p>
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,450,* @return a new function that iteratively applie instance function on all
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,451,* elements of an array.
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,452,"* @see #asCollector(BivariateRealFunction, double)"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,453,* @see BinaryFunction#ADD
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,455,public  MultivariateRealFunction asCollector() {
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,456,"return asCollector(BinaryFunction.ADD, 0.0);"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,459,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,460,public abstract double value(double x) throws FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,18,ackage org.apache.commons.math.analysis;
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,22, Set of {@link UnivariateRealFunction} classes wrapping methods from
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,23, the standard Math class.
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,25, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,27,ublic class UnivariateRealFunctions {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,29,** The {@code Math.abs} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,30,ublic static final UnivariateRealFunction ABS = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,31,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,32,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,33,eturn Math.abs(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,37,** The - operator wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,38,ublic static final UnivariateRealFunction NEGATE = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,39,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,40,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,41,eturn -d;
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,45,** The {@code Math.sin} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,46,ublic static final UnivariateRealFunction SIN = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,47,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,48,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,49,eturn Math.sin(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,53,** The {@code Math.sqrt} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,54,ublic static final UnivariateRealFunction SQRT = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,55,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,56,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,57,eturn Math.sqrt(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,61,** The {@code Math.sinh} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,62,ublic static final UnivariateRealFunction SINH = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,63,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,64,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,65,eturn Math.sinh(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,69,** The {@code Math.exp} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,70,ublic static final UnivariateRealFunction EXP = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,71,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,72,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,73,eturn Math.exp(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,77,** The {@code Math.expm1} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,78,ublic static final UnivariateRealFunction EXP1M = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,79,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,80,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,81,eturn Math.expm1(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,85,** The {@code Math.asin} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,86,ublic static final UnivariateRealFunction ASIN = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,87,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,88,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,89,eturn Math.asin(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,93,** The {@code Math.atan} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,94,ublic static final UnivariateRealFunction ATAN = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,95,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,96,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,97,eturn Math.atan(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,101,** The {@code Math.tan} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,102,ublic static final UnivariateRealFunction TAN = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,103,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,104,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,105,eturn Math.tan(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,109,** The {@code Math.tanh} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,110,ublic static final UnivariateRealFunction TANH = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,111,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,112,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,113,eturn Math.tanh(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,117,** The {@code Math.cbrt} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,118,ublic static final UnivariateRealFunction CBRT = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,119,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,120,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,121,eturn Math.cbrt(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,125,** The {@code Math.ceil} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,126,ublic static final UnivariateRealFunction CEIL = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,127,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,128,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,129,eturn Math.ceil(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,133,** The {@code Math.floor} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,134,ublic static final UnivariateRealFunction FLOOR = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,135,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,136,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,137,eturn Math.floor(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,141,** The {@code Math.log} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,142,ublic static final UnivariateRealFunction LOG = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,143,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,144,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,145,eturn Math.log(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,149,** The {@code Math.log10} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,150,ublic static final UnivariateRealFunction LOG10 = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,151,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,152,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,153,eturn Math.log10(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,157,** The {@code Math.cos} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,158,ublic static final UnivariateRealFunction COS = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,159,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,160,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,161,eturn Math.cos(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,165,** The {@code Math.abs} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,166,ublic static final UnivariateRealFunction ACOS = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,167,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,168,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,169,eturn Math.acos(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,173,** The {@code Math.cosh} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,174,ublic static final UnivariateRealFunction COSH = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,175,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,176,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,177,eturn Math.cosh(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,181,** The {@code Math.rint} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,182,ublic static final UnivariateRealFunction RINT = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,183,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,184,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,185,eturn Math.rint(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,189,** The {@code Math.signum} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,190,ublic static final UnivariateRealFunction SIGNUM = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,191,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,192,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,193,eturn Math.signum(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,197,** The {@code Math.ulp} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,198,ublic static final UnivariateRealFunction ULP = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,199,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,200,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,201,eturn Math.ulp(d);
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,205,** The {@code Math.pow} method wrapped as a {@link UnivariateRealFunction}. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,206,ublic static class Pow implements UnivariateRealFunction {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,208,** The power to which the value should be raised. */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,209,rivate final double pow;
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,211,** Simple constructor.
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,212, @param pow the power to which the value should be raised
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,214,ublic Pow(double pow) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,215,his.pow = pow;
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,218,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,219,ublic double value(double d) {
False,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java,220,"eturn Math.pow(d, pow);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,25,mport org.apache.commons.math.analysis.UnivariateRealFunctions;
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,25,import org.apache.commons.math.analysis.ComposableFunction;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,276,eturn mapToSelf(UnivariateRealFunctions.ABS);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,276,return mapToSelf(ComposableFunction.ABS);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,290,eturn mapToSelf(UnivariateRealFunctions.ACOS);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,290,return mapToSelf(ComposableFunction.ACOS);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,304,eturn mapToSelf(UnivariateRealFunctions.ASIN);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,304,return mapToSelf(ComposableFunction.ASIN);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,318,eturn mapToSelf(UnivariateRealFunctions.ATAN);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,318,return mapToSelf(ComposableFunction.ATAN);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,332,eturn mapToSelf(UnivariateRealFunctions.CBRT);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,332,return mapToSelf(ComposableFunction.CBRT);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,346,eturn mapToSelf(UnivariateRealFunctions.CEIL);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,346,return mapToSelf(ComposableFunction.CEIL);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,360,eturn mapToSelf(UnivariateRealFunctions.COS);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,360,return mapToSelf(ComposableFunction.COS);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,374,eturn mapToSelf(UnivariateRealFunctions.COSH);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,374,return mapToSelf(ComposableFunction.COSH);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,393,eturn mapToSelf(UnivariateRealFunctions.EXP);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,393,return mapToSelf(ComposableFunction.EXP);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,407,eturn mapToSelf(UnivariateRealFunctions.EXP1M);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,407,return mapToSelf(ComposableFunction.EXPM1);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,421,eturn mapToSelf(UnivariateRealFunctions.FLOOR);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,421,return mapToSelf(ComposableFunction.FLOOR);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,440,eturn mapToSelf(UnivariateRealFunctions.LOG);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,440,return mapToSelf(ComposableFunction.LOG);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,454,eturn mapToSelf(UnivariateRealFunctions.LOG10);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,454,return mapToSelf(ComposableFunction.LOG10);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,468,eturn mapToSelf(UnivariateRealFunctions.ASIN);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,468,return mapToSelf(ComposableFunction.ASIN);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,492,eturn mapToSelf(UnivariateRealFunctions.RINT);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,492,return mapToSelf(ComposableFunction.RINT);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,506,eturn mapToSelf(UnivariateRealFunctions.SIGNUM);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,506,return mapToSelf(ComposableFunction.SIGNUM);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,520,eturn mapToSelf(UnivariateRealFunctions.SIN);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,520,return mapToSelf(ComposableFunction.SIN);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,534,eturn mapToSelf(UnivariateRealFunctions.SINH);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,534,return mapToSelf(ComposableFunction.SINH);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,548,eturn mapToSelf(UnivariateRealFunctions.SQRT);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,548,return mapToSelf(ComposableFunction.SQRT);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,567,eturn mapToSelf(UnivariateRealFunctions.TAN);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,567,return mapToSelf(ComposableFunction.TAN);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,581,eturn mapToSelf(UnivariateRealFunctions.TANH);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,581,return mapToSelf(ComposableFunction.TANH);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,595,eturn mapToSelf(UnivariateRealFunctions.ULP);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,595,return mapToSelf(ComposableFunction.ULP);
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,17,package org.apache.commons.math.analysis;
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,19,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,20,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,21,import org.junit.Test;
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,23,public class BinaryFunctionTest {
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,25,@Test
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,26,public void testAdd() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,27,"Assert.assertEquals(5.0, BinaryFunction.ADD.value(2, 3), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,28,"Assert.assertEquals(0.0, BinaryFunction.ADD.value(-1, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,31,@Test
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,32,public void testSubtract() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,33,"Assert.assertEquals(-1.0, BinaryFunction.SUBTRACT.value(2, 3), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,34,"Assert.assertEquals(-2.0, BinaryFunction.SUBTRACT.value(-1, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,37,@Test
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,38,public void testMultiply() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,39,"Assert.assertEquals(6.0, BinaryFunction.MULTIPLY.value(2, 3), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,40,"Assert.assertEquals(-1.0, BinaryFunction.MULTIPLY.value(-1, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,43,@Test
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,44,public void testDivide() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,45,"Assert.assertEquals(1.5, BinaryFunction.DIVIDE.value(3, 2), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,46,"Assert.assertEquals(-1.0, BinaryFunction.DIVIDE.value(-1, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,49,@Test
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,50,public void testPow() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,51,"Assert.assertEquals(9.0, BinaryFunction.POW.value(3, 2), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,52,"Assert.assertEquals(-1.0, BinaryFunction.POW.value(-1, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,55,@Test
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,56,public void testAtan2() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,57,"Assert.assertEquals(Math.PI / 4, BinaryFunction.ATAN2.value(1, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,58,"Assert.assertEquals(-Math.PI / 4, BinaryFunction.ATAN2.value(-1, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,61,@Test
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,62,public void testFix1st() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,63,ComposableFunction f = BinaryFunction.POW.fix1stArgument(2);
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,64,for (double x = 0.0; x < 1.0; x += 0.01) {
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,65,"Assert.assertEquals(Math.pow(2.0, x), f.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,69,@Test
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,70,public void testFix2nd() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,71,ComposableFunction f = BinaryFunction.POW.fix2ndArgument(2);
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,72,for (double y = 0.0; y < 1.0; y += 0.01) {
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,73,"Assert.assertEquals(y * y, f.value(y), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,17,package org.apache.commons.math.analysis;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,19,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,20,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,21,import org.junit.Test;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,23,public class ComposableFunctionTest {
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,25,@Test
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,26,public void testZero() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,27,"Assert.assertEquals(0.0, ComposableFunction.ZERO.value(1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,28,"Assert.assertEquals(0.0, ComposableFunction.ZERO.value(2), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,31,@Test
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,32,public void testOne() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,33,"Assert.assertEquals(1.0, ComposableFunction.ONE.value(1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,34,"Assert.assertEquals(1.0, ComposableFunction.ONE.value(2), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,37,@Test
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,38,public void testIdentity() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,39,"Assert.assertEquals(1.0, ComposableFunction.IDENTITY.value(1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,40,"Assert.assertEquals(2.0, ComposableFunction.IDENTITY.value(2), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,43,@Test
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,44,public void testRint() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,45,"Assert.assertEquals(1.0, ComposableFunction.RINT.value(0.9), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,46,"Assert.assertEquals(2.0, ComposableFunction.RINT.value(2.2), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,49,@Test
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,50,public void testSignum() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,51,"Assert.assertEquals(1.0, ComposableFunction.SIGNUM.value(12.3), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,52,"Assert.assertEquals(-1.0, ComposableFunction.SIGNUM.value(-6), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,55,@Test
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,56,public void testComposition() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,57,ComposableFunction abs    = ComposableFunction.ABS;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,58,ComposableFunction acos   = ComposableFunction.ACOS;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,59,ComposableFunction asin   = ComposableFunction.ASIN;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,60,ComposableFunction atan   = ComposableFunction.ATAN;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,61,ComposableFunction cbrt   = ComposableFunction.CBRT;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,62,ComposableFunction ceil   = ComposableFunction.CEIL;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,63,ComposableFunction cos    = ComposableFunction.COS;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,64,ComposableFunction cosh   = ComposableFunction.COSH;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,65,ComposableFunction exp    = ComposableFunction.EXP;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,66,ComposableFunction expm1  = ComposableFunction.EXPM1;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,67,ComposableFunction floor  = ComposableFunction.FLOOR;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,68,ComposableFunction id     = ComposableFunction.IDENTITY;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,69,ComposableFunction log    = ComposableFunction.LOG;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,70,ComposableFunction log10  = ComposableFunction.LOG10;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,71,ComposableFunction negate = ComposableFunction.NEGATE;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,72,ComposableFunction sin    = ComposableFunction.SIN;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,73,ComposableFunction sinh   = ComposableFunction.SINH;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,74,ComposableFunction sqrt   = ComposableFunction.SQRT;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,75,ComposableFunction tan    = ComposableFunction.TAN;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,76,ComposableFunction tanh   = ComposableFunction.TANH;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,77,ComposableFunction ulp    = ComposableFunction.ULP;
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,79,ComposableFunction f1 = sqrt.of(abs.of(expm1.of(cbrt.of(tanh).of(id))));
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,80,for (double x = 0.1; x < 0.9; x += 0.01) {
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,81,"Assert.assertEquals(Math.sqrt(Math.abs(Math.expm1(Math.cbrt(Math.tanh(x))))),"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,82,"f1.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,85,ComposableFunction f2 = cosh.of(sinh.of(tanh.of(ceil.postCompose(log.postCompose(cosh)))));
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,86,for (double x = 0.1; x < 12.9; x += 1.0) {
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,87,"Assert.assertEquals(Math.cosh(Math.sinh(Math.tanh(Math.cosh(Math.log(Math.ceil(x)))))),"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,88,"f2.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,91,ComposableFunction f3 = cos.of(sin.of(tan.of(acos.of(asin.of(log10.of(log.of(ulp)))))));
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,92,for (double x = 1.0e16; x < 1.0e17; x += 1.0e16) {
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,93,"Assert.assertEquals(Math.cos(Math.sin(Math.tan(Math.acos(Math.asin(Math.log10(Math.log(Math.ulp(x)))))))),"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,94,"f3.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,97,ComposableFunction f4 = atan.of(exp.of(negate.of(floor)));
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,98,for (double x = 1.1; x < 10.2; x += 1.0) {
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,99,"Assert.assertEquals(Math.atan(Math.exp(-Math.floor(x))),"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,100,"f4.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,105,@Test
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,106,public void testCombine() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,108,ComposableFunction f =
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,109,"ComposableFunction.COS.combine(ComposableFunction.ASIN, BinaryFunction.POW);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,110,for (double x = 0.1; x < 0.9; x += 0.01) {
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,111,"Assert.assertEquals(Math.pow(Math.cos(x), Math.asin(x)), f.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,116,@Test
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,117,public void testSimpleCombination() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,119,ComposableFunction f1 = ComposableFunction.COS.add(3);
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,120,ComposableFunction f2 = ComposableFunction.COS.add(ComposableFunction.SIN);
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,121,ComposableFunction f3 = ComposableFunction.COS.subtract(ComposableFunction.SIN);
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,122,ComposableFunction f4 = ComposableFunction.COS.multiply(ComposableFunction.SIN);
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,123,ComposableFunction f5 = ComposableFunction.COS.multiply(5);
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,124,ComposableFunction f6 = ComposableFunction.COS.divide(ComposableFunction.SIN);
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,125,for (double x = 0.1; x < 0.9; x += 0.01) {
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,126,"Assert.assertEquals(Math.cos(x) + 3, f1.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,127,"Assert.assertEquals(Math.cos(x) + Math.sin(x), f2.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,128,"Assert.assertEquals(Math.cos(x) - Math.sin(x), f3.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,129,"Assert.assertEquals(Math.cos(x) * Math.sin(x), f4.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,130,"Assert.assertEquals(Math.cos(x) * 5, f5.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,131,"Assert.assertEquals(Math.cos(x) / Math.sin(x), f6.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,136,@Test
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,137,public void testCollector() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,139,ComposableFunction f = BinaryFunction.POW.fix2ndArgument(2);
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,140,"Assert.assertEquals(30, f.asCollector().value(new double[] { 1, 2, 3, 4 }), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,141,"Assert.assertEquals(33, f.asCollector(3).value(new double[] { 1, 2, 3, 4 }), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,142,"Assert.assertEquals(-30, f.asCollector(BinaryFunction.SUBTRACT).value(new double[] { 1, 2, 3, 4 }), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,143,"Assert.assertEquals(1152, f.asCollector(BinaryFunction.MULTIPLY, 2).value(new double[] { 1, 2, 3, 4 }), 1.0e-15);"

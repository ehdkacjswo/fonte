is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,17,package org.apache.commons.math.ode.sampling;
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,19,import static org.junit.Assert.assertEquals;
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,21,import org.apache.commons.math.ode.DerivativeException;
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,22,import org.apache.commons.math.ode.FirstOrderIntegrator;
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,23,import org.apache.commons.math.ode.IntegratorException;
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,24,import org.apache.commons.math.ode.nonstiff.TestProblemAbstract;
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,26,public class StepInterpolatorTestUtils {
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,28,"public static void checkDerivativesConsistency(final FirstOrderIntegrator integrator,"
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,29,"final TestProblemAbstract problem,"
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,30,final double threshold)
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,31,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,32,integrator.addStepHandler(new StepHandler() {
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,34,private static final long serialVersionUID = 2462564234755682953L;
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,36,public boolean requiresDenseOutput() {
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,37,return true;
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,40,"public void handleStep(StepInterpolator interpolator, boolean isLast)"
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,41,throws DerivativeException {
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,43,final double h = 0.001 * (interpolator.getCurrentTime() - interpolator.getPreviousTime());
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,44,final double t = interpolator.getCurrentTime() - 300 * h;
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,46,if (Math.abs(h) < 10 * Math.ulp(t)) {
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,47,return;
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,50,interpolator.setInterpolatedTime(t - 4 * h);
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,51,final double[] yM4h = interpolator.getInterpolatedState().clone();
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,52,interpolator.setInterpolatedTime(t - 3 * h);
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,53,final double[] yM3h = interpolator.getInterpolatedState().clone();
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,54,interpolator.setInterpolatedTime(t - 2 * h);
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,55,final double[] yM2h = interpolator.getInterpolatedState().clone();
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,56,interpolator.setInterpolatedTime(t - h);
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,57,final double[] yM1h = interpolator.getInterpolatedState().clone();
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,58,interpolator.setInterpolatedTime(t + h);
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,59,final double[] yP1h = interpolator.getInterpolatedState().clone();
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,60,interpolator.setInterpolatedTime(t + 2 * h);
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,61,final double[] yP2h = interpolator.getInterpolatedState().clone();
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,62,interpolator.setInterpolatedTime(t + 3 * h);
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,63,final double[] yP3h = interpolator.getInterpolatedState().clone();
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,64,interpolator.setInterpolatedTime(t + 4 * h);
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,65,final double[] yP4h = interpolator.getInterpolatedState().clone();
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,67,interpolator.setInterpolatedTime(t);
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,68,final double[] yDot = interpolator.getInterpolatedDerivatives();
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,70,for (int i = 0; i < yDot.length; ++i) {
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,71,final double approYDot = ( -3 * (yP4h[i] - yM4h[i]) +
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,72,32 * (yP3h[i] - yM3h[i]) +
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,73,-168 * (yP2h[i] - yM2h[i]) +
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,74,672 * (yP1h[i] - yM1h[i])) / (840 * h);
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,75,"assertEquals(approYDot, yDot[i], threshold);"
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,80,public void reset() {
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,85,"integrator.integrate(problem,"
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,86,"problem.getInitialTime(), problem.getInitialState(),"
True,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,87,"problem.getFinalTime(), new double[problem.getDimension()]);"

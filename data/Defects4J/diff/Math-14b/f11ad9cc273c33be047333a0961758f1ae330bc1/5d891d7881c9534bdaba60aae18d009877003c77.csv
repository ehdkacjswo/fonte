is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,18,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,20,import java.lang.reflect.Array;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,22,import org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,24,/** This class enhances a first order integrator for differential equations to
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,25,* compute also partial derivatives of the solution with respect to initial state
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,26,* and parameters.
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,27,"* <p>In order to compute both the state and its derivatives, the ODE problem"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,28,* is extended with jacobians of the raw ODE and the variational equations are
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,29,* added to form a new compound problem of higher dimension. If the original ODE
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,30,"* problem has dimension n and there are p parameters, the compound problem will"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,31,* have dimension n &times; (1 + n + k).</p>
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,32,* @see ParameterizedFirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,33,* @see ParameterizedFirstOrderDifferentialEquationsWithPartials
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,34,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,35,* @since 2.1
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,37,public class EnhancedFirstOrderIntegrator {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,39,/** Underlying integrator for compound problem. */
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,40,private final FirstOrderIntegrator integrator;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,42,/** Raw equations to integrate. */
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,43,private final ParameterizedFirstOrderDifferentialEquationsWithPartials ode;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,45,/** Build an enhanced integrator using internal differentiation to compute jacobians.
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,46,* @param integrator underlying integrator to solve the compound problem
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,47,"* @param ode original problem (f in the equation y' = f(t, y))"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,48,* @param p parameters array (may be null if {@link
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,49,* ParameterizedFirstOrderDifferentialEquations#getParametersDimension()
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,50,* getParametersDimension()} from original problem is zero)
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,51,"* @param hY step sizes to use for computing the jacobian df/dy, must have the"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,52,* same dimension as the original problem
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,53,"* @param hP step sizes to use for computing the jacobian df/dp, must have the"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,54,* same dimension as the original problem parameters dimension
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,55,"* @see #EnhancedFirstOrderIntegrator(FirstOrderIntegrator,"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,56,* ParameterizedFirstOrderDifferentialEquationsWithPartials)
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,58,"public EnhancedFirstOrderIntegrator(final FirstOrderIntegrator integrator,"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,59,"final ParameterizedFirstOrderDifferentialEquations ode,"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,60,"final double[] p, final double[] hY, final double[] hP) {"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,61,"checkDimension(ode.getDimension(), hY);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,62,"checkDimension(ode.getParametersDimension(), p);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,63,"checkDimension(ode.getParametersDimension(), hP);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,64,this.integrator = integrator;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,65,"this.ode = new FiniteDifferencesWrapper(ode, p, hY, hP);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,68,/** Build an enhanced integrator using ODE builtin jacobian computation features.
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,69,* @param integrator underlying integrator to solve the compound problem
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,70,"* @param ode original problem, which can compute the jacobians by itself"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,71,"* @see #EnhancedFirstOrderIntegrator(FirstOrderIntegrator,"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,72,"* ParameterizedFirstOrderDifferentialEquations, double[], double[], double[])"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,74,"public EnhancedFirstOrderIntegrator(final FirstOrderIntegrator integrator,"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,75,final ParameterizedFirstOrderDifferentialEquationsWithPartials ode) {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,76,this.integrator = integrator;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,77,this.ode = ode;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,80,/** Integrate the differential equations and the variational equations up to the given time.
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,81,* <p>This method solves an Initial Value Problem (IVP) and also computes the derivatives
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,82,* of the solution with respect to initial state and parameters. This can be used as
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,83,* a basis to solve Boundary Value Problems (BVP).</p>
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,84,* <p>Since this method stores some internal state variables made
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,85,* available in its public interface during integration ({@link
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,86,"* #getCurrentSignedStepsize()}), it is <em>not</em> thread-safe.</p>"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,87,* @param equations differential equations to integrate
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,88,* @param t0 initial time
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,89,* @param y0 initial value of the state vector at t0
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,90,* @param dY0dP initial value of the state vector derivative with respect to the
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,91,* parameters at t0
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,92,* @param t target time for the integration
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,93,* (can be set to a value smaller than <code>t0</code> for backward integration)
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,94,* @param y placeholder where to put the state vector at each successful
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,95,"*  step (and hence at the end of integration), can be the same object as y0"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,96,* @param dYdY0 placeholder where to put the state vector derivative with respect
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,97,* to the initial state (dy[i]/dy0[j] is in element array dYdY0[i][j]) at each successful
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,98,*  step (and hence at the end of integration)
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,99,* @param dYdP placeholder where to put the state vector derivative with respect
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,100,* to the parameters (dy[i]/dp[j] is in element array dYdP[i][j]) at each successful
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,101,*  step (and hence at the end of integration)
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,102,"* @return stop time, will be the same as target time if integration reached its"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,103,"* target, but may be different if some event handler stops it at some point."
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,104,* @throws IntegratorException if the integrator cannot perform integration
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,105,* @throws DerivativeException this exception is propagated to the caller if
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,106,* the underlying user function triggers one
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,108,"public double integrate(final double t0, final double[] y0, final double[][] dY0dP,"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,109,"final double t, final double[] y,"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,110,"final double[][] dYdY0, final double[][] dYdP)"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,111,"throws DerivativeException, IntegratorException {"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,113,final int n = ode.getDimension();
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,114,final int k = ode.getParametersDimension();
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,115,"checkDimension(n, y0);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,116,"checkDimension(n, y);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,117,"checkDimension(n, dYdY0);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,118,"checkDimension(n, dYdY0[0]);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,119,if (k != 0) {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,120,"checkDimension(n, dY0dP);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,121,"checkDimension(k, dY0dP[0]);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,122,"checkDimension(n, dYdP);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,123,"checkDimension(k, dYdP[0]);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,126,// the compound state z contains the raw state y and its derivatives
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,127,// with respect to initial state y0 and to parameters p
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,128,//    y[i]         is stored in z[i]
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,129,//    dy[i]/dy0[j] is stored in z[n + i * n + j]
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,130,//    dy[i]/dp[j]  is stored in z[n * (n + 1) + i * k + j]
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,131,final int q = n * (1 + n + k);
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,133,"// set up initial state, including partial derivatives"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,134,final double[] z = new double[q];
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,135,"System.arraycopy(y0, 0, z, 0, n);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,136,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,138,// set diagonal element of dy/dy0 to 1.0 at t = t0
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,139,z[i * (1 + n) + n] = 1.0;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,141,// set initial derivatives with respect to parameters
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,142,"System.arraycopy(dY0dP[i], 0, z, n * (n + 1) + i * k, k);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,146,// integrate the compound state variational equations
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,147,final double stopTime = integrator.integrate(new FirstOrderDifferentialEquations() {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,149,/** Current state. */
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,150,private final double[]   y    = new double[n];
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,152,/** Time derivative of the current state. */
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,153,private final double[]   yDot = new double[n];
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,155,/** Derivatives of yDot with respect to state. */
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,156,private final double[][] dFdY = new double[n][n];
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,158,/** Derivatives of yDot with respect to parameters. */
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,159,private final double[][] dFdP = new double[n][k];
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,161,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,162,public int getDimension() {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,163,return q;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,166,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,167,"public void computeDerivatives(final double t, final double[] z, final double[] zDot)"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,168,throws DerivativeException {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,170,"// compute raw ODE and its jacobians: dy/dt, d[dy/dt]/dy0 and d[dy/dt]/dp"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,171,"System.arraycopy(z,    0, y,    0, n);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,172,"ode.computeDerivatives(t, y, yDot);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,173,"ode.computeJacobians(t, y, yDot, dFdY, dFdP);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,175,// state part of the compound equations
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,176,"System.arraycopy(yDot, 0, zDot, 0, n);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,178,// variational equations: from d[dy/dt]/dy0 to d[dy/dy0]/dt
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,179,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,180,final double[] dFdYi = dFdY[i];
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,181,for (int j = 0; j < n; ++j) {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,182,double s = 0;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,183,int zIndex = n + j;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,184,for (int l = 0; l < n; ++l) {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,185,s += dFdYi[l] * z[zIndex];
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,186,zIndex += l;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,188,zDot[n + i * n + j] = s;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,192,// variational equations: d[dy/dt]/dy0 and d[dy/dt]/dp to d[dy/dp]/dt
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,193,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,194,final double[] dFdYi = dFdY[i];
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,195,final double[] dFdPi = dFdP[i];
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,196,for (int j = 0; j < k; ++j) {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,197,double s = dFdPi[j];
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,198,int zIndex = n * (n + 1)+ j;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,199,for (int l = 0; l < n; ++l) {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,200,s += dFdYi[l] * z[zIndex];
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,201,zIndex += k;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,203,zDot[n * (n + 1) + i * k + j] = s;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,209,"}, t0, z, t, z);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,211,// dispatch the final compound state into the state and partial derivatives arrays
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,212,"System.arraycopy(z, 0, y, 0, n);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,213,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,214,"System.arraycopy(z, n * (i + 1), dYdY0[i], 0, n);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,216,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,217,"System.arraycopy(z, n * (n + 1) + i * k, dYdP[i], 0, k);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,220,return stopTime;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,224,/** Check array dimensions.
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,225,* @param expected expected dimension
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,226,* @param array (may be null if expected is 0)
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,227,* @throws IllegalArgumentException if the array dimension does not match the expected one
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,229,"private void checkDimension(final int expected, final Object array)"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,230,throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,231,int arrayDimension = (array == null) ? 0 : Array.getLength(array);
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,232,if (arrayDimension != expected) {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,233,throw MathRuntimeException.createIllegalArgumentException(
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,234,"""dimension mismatch {0} != {1}"", arrayDimension, expected);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,238,/** Wrapper class to compute jacobians by finite differences for ODE which do not compute them themselves. */
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,239,private static class FiniteDifferencesWrapper
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,240,implements ParameterizedFirstOrderDifferentialEquationsWithPartials {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,242,/** Raw ODE without jacobians computation. */
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,243,private final ParameterizedFirstOrderDifferentialEquations ode;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,245,/** Parameters array (may be null if parameters dimension from original problem is zero) */
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,246,private final double[] p;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,248,/** Step sizes to use for computing the jacobian df/dy. */
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,249,private final double[] hY;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,251,/** Step sizes to use for computing the jacobian df/dp. */
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,252,private final double[] hP;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,254,/** Temporary array for state derivatives used to compute jacobians. */
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,255,private final double[] tmpDot;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,257,/** Simple constructor.
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,258,"* @param ode original ODE problem, without jacobians computations"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,259,* @param p parameters array (may be null if parameters dimension from original problem is zero)
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,260,* @param hY step sizes to use for computing the jacobian df/dy
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,261,* @param hP step sizes to use for computing the jacobian df/dp
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,263,"public FiniteDifferencesWrapper(final ParameterizedFirstOrderDifferentialEquations ode,"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,264,"final double[] p, final double[] hY, final double[] hP) {"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,265,this.ode = ode;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,266,this.p  = p.clone();
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,267,this.hY = hY.clone();
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,268,this.hP = hP.clone();
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,269,tmpDot = new double[ode.getDimension()];
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,272,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,273,public int getDimension() {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,274,return ode.getDimension();
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,277,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,278,"public void computeDerivatives(double t, double[] y, double[] yDot) throws DerivativeException {"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,279,"ode.computeDerivatives(t, y, yDot);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,282,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,283,public int getParametersDimension() {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,284,return ode.getParametersDimension();
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,287,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,288,"public void setParameter(int i, double value) {"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,289,"ode.setParameter(i, value);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,292,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,293,"public void computeJacobians(double t, double[] y, double[] yDot,"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,294,"double[][] dFdY, double[][] dFdP)"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,295,throws DerivativeException {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,297,final int n = ode.getDimension();
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,298,final int k = ode.getParametersDimension();
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,300,// compute df/dy where f is the ODE and y is the state array
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,301,for (int j = 0; j < n; ++j) {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,302,final double savedYj = y[j];
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,303,y[j] += hY[j];
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,304,"ode.computeDerivatives(t, y, tmpDot);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,305,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,306,dFdY[i][j] = (tmpDot[i] - yDot[i]) / hY[j];
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,308,y[j] = savedYj;
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,311,// compute df/dp where f is the ODE and p is the parameters array
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,312,for (int j = 0; j < k; ++j) {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,313,"ode.setParameter(j, p[j] +  hP[j]);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,314,"ode.computeDerivatives(t, y, tmpDot);"
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,315,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,316,dFdP[i][j] = (tmpDot[i] - yDot[i]) / hP[j];
True,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegrator.java,318,"ode.setParameter(j, p[j]);"
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,18,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,21,/** This interface represents {@link FirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,22,* first order differential equations} with parameters.
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,24,* @see EnhancedFirstOrderIntegrator
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,26,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,27,* @since 2.1
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,30,public interface ParameterizedFirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,31,extends FirstOrderDifferentialEquations {
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,33,/** Get the number of parameters.
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,34,* @return number of parameters
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,36,int getParametersDimension();
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,38,/** Set a parameter.
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,39,* @param i index of the parameters (must be between 0
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,40,* and {@link #getParametersDimension() getParametersDimension() - 1})
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,41,* @param value value for the parameter
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquations.java,43,"void setParameter(int i, double value);"
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,18,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,21,/** This interface represents {@link ParameterizedFirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,22,* first order differential equations} with parameters and partial derivatives.
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,24,* @see EnhancedFirstOrderIntegrator
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,26,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,27,* @since 2.1
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,30,public interface ParameterizedFirstOrderDifferentialEquationsWithPartials
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,31,extends ParameterizedFirstOrderDifferentialEquations {
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,33,/** Compute the partial derivatives of ODE with respect to state.
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,34,* @param t current value of the independent <I>time</I> variable
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,35,* @param y array containing the current value of the state vector
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,36,* @param yDot array containing the current value of the time derivative of the state vector
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,37,* @param dFdY placeholder array where to put the jacobian of the ODE with respect to the state vector
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,38,* @param dFdP placeholder array where to put the jacobian of the ODE with respect to the parameters
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,39,* @throws DerivativeException this exception is propagated to the caller if the
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,40,* underlying user function triggers one
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,42,"void computeJacobians(double t, double[] y, double[] yDot, double[][] dFdY, double[][] dFdP)"
True,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,src/main/java/org/apache/commons/math/ode/ParameterizedFirstOrderDifferentialEquationsWithPartials.java,43,throws DerivativeException;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,18,package org.apache.commons.math.ode;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,20,import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,21,import org.apache.commons.math.stat.descriptive.SummaryStatistics;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,25,public class EnhancedFirstOrderIntegratorTest {
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,27,@Test
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,28,public void testLowAccuracyExternalDifferentiation()
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,29,"throws IntegratorException, DerivativeException {"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,30,FirstOrderIntegrator integ =
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,31,"new DormandPrince54Integrator(1.0e-8, 100.0, 1.0e-4, 1.0e-4);"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,32,double hP = 1.0e-12;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,33,SummaryStatistics residuals0 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,34,SummaryStatistics residuals1 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,35,for (double b = 2.88; b < 3.08; b += 0.001) {
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,36,Brusselator brusselator = new Brusselator(b);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,37,"double[] y = { 1.3, b };"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,38,"integ.integrate(brusselator, 0, y, 20.0, y);"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,39,"double[] yP = { 1.3, b + hP };"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,40,"brusselator.setParameter(0, b + hP);"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,41,"integ.integrate(brusselator, 0, yP, 20.0, yP);"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,42,residuals0.addValue((yP[0] - y[0]) / hP - brusselator.dYdP0());
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,43,residuals1.addValue((yP[1] - y[1]) / hP - brusselator.dYdP1());
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,45,Assert.assertTrue((residuals0.getMax() - residuals0.getMin()) > 600);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,46,Assert.assertTrue(residuals0.getStandardDeviation() > 30);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,47,Assert.assertTrue((residuals1.getMax() - residuals1.getMin()) > 800);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,48,Assert.assertTrue(residuals1.getStandardDeviation() > 50);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,51,@Test
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,52,public void testHighAccuracyExternalDifferentiation()
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,53,"throws IntegratorException, DerivativeException {"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,54,FirstOrderIntegrator integ =
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,55,"new DormandPrince54Integrator(1.0e-8, 100.0, 1.0e-10, 1.0e-10);"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,56,double hP = 1.0e-12;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,57,SummaryStatistics residuals0 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,58,SummaryStatistics residuals1 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,59,for (double b = 2.88; b < 3.08; b += 0.001) {
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,60,Brusselator brusselator = new Brusselator(b);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,61,"double[] y = { 1.3, b };"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,62,"integ.integrate(brusselator, 0, y, 20.0, y);"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,63,"double[] yP = { 1.3, b + hP };"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,64,"brusselator.setParameter(0, b + hP);"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,65,"integ.integrate(brusselator, 0, yP, 20.0, yP);"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,66,residuals0.addValue((yP[0] - y[0]) / hP - brusselator.dYdP0());
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,67,residuals1.addValue((yP[1] - y[1]) / hP - brusselator.dYdP1());
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,69,Assert.assertTrue((residuals0.getMax() - residuals0.getMin()) > 0.02);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,70,Assert.assertTrue((residuals0.getMax() - residuals0.getMin()) < 0.03);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,71,Assert.assertTrue(residuals0.getStandardDeviation() > 0.003);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,72,Assert.assertTrue(residuals0.getStandardDeviation() < 0.004);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,73,Assert.assertTrue((residuals1.getMax() - residuals1.getMin()) > 0.04);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,74,Assert.assertTrue((residuals1.getMax() - residuals1.getMin()) < 0.05);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,75,Assert.assertTrue(residuals1.getStandardDeviation() > 0.006);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,76,Assert.assertTrue(residuals1.getStandardDeviation() < 0.007);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,79,@Test
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,80,public void testInternalDifferentiation()
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,81,"throws IntegratorException, DerivativeException {"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,82,FirstOrderIntegrator integ =
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,83,"new DormandPrince54Integrator(1.0e-8, 100.0, 1.0e-4, 1.0e-4);"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,84,double hP = 1.0e-12;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,85,SummaryStatistics residuals0 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,86,SummaryStatistics residuals1 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,87,for (double b = 2.88; b < 3.08; b += 0.001) {
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,88,Brusselator brusselator = new Brusselator(b);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,89,"brusselator.setParameter(0, b);"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,90,"double[] z = { 1.3, b };"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,91,double[][] dZdZ0 = new double[2][2];
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,92,double[][] dZdP  = new double[2][1];
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,93,double hY = 1.0e-12;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,94,EnhancedFirstOrderIntegrator extInt =
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,95,"new EnhancedFirstOrderIntegrator(integ, brusselator, new double[] { b },"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,96,"new double[] { hY, hY }, new double[] { hP });"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,97,"extInt.integrate(0, z, new double[][] { { 0.0 }, { 1.0 } }, 20.0, z, dZdZ0, dZdP);"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,98,residuals0.addValue(dZdP[0][0] - brusselator.dYdP0());
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,99,residuals1.addValue(dZdP[1][0] - brusselator.dYdP1());
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,101,Assert.assertTrue((residuals0.getMax() - residuals0.getMin()) < 0.006);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,102,Assert.assertTrue(residuals0.getStandardDeviation() < 0.0009);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,103,Assert.assertTrue((residuals1.getMax() - residuals1.getMin()) < 0.006);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,104,Assert.assertTrue(residuals1.getStandardDeviation() < 0.0012);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,107,@Test
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,108,public void testAnalyticalDifferentiation()
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,109,"throws IntegratorException, DerivativeException {"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,110,FirstOrderIntegrator integ =
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,111,"new DormandPrince54Integrator(1.0e-8, 100.0, 1.0e-4, 1.0e-4);"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,112,SummaryStatistics residuals0 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,113,SummaryStatistics residuals1 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,114,for (double b = 2.88; b < 3.08; b += 0.001) {
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,115,Brusselator brusselator = new Brusselator(b);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,116,"brusselator.setParameter(0, b);"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,117,"double[] z = { 1.3, b };"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,118,double[][] dZdZ0 = new double[2][2];
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,119,double[][] dZdP  = new double[2][1];
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,120,EnhancedFirstOrderIntegrator extInt =
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,121,"new EnhancedFirstOrderIntegrator(integ, brusselator);"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,122,"extInt.integrate(0, z, new double[][] { { 0.0 }, { 1.0 } }, 20.0, z, dZdZ0, dZdP);"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,123,residuals0.addValue(dZdP[0][0] - brusselator.dYdP0());
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,124,residuals1.addValue(dZdP[1][0] - brusselator.dYdP1());
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,126,Assert.assertTrue((residuals0.getMax() - residuals0.getMin()) < 0.004);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,127,Assert.assertTrue(residuals0.getStandardDeviation() < 0.001);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,128,Assert.assertTrue((residuals1.getMax() - residuals1.getMin()) < 0.005);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,129,Assert.assertTrue(residuals1.getStandardDeviation() < 0.001);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,132,private static class Brusselator implements ParameterizedFirstOrderDifferentialEquationsWithPartials {
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,134,private double b;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,136,public Brusselator(double b) {
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,137,this.b = b;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,140,public int getDimension() {
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,141,return 2;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,144,"public void setParameter(int i, double p) {"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,145,b = p;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,148,public int getParametersDimension() {
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,149,return 1;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,152,"public void computeDerivatives(double t, double[] y, double[] yDot) {"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,153,double prod = y[0] * y[0] * y[1];
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,154,yDot[0] = 1 + prod - (b + 1) * y[0];
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,155,yDot[1] = b * y[0] - prod;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,158,"public void computeJacobians(double t, double[] y, double[] yDot, double[][] dFdY, double[][] dFdP) {"
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,159,double p = 2 * y[0] * y[1];
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,160,double y02 = y[0] * y[0];
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,161,dFdY[0][0] = p - (1 + b);
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,162,dFdY[0][1] = y02;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,163,dFdY[1][0] = b - p;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,164,dFdY[1][1] = -y02;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,165,dFdP[0][0] = -y[0];
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,166,dFdP[1][0] = y[0];
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,169,public double dYdP0() {
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,170,return -1087.8787631970476 + (1050.4387741821572 + (-338.90621620263096 + 36.51793006801084 * b) * b) * b;
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,173,public double dYdP1() {
True,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,src/test/java/org/apache/commons/math/ode/EnhancedFirstOrderIntegratorTest.java,174,return 1499.0904666097015 + (-1434.9574631810726 + (459.71079478756945 - 49.29949940968588 * b) * b) * b;

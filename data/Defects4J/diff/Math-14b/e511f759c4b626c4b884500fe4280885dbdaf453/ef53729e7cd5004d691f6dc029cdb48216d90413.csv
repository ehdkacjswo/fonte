is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,91,** Build the identity rotation.
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,93,ublic Rotation() {
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,94,0 = 1;
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,95,1 = 0;
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,96,2 = 0;
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,97,3 = 0;
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,91,/** Identity rotation. */
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,92,"public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,94,/** Serializable version identifier */
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,95,private static final long serialVersionUID = -2153622329907944313L;
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,97,/** Scalar coordinate of the quaternion. */
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,98,private final double q0;
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,100,/** First coordinate of the vectorial part of the quaternion. */
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,101,private final double q1;
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,103,/** Second coordinate of the vectorial part of the quaternion. */
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,104,private final double q2;
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,106,/** Third coordinate of the vectorial part of the quaternion. */
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,107,private final double q3;
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,595,ector3D v1 = applyTo(Vector3D.plusK);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,596,ector3D v2 = applyInverseTo(Vector3D.plusI);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,604,Vector3D v1 = applyTo(Vector3D.PLUS_K);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,605,Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,613,ector3D v1 = applyTo(Vector3D.plusJ);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,614,ector3D v2 = applyInverseTo(Vector3D.plusI);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,622,Vector3D v1 = applyTo(Vector3D.PLUS_J);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,623,Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,631,ector3D v1 = applyTo(Vector3D.plusK);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,632,ector3D v2 = applyInverseTo(Vector3D.plusJ);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,640,Vector3D v1 = applyTo(Vector3D.PLUS_K);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,641,Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,649,ector3D v1 = applyTo(Vector3D.plusI);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,650,ector3D v2 = applyInverseTo(Vector3D.plusJ);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,658,Vector3D v1 = applyTo(Vector3D.PLUS_I);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,659,Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,667,ector3D v1 = applyTo(Vector3D.plusJ);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,668,ector3D v2 = applyInverseTo(Vector3D.plusK);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,676,Vector3D v1 = applyTo(Vector3D.PLUS_J);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,677,Vector3D v2 = applyInverseTo(Vector3D.PLUS_K);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,685,ector3D v1 = applyTo(Vector3D.plusI);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,686,ector3D v2 = applyInverseTo(Vector3D.plusK);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,694,Vector3D v1 = applyTo(Vector3D.PLUS_I);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,695,Vector3D v2 = applyInverseTo(Vector3D.PLUS_K);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,703,ector3D v1 = applyTo(Vector3D.plusI);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,704,ector3D v2 = applyInverseTo(Vector3D.plusI);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,712,Vector3D v1 = applyTo(Vector3D.PLUS_I);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,713,Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,721,ector3D v1 = applyTo(Vector3D.plusI);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,722,ector3D v2 = applyInverseTo(Vector3D.plusI);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,730,Vector3D v1 = applyTo(Vector3D.PLUS_I);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,731,Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,739,ector3D v1 = applyTo(Vector3D.plusJ);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,740,ector3D v2 = applyInverseTo(Vector3D.plusJ);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,748,Vector3D v1 = applyTo(Vector3D.PLUS_J);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,749,Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,757,ector3D v1 = applyTo(Vector3D.plusJ);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,758,ector3D v2 = applyInverseTo(Vector3D.plusJ);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,766,Vector3D v1 = applyTo(Vector3D.PLUS_J);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,767,Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,775,ector3D v1 = applyTo(Vector3D.plusK);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,776,ector3D v2 = applyInverseTo(Vector3D.plusK);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,784,Vector3D v1 = applyTo(Vector3D.PLUS_K);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,785,Vector3D v2 = applyInverseTo(Vector3D.PLUS_K);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,793,ector3D v1 = applyTo(Vector3D.plusK);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,794,ector3D v2 = applyInverseTo(Vector3D.plusK);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,802,Vector3D v1 = applyTo(Vector3D.PLUS_K);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,803,Vector3D v2 = applyInverseTo(Vector3D.PLUS_K);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1020,** Scalar coordinate of the quaternion. */
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1021,rivate final double q0;
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1023,** First coordinate of the vectorial part of the quaternion. */
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1024,rivate final double q1;
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1026,** Second coordinate of the vectorial part of the quaternion. */
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1027,rivate final double q2;
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1029,** Third coordinate of the vectorial part of the quaternion. */
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1030,rivate final double q3;
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1032,** Serializable version identifier */
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1033,rivate static final long serialVersionUID = 8225864499430109352L;
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1029,/** Compute the <i>distance</i> between two rotations.
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1030,* <p>The <i>distance</i> is intended here as a way to check if two
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1031,* rotations are almost similar (i.e. they transform vectors the same way)
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1032,* or very different. It is mathematically defined as the angle of
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1033,* the rotation r that prepended to one of the rotations gives the other
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1034,* one:</p>
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1035,* <pre>
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1036,*        r<sub>1</sub>(r) = r<sub>2</sub>
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1037,* </pre>
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1038,* <p>This distance is an angle between 0 and &pi;. Its value is the smallest
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1039,* possible upper bound of the angle in radians between r<sub>1</sub>(v)
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1040,* and r<sub>2</sub>(v) for all possible vectors v. This upper bound is
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1041,* reached for some v. The distance is equal to 0 if and only if the two
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1042,* rotations are identical.</p>
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1043,* <p>Comparing two rotations should always be done using this value rather
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1044,* than for example comparing the components of the quaternions. It is much
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1045,"* more stable, and has a geometric meaning. Also comparing quaternions"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1046,"* components is error prone since for example quaternions (0.36, 0.48, -0.48, -0.64)"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1047,"* and (-0.36, -0.48, 0.48, 0.64) represent exactly the same rotation despite"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1048,* their components are different (they are exact opposites).</p>
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1049,* @param r1 first rotation
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1050,* @param r2 second rotation
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1051,* @return <i>distance</i> between r1 and r2
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1053,"public static double distance(Rotation r1, Rotation r2) {"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1054,return r1.applyInverseTo(r2).getAngle();
False,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,83,"ew RotationOrder(""XYZ"", Vector3D.plusI, Vector3D.plusJ, Vector3D.plusK);"
True,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,83,"new RotationOrder(""XYZ"", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
False,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,90,"ew RotationOrder(""XZY"", Vector3D.plusI, Vector3D.plusK, Vector3D.plusJ);"
True,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,90,"new RotationOrder(""XZY"", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
False,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,97,"ew RotationOrder(""YXZ"", Vector3D.plusJ, Vector3D.plusI, Vector3D.plusK);"
True,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,97,"new RotationOrder(""YXZ"", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
False,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,104,"ew RotationOrder(""YZX"", Vector3D.plusJ, Vector3D.plusK, Vector3D.plusI);"
True,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,104,"new RotationOrder(""YZX"", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
False,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,111,"ew RotationOrder(""ZXY"", Vector3D.plusK, Vector3D.plusI, Vector3D.plusJ);"
True,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,111,"new RotationOrder(""ZXY"", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
False,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,118,"ew RotationOrder(""ZYX"", Vector3D.plusK, Vector3D.plusJ, Vector3D.plusI);"
True,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,118,"new RotationOrder(""ZYX"", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
False,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,125,"ew RotationOrder(""XYX"", Vector3D.plusI, Vector3D.plusJ, Vector3D.plusI);"
True,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,125,"new RotationOrder(""XYX"", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
False,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,132,"ew RotationOrder(""XZX"", Vector3D.plusI, Vector3D.plusK, Vector3D.plusI);"
True,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,132,"new RotationOrder(""XZX"", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
False,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,139,"ew RotationOrder(""YXY"", Vector3D.plusJ, Vector3D.plusI, Vector3D.plusJ);"
True,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,139,"new RotationOrder(""YXY"", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
False,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,146,"ew RotationOrder(""YZY"", Vector3D.plusJ, Vector3D.plusK, Vector3D.plusJ);"
True,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,146,"new RotationOrder(""YZY"", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
False,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,153,"ew RotationOrder(""ZXZ"", Vector3D.plusK, Vector3D.plusI, Vector3D.plusK);"
True,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,153,"new RotationOrder(""ZXZ"", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
False,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,160,"ew RotationOrder(""ZYZ"", Vector3D.plusK, Vector3D.plusJ, Vector3D.plusK);"
True,src/java/org/apache/commons/math/geometry/RotationOrder.java,src/java/org/apache/commons/math/geometry/RotationOrder.java,160,"new RotationOrder(""ZYZ"", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,32,"/** Null vector (coordinates: 0, 0, 0). */"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,33,"public static final Vector3D ZERO   = new Vector3D(0, 0, 0);"
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,33,"ublic static final Vector3D plusI = new Vector3D(1, 0, 0);"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,36,"public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,36,"ublic static final Vector3D minusI = new Vector3D(-1, 0, 0);"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,39,"public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,39,"ublic static final Vector3D plusJ = new Vector3D(0, 1, 0);"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,42,"public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,42,"ublic static final Vector3D minusJ = new Vector3D(0, -1, 0);"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,45,"public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,45,"ublic static final Vector3D plusK = new Vector3D(0, 0, 1);"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,48,"public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,48,"ublic static final Vector3D minusK = new Vector3D(0, 0, -1);"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,51,"public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,50,"** Null vector (coordinates: 0, 0, 0). */"
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,51,"ublic static final Vector3D zero   = new Vector3D(0, 0, 0);"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,53,/** Serializable version identifier */
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,54,private static final long serialVersionUID = -6155041477622120793L;
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,53,** Simple constructor.
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,54, Build a null vector.
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,56,ublic Vector3D() {
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,57, = 0;
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,58, = 0;
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,59, = 0;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,56,/** Abscissa. */
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,57,private final double x;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,59,/** Ordinate. */
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,60,private final double y;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,62,/** Height. */
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,63,private final double z;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,188,/** Get the square of the norm for the vector.
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,189,* @return square of the euclidian norm for the vector
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,191,public double getNormSq() {
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,192,return x * x + y * y + z * z;
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,350,** Abscissa. */
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,351,rivate final double x;
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,353,** Ordinate. */
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,354,rivate final double y;
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,356,** Height. */
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,357,rivate final double z;
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,359,** Serializable version identifier */
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,360,rivate static final long serialVersionUID = -5721105387745193385L;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,360,/** Compute the distance between two vectors.
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,361,* <p>Calling this method is equivalent to calling:
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,362,* <code>v1.subtract(v2).getNorm()</code> except that no intermediate
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,363,* vector is built</p>
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,364,* @param v1 first vector
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,365,* @param v2 second vector
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,366,* @return the distance between v1 and v2
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,368,"public static double distance(Vector3D v1, Vector3D v2) {"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,369,final double dx = v2.x - v1.x;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,370,final double dy = v2.y - v1.y;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,371,final double dz = v2.z - v1.z;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,372,return Math.sqrt(dx * dx + dy * dy + dz * dz);
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,375,/** Compute the square of the distance between two vectors.
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,376,* <p>Calling this method is equivalent to calling:
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,377,* <code>v1.subtract(v2).getNormSq()</code> except that no intermediate
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,378,* vector is built</p>
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,379,* @param v1 first vector
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,380,* @param v2 second vector
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,381,* @return the square of the distance between v1 and v2
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,383,"public static double distanceSq(Vector3D v1, Vector3D v2) {"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,384,final double dx = v2.x - v1.x;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,385,final double dy = v2.y - v1.y;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,386,final double dz = v2.z - v1.z;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,387,return dx * dx + dy * dy + dz * dz;
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,25,import org.apache.commons.math.util.MathUtils;
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,37,otation r = new Rotation();
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,38,"heckVector(r.applyTo(Vector3D.plusI), Vector3D.plusI);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,39,"heckVector(r.applyTo(Vector3D.plusJ), Vector3D.plusJ);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,40,"heckVector(r.applyTo(Vector3D.plusK), Vector3D.plusK);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,38,Rotation r = Rotation.IDENTITY;
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,39,"checkVector(r.applyTo(Vector3D.PLUS_I), Vector3D.PLUS_I);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,40,"checkVector(r.applyTo(Vector3D.PLUS_J), Vector3D.PLUS_J);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,41,"checkVector(r.applyTo(Vector3D.PLUS_K), Vector3D.PLUS_K);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,44,"heckVector(r.applyTo(Vector3D.plusI), Vector3D.plusI);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,45,"heckVector(r.applyTo(Vector3D.plusJ), Vector3D.plusJ);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,46,"heckVector(r.applyTo(Vector3D.plusK), Vector3D.plusK);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,45,"checkVector(r.applyTo(Vector3D.PLUS_I), Vector3D.PLUS_I);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,46,"checkVector(r.applyTo(Vector3D.PLUS_J), Vector3D.PLUS_J);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,47,"checkVector(r.applyTo(Vector3D.PLUS_K), Vector3D.PLUS_K);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,50,"heckVector(r.applyTo(Vector3D.plusI), Vector3D.plusI);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,51,"heckVector(r.applyTo(Vector3D.plusJ), Vector3D.plusJ);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,52,"heckVector(r.applyTo(Vector3D.plusK), Vector3D.plusK);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,51,"checkVector(r.applyTo(Vector3D.PLUS_I), Vector3D.PLUS_I);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,52,"checkVector(r.applyTo(Vector3D.PLUS_J), Vector3D.PLUS_J);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,53,"checkVector(r.applyTo(Vector3D.PLUS_K), Vector3D.PLUS_K);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,60,"heckVector(r.applyTo(Vector3D.plusI), Vector3D.plusJ);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,61,"heckVector(r.applyTo(Vector3D.plusJ), Vector3D.plusK);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,62,"heckVector(r.applyTo(Vector3D.plusK), Vector3D.plusI);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,61,"checkVector(r.applyTo(Vector3D.PLUS_I), Vector3D.PLUS_J);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,62,"checkVector(r.applyTo(Vector3D.PLUS_J), Vector3D.PLUS_K);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,63,"checkVector(r.applyTo(Vector3D.PLUS_K), Vector3D.PLUS_I);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,75," = new Rotation(Vector3D.plusK, 1.5 * Math.PI);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,76,"r = new Rotation(Vector3D.PLUS_K, 1.5 * Math.PI);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,79," = new Rotation(Vector3D.plusJ, Math.PI);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,80,"heckVector(r.getAxis(), Vector3D.plusJ);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,80,"r = new Rotation(Vector3D.PLUS_J, Math.PI);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,81,"checkVector(r.getAxis(), Vector3D.PLUS_J);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,83,"heckVector(new Rotation().getAxis(), Vector3D.plusI);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,84,"checkVector(Rotation.IDENTITY.getAxis(), Vector3D.PLUS_I);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,106,"ew Rotation(u, new Vector3D());"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,107,"new Rotation(u, Vector3D.ZERO);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,123,"heckVector(r.applyTo(Vector3D.plusI), Vector3D.plusK);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,124,"heckVector(r.applyTo(Vector3D.plusJ), Vector3D.minusI);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,124,"checkVector(r.applyTo(Vector3D.PLUS_I), Vector3D.PLUS_K);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,125,"checkVector(r.applyTo(Vector3D.PLUS_J), Vector3D.MINUS_I);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,128,"f (Vector3D.dotProduct(axis, Vector3D.plusK) > 0) {"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,129,"heckVector(axis, Vector3D.plusK);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,129,"if (Vector3D.dotProduct(axis, Vector3D.PLUS_K) > 0) {"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,130,"checkVector(axis, Vector3D.PLUS_K);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,131,"heckVector(axis, Vector3D.minusK);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,132,"checkVector(axis, Vector3D.MINUS_K);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,136," = new Rotation(Vector3D.plusI,  Vector3D.plusJ,"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,137,"r = new Rotation(Vector3D.PLUS_I,  Vector3D.PLUS_J,"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,147,"ew Rotation(u1, u2, new Vector3D(), v2);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,148,"new Rotation(u1, u2, Vector3D.ZERO, v2);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,227,"heckVector(r.applyTo(Vector3D.plusI), Vector3D.plusK);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,228,"heckVector(r.applyTo(Vector3D.plusJ), Vector3D.plusI);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,229,"heckVector(r.applyTo(Vector3D.plusK), Vector3D.plusJ);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,228,"checkVector(r.applyTo(Vector3D.PLUS_I), Vector3D.PLUS_K);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,229,"checkVector(r.applyTo(Vector3D.PLUS_J), Vector3D.PLUS_I);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,230,"checkVector(r.applyTo(Vector3D.PLUS_K), Vector3D.PLUS_J);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,280,"heckVector(r.applyTo(Vector3D.plusI),"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,281,"checkVector(r.applyTo(Vector3D.PLUS_I),"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,282,"heckVector(r.applyTo(Vector3D.plusJ),"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,283,"checkVector(r.applyTo(Vector3D.PLUS_J),"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,284,"heckVector(r.applyTo(Vector3D.plusK),"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,285,"checkVector(r.applyTo(Vector3D.PLUS_K),"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,466, = new Rotation();
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,467,r = Rotation.IDENTITY;
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,477," = new Rotation(Vector3D.plusK, Math.PI);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,478,"r = new Rotation(Vector3D.PLUS_K, Math.PI);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,495,2 -= 2 * Math.PI * Math.floor((a2 + Math.PI - a1) / (2 * Math.PI));
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,496,ssertTrue(Math.abs(a1 - a2) < 1.0e-10);
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,496,"assertEquals(a1, MathUtils.normalizeAngle(a2, a1), 1.0e-10);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,500,"otation reference = new Rotation(q0, q1, q2, q3, false);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,501,"ssertEquals(0, r.applyInverseTo(reference).getAngle(), 1.0e-12);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,500,"assertEquals(0, Rotation.distance(r, new Rotation(q0, q1, q2, q3, false)), 1.0e-12);"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,35,"heckVector(new Vector3D(2, Vector3D.plusI,"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,36,"3, Vector3D.minusK),"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,35,"checkVector(new Vector3D(2, Vector3D.PLUS_I,"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,36,"-3, Vector3D.MINUS_K),"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,38,"heckVector(new Vector3D(2, Vector3D.plusI,"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,39,", Vector3D.plusJ,"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,40,"3, Vector3D.minusK),"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,38,"checkVector(new Vector3D(2, Vector3D.PLUS_I,"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,39,"5, Vector3D.PLUS_J,"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,40,"-3, Vector3D.MINUS_K),"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,42,"heckVector(new Vector3D(2, Vector3D.plusI,"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,43,", Vector3D.plusJ,"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,44,", Vector3D.minusJ,"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,45,"3, Vector3D.minusK),"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,42,"checkVector(new Vector3D(2, Vector3D.PLUS_I,"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,43,"5, Vector3D.PLUS_J,"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,44,"5, Vector3D.MINUS_J,"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,45,"-3, Vector3D.MINUS_K),"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,57,ssertTrue(Math.abs(new Vector3D().getNorm()) < 1.0e-12);
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,57,assertTrue(Math.abs(Vector3D.ZERO.getNorm()) < 1.0e-12);
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,110,"ssertEquals(0,           Vector3D.plusI.getAlpha(), 1.0e-10);"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,111,"ssertEquals(0,           Vector3D.plusI.getDelta(), 1.0e-10);"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,112,"ssertEquals(Math.PI / 2, Vector3D.plusJ.getAlpha(), 1.0e-10);"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,113,"ssertEquals(0,           Vector3D.plusJ.getDelta(), 1.0e-10);"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,114,"ssertEquals(0,           Vector3D.plusK.getAlpha(), 1.0e-10);"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,115,"ssertEquals(Math.PI / 2, Vector3D.plusK.getDelta(), 1.0e-10);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,110,"assertEquals(0,           Vector3D.PLUS_I.getAlpha(), 1.0e-10);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,111,"assertEquals(0,           Vector3D.PLUS_I.getDelta(), 1.0e-10);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,112,"assertEquals(Math.PI / 2, Vector3D.PLUS_J.getAlpha(), 1.0e-10);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,113,"assertEquals(0,           Vector3D.PLUS_J.getDelta(), 1.0e-10);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,114,"assertEquals(0,           Vector3D.PLUS_K.getAlpha(), 1.0e-10);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,115,"assertEquals(Math.PI / 2, Vector3D.PLUS_K.getDelta(), 1.0e-10);"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,137,ew Vector3D().normalize();
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,137,Vector3D.ZERO.normalize();
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,174,"ector3D.angle(new Vector3D(), Vector3D.plusI);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,174,"Vector3D.angle(Vector3D.ZERO, Vector3D.PLUS_I);"

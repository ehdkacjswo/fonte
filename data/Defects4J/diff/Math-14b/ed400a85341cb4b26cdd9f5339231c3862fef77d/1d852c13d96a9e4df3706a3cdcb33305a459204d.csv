is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,18,ackage org.apache.commons.math.linear;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,20,mport java.util.Iterator;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,21,mport java.util.NoSuchElementException;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,23,mport org.apache.commons.math.exception.MathUnsupportedOperationException;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,24,mport org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,25,mport org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,26,mport org.apache.commons.math.exception.MathArithmeticException;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,27,mport org.apache.commons.math.analysis.FunctionUtils;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,28,mport org.apache.commons.math.analysis.function.Add;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,29,mport org.apache.commons.math.analysis.function.Multiply;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,30,mport org.apache.commons.math.analysis.function.Divide;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,31,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,32,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,33,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,36, This class provides default basic implementations for many methods in the
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,37, {@link RealVector} interface.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,39, @version $Id$
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,40, @since 2.1
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,42,ublic abstract class AbstractRealVector implements RealVector {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,45, Check if instance and specified vectors have the same dimension.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,47, @param v Vector to compare instance with.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,48, @throws DimensionMismatchException if the vectors do not
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,49, have the same dimension.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,51,rotected void checkVectorDimensions(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,52,heckVectorDimensions(v.getDimension());
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,56, Check if instance dimension is equal to some expected value.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,58, @param n Expected dimension.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,59, @throws DimensionMismatchException if the dimension is
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,60, inconsistent with the vector size.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,62,rotected void checkVectorDimensions(int n) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,63,nt d = getDimension();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,64,f (d != n) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,65,"hrow new DimensionMismatchException(d, n);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,70, Check if an index is valid.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,72, @param index Index to check.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,73, @exception OutOfRangeException if {@code index} is not valid.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,75,rotected void checkIndex(final int index) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,76,f (index < 0 ||
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,77,ndex >= getDimension()) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,78,"hrow new OutOfRangeException(LocalizedFormats.INDEX,"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,79,"ndex, 0, getDimension() - 1);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,83,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,84,"ublic void setSubVector(int index, RealVector v) {"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,85,heckIndex(index);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,86,heckIndex(index + v.getDimension() - 1);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,87,"etSubVector(index, v.getData());"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,90,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,91,"ublic void setSubVector(int index, double[] v) {"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,92,heckIndex(index);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,93,heckIndex(index + v.length - 1);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,94,or (int i = 0; i < v.length; i++) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,95,"etEntry(i + index, v[i]);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,99,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,100,ublic RealVector add(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,101,ouble[] result = v.clone();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,102,terator<Entry> it = sparseIterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,103,ntry e;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,104,hile (it.hasNext() && (e = it.next()) != null) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,105,esult[e.getIndex()] += e.getValue();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,107,"eturn new ArrayRealVector(result, false);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,110,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,111,ublic RealVector add(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,112,f (v instanceof ArrayRealVector) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,113,ouble[] values = ((ArrayRealVector)v).getDataRef();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,114,eturn add(values);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,116,ealVector result = v.copy();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,117,terator<Entry> it = sparseIterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,118,ntry e;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,119,hile (it.hasNext() && (e = it.next()) != null) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,120,inal int index = e.getIndex();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,121,"esult.setEntry(index, e.getValue() + result.getEntry(index));"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,123,eturn result;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,126,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,127,ublic RealVector subtract(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,128,ouble[] result = v.clone();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,129,terator<Entry> it = sparseIterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,130,ntry e;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,131,hile (it.hasNext() && (e = it.next()) != null) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,132,inal int index = e.getIndex();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,133,esult[index] = e.getValue() - result[index];
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,135,"eturn new ArrayRealVector(result, false);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,138,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,139,ublic RealVector subtract(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,140,f (v instanceof ArrayRealVector) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,141,ouble[] values = ((ArrayRealVector)v).getDataRef();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,142,eturn add(values);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,144,ealVector result = v.copy();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,145,terator<Entry> it = sparseIterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,146,ntry e;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,147,hile (it.hasNext() && (e = it.next()) != null) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,148,inal int index = e.getIndex();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,149,".setEntry(index, e.getValue() - result.getEntry(index));"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,151,eturn result;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,154,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,155,ublic RealVector mapAdd(double d) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,156,eturn copy().mapAddToSelf(d);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,159,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,160,ublic RealVector mapAddToSelf(double d) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,161,f (d != 0) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,162,"eturn mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,164,eturn this;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,167,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,168,ublic abstract AbstractRealVector copy();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,170,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,171,ublic double dotProduct(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,172,"eturn dotProduct(new ArrayRealVector(v, false));"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,175,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,176,ublic double dotProduct(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,177,heckVectorDimensions(v);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,178,ouble d = 0;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,179,terator<Entry> it = sparseIterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,180,ntry e;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,181,hile (it.hasNext() && (e = it.next()) != null) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,182, += e.getValue() * v.getEntry(e.getIndex());
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,184,eturn d;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,187,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,188,ublic double cosine(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,189,inal double norm = getNorm();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,190,inal double vNorm = v.getNorm();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,192,f (norm == 0 ||
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,193,Norm == 0) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,194,hrow new MathArithmeticException(LocalizedFormats.ZERO_NORM);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,196,eturn dotProduct(v) / (norm * vNorm);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,199,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,200,ublic double cosine(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,201,"eturn cosine(new ArrayRealVector(v, false));"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,204,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,205,ublic RealVector ebeDivide(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,206,"eturn ebeDivide(new ArrayRealVector(v, false));"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,209,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,210,ublic RealVector ebeMultiply(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,211,"eturn ebeMultiply(new ArrayRealVector(v, false));"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,214,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,215,ublic double getDistance(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,216,heckVectorDimensions(v);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,217,ouble d = 0;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,218,terator<Entry> it = iterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,219,ntry e;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,220,hile (it.hasNext() && (e = it.next()) != null) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,221,inal double diff = e.getValue() - v.getEntry(e.getIndex());
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,222, += diff * diff;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,224,eturn FastMath.sqrt(d);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,227,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,228,ublic double getNorm() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,229,ouble sum = 0;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,230,terator<Entry> it = sparseIterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,231,ntry e;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,232,hile (it.hasNext() && (e = it.next()) != null) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,233,inal double value = e.getValue();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,234,um += value * value;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,236,eturn FastMath.sqrt(sum);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,239,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,240,ublic double getL1Norm() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,241,ouble norm = 0;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,242,terator<Entry> it = sparseIterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,243,ntry e;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,244,hile (it.hasNext() && (e = it.next()) != null) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,245,orm += FastMath.abs(e.getValue());
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,247,eturn norm;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,250,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,251,ublic double getLInfNorm() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,252,ouble norm = 0;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,253,terator<Entry> it = sparseIterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,254,ntry e;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,255,hile (it.hasNext() && (e = it.next()) != null) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,256,"orm = FastMath.max(norm, FastMath.abs(e.getValue()));"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,258,eturn norm;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,261,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,262,ublic double getDistance(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,263,"eturn getDistance(new ArrayRealVector(v,false));"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,266,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,267,ublic double getL1Distance(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,268,heckVectorDimensions(v);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,269,ouble d = 0;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,270,terator<Entry> it = iterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,271,ntry e;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,272,hile (it.hasNext() && (e = it.next()) != null) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,273, += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,275,eturn d;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,278,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,279,ublic double getL1Distance(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,280,heckVectorDimensions(v.length);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,281,ouble d = 0;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,282,terator<Entry> it = iterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,283,ntry e;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,284,hile (it.hasNext() && (e = it.next()) != null) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,285, += FastMath.abs(e.getValue() - v[e.getIndex()]);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,287,eturn d;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,290,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,291,ublic double getLInfDistance(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,292,heckVectorDimensions(v);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,293,ouble d = 0;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,294,terator<Entry> it = iterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,295,ntry e;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,296,hile (it.hasNext() && (e = it.next()) != null) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,297," = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,299,eturn d;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,302,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,303,ublic double getLInfDistance(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,304,heckVectorDimensions(v.length);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,305,ouble d = 0;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,306,terator<Entry> it = iterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,307,ntry e;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,308,hile (it.hasNext() && (e = it.next()) != null) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,309," = FastMath.max(FastMath.abs(e.getValue() - v[e.getIndex()]), d);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,311,eturn d;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,314,** Get the index of the minimum entry.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,315, @return index of the minimum entry or -1 if vector length is 0
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,316, or all entries are NaN
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,318,ublic int getMinIndex() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,319,nt minIndex    = -1;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,320,ouble minValue = Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,321,terator<Entry> iterator = iterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,322,hile (iterator.hasNext()) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,323,inal Entry entry = iterator.next();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,324,f (entry.getValue() <= minValue) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,325,inIndex = entry.getIndex();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,326,inValue = entry.getValue();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,329,eturn minIndex;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,332,** Get the value of the minimum entry.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,333, @return value of the minimum entry or NaN if all entries are NaN
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,335,ublic double getMinValue() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,336,inal int minIndex = getMinIndex();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,337,eturn minIndex < 0 ? Double.NaN : getEntry(minIndex);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,340,** Get the index of the maximum entry.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,341, @return index of the maximum entry or -1 if vector length is 0
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,342, or all entries are NaN
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,344,ublic int getMaxIndex() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,345,nt maxIndex    = -1;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,346,ouble maxValue = Double.NEGATIVE_INFINITY;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,347,terator<Entry> iterator = iterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,348,hile (iterator.hasNext()) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,349,inal Entry entry = iterator.next();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,350,f (entry.getValue() >= maxValue) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,351,axIndex = entry.getIndex();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,352,axValue = entry.getValue();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,355,eturn maxIndex;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,358,** Get the value of the maximum entry.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,359, @return value of the maximum entry or NaN if all entries are NaN
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,361,ublic double getMaxValue() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,362,inal int maxIndex = getMaxIndex();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,363,eturn maxIndex < 0 ? Double.NaN : getEntry(maxIndex);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,367,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,368,ublic RealVector mapMultiply(double d) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,369,eturn copy().mapMultiplyToSelf(d);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,372,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,373,ublic RealVector mapMultiplyToSelf(double d){
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,374,"eturn mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,377,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,378,ublic RealVector mapSubtract(double d) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,379,eturn copy().mapSubtractToSelf(d);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,382,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,383,ublic RealVector mapSubtractToSelf(double d){
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,384,eturn mapAddToSelf(-d);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,387,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,388,ublic RealVector mapDivide(double d) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,389,eturn copy().mapDivideToSelf(d);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,392,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,393,ublic RealVector mapDivideToSelf(double d){
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,394,"eturn mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,397,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,398,ublic RealMatrix outerProduct(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,399,ealMatrix product;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,400,f (v instanceof SparseRealVector || this instanceof SparseRealVector) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,401,"roduct = new OpenMapRealMatrix(this.getDimension(),"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,402,.getDimension());
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,403, else {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,404,"roduct = new Array2DRowRealMatrix(this.getDimension(),"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,405,.getDimension());
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,407,terator<Entry> thisIt = sparseIterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,408,ntry thisE = null;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,409,hile (thisIt.hasNext() && (thisE = thisIt.next()) != null) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,410,terator<Entry> otherIt = v.sparseIterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,411,ntry otherE = null;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,412,hile (otherIt.hasNext() && (otherE = otherIt.next()) != null) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,413,"roduct.setEntry(thisE.getIndex(), otherE.getIndex(),"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,414,hisE.getValue() * otherE.getValue());
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,418,eturn product;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,422,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,423,ublic RealMatrix outerProduct(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,424,"eturn outerProduct(new ArrayRealVector(v, false));"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,427,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,428,ublic RealVector projection(double[] v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,429,"eturn projection(new ArrayRealVector(v, false));"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,432,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,433,ublic void set(double value) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,434,terator<Entry> it = iterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,435,ntry e = null;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,436,hile (it.hasNext() && (e = it.next()) != null) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,437,.setValue(value);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,441,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,442,ublic double[] toArray() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,443,nt dim = getDimension();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,444,ouble[] values = new double[dim];
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,445,or (int i = 0; i < dim; i++) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,446,alues[i] = getEntry(i);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,448,eturn values;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,451,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,452,ublic double[] getData() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,453,eturn toArray();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,456,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,457,ublic RealVector unitVector() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,458,ealVector copy = copy();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,459,opy.unitize();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,460,eturn copy;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,463,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,464,ublic void unitize() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,465,apDivideToSelf(getNorm());
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,468,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,469,ublic Iterator<Entry> sparseIterator() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,470,eturn new SparseEntryIterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,473,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,474,ublic Iterator<Entry> iterator() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,475,inal int dim = getDimension();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,476,eturn new Iterator<Entry>() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,478,** Current index. */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,479,rivate int i = 0;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,481,** Current entry. */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,482,rivate EntryImpl e = new EntryImpl();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,484,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,485,ublic boolean hasNext() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,486,eturn i < dim;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,489,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,490,ublic Entry next() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,491,.setIndex(i++);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,492,eturn e;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,495,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,496,ublic void remove() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,497,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,502,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,503,ublic RealVector map(UnivariateRealFunction function) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,504,eturn copy().mapToSelf(function);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,507,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,508,ublic RealVector mapToSelf(UnivariateRealFunction function) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,509,terator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,510,ntry e;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,511,hile (it.hasNext() && (e = it.next()) != null) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,512,.setValue(function.value(e.getValue()));
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,514,eturn this;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,517,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,518,"ublic RealVector combine(double a, double b, double[] y) {"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,519,"eturn copy().combineToSelf(a, b, y);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,522,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,523,"ublic RealVector combine(double a, double b, RealVector y) {"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,524,"eturn copy().combineToSelf(a, b, y);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,527,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,528,"ublic RealVector combineToSelf(double a, double b, double[] y) {"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,529,"eturn combineToSelf(a, b, new ArrayRealVector(y, false));"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,532,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,533,"ublic RealVector combineToSelf(double a, double b, RealVector y) {"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,534,heckVectorDimensions(y);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,535,or (int i = 0; i < getDimension(); i++) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,536,inal double xi = getEntry(i);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,537,inal double yi = y.getEntry(i);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,538,"etEntry(i, a * xi + b * yi);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,540,eturn this;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,543,** An entry in the vector. */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,544,rotected class EntryImpl extends Entry {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,546,** Simple constructor. */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,547,ublic EntryImpl() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,548,etIndex(0);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,551,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,552,Override
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,553,ublic double getValue() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,554,eturn getEntry(getIndex());
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,557,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,558,Override
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,559,ublic void setValue(double newValue) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,560,"etEntry(getIndex(), newValue);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,565," This class should rare be used, but is here to provide"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,566," a default implementation of sparseIterator(), which is implemented"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,567," by walking over the entries, skipping those whose values are the default one."
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,569, Concrete subclasses which are SparseVector implementations should
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,570," make their own sparse iterator, not use this one."
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,572," This implementation might be useful for ArrayRealVector, when expensive"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,573," operations which preserve the default value are to be done on the entries,"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,574, and the fraction of non-default values is small (i.e. someone took a
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,575," SparseVector, and passed it into the copy-constructor of ArrayRealVector)"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,577,rotected class SparseEntryIterator implements Iterator<Entry> {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,579,** Dimension of the vector. */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,580,rivate final int dim;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,582,** last entry returned by {@link #next()} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,583,rivate EntryImpl current;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,585,** Next entry for {@link #next()} to return. */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,586,rivate EntryImpl next;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,588,** Simple constructor. */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,589,rotected SparseEntryIterator() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,590,im = getDimension();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,591,urrent = new EntryImpl();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,592,ext = new EntryImpl();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,593,f (next.getValue() == 0) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,594,dvance(next);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,598,** Advance an entry up to the next nonzero one.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,599, @param e entry to advance
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,601,rotected void advance(EntryImpl e) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,602,f (e == null) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,603,eturn;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,605,o {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,606,.setIndex(e.getIndex() + 1);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,607, while (e.getIndex() < dim && e.getValue() == 0);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,608,f (e.getIndex() >= dim) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,609,.setIndex(-1);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,613,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,614,ublic boolean hasNext() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,615,eturn next.getIndex() >= 0;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,618,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,619,ublic Entry next() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,620,nt index = next.getIndex();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,621,f (index < 0) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,622,hrow new NoSuchElementException();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,624,urrent.setIndex(index);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,625,dvance(next);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,626,eturn current;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,629,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,630,ublic void remove() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,631,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,636, This class is an implementation of {@link RealVector} with read-only
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,637, access.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,638," It wraps any {@link RealVector}, and exposes all methods which do not"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,639, modify it. Invoking methods which should normally result in the
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,640, modification of the calling {@link RealVector} results in an
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,641, {@link MathUnsupportedOperationException}. It should be noted that
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,642, {@link UnmodifiableVector} is <em>not</em> immutable.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,644,rivate static final class UnmodifiableVector implements RealVector {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,645,** The vector for which an unmodifiable view is provided. */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,646,rivate final RealVector v;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,649, Creates a view of the given vector.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,651, @param v Vector wrapped in {@code this} view.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,653,ublic UnmodifiableVector(RealVector v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,654,his.v = v;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,657,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,658,ublic RealVector mapToSelf(UnivariateRealFunction function) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,659,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,662,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,663,ublic RealVector map(UnivariateRealFunction function) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,664,eturn v.map(function);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,667,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,668,ublic Iterator<Entry> iterator() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,669,inal Iterator<Entry> i = v.iterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,670,eturn new Iterator<Entry>() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,671,** The current entry. */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,672,rivate final UnmodifiableEntry e = new UnmodifiableEntry();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,674,ublic boolean hasNext() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,675,eturn i.hasNext();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,678,ublic Entry next() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,679,.setIndex(i.next().getIndex());
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,680,eturn e;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,683,ublic void remove() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,684,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,689,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,690,ublic Iterator<Entry> sparseIterator() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,691,inal Iterator<Entry> i = v.sparseIterator();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,692,eturn new Iterator<Entry>() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,693,** The current entry. */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,694,rivate final UnmodifiableEntry e = new UnmodifiableEntry();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,696,ublic boolean hasNext() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,697,eturn i.hasNext();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,700,ublic Entry next() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,701,.setIndex(i.next().getIndex());
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,702,eturn e;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,705,ublic void remove() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,706,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,711,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,712,ublic RealVector copy() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,713,eturn v.copy();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,716,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,717,ublic RealVector add(RealVector w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,718,eturn v.add(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,721,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,722,ublic RealVector add(double[] w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,723,eturn v.add(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,726,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,727,ublic RealVector subtract(RealVector w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,728,eturn v.subtract(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,731,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,732,ublic RealVector subtract(double[] w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,733,eturn v.subtract(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,736,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,737,ublic RealVector mapAdd(double d) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,738,eturn v.mapAdd(d);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,741,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,742,ublic RealVector mapAddToSelf(double d) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,743,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,746,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,747,ublic RealVector mapSubtract(double d) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,748,eturn v.mapSubtract(d);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,751,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,752,ublic RealVector mapSubtractToSelf(double d) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,753,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,756,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,757,ublic RealVector mapMultiply(double d) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,758,eturn v.mapMultiply(d);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,761,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,762,ublic RealVector mapMultiplyToSelf(double d) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,763,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,766,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,767,ublic RealVector mapDivide(double d) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,768,eturn v.mapDivide(d);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,771,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,772,ublic RealVector mapDivideToSelf(double d) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,773,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,776,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,777,ublic RealVector ebeMultiply(RealVector w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,778,eturn v.ebeMultiply(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,781,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,782,ublic RealVector ebeMultiply(double[] w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,783,eturn v.ebeMultiply(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,786,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,787,ublic RealVector ebeDivide(RealVector w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,788,eturn v.ebeDivide(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,791,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,792,ublic RealVector ebeDivide(double[] w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,793,eturn v.ebeDivide(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,796,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,797,ublic double[] getData() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,798,/ TODO It is not specified in the javadoc that getData should
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,799,/ return a
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,800,/ deep copy
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,801,eturn v.getData();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,804,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,805,ublic double dotProduct(RealVector w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,806,eturn v.dotProduct(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,809,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,810,ublic double dotProduct(double[] w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,811,eturn v.dotProduct(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,814,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,815,ublic double cosine(RealVector w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,816,eturn v.cosine(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,819,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,820,ublic double cosine(double[] w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,821,eturn v.cosine(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,824,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,825,ublic double getNorm() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,826,eturn v.getNorm();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,829,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,830,ublic double getL1Norm() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,831,eturn v.getL1Norm();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,834,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,835,ublic double getLInfNorm() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,836,eturn v.getLInfNorm();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,839,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,840,ublic double getDistance(RealVector w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,841,eturn v.getDistance(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,844,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,845,ublic double getDistance(double[] w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,846,eturn v.getDistance(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,849,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,850,ublic double getL1Distance(RealVector w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,851,eturn v.getL1Distance(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,854,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,855,ublic double getL1Distance(double[] w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,856,eturn v.getL1Distance(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,859,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,860,ublic double getLInfDistance(RealVector w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,861,eturn v.getLInfDistance(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,864,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,865,ublic double getLInfDistance(double[] w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,866,eturn v.getLInfDistance(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,869,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,870,ublic RealVector unitVector() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,871,eturn v.unitVector();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,874,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,875,ublic void unitize() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,876,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,879,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,880,ublic RealVector projection(RealVector w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,881,eturn v.projection(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,884,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,885,ublic RealVector projection(double[] w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,886,eturn v.projection(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,889,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,890,ublic RealMatrix outerProduct(RealVector w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,891,eturn v.outerProduct(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,894,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,895,ublic RealMatrix outerProduct(double[] w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,896,eturn v.outerProduct(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,899,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,900,ublic double getEntry(int index) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,901,eturn v.getEntry(index);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,904,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,905,"ublic void setEntry(int index, double value) {"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,906,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,909,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,910,ublic int getDimension() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,911,eturn v.getDimension();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,914,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,915,ublic RealVector append(RealVector w) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,916,eturn v.append(w);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,919,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,920,ublic RealVector append(double d) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,921,eturn v.append(d);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,924,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,925,ublic RealVector append(double[] a) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,926,eturn v.append(a);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,929,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,930,"ublic RealVector getSubVector(int index, int n) {"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,931,"eturn v.getSubVector(index, n);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,934,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,935,"ublic void setSubVector(int index, RealVector w) {"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,936,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,939,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,940,"ublic void setSubVector(int index, double[] w) {"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,941,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,944,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,945,ublic void set(double value) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,946,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,949,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,950,ublic double[] toArray() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,951,eturn v.toArray();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,954,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,955,ublic boolean isNaN() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,956,eturn v.isNaN();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,959,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,960,ublic boolean isInfinite() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,961,eturn v.isInfinite();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,964,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,965,"ublic RealVector combine(double a, double b, double[] y) {"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,966,"eturn v.combine(a, b, y);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,969,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,970,"ublic RealVector combine(double a, double b, RealVector y) {"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,971,"eturn v.combine(a, b, y);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,974,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,975,"ublic RealVector combineToSelf(double a, double b, double[] y) {"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,976,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,979,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,980,"ublic RealVector combineToSelf(double a, double b, RealVector y) {"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,981,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,984,** An entry in the vector. */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,985,rivate class UnmodifiableEntry extends Entry {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,986,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,987,Override
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,988,ublic double getValue() {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,989,eturn v.getEntry(getIndex());
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,992,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,993,Override
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,994,ublic void setValue(double newValue) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,995,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1001, Returns an unmodifiable view of the specified vector.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1002, The returned vector has read-only access. An attempt to modify it will
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1003," result in a {@link MathUnsupportedOperationException}. However, the"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1004," returned vector is <em>not</em> immutable, since any modification of"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1005, {@code v} will also change the returned view.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1006," For example, in the following piece of code"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1007, <pre>
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1008,     RealVector v = new ArrayRealVector(2);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1009,     RealVector w = RealVector.unmodifiableRealVector(v);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1010,"     v.setEntry(0, 1.2);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1011,"     v.setEntry(1, -3.4);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1012, </pre>
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1013, the changes will be seen in the {@code w} view of {@code v}.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1015, @param v Vector for which an unmodifiable view is to be returned.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1016, @return an unmodifiable view of {@code v}.
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1018,ublic static RealVector unmodifiableRealVector(final RealVector v) {
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1019,eturn new UnmodifiableVector(v);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,37,ublic class ArrayRealVector extends AbstractRealVector implements Serializable {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,37,public class ArrayRealVector extends RealVector implements Serializable {
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,33,ublic class OpenMapRealVector extends AbstractRealVector
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,34,"mplements SparseRealVector, Serializable {"
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,33,public class OpenMapRealVector extends SparseRealVector
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,34,implements Serializable {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,21,import java.util.NoSuchElementException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,23,import org.apache.commons.math.exception.MathUnsupportedOperationException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,24,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,25,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,26,import org.apache.commons.math.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,27,import org.apache.commons.math.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,28,import org.apache.commons.math.analysis.function.Add;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,29,import org.apache.commons.math.analysis.function.Multiply;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,30,import org.apache.commons.math.analysis.function.Divide;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,32,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,33,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,25, Interface defining a real-valued vector with basic algebraic operations.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,36,* Class defining a real-valued vector with basic algebraic operations.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,45, @since 2.0
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,56,* @since 2.1
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,47,ublic interface RealVector {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,58,public abstract class RealVector {
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,49, Acts as if it is implemented as:
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,50, <pre>
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,51,  Entry e = null;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,52,  for(Iterator<Entry> it = iterator(); it.hasNext(); e = it.next()) {
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,53,      e.setValue(function.value(e.getValue()));
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,55, </pre>
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,60,* Returns the size of the vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,57, @param function Function to apply to each entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,58, @return this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,59, @throws org.apache.commons.math.exception.MathUserException
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,60, if the function throws it.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,62,* @return size
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,62,ealVector mapToSelf(UnivariateRealFunction function);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,64,public abstract int getDimension();
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,65, Acts as if implemented as:
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,66, <pre>
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,67,  return copy().map(function);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,68, </pre>
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,67,* Returns the entry in the specified index.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,70, @param function Function to apply to each entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,71, @return a new vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,72, @throws org.apache.commons.math.exception.MathUserException
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,73, if the function throws it.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,69,* @param index Index location of entry to be fetched.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,70,* @return the vector entry at {@code index}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,71,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,72,* if the index is not valid.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,73,"* @see #setEntry(int, double)"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,75,ealVector map(UnivariateRealFunction function);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,75,public abstract double getEntry(int index);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,77,** Class representing a modifiable entry in the vector. */
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,78,ublic abstract class Entry {
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,79,** Index of the entry. */
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,80,rivate int index;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,78,* Set a single element.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,79,* @param index element index.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,80,* @param value new value for the element.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,81,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,82,* if the index is not valid.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,83,* @see #getEntry(int)
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,85,"public abstract void setEntry(int index, double value);"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,83, Get the value of the entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,85, @return the value of the entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,87,ublic abstract double getValue();
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,89, Set the value of the entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,91, @param value New value for the entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,93,ublic abstract void setValue(double value);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,95, Get the index of the entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,97, @return the index of the entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,99,ublic int getIndex() {
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,100,eturn index;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,103, Set the index of the entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,105, @param index New index for the entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,107,ublic void setIndex(int index) {
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,108,his.index = index;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,88,* Construct a vector by appending a vector to this vector.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,90,* @param v vector to append to this one.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,91,* @return a new vector
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,93,public abstract RealVector append(RealVector v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,113, Generic dense iterator.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,114, It iterates in increasing order of the vector index.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,96,* Construct a vector by appending a double to this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,116, @return a dense iterator
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,98,* @param d double to append.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,99,* @return a new vector
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,118,terator<Entry> iterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,101,public abstract RealVector append(double d);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,121, Specialized implementations may choose to not iterate over all
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,122," dimensions, either because those values are unset, or are equal"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,123," to defaultValue(), or are small enough to be ignored for the"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,124, purposes of iteration.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,125, No guarantees are made about order of iteration.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,126," In dense implementations, this method will often delegate to"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,127, {@link #iterator()}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,104,* Construct a vector by appending a double array to this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,129, @return a sparse iterator
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,106,* @param a double array to append.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,107,* @return a new vector
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,131,terator<Entry> sparseIterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,109,public abstract RealVector append(double[] a);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,134, Returns a (deep) copy of this vector.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,112,* Get a subvector from consecutive elements.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,136, @return a vector copy.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,114,* @param index index of first element.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,115,* @param n number of elements to be retrieved.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,116,* @return a vector containing n elements.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,117,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,118,* if the index is not valid.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,120,"public abstract RealVector getSubVector(int index, int n);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,123,* Set a set of consecutive elements.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,125,* @param index index of first element to be set.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,126,* @param v vector containing the values to set.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,127,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,128,* if the index is not valid.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,129,"* @see #setSubVector(int, double[])"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,131,"public abstract void setSubVector(int index, RealVector v);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,134,* Set a set of consecutive elements.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,136,* @param index index of first element to be set.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,137,* @param v vector containing the values to set.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,138,* @throws org.apache.commons.math.exception.OutOfRangeException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,139,* if the index is not valid.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,140,"* @see #setSubVector(int, RealVector)"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,142,"public abstract void setSubVector(int index, double[] v);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,145,* Check whether any coordinate of this vector is {@code NaN}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,147,"* @return {@code true} if any coordinate of this vector is {@code NaN},"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,148,* {@code false} otherwise.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,150,public abstract boolean isNaN();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,153,* Check whether any coordinate of this vector is infinite and none are {@code NaN}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,155,* @return {@code true} if any coordinate of this vector is infinite and
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,156,"* none are {@code NaN}, {@code false} otherwise."
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,138,ealVector copy();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,158,public abstract boolean isInfinite();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,161,* Check if instance and specified vectors have the same dimension.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,163,* @param v Vector to compare instance with.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,164,* @throws DimensionMismatchException if the vectors do not
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,165,* have the same dimension.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,167,protected void checkVectorDimensions(RealVector v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,168,checkVectorDimensions(v.getDimension());
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,172,* Check if instance dimension is equal to some expected value.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,174,* @param n Expected dimension.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,175,* @throws DimensionMismatchException if the dimension is
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,176,* inconsistent with the vector size.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,178,protected void checkVectorDimensions(int n) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,179,int d = getDimension();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,180,if (d != n) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,181,"throw new DimensionMismatchException(d, n);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,186,* Check if an index is valid.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,188,* @param index Index to check.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,189,* @exception OutOfRangeException if {@code index} is not valid.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,191,protected void checkIndex(final int index) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,192,if (index < 0 ||
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,193,index >= getDimension()) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,194,"throw new OutOfRangeException(LocalizedFormats.INDEX,"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,195,"index, 0, getDimension() - 1);"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,148,ealVector add(RealVector v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,207,public RealVector add(double[] v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,208,double[] result = v.clone();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,209,Iterator<Entry> it = sparseIterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,210,Entry e;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,211,while (it.hasNext() && (e = it.next()) != null) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,212,result[e.getIndex()] += e.getValue();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,214,"return new ArrayRealVector(result, false);"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,158,ealVector add(double[] v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,225,public RealVector add(RealVector v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,226,if (v instanceof ArrayRealVector) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,227,double[] values = ((ArrayRealVector)v).getDataRef();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,228,return add(values);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,230,RealVector result = v.copy();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,231,Iterator<Entry> it = sparseIterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,232,Entry e;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,233,while (it.hasNext() && (e = it.next()) != null) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,234,final int index = e.getIndex();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,235,"result.setEntry(index, e.getValue() + result.getEntry(index));"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,237,return result;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,169,ealVector subtract(RealVector v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,248,public RealVector subtract(double[] v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,249,double[] result = v.clone();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,250,Iterator<Entry> it = sparseIterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,251,Entry e;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,252,while (it.hasNext() && (e = it.next()) != null) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,253,final int index = e.getIndex();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,254,result[index] = e.getValue() - result[index];
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,256,"return new ArrayRealVector(result, false);"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,179,ealVector subtract(double[] v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,267,public RealVector subtract(RealVector v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,268,if (v instanceof ArrayRealVector) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,269,double[] values = ((ArrayRealVector)v).getDataRef();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,270,return add(values);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,272,RealVector result = v.copy();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,273,Iterator<Entry> it = sparseIterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,274,Entry e;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,275,while (it.hasNext() && (e = it.next()) != null) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,276,final int index = e.getIndex();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,277,"v.setEntry(index, e.getValue() - result.getEntry(index));"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,279,return result;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,187,ealVector mapAdd(double d);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,288,public RealVector mapAdd(double d) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,289,return copy().mapAddToSelf(d);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,196,ealVector mapAddToSelf(double d);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,299,public RealVector mapAddToSelf(double d) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,300,if (d != 0) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,301,"return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,303,return this;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,199, Subtract a value from each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,307,* Returns a (deep) copy of this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,201, @param d Value to be subtracted.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,202, @return {@code this} - {@code d}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,309,* @return a vector copy.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,204,ealVector mapSubtract(double d);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,311,public abstract RealVector copy();
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,207, Subtract a value from each entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,208, The instance is changed in-place.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,210, @param d Value to be subtracted.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,211, @return {@code this}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,314,* Compute the dot product.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,315,* @param v vector with which dot product should be computed
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,316,* @return the scalar dot product between instance and v
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,317,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,318,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,213,ealVector mapSubtractToSelf(double d);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,320,public double dotProduct(double[] v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,321,"return dotProduct(new ArrayRealVector(v, false));"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,216, Multiply each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,325,* Compute the dot product.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,326,* @param v vector with which dot product should be computed
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,327,* @return the scalar dot product between instance and v
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,328,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,329,* if {@code v} is not the same size as this vector.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,331,public double dotProduct(RealVector v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,332,checkVectorDimensions(v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,333,double d = 0;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,334,Iterator<Entry> it = sparseIterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,335,Entry e;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,336,while (it.hasNext() && (e = it.next()) != null) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,337,d += e.getValue() * v.getEntry(e.getIndex());
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,339,return d;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,343,* Computes the cosine of the angle between this vector and the
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,344,* argument.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,218, @param d Multiplication factor.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,219, @return {@code this} * {@code d}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,346,* @param v Vector.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,347,* @return the cosine of the angle between this vector and {@code v}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,221,ealVector mapMultiply(double d);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,349,public double cosine(RealVector v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,350,final double norm = getNorm();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,351,final double vNorm = v.getNorm();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,353,if (norm == 0 ||
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,354,vNorm == 0) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,355,throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,357,return dotProduct(v) / (norm * vNorm);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,224, Multiply each entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,225, The instance is changed in-place.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,361,* Computes the cosine of the angle between this vector and the
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,362,* vector whose components are given as argument.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,227, @param d Multiplication factor.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,228, @return {@code this}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,364,* @param v Components of a vector.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,365,* @return the cosine of the angle between this vector and {@code v}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,230,ealVector mapMultiplyToSelf(double d);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,367,public double cosine(double[] v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,368,"return cosine(new ArrayRealVector(v, false));"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,233, Divide each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,372,* Element-by-element division.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,235, @param d Value to divide by.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,236, @return {@code this} / {@code d}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,374,* @param v vector by which instance elements must be divided
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,375,* @return a vector containing this[i] / v[i] for all i
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,376,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,377,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,238,ealVector mapDivide(double d);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,379,public abstract RealVector ebeDivide(RealVector v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,241, Divide each entry.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,242, The instance is changed in-place.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,382,* Element-by-element division.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,244, @param d Value to divide by.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,245, @return {@code this}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,384,* @param v vector by which instance elements must be divided
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,385,* @return a vector containing this[i] / v[i] for all i
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,386,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,387,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,247,ealVector mapDivideToSelf(double d);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,389,public RealVector ebeDivide(double[] v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,390,"return ebeDivide(new ArrayRealVector(v, false));"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,256,ealVector ebeMultiply(RealVector v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,401,public abstract RealVector ebeMultiply(RealVector v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,265,ealVector ebeMultiply(double[] v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,411,public RealVector ebeMultiply(double[] v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,412,"return ebeMultiply(new ArrayRealVector(v, false));"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,268, Element-by-element division.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,269, @param v vector by which instance elements must be divided
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,270, @return a vector containing this[i] / v[i] for all i
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,416,* Distance between two vectors.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,417,* <p>This method computes the distance consistent with the
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,418,"* L<sub>2</sub> norm, i.e. the square root of the sum of"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,419,"* elements differences, or euclidian distance.</p>"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,420,* @param v vector to which distance is requested
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,421,* @return distance between two vectors.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,424,* @see #getL1Distance(RealVector)
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,425,* @see #getLInfDistance(RealVector)
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,426,* @see #getNorm()
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,274,ealVector ebeDivide(RealVector v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,428,public double getDistance(RealVector v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,429,checkVectorDimensions(v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,430,double d = 0;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,431,Iterator<Entry> it = iterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,432,Entry e;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,433,while (it.hasNext() && (e = it.next()) != null) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,434,final double diff = e.getValue() - v.getEntry(e.getIndex());
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,435,d += diff * diff;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,437,return FastMath.sqrt(d);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,277, Element-by-element division.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,278, @param v vector by which instance elements must be divided
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,279, @return a vector containing this[i] / v[i] for all i
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,441,* Distance between two vectors.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,442,* <p>This method computes the distance consistent with the
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,443,"* L<sub>2</sub> norm, i.e. the square root of the sum of"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,444,"* elements differences, or euclidian distance.</p>"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,445,* @param v vector to which distance is requested
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,446,* @return distance between two vectors.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,449,* @see #getL1Distance(double[])
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,450,* @see #getLInfDistance(double[])
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,451,* @see #getNorm()
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,283,ealVector ebeDivide(double[] v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,286, Returns vector entries as a double array.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,287, @return double array of entries
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,289,ouble[] getData();
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,292, Compute the dot product.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,293, @param v vector with which dot product should be computed
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,294, @return the scalar dot product between instance and v
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,295, @throws org.apache.commons.math.exception.DimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,296, if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,298,ouble dotProduct(RealVector v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,301, Compute the dot product.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,302, @param v vector with which dot product should be computed
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,303, @return the scalar dot product between instance and v
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,304, @throws org.apache.commons.math.exception.DimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,305, if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,307,ouble dotProduct(double[] v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,310, Computes the cosine of the angle between this vector and the
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,311, argument.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,313, @param v Vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,314, @return the cosine of the angle between this vector and {@code v}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,316,ouble cosine(RealVector v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,319, Computes the cosine of the angle between this vector and the
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,320, vector whose components are given as argument.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,322, @param v Components of a vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,323, @return the cosine of the angle between this vector and {@code v}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,325,ouble cosine(double[] v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,453,public double getDistance(double[] v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,454,"return getDistance(new ArrayRealVector(v,false));"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,336,ouble getNorm();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,466,public double getNorm() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,467,double sum = 0;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,468,Iterator<Entry> it = sparseIterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,469,Entry e;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,470,while (it.hasNext() && (e = it.next()) != null) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,471,final double value = e.getValue();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,472,sum += value * value;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,474,return FastMath.sqrt(sum);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,347,ouble getL1Norm();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,486,public double getL1Norm() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,487,double norm = 0;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,488,Iterator<Entry> it = sparseIterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,489,Entry e;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,490,while (it.hasNext() && (e = it.next()) != null) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,491,norm += FastMath.abs(e.getValue());
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,493,return norm;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,358,ouble getLInfNorm();
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,361, Distance between two vectors.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,362, <p>This method computes the distance consistent with the
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,363," L<sub>2</sub> norm, i.e. the square root of the sum of"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,364," elements differences, or euclidian distance.</p>"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,365, @param v vector to which distance is requested
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,366, @return distance between two vectors.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,367, @throws org.apache.commons.math.exception.DimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,368, if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,369, @see #getL1Distance(RealVector)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,370, @see #getLInfDistance(RealVector)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,371, @see #getNorm()
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,373,ouble getDistance(RealVector v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,376, Distance between two vectors.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,377, <p>This method computes the distance consistent with the
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,378," L<sub>2</sub> norm, i.e. the square root of the sum of"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,379," elements differences, or euclidian distance.</p>"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,380, @param v vector to which distance is requested
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,381, @return distance between two vectors.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,382, @throws org.apache.commons.math.exception.DimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,383, if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,384, @see #getL1Distance(double[])
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,385, @see #getLInfDistance(double[])
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,386, @see #getNorm()
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,388,ouble getDistance(double[] v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,505,public double getLInfNorm() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,506,double norm = 0;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,507,Iterator<Entry> it = sparseIterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,508,Entry e;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,509,while (it.hasNext() && (e = it.next()) != null) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,510,"norm = FastMath.max(norm, FastMath.abs(e.getValue()));"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,512,return norm;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,399, @see #getDistance(RealVector)
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,400, @see #getLInfDistance(RealVector)
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,524,* @see #getDistance(double[])
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,525,* @see #getLInfDistance(double[])
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,403,ouble getL1Distance(RealVector v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,528,public double getL1Distance(RealVector v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,529,checkVectorDimensions(v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,530,double d = 0;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,531,Iterator<Entry> it = iterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,532,Entry e;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,533,while (it.hasNext() && (e = it.next()) != null) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,534,d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,536,return d;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,418,ouble getL1Distance(double[] v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,552,public double getL1Distance(double[] v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,553,checkVectorDimensions(v.length);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,554,double d = 0;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,555,Iterator<Entry> it = iterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,556,Entry e;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,557,while (it.hasNext() && (e = it.next()) != null) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,558,d += FastMath.abs(e.getValue() - v[e.getIndex()]);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,560,return d;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,433,ouble getLInfDistance(RealVector v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,576,public double getLInfDistance(RealVector v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,577,checkVectorDimensions(v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,578,double d = 0;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,579,Iterator<Entry> it = iterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,580,Entry e;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,581,while (it.hasNext() && (e = it.next()) != null) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,582,"d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,584,return d;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,448,ouble getLInfDistance(double[] v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,600,public double getLInfDistance(double[] v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,601,checkVectorDimensions(v.length);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,602,double d = 0;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,603,Iterator<Entry> it = iterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,604,Entry e;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,605,while (it.hasNext() && (e = it.next()) != null) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,606,"d = FastMath.max(FastMath.abs(e.getValue() - v[e.getIndex()]), d);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,608,return d;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,450,** Creates a unit vector pointing in the direction of this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,451, <p>The instance is not changed by this method.</p>
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,452, @return a unit vector pointing in direction of this vector
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,453, @exception ArithmeticException if the norm is null
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,611,/** Get the index of the minimum entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,612,* @return index of the minimum entry or -1 if vector length is 0
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,613,* or all entries are NaN
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,455,ealVector unitVector();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,615,public int getMinIndex() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,616,int minIndex    = -1;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,617,double minValue = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,618,Iterator<Entry> iterator = iterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,619,while (iterator.hasNext()) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,620,final Entry entry = iterator.next();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,621,if (entry.getValue() <= minValue) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,622,minIndex = entry.getIndex();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,623,minValue = entry.getValue();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,626,return minIndex;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,457,** Converts this vector into a unit vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,458, <p>The instance itself is changed by this method.</p>
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,459, @throws  org.apache.commons.math.exception.MathArithmeticException
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,460, if the norm is zero.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,629,/** Get the value of the minimum entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,630,* @return value of the minimum entry or NaN if all entries are NaN
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,462,oid unitize();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,632,public double getMinValue() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,633,final int minIndex = getMinIndex();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,634,return minIndex < 0 ? Double.NaN : getEntry(minIndex);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,464,** Find the orthogonal projection of this vector onto another vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,465, @param v vector onto which instance must be projected
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,466, @return projection of the instance onto v
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,467, @throws org.apache.commons.math.exception.DimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,468, if {@code v} is not the same size as this vector.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,637,/** Get the index of the maximum entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,638,* @return index of the maximum entry or -1 if vector length is 0
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,639,* or all entries are NaN
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,470,ealVector projection(RealVector v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,641,public int getMaxIndex() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,642,int maxIndex    = -1;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,643,double maxValue = Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,644,Iterator<Entry> iterator = iterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,645,while (iterator.hasNext()) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,646,final Entry entry = iterator.next();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,647,if (entry.getValue() >= maxValue) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,648,maxIndex = entry.getIndex();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,649,maxValue = entry.getValue();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,652,return maxIndex;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,472,** Find the orthogonal projection of this vector onto another vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,473, @param v vector onto which instance must be projected
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,474, @return projection of the instance onto v
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,475, @throws org.apache.commons.math.exception.DimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,476, if {@code v} is not the same size as this vector.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,655,/** Get the value of the maximum entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,656,* @return value of the maximum entry or NaN if all entries are NaN
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,478,ealVector projection(double[] v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,658,public double getMaxValue() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,659,final int maxIndex = getMaxIndex();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,660,return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,481, Compute the outer product.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,482, @param v vector with which outer product should be computed
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,483, @return the matrix outer product between instance and v
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,485,ealMatrix outerProduct(RealVector v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,488, Compute the outer product.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,489, @param v vector with which outer product should be computed
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,490, @return the matrix outer product between instance and v
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,665,* Multiply each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,667,* @param d Multiplication factor.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,668,* @return {@code this} * {@code d}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,492,ealMatrix outerProduct(double[] v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,670,public RealVector mapMultiply(double d) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,671,return copy().mapMultiplyToSelf(d);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,495, Returns the entry in the specified index.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,675,* Multiply each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,676,* The instance is changed in-place.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,497, @param index Index location of entry to be fetched.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,498, @return the vector entry at {@code index}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,499, @throws org.apache.commons.math.exception.OutOfRangeException
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,500, if the index is not valid.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,501," @see #setEntry(int, double)"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,678,* @param d Multiplication factor.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,679,* @return {@code this}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,503,ouble getEntry(int index);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,681,public RealVector mapMultiplyToSelf(double d){
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,682,"return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,506, Set a single element.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,507, @param index element index.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,508, @param value new value for the element.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,509, @throws org.apache.commons.math.exception.OutOfRangeException
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,510, if the index is not valid.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,511, @see #getEntry(int)
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,686,* Subtract a value from each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,688,* @param d Value to be subtracted.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,689,* @return {@code this} - {@code d}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,513,"oid setEntry(int index, double value);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,691,public RealVector mapSubtract(double d) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,692,return copy().mapSubtractToSelf(d);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,516, Returns the size of the vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,517, @return size
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,696,* Subtract a value from each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,697,* The instance is changed in-place.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,699,* @param d Value to be subtracted.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,700,* @return {@code this}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,519,nt getDimension();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,702,public RealVector mapSubtractToSelf(double d){
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,703,return mapAddToSelf(-d);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,522, Construct a vector by appending a vector to this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,523, @param v vector to append to this one.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,524, @return a new vector
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,707,* Divide each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,709,* @param d Value to divide by.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,710,* @return {@code this} / {@code d}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,526,ealVector append(RealVector v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,712,public RealVector mapDivide(double d) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,713,return copy().mapDivideToSelf(d);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,529, Construct a vector by appending a double to this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,530, @param d double to append.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,531, @return a new vector
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,717,* Divide each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,718,* The instance is changed in-place.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,720,* @param d Value to divide by.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,721,* @return {@code this}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,533,ealVector append(double d);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,723,public RealVector mapDivideToSelf(double d){
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,724,"return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,536, Construct a vector by appending a double array to this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,537, @param a double array to append.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,538, @return a new vector
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,728,* Compute the outer product.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,729,* @param v vector with which outer product should be computed
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,730,* @return the matrix outer product between instance and v
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,540,ealVector append(double[] a);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,732,public RealMatrix outerProduct(RealVector v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,733,RealMatrix product;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,734,if (v instanceof SparseRealVector || this instanceof SparseRealVector) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,735,"product = new OpenMapRealMatrix(this.getDimension(),"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,736,v.getDimension());
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,737,} else {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,738,"product = new Array2DRowRealMatrix(this.getDimension(),"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,739,v.getDimension());
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,741,Iterator<Entry> thisIt = sparseIterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,742,Entry thisE = null;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,743,while (thisIt.hasNext() && (thisE = thisIt.next()) != null) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,744,Iterator<Entry> otherIt = v.sparseIterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,745,Entry otherE = null;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,746,while (otherIt.hasNext() && (otherE = otherIt.next()) != null) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,747,"product.setEntry(thisE.getIndex(), otherE.getIndex(),"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,748,thisE.getValue() * otherE.getValue());
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,752,return product;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,543, Get a subvector from consecutive elements.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,544, @param index index of first element.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,545, @param n number of elements to be retrieved.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,546, @return a vector containing n elements.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,547, @throws org.apache.commons.math.exception.OutOfRangeException
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,548, if the index is not valid.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,757,* Compute the outer product.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,758,* @param v vector with which outer product should be computed
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,759,* @return the matrix outer product between instance and v
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,550,"ealVector getSubVector(int index, int n);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,761,public RealMatrix outerProduct(double[] v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,762,"return outerProduct(new ArrayRealVector(v, false));"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,553, Set a set of consecutive elements.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,554, @param index index of first element to be set.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,555, @param v vector containing the values to set.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,556, @throws org.apache.commons.math.exception.OutOfRangeException
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,557, if the index is not valid.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,558," @see #setSubVector(int, double[])"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,766,* Find the orthogonal projection of this vector onto another vector.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,768,* @param v vector onto which instance must be projected.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,769,* @return projection of the instance onto {@code v}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,770,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,771,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,560,"oid setSubVector(int index, RealVector v);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,773,public abstract RealVector projection(RealVector v);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,563, Set a set of consecutive elements.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,564, @param index index of first element to be set.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,565, @param v vector containing the values to set.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,566, @throws org.apache.commons.math.exception.OutOfRangeException
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,567, if the index is not valid.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,568," @see #setSubVector(int, RealVector)"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,776,* Find the orthogonal projection of this vector onto another vector.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,778,* @param v vector onto which instance must be projected.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,779,* @return projection of the instance onto v.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,780,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,781,* if {@code v} is not the same size as this vector.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,570,"oid setSubVector(int index, double[] v);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,783,public RealVector projection(double[] v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,784,"return projection(new ArrayRealVector(v, false));"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,576,oid set(double value);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,791,public void set(double value) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,792,Iterator<Entry> it = iterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,793,Entry e = null;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,794,while (it.hasNext() && (e = it.next()) != null) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,795,e.setValue(value);
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,584,ouble[] toArray();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,805,public double[] toArray() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,806,int dim = getDimension();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,807,double[] values = new double[dim];
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,808,for (int i = 0; i < dim; i++) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,809,values[i] = getEntry(i);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,811,return values;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,587, Check whether any coordinate of this vector is {@code NaN}.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,588," @return {@code true} if any coordinate of this vector is {@code NaN},"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,589, {@code false} otherwise.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,815,* Returns vector entries as a double array.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,817,* @return double array of entries.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,591,oolean isNaN();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,819,public double[] getData() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,820,return toArray();
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,594, Check whether any coordinate of this vector is infinite and none are {@code NaN}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,824,* Creates a unit vector pointing in the direction of this vector.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,825,* The instance is not changed by this method.
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,596, @return {@code true} if any coordinate of this vector is infinite and
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,597," none are {@code NaN}, {@code false} otherwise."
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,827,* @return a unit vector pointing in direction of this vector
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,828,* @exception ArithmeticException if the norm is null
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,599,oolean isInfinite();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,830,public RealVector unitVector() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,831,RealVector copy = copy();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,832,copy.unitize();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,833,return copy;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,837,* Converts this vector into a unit vector.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,838,* The instance itself is changed by this method.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,840,* @throws org.apache.commons.math.exception.MathArithmeticException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,841,* if the norm is zero.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,843,public void unitize() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,844,mapDivideToSelf(getNorm());
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,848,* Specialized implementations may choose to not iterate over all
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,849,"* dimensions, either because those values are unset, or are equal"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,850,"* to defaultValue(), or are small enough to be ignored for the"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,851,* purposes of iteration.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,852,* No guarantees are made about order of iteration.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,853,"* In dense implementations, this method will often delegate to"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,854,* {@link #iterator()}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,856,* @return a sparse iterator.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,858,public Iterator<Entry> sparseIterator() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,859,return new SparseEntryIterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,863,* Generic dense iterator.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,864,* It iterates in increasing order of the vector index.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,866,* @return a dense iterator.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,868,public Iterator<Entry> iterator() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,869,final int dim = getDimension();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,870,return new Iterator<Entry>() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,872,/** Current index. */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,873,private int i = 0;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,875,/** Current entry. */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,876,private Entry e = new Entry();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,878,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,879,public boolean hasNext() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,880,return i < dim;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,883,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,884,public Entry next() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,885,e.setIndex(i++);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,886,return e;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,889,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,890,public void remove() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,891,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,897,* Acts as if implemented as:
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,898,* <pre>
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,899,*  return copy().mapToSelf(function);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,900,* </pre>
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,902,* @param function Function to apply to each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,903,* @return a new vector.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,904,* @throws org.apache.commons.math.exception.MathUserException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,905,* if the function throws it.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,907,public RealVector map(UnivariateRealFunction function) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,908,return copy().mapToSelf(function);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,912,* Acts as if it is implemented as:
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,913,* <pre>
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,914,*  Entry e = null;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,915,*  for(Iterator<Entry> it = iterator(); it.hasNext(); e = it.next()) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,916,*      e.setValue(function.value(e.getValue()));
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,918,* </pre>
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,920,* @param function Function to apply to each entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,921,* @return this vector.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,922,* @throws org.apache.commons.math.exception.MathUserException
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,923,* if the function throws it.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,925,public RealVector mapToSelf(UnivariateRealFunction function) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,926,Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,927,Entry e;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,928,while (it.hasNext() && (e = it.next()) != null) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,929,e.setValue(function.value(e.getValue()));
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,931,return this;
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,612,"ealVector combine(double a, double b, double[] y);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,945,"public RealVector combine(double a, double b, double[] y) {"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,946,"return copy().combineToSelf(a, b, y);"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,625,"ealVector combine(double a, double b, RealVector y);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,960,"public RealVector combine(double a, double b, RealVector y) {"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,961,"return copy().combineToSelf(a, b, y);"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,639,"ealVector combineToSelf(double a, double b, double[] y);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,976,"public RealVector combineToSelf(double a, double b, double[] y) {"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,977,"return combineToSelf(a, b, new ArrayRealVector(y, false));"
False,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,653,"ealVector combineToSelf(double a, double b, RealVector y);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,992,"public RealVector combineToSelf(double a, double b, RealVector y) {"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,993,checkVectorDimensions(y);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,994,for (int i = 0; i < getDimension(); i++) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,995,final double xi = getEntry(i);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,996,final double yi = y.getEntry(i);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,997,"setEntry(i, a * xi + b * yi);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,999,return this;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1002,/** An entry in the vector. */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1003,protected class Entry {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1004,/** Index of this entry. */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1005,private int index;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1007,/** Simple constructor. */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1008,public Entry() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1009,setIndex(0);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1013,* Get the value of the entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1015,* @return the value of the entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1017,public double getValue() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1018,return getEntry(getIndex());
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1022,* Set the value of the entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1024,* @param value New value for the entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1026,public void setValue(double value) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1027,"setEntry(getIndex(), value);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1031,* Get the index of the entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1033,* @return the index of the entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1035,public int getIndex() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1036,return index;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1040,* Set the index of the entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1042,* @param index New index for the entry.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1044,public void setIndex(int index) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1045,this.index = index;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1050,"* This class should rare be used, but is here to provide"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1051,"* a default implementation of sparseIterator(), which is implemented"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1052,"* by walking over the entries, skipping those whose values are the default one."
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1054,* Concrete subclasses which are SparseVector implementations should
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1055,"* make their own sparse iterator, not use this one."
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1057,"* This implementation might be useful for ArrayRealVector, when expensive"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1058,"* operations which preserve the default value are to be done on the entries,"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1059,* and the fraction of non-default values is small (i.e. someone took a
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1060,"* SparseVector, and passed it into the copy-constructor of ArrayRealVector)"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1062,protected class SparseEntryIterator implements Iterator<Entry> {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1063,/** Dimension of the vector. */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1064,private final int dim;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1065,/** Last entry returned by {@link #next()}. */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1066,private Entry current;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1067,/** Next entry for {@link #next()} to return. */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1068,private Entry next;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1070,/** Simple constructor. */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1071,protected SparseEntryIterator() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1072,dim = getDimension();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1073,current = new Entry();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1074,next = new Entry();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1075,if (next.getValue() == 0) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1076,advance(next);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1081,* Advance an entry up to the next nonzero one.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1083,* @param e entry to advance.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1085,protected void advance(Entry e) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1086,if (e == null) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1087,return;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1089,do {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1090,e.setIndex(e.getIndex() + 1);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1091,} while (e.getIndex() < dim && e.getValue() == 0);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1092,if (e.getIndex() >= dim) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1093,e.setIndex(-1);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1097,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1098,public boolean hasNext() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1099,return next.getIndex() >= 0;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1102,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1103,public Entry next() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1104,int index = next.getIndex();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1105,if (index < 0) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1106,throw new NoSuchElementException();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1108,current.setIndex(index);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1109,advance(next);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1110,return current;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1113,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1114,public void remove() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1115,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1120,* Returns an unmodifiable view of the specified vector.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1121,* The returned vector has read-only access. An attempt to modify it will
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1122,"* result in a {@link MathUnsupportedOperationException}. However, the"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1123,"* returned vector is <em>not</em> immutable, since any modification of"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1124,* {@code v} will also change the returned view.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1125,"* For example, in the following piece of code"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1126,* <pre>
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1127,*     RealVector v = new ArrayRealVector(2);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1128,*     RealVector w = RealVector.unmodifiableRealVector(v);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1129,"*     v.setEntry(0, 1.2);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1130,"*     v.setEntry(1, -3.4);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1131,* </pre>
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1132,* the changes will be seen in the {@code w} view of {@code v}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1134,* @param v Vector for which an unmodifiable view is to be returned.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1135,* @return an unmodifiable view of {@code v}.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1137,public static RealVector unmodifiableRealVector(final RealVector v) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1139,* This anonymous class is an implementation of {@link RealVector}
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1140,* with read-only access.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1141,"* It wraps any {@link RealVector}, and exposes all methods which"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1142,* do not modify it. Invoking methods which should normally result
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1143,* in the modification of the calling {@link RealVector} results in
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1144,* a {@link MathUnsupportedOperationException}. It should be noted
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1145,* that {@link UnmodifiableVector} is <em>not</em> immutable.
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1147,return new RealVector() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1148,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1149,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1150,public RealVector mapToSelf(UnivariateRealFunction function) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1151,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1154,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1155,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1156,public RealVector map(UnivariateRealFunction function) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1157,return v.map(function);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1160,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1161,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1162,public Iterator<Entry> iterator() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1163,final Iterator<Entry> i = v.iterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1164,return new Iterator<Entry>() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1165,/** The current entry. */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1166,private final UnmodifiableEntry e = new UnmodifiableEntry();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1168,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1169,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1170,public boolean hasNext() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1171,return i.hasNext();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1174,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1175,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1176,public Entry next() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1177,e.setIndex(i.next().getIndex());
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1178,return e;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1181,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1182,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1183,public void remove() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1184,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1189,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1190,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1191,public Iterator<Entry> sparseIterator() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1192,final Iterator<Entry> i = v.sparseIterator();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1194,return new Iterator<Entry>() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1195,/** The current entry. */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1196,private final UnmodifiableEntry e = new UnmodifiableEntry();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1198,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1199,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1200,public boolean hasNext() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1201,return i.hasNext();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1204,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1205,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1206,public Entry next() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1207,e.setIndex(i.next().getIndex());
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1208,return e;
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1211,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1212,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1213,public void remove() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1214,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1219,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1220,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1221,public RealVector copy() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1222,return v.copy();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1225,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1226,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1227,public RealVector add(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1228,return v.add(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1231,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1232,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1233,public RealVector add(double[] w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1234,return v.add(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1237,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1238,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1239,public RealVector subtract(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1240,return v.subtract(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1243,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1244,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1245,public RealVector subtract(double[] w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1246,return v.subtract(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1249,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1250,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1251,public RealVector mapAdd(double d) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1252,return v.mapAdd(d);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1255,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1256,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1257,public RealVector mapAddToSelf(double d) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1258,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1261,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1262,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1263,public RealVector mapSubtract(double d) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1264,return v.mapSubtract(d);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1267,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1268,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1269,public RealVector mapSubtractToSelf(double d) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1270,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1273,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1274,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1275,public RealVector mapMultiply(double d) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1276,return v.mapMultiply(d);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1279,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1280,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1281,public RealVector mapMultiplyToSelf(double d) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1282,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1285,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1286,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1287,public RealVector mapDivide(double d) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1288,return v.mapDivide(d);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1291,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1292,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1293,public RealVector mapDivideToSelf(double d) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1294,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1297,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1298,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1299,public RealVector ebeMultiply(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1300,return v.ebeMultiply(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1303,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1304,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1305,public RealVector ebeMultiply(double[] w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1306,return v.ebeMultiply(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1309,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1310,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1311,public RealVector ebeDivide(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1312,return v.ebeDivide(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1315,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1316,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1317,public RealVector ebeDivide(double[] w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1318,return v.ebeDivide(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1321,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1322,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1323,public double[] getData() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1324,// TODO It is not specified in the javadoc that getData should
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1325,// return a
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1326,// deep copy
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1327,return v.getData();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1330,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1331,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1332,public double dotProduct(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1333,return v.dotProduct(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1336,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1337,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1338,public double dotProduct(double[] w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1339,return v.dotProduct(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1342,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1343,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1344,public double cosine(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1345,return v.cosine(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1348,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1349,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1350,public double cosine(double[] w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1351,return v.cosine(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1354,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1355,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1356,public double getNorm() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1357,return v.getNorm();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1360,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1361,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1362,public double getL1Norm() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1363,return v.getL1Norm();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1366,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1367,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1368,public double getLInfNorm() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1369,return v.getLInfNorm();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1372,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1373,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1374,public double getDistance(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1375,return v.getDistance(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1378,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1379,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1380,public double getDistance(double[] w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1381,return v.getDistance(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1384,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1385,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1386,public double getL1Distance(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1387,return v.getL1Distance(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1390,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1391,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1392,public double getL1Distance(double[] w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1393,return v.getL1Distance(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1396,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1397,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1398,public double getLInfDistance(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1399,return v.getLInfDistance(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1402,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1403,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1404,public double getLInfDistance(double[] w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1405,return v.getLInfDistance(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1408,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1409,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1410,public RealVector unitVector() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1411,return v.unitVector();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1414,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1415,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1416,public void unitize() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1417,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1420,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1421,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1422,public RealVector projection(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1423,return v.projection(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1426,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1427,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1428,public RealVector projection(double[] w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1429,return v.projection(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1432,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1433,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1434,public RealMatrix outerProduct(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1435,return v.outerProduct(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1438,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1439,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1440,public RealMatrix outerProduct(double[] w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1441,return v.outerProduct(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1444,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1445,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1446,public double getEntry(int index) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1447,return v.getEntry(index);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1450,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1451,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1452,"public void setEntry(int index, double value) {"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1453,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1456,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1457,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1458,public int getDimension() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1459,return v.getDimension();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1462,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1463,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1464,public RealVector append(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1465,return v.append(w);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1468,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1469,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1470,public RealVector append(double d) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1471,return v.append(d);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1474,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1475,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1476,public RealVector append(double[] a) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1477,return v.append(a);
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1480,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1481,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1482,"public RealVector getSubVector(int index, int n) {"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1483,"return v.getSubVector(index, n);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1486,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1487,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1488,"public void setSubVector(int index, RealVector w) {"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1489,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1492,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1493,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1494,"public void setSubVector(int index, double[] w) {"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1495,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1498,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1499,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1500,public void set(double value) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1501,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1504,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1505,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1506,public double[] toArray() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1507,return v.toArray();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1510,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1511,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1512,public boolean isNaN() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1513,return v.isNaN();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1516,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1517,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1518,public boolean isInfinite() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1519,return v.isInfinite();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1522,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1523,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1524,"public RealVector combine(double a, double b, double[] y) {"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1525,"return v.combine(a, b, y);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1528,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1529,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1530,"public RealVector combine(double a, double b, RealVector y) {"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1531,"return v.combine(a, b, y);"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1534,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1535,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1536,"public RealVector combineToSelf(double a, double b, double[] y) {"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1537,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1540,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1541,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1542,"public RealVector combineToSelf(double a, double b, RealVector y) {"
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1543,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1546,/** An entry in the vector. */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1547,class UnmodifiableEntry extends Entry {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1548,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1549,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1550,public double getValue() {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1551,return v.getEntry(getIndex());
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1554,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1555,@Override
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1556,public void setValue(double value) {
True,src/main/java/org/apache/commons/math/linear/RealVector.java,src/main/java/org/apache/commons/math/linear/RealVector.java,1557,throw new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math/linear/SparseRealVector.java,src/main/java/org/apache/commons/math/linear/SparseRealVector.java,20, Marker interface for RealVectors that require sparse backing storage
True,src/main/java/org/apache/commons/math/linear/SparseRealVector.java,src/main/java/org/apache/commons/math/linear/SparseRealVector.java,20,* Marker class for RealVectors that require sparse backing storage
False,src/main/java/org/apache/commons/math/linear/SparseRealVector.java,src/main/java/org/apache/commons/math/linear/SparseRealVector.java,25,ublic interface SparseRealVector extends RealVector {
True,src/main/java/org/apache/commons/math/linear/SparseRealVector.java,src/main/java/org/apache/commons/math/linear/SparseRealVector.java,25,public abstract class SparseRealVector extends RealVector {}
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,81,"ublic static class RealVectorTestImpl implements RealVector, Serializable {"
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,81,public static class RealVectorTestImpl extends RealVector
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,82,implements Serializable {
True,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/RealVectorTest.java,29,* Tests for {@link RealVector}.
False,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/RealVectorTest.java,31,ublic class AbstractRealVectorTest {
True,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/RealVectorTest.java,31,public class RealVectorTest {
False,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/RealVectorTest.java,35,rivate static class TestVectorImpl extends AbstractRealVector {
True,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/RealVectorTest.java,35,private static class TestVectorImpl extends RealVector {
False,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/RealVectorTest.java,46,ublic AbstractRealVector copy() {
True,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/RealVectorTest.java,46,public RealVector copy() {
True,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/RealVectorTest.java,158,"public void setSubVector(int index, double[] v) {"
True,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/RealVectorTest.java,159,throw unsupported();
True,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/RealVectorTest.java,161,"public void setSubVector(int index, RealVector v) {"
True,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/RealVectorTest.java,162,throw unsupported();
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,79,ublic static class SparseRealVectorTestImpl extends AbstractRealVector implements Serializable {
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,79,public static class SparseRealVectorTestImpl extends RealVector implements Serializable {
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,109,ublic AbstractRealVector copy() {
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,109,public RealVector copy() {
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,21,mport java.util.ArrayList;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,21,import java.util.Set;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,22,import java.util.HashSet;
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,34, This is an abstract test of the {@link AbstractRealVector.UnmodifiableVector}
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,35,* This is an abstract test of the {@link
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,36,* RealVector#unmodifiableRealVector(RealVector) unmodifiable vector}
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,36," {@link RealVector}; therefore, a new implementation of this abstract test"
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,37, should be considered for each implementation of {@link RealVector}.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,38,"* {@link RealVector}; therefore, a new implementation of this abstract"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,39,* test should be considered for each implementation of
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,40,* {@link RealVector}.
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,51,rotected static final ArrayList<String> EXCLUDE;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,54,protected static final Set<String> EXCLUDE = new HashSet<String>();
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,56,XCLUDE = new ArrayList<String>();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,66,"// Excluded because they are inherited from ""Object""."
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,67,for (Method m : Object.class.getMethods()) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,68,EXCLUDE.add(m.getName());
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,237, be wrapped in a {@link AbstractRealVector.UnmodifiableVector}.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,244,* be wrapped in an unmodifiable vector.
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,246, @param c
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,247,            the class of the object to be created.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,253,* @param c Class of the object to be created.
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,249, @throws IllegalArgumentException
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,250,             if the specified class is not recognized by this method.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,255,* @throws IllegalArgumentException if the specified class is not
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,256,* recognized by this method.
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,273, This is the general test of most methods in
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,274, {@link AbstractRealVector.UnmodifiableVector}. It works as follows.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,279,* This is the general test of most methods in the
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,280,* {@link RealVector#unmodifiableRealVector(RealVector) unmodifiable vector}.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,281,* It works as follows.
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,291,"rivate void callMethod(final Method m, final RealVector u,"
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,292,"inal Object... args) throws IllegalAccessException,"
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,293,"llegalArgumentException, InvocationTargetException {"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,298,"private void callMethod(final Method m,"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,299,"final RealVector u,"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,300,final Object... args)
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,301,"throws IllegalAccessException,"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,302,"IllegalArgumentException,"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,303,InvocationTargetException {
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,295,inal RealVector v = AbstractRealVector
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,296,unmodifiableRealVector(u.copy());
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,305,final RealVector v = RealVector.unmodifiableRealVector(u.copy());
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,300,ssert.assertTrue(m.toGenericString()
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,301," "", unmodifiable vector has changed"", equals(uu, v));"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,309,"Assert.assertTrue(m.toGenericString() + "", unmodifiable vector has changed"","
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,310,"equals(uu, v));"
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,303,"quals(exp, act));"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,312,"equals(exp, act));"
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,325,"ublic void testAllButExcluded() throws IllegalAccessException,"
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,326,"llegalArgumentException, InvocationTargetException {"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,334,public void testAllButExcluded()
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,335,"throws IllegalAccessException,"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,336,"IllegalArgumentException,"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,337,InvocationTargetException {
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,345,ealVector v = AbstractRealVector.unmodifiableRealVector(u);
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,356,RealVector v = RealVector.unmodifiableRealVector(u);
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,354,ealVector v = AbstractRealVector.unmodifiableRealVector(u);
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,365,RealVector v = RealVector.unmodifiableRealVector(u);
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,363,ealVector v = AbstractRealVector.unmodifiableRealVector(u);
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,374,RealVector v = RealVector.unmodifiableRealVector(u);
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,376,ealVector v = AbstractRealVector.unmodifiableRealVector(u);
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,387,RealVector v = RealVector.unmodifiableRealVector(u);
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,384,ealVector v = AbstractRealVector.unmodifiableRealVector(u.copy());
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,395,RealVector v = RealVector.unmodifiableRealVector(u.copy());
False,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,410,ealVector v = AbstractRealVector.unmodifiableRealVector(u.copy());
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,421,RealVector v = RealVector.unmodifiableRealVector(u.copy());

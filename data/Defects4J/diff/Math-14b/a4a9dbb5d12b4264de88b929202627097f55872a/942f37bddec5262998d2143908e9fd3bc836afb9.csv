is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,479,* Computes a number {@code delta} close to {@code originalDelta} with
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,480,* the property that <pre><code>
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,481,*   x + delta - x
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,482,* </code></pre>
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,483,* is exactly machine-representable.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,484,"* This is useful when computing numerical derivatives, in order to reduce"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,485,* roundoff errors.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,487,* @param x Value.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,488,* @param originalDelta Offset value.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,489,* @return a number {@code delta} so that {@code x + delta} and {@code x}
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,490,* differ by a representable floating number.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,492,"public static double representableDelta(double x,"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,493,double originalDelta) {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,494,return x + originalDelta - x;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,469,@Test
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,470,public void testRepresentableDelta() {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,471,int totalCount = 0;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,472,int nonRepresentableCount = 0;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,473,final double x = 100;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,474,final int numTrials = 10000;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,475,for (int i = 0; i < numTrials; i++) {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,476,final double originalDelta = Math.random();
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,477,"final double delta = Precision.representableDelta(x, originalDelta);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,478,if (delta != originalDelta) {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,479,++nonRepresentableCount;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,483,Assert.assertTrue(nonRepresentableCount / (double) numTrials > 0.9);

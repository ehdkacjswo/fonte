is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,34,mport org.apache.commons.math.distribution.GammaDistributionImpl;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,679, This implementation uses {@link #nextInversionDeviate(ContinuousDistribution) inversion}
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,680, to generate random values.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,679,* This implementation uses the following algorithms:
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,681,* For 0 < shape < 1:
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,682,"* [1]: Ahrens, J. H. and Dieter, U. (1974). Computer methods for"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,683,"* sampling from gamma, beta, Poisson and binomial distributions."
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,684,"* Computing, 12, 223-246."
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,686,* For shape >= 1:
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,687,* [2]: Marsaglia and Tsang (2001). A Simple Method for Generating
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,688,"* Gamma Variables. ACM Transactions on Mathematical Software, 26,"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,689,"eturn nextInversionDeviate(new GammaDistributionImpl(shape, scale));"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,697,if (shape < 1) {
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,699,"final double gamma = this.nextOldGamma(1 + shape, scale);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,700,"final double u = this.nextUniform(0, 1);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,701,"return gamma * FastMath.pow(u, 1/shape);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,704,"// [1]: p. 228, Algorithm GS"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,706,while (true) {
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,707,// Step 1:
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,708,"final double u = this.nextUniform(0, 1);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,709,final double bGS = 1 + shape/FastMath.E;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,710,final double p = bGS*u;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,712,if (p <= 1) {
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,713,// Step 2:
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,715,"final double x = FastMath.pow(p, 1/shape);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,716,"final double u2 = this.nextUniform(0.0, 1);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,718,if (u2 > FastMath.exp(-x)) {
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,719,// Reject
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,720,continue;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,721,} else {
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,722,return scale*x;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,724,} else {
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,725,// Step 3:
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,727,final double x = -1 * FastMath.log((bGS-p)/shape);
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,728,"final double u2 = this.nextUniform(0, 1);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,730,"if (u2 > FastMath.pow(x, shape - 1)) {"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,731,// Reject
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,732,continue;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,733,} else {
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,734,return scale*x;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,740,// Now shape >= 1
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,742,final RandomGenerator generator = this.getRan();
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,743,final double d = shape - 0.333333333333333333;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,744,final double c = 1.0 / (3*FastMath.sqrt(d));
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,746,while (true) {
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,747,final double x = generator.nextGaussian();
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,748,final double v = (1+c*x)*(1+c*x)*(1+c*x);
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,750,if (v <= 0) {
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,751,continue;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,754,final double xx = x*x;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,755,"final double u = this.nextUniform(0, 1);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,757,// Squeeze
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,758,if (u < 1 - 0.0331*xx*xx) {
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,759,return scale*d*v;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,762,if (FastMath.log(u) < 0.5*xx + d*(1 - v + FastMath.log(v))) {
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,763,return scale*d*v;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,913,"ouble[] quartiles = TestUtils.getDistributionQuartiles(new GammaDistributionImpl(4, 2));"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,914,ong[] counts = new long[4];
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,913,double[] quartiles;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,914,long[] counts;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,916,"// Tests shape > 1, one case in the rejection sampling"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,917,"quartiles = TestUtils.getDistributionQuartiles(new GammaDistributionImpl(4, 2));"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,918,counts = new long[4];
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,926,"// Tests shape <= 1, another case in the rejection sampling"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,927,"quartiles = TestUtils.getDistributionQuartiles(new GammaDistributionImpl(0.3, 3));"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,928,counts = new long[4];
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,929,randomData.reSeed(1000);
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,930,for (int i = 0; i < 1000; i++) {
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,931,"double value = randomData.nextGamma(0.3, 3);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,932,"TestUtils.updateCounts(value, counts, quartiles);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,934,"TestUtils.assertChiSquareAccept(expected, counts, 0.001);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,21,import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;
False,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,31,ublic class Gaussian implements UnivariateRealFunction {
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,32,public class Gaussian implements DifferentiableUnivariateRealFunction {
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,85,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,86,public UnivariateRealFunction derivative() {
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,87,return new UnivariateRealFunction() {
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,88,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,89,public double value(double x) {
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,90,final double diff = x - mean;
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,91,final double g = Gaussian.this.value(x);
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,93,if (g == 0) {
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,94,// Avoid returning NaN in case of overflow.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,95,return 0;
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,96,} else {
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,97,return -2 * diff * i2s2 * g;
False,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,42,"ssert.assertEquals(0, f.value(Double.NEGATIVE_INFINITY), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,45,@Test
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,46,public void testLargeArguments() {
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,47,final UnivariateRealFunction f = new Gaussian();
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,49,"Assert.assertEquals(0, f.value(Double.NEGATIVE_INFINITY), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,50,"Assert.assertEquals(0, f.value(-Double.MAX_VALUE), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,51,"Assert.assertEquals(0, f.value(-1e2), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,52,"Assert.assertEquals(0, f.value(1e2), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,53,"Assert.assertEquals(0, f.value(Double.MAX_VALUE), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,57,@Test
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,58,public void testDerivative() {
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,59,final Gaussian f = new Gaussian();
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,60,final UnivariateRealFunction dfdx = f.derivative();
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,62,"Assert.assertEquals(0, dfdx.value(0), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,65,@Test
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,66,public void testDerivativeLargeArguments() {
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,67,"final Gaussian f = new Gaussian(0, 1e-50);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,68,final UnivariateRealFunction dfdx = f.derivative();
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,70,"Assert.assertEquals(0, dfdx.value(Double.NEGATIVE_INFINITY), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,71,"Assert.assertEquals(0, dfdx.value(-Double.MAX_VALUE), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,72,"Assert.assertEquals(0, f.value(-1e50), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,73,"Assert.assertEquals(0, f.value(-1e2), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,74,"Assert.assertEquals(0, f.value(1e2), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,75,"Assert.assertEquals(0, f.value(1e50), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,76,"Assert.assertEquals(0, dfdx.value(Double.MAX_VALUE), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,77,"Assert.assertEquals(0, dfdx.value(Double.POSITIVE_INFINITY), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,80,@Test
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,81,public void testDerivativeNaN() {
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,82,"final Gaussian f = new Gaussian(0, 1e-50);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,83,final UnivariateRealFunction dfdx = f.derivative();
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,85,Assert.assertTrue(Double.isNaN(dfdx.value(Double.NaN)));

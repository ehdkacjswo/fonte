is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,18,package org.apache.commons.math.optimization.fitting;
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,20,import java.util.ArrayList;
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,21,import java.util.List;
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,23,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,24,import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,25,import org.apache.commons.math.analysis.MultivariateMatrixFunction;
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,26,import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,27,import org.apache.commons.math.optimization.OptimizationException;
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,28,import org.apache.commons.math.optimization.VectorialPointValuePair;
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,30,/** Fitter for parametric univariate real functions y = f(x).
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,31,* <p>When a univariate real function y = f(x) does depend on some
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,32,"* unknown parameters p<sub>0</sub>, p<sub>1</sub> ... p<sub>n-1</sub>,"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,33,* this class can be used to find these parameters. It does this
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,34,* by <em>fitting</em> the curve so it remains very close to a set of
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,35,"* observed points (x<sub>0</sub>, y<sub>0</sub>), (x<sub>1</sub>,"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,36,"* y<sub>1</sub>) ... (x<sub>k-1</sub>, y<sub>k-1</sub>). This fitting"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,37,* is done by finding the parameters values that minimizes the objective
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,38,* function &sum;(y<sub>i</sub>-f(x<sub>i</sub>))<sup>2</sup>. This is
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,39,* really a least squares problem.</p>
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,40,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,41,* @since 2.0
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,43,public class CurveFitter {
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,45,/** Optimizer to use for the fitting. */
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,46,private final DifferentiableMultivariateVectorialOptimizer optimizer;
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,48,/** Observed points. */
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,49,private final List<WeightedObservedPoint> observations;
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,51,/** Simple constructor.
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,52,* @param optimizer optimizer to use for the fitting
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,54,public CurveFitter(final DifferentiableMultivariateVectorialOptimizer optimizer) {
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,55,this.optimizer = optimizer;
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,56,observations = new ArrayList<WeightedObservedPoint>();
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,59,"/** Add an observed (x,y) point to the sample with unit weight."
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,60,* <p>Calling this method is equivalent to call
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,61,"* <code>addObservedPoint(1.0, x, y)</code>.</p>"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,62,* @param x abscissa of the point
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,63,"* @param y observed value of the point at x, after fitting we should"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,64,* have f(x) as close as possible to this value
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,65,"* @see #addObservedPoint(double, double, double)"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,66,* @see #addObservedPoint(WeightedObservedPoint)
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,67,* @see #getObservations()
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,69,"public void addObservedPoint(double x, double y) {"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,70,"addObservedPoint(1.0, x, y);"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,73,"/** Add an observed weighted (x,y) point to the sample."
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,74,* @param weight weight of the observed point in the fit
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,75,* @param x abscissa of the point
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,76,"* @param y observed value of the point at x, after fitting we should"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,77,* have f(x) as close as possible to this value
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,78,"* @see #addObservedPoint(double, double)"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,79,* @see #addObservedPoint(WeightedObservedPoint)
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,80,* @see #getObservations()
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,82,"public void addObservedPoint(double weight, double x, double y) {"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,83,"observations.add(new WeightedObservedPoint(weight, x, y));"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,86,"/** Add an observed weighted (x,y) point to the sample."
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,87,* @param observed observed point to add
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,88,"* @see #addObservedPoint(double, double)"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,89,"* @see #addObservedPoint(double, double, double)"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,90,* @see #getObservations()
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,92,public void addObservedPoint(WeightedObservedPoint observed) {
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,93,observations.add(observed);
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,96,/** Get the observed points.
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,97,* @return observed points
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,98,"* @see #addObservedPoint(double, double)"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,99,"* @see #addObservedPoint(double, double, double)"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,100,* @see #addObservedPoint(WeightedObservedPoint)
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,102,public WeightedObservedPoint[] getObservations() {
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,103,return observations.toArray(new WeightedObservedPoint[observations.size()]);
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,106,/** Fit a curve.
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,107,* <p>This method compute the coefficients of the curve that best
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,108,* fit the sample of weighted pairs previously given through calls
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,109,* to the {@link #addWeightedPair addWeightedPair} method.</p>
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,110,* @param f parametric function to fit
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,111,* @param initialGuess first guess of the function parameters
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,112,* @return fitted parameters
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,113,* @exception FunctionEvaluationException if the objective function throws one during
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,114,* the search
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,115,* @exception OptimizationException if the algorithm failed to converge
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,116,* @exception IllegalArgumentException if the start point dimension is wrong
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,118,"public double[] fit(final ParametricRealFunction f,"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,119,final double[] initialGuess)
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,120,"throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,122,// prepare least squares problem
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,123,double[] target  = new double[observations.size()];
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,124,double[] weights = new double[observations.size()];
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,125,int i = 0;
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,126,for (WeightedObservedPoint point : observations) {
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,127,target[i]  = point.getY();
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,128,weights[i] = point.getWeight();
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,129,++i;
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,132,// perform the fit
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,133,VectorialPointValuePair optimum =
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,134,"optimizer.optimize(new TheoreticalValuesFunction(f), target, weights, initialGuess);"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,136,// extract the coefficients
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,137,return optimum.getPointRef();
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,141,/** Vectorial function computing function theoretical values. */
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,142,private class TheoreticalValuesFunction
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,143,implements DifferentiableMultivariateVectorialFunction {
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,145,/** Function to fit. */
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,146,private final ParametricRealFunction f;
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,148,/** Simple constructor.
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,149,* @param f function to fit.
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,151,public TheoreticalValuesFunction(final ParametricRealFunction f) {
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,152,this.f = f;
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,155,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,156,public MultivariateMatrixFunction jacobian() {
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,157,return new MultivariateMatrixFunction() {
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,158,public double[][] value(double[] point)
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,159,"throws FunctionEvaluationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,161,final double[][] jacobian = new double[observations.size()][];
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,163,int i = 0;
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,164,for (WeightedObservedPoint observed : observations) {
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,165,"jacobian[i++] = f.gradient(observed.getX(), point);"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,168,return jacobian;
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,174,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,175,public double[] value(double[] point)
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,176,"throws FunctionEvaluationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,178,// compute the residuals
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,179,final double[] values = new double[observations.size()];
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,180,int i = 0;
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,181,for (WeightedObservedPoint observed : observations) {
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,182,"values[i++] = f.value(observed.getX(), point);"
True,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,185,return values;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,18,package org.apache.commons.math.optimization.fitting;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,20,import org.apache.commons.math.optimization.OptimizationException;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,22,/** This class guesses harmonic coefficients from a sample.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,24,* <p>The algorithm used to guess the coefficients is as follows:</p>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,26,"* <p>We know f (t) at some sampling points t<sub>i</sub> and want to find a,"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,27,* &omega; and &phi; such that f (t) = a cos (&omega; t + &phi;).
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,28,* </p>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,30,"* <p>From the analytical expression, we can compute two primitives :"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,31,* <pre>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,32,*     If2  (t) = &int; f<sup>2</sup>  = a<sup>2</sup> &times; [t + S (t)] / 2
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,33,*     If'2 (t) = &int; f'<sup>2</sup> = a<sup>2</sup> &omega;<sup>2</sup> &times; [t - S (t)] / 2
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,34,*     where S (t) = sin (2 (&omega; t + &phi;)) / (2 &omega;)
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,35,* </pre>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,36,* </p>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,38,* <p>We can remove S between these expressions :
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,39,* <pre>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,40,*     If'2 (t) = a<sup>2</sup> &omega;<sup>2</sup> t - &omega;<sup>2</sup> If2 (t)
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,41,* </pre>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,42,* </p>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,44,* <p>The preceding expression shows that If'2 (t) is a linear
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,45,* combination of both t and If2 (t): If'2 (t) = A &times; t + B &times; If2 (t)
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,46,* </p>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,48,"* <p>From the primitive, we can deduce the same form for definite"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,49,* integrals between t<sub>1</sub> and t<sub>i</sub> for each t<sub>i</sub> :
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,50,* <pre>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,51,*   If2 (t<sub>i</sub>) - If2 (t<sub>1</sub>) = A &times; (t<sub>i</sub> - t<sub>1</sub>) + B &times; (If2 (t<sub>i</sub>) - If2 (t<sub>1</sub>))
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,52,* </pre>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,53,* </p>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,55,* <p>We can find the coefficients A and B that best fit the sample
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,56,* to this linear expression by computing the definite integrals for
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,57,* each sample points.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,58,* </p>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,60,"* <p>For a bilinear expression z (x<sub>i</sub>, y<sub>i</sub>) = A &times; x<sub>i</sub> + B &times; y<sub>i</sub>, the"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,61,* coefficients A and B that minimize a least square criterion
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,62,"* &sum; (z<sub>i</sub> - z (x<sub>i</sub>, y<sub>i</sub>))<sup>2</sup> are given by these expressions:</p>"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,63,* <pre>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,65,*         &sum;y<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,66,*     A = ------------------------
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,67,*         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,69,*         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,70,*     B = ------------------------
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,71,*         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,72,* </pre>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,73,* </p>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,76,"* <p>In fact, we can assume both a and &omega; are positive and"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,77,"* compute them directly, knowing that A = a<sup>2</sup> &omega;<sup>2</sup> and that"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,78,* B = - &omega;<sup>2</sup>. The complete algorithm is therefore:</p>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,79,* <pre>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,81,"* for each t<sub>i</sub> from t<sub>1</sub> to t<sub>n-1</sub>, compute:"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,82,*   f  (t<sub>i</sub>)
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,83,*   f' (t<sub>i</sub>) = (f (t<sub>i+1</sub>) - f(t<sub>i-1</sub>)) / (t<sub>i+1</sub> - t<sub>i-1</sub>)
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,84,*   x<sub>i</sub> = t<sub>i</sub> - t<sub>1</sub>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,85,*   y<sub>i</sub> = &int; f<sup>2</sup> from t<sub>1</sub> to t<sub>i</sub>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,86,*   z<sub>i</sub> = &int; f'<sup>2</sup> from t<sub>1</sub> to t<sub>i</sub>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,87,"*   update the sums &sum;x<sub>i</sub>x<sub>i</sub>, &sum;y<sub>i</sub>y<sub>i</sub>, &sum;x<sub>i</sub>y<sub>i</sub>, &sum;x<sub>i</sub>z<sub>i</sub> and &sum;y<sub>i</sub>z<sub>i</sub>"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,88,* end for
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,91,*         \  | &sum;y<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,92,* a     =  \ | ------------------------
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,93,*           \| &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,97,*         \  | &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,98,* &omega;     =  \ | ------------------------
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,99,*           \| &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,101,* </pre>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,102,* </p>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,104,"* <p>Once we know &omega;, we can compute:"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,105,* <pre>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,106,*    fc = &omega; f (t) cos (&omega; t) - f' (t) sin (&omega; t)
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,107,*    fs = &omega; f (t) sin (&omega; t) + f' (t) cos (&omega; t)
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,108,* </pre>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,109,* </p>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,111,* <p>It appears that <code>fc = a &omega; cos (&phi;)</code> and
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,112,"* <code>fs = -a &omega; sin (&phi;)</code>, so we can use these"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,113,* expressions to compute &phi;. The best estimate over the sample is
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,114,* given by averaging these expressions.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,115,* </p>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,117,* <p>Since integrals and means are involved in the preceding
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,118,"* estimations, these operations run in O(n) time, where n is the"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,119,* number of measurements.</p>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,121,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,122,* @since 2.0
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,125,public class HarmonicCoefficientsGuesser {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,127,/** Sampled observations. */
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,128,private final WeightedObservedPoint[] observations;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,130,/** Guessed amplitude. */
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,131,private double a;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,133,/** Guessed pulsation &omega;. */
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,134,private double omega;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,136,/** Guessed phase &phi;. */
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,137,private double phi;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,139,/** Simple constructor.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,140,* @param observations sampled observations
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,142,public HarmonicCoefficientsGuesser(WeightedObservedPoint[] observations) {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,143,this.observations = observations.clone();
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,144,a                 = Double.NaN;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,145,omega             = Double.NaN;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,148,/** Estimate a first guess of the coefficients.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,149,* @exception OptimizationException if the sample is too short or if
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,150,* the first guess cannot be computed (when the elements under the
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,151,* square roots are negative).
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,153,public void guess() throws OptimizationException {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,154,sortObservations();
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,155,guessAOmega();
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,156,guessPhi();
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,159,/** Sort the observations with respect to the abscissa.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,161,private void sortObservations() {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,163,"// Since the samples are almost always already sorted, this"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,164,// method is implemented as an insertion sort that reorders the
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,165,// elements in place. Insertion sort is very efficient in this case.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,166,WeightedObservedPoint curr = observations[0];
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,167,for (int j = 1; j < observations.length; ++j) {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,168,WeightedObservedPoint prec = curr;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,169,curr = observations[j];
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,170,if (curr.getX() < prec.getX()) {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,171,// the current element should be inserted closer to the beginning
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,172,int i = j - 1;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,173,WeightedObservedPoint mI = observations[i];
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,174,while ((i >= 0) && (curr.getX() < mI.getX())) {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,175,observations[i + 1] = mI;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,176,if (i-- != 0) {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,177,mI = observations[i];
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,178,} else {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,179,mI = null;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,182,observations[i + 1] = curr;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,183,curr = observations[j];
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,189,/** Estimate a first guess of the a and &omega; coefficients.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,190,* @exception OptimizationException if the sample is too short or if
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,191,* the first guess cannot be computed (when the elements under the
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,192,* square roots are negative).
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,194,private void guessAOmega() throws OptimizationException {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,196,// initialize the sums for the linear model between the two integrals
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,197,double sx2 = 0.0;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,198,double sy2 = 0.0;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,199,double sxy = 0.0;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,200,double sxz = 0.0;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,201,double syz = 0.0;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,203,double currentX        = observations[0].getX();
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,204,double currentY        = observations[0].getY();
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,205,double f2Integral      = 0;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,206,double fPrime2Integral = 0;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,207,final double startX = currentX;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,208,for (int i = 1; i < observations.length; ++i) {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,210,// one step forward
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,211,final double previousX = currentX;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,212,final double previousY = currentY;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,213,currentX = observations[i].getX();
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,214,currentY = observations[i].getY();
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,216,// update the integrals of f<sup>2</sup> and f'<sup>2</sup>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,217,// considering a linear model for f (and therefore constant f')
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,218,final double dx = currentX - previousX;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,219,final double dy = currentY - previousY;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,220,final double f2StepIntegral =
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,221,dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,222,final double fPrime2StepIntegral = dy * dy / dx;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,224,final double x   = currentX - startX;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,225,f2Integral      += f2StepIntegral;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,226,fPrime2Integral += fPrime2StepIntegral;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,228,sx2 += x * x;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,229,sy2 += f2Integral * f2Integral;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,230,sxy += x * f2Integral;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,231,sxz += x * fPrime2Integral;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,232,syz += f2Integral * fPrime2Integral;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,236,// compute the amplitude and pulsation coefficients
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,237,double c1 = sy2 * sxz - sxy * syz;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,238,double c2 = sxy * sxz - sx2 * syz;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,239,double c3 = sx2 * sy2 - sxy * sxy;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,240,if ((c1 / c2 < 0.0) || (c2 / c3 < 0.0)) {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,241,"throw new OptimizationException(""unable to first guess the harmonic coefficients"");"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,243,a     = Math.sqrt(c1 / c2);
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,244,omega = Math.sqrt(c2 / c3);
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,248,/** Estimate a first guess of the &phi; coefficient.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,250,private void guessPhi() {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,252,// initialize the means
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,253,double fcMean = 0.0;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,254,double fsMean = 0.0;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,256,double currentX = observations[0].getX();
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,257,double currentY = observations[0].getY();
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,258,for (int i = 1; i < observations.length; ++i) {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,260,// one step forward
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,261,final double previousX = currentX;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,262,final double previousY = currentY;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,263,currentX = observations[i].getX();
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,264,currentY = observations[i].getY();
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,265,final double currentYPrime = (currentY - previousY) / (currentX - previousX);
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,267,double   omegaX = omega * currentX;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,268,double   cosine = Math.cos(omegaX);
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,269,double   sine   = Math.sin(omegaX);
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,270,fcMean += omega * currentY * cosine - currentYPrime *   sine;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,271,fsMean += omega * currentY *   sine + currentYPrime * cosine;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,275,"phi = Math.atan2(-fsMean, fcMean);"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,279,/** Get the guessed amplitude a.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,280,* @return guessed amplitude a;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,282,public double getGuessedAmplitude() {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,283,return a;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,286,/** Get the guessed pulsation &omega;.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,287,* @return guessed pulsation &omega;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,289,public double getGuessedPulsation() {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,290,return omega;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,293,/** Get the guessed phase &phi;.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,294,* @return guessed phase &phi;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,296,public double getGuessedPhase() {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,297,return phi;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,18,package org.apache.commons.math.optimization.fitting;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,21,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,22,import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,23,import org.apache.commons.math.optimization.OptimizationException;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,25,/** This class implements a curve fitting specialized for sinusoids.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,26,* <p>Harmonic fitting is a very simple case of curve fitting. The
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,27,"* estimated coefficients are the amplitude a, the pulsation &omega; and"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,28,* the phase &phi;: <code>f (t) = a cos (&omega; t + &phi;)</code>. They are
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,29,* searched by a least square estimator initialized with a rough guess
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,30,* based on integrals.</p>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,31,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,32,* @since 2.0
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,34,public class HarmonicFitter {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,36,/** Fitter for the coefficients. */
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,37,private final CurveFitter fitter;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,39,"/** Values for amplitude, pulsation &omega; and phase &phi;. */"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,40,private double[] parameters;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,42,/** Simple constructor.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,43,* @param optimizer optimizer to use for the fitting
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,45,public HarmonicFitter(final DifferentiableMultivariateVectorialOptimizer optimizer) {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,46,this.fitter = new CurveFitter(optimizer);
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,47,parameters  = null;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,50,/** Simple constructor.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,51,* <p>This constructor can be used when a first guess of the
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,52,* coefficients is already known.</p>
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,53,* @param optimizer optimizer to use for the fitting
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,54,"* @param initialGuess guessed values for amplitude (index 0),"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,55,* pulsation &omega; (index 1) and phase &phi; (index 2)
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,57,"public HarmonicFitter(final DifferentiableMultivariateVectorialOptimizer optimizer,"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,58,final double[] initialGuess) {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,59,this.fitter     = new CurveFitter(optimizer);
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,60,this.parameters = initialGuess.clone();
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,63,"/** Add an observed weighted (x,y) point to the sample."
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,64,* @param weight weight of the observed point in the fit
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,65,* @param x abscissa of the point
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,66,"* @param y observed value of the point at x, after fitting we should"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,67,* have P(x) as close as possible to this value
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,69,"public void addObservedPoint(double weight, double x, double y) {"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,70,"fitter.addObservedPoint(weight, x, y);"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,73,/** Fit an harmonic function to the observed points.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,74,* @return harmonic function best fitting the observed points
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,75,* @throws OptimizationException if the sample is too short or if
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,76,* the first guess cannot be computed
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,78,public HarmonicFunction fit() throws OptimizationException {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,79,try {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,81,// shall we compute the first guess of the parameters ourselves ?
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,82,if (parameters == null) {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,83,final WeightedObservedPoint[] observations = fitter.getObservations();
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,84,if (observations.length < 4) {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,85,"throw new OptimizationException(""sample contains {0} observed points, at least {1} are required"","
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,86,"observations.length, 4);"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,89,HarmonicCoefficientsGuesser guesser = new HarmonicCoefficientsGuesser(observations);
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,90,guesser.guess();
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,91,parameters = new double[] {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,92,"guesser.getGuessedAmplitude(),"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,93,"guesser.getGuessedPulsation(),"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,94,guesser.getGuessedPhase()
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,99,"double[] fitted = fitter.fit(new ParametricHarmonicFunction(), parameters);"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,100,"return new HarmonicFunction(fitted[0], fitted[1], fitted[2]);"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,102,} catch (FunctionEvaluationException fee) {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,103,// this should never happen
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,104,throw MathRuntimeException.createInternalError(fee);
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,108,/** Parametric harmonic function. */
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,109,private static class ParametricHarmonicFunction implements ParametricRealFunction {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,111,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,112,"public double value(double x, double[] parameters) {"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,113,final double a     = parameters[0];
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,114,final double omega = parameters[1];
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,115,final double phi   = parameters[2];
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,116,return a * Math.cos(omega * x + phi);
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,119,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,120,"public double[] gradient(double x, double[] parameters) {"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,121,final double a     = parameters[0];
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,122,final double omega = parameters[1];
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,123,final double phi   = parameters[2];
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,124,final double alpha = omega * x + phi;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,125,final double cosAlpha = Math.cos(alpha);
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,126,final double sinAlpha = Math.sin(alpha);
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,127,"return new double[] { cosAlpha, -a * x * sinAlpha, -a * sinAlpha };"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,18,package org.apache.commons.math.optimization.fitting;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,20,import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,22,/** Harmonic function of the form <code>f (t) = a cos (&omega; t + &phi;)</code>.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,23,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,24,* @since 2.0
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,26,public class HarmonicFunction implements DifferentiableUnivariateRealFunction {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,28,/** Amplitude a. */
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,29,private final double a;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,31,/** Pulsation &omega;. */
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,32,private final double omega;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,34,/** Phase &phi;. */
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,35,private final double phi;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,37,/** Simple constructor.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,38,* @param a amplitude
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,39,* @param omega pulsation
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,40,* @param phi phase
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,42,"public HarmonicFunction(double a, double omega, double phi) {"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,43,this.a     = a;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,44,this.omega = omega;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,45,this.phi   = phi;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,48,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,49,public double value(double x) {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,50,return a * Math.cos(omega * x + phi);
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,53,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,54,public HarmonicFunction derivative() {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,55,"return new HarmonicFunction(a * omega, omega, phi + Math.PI / 2);"
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,58,/** Get the amplitude a.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,59,* @return amplitude a;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,61,public double getAmplitude() {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,62,return a;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,65,/** Get the pulsation &omega;.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,66,* @return pulsation &omega;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,68,public double getPulsation() {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,69,return omega;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,72,/** Get the phase &phi;.
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,73,* @return phase &phi;
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,75,public double getPhase() {
True,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,76,return phi;
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,18,package org.apache.commons.math.optimization.fitting;
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,23,* An interface representing a real function that depends on one independent
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,24,* variable plus some extra parameters.
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,26,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,28,public interface ParametricRealFunction {
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,31,* Compute the value of the function.
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,32,* @param x the point for which the function value should be computed
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,33,* @param parameters function parameters
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,34,* @return the value
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,35,* @throws FunctionEvaluationException if the function evaluation fails
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,37,"public double value(double x, double[] parameters)"
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,38,throws FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,41,* Compute the gradient of the function with respect to its parameters.
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,42,* @param x the point for which the function value should be computed
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,43,* @param parameters function parameters
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,44,* @return the value
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,45,* @throws FunctionEvaluationException if the function evaluation fails
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,47,"public double[] gradient(double x, double[] parameters)"
True,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,src/java/org/apache/commons/math/optimization/fitting/ParametricRealFunction.java,48,throws FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,18,package org.apache.commons.math.optimization.fitting;
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,21,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,22,import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,23,import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,24,import org.apache.commons.math.optimization.OptimizationException;
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,26,/** This class implements a curve fitting specialized for polynomials.
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,27,* <p>Polynomial fitting is a very simple case of curve fitting. The
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,28,* estimated coefficients are the polynomial coefficients. They are
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,29,* searched by a least square estimator.</p>
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,30,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,31,* @since 2.0
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,34,public class PolynomialFitter {
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,36,/** Fitter for the coefficients. */
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,37,private final CurveFitter fitter;
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,39,/** Polynomial degree. */
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,40,private final int degree;
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,42,/** Simple constructor.
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,43,"* <p>The polynomial fitter built this way are complete polynomials,"
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,44,* ie. a n-degree polynomial has n+1 coefficients.</p>
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,45,* @param degree maximal degree of the polynomial
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,46,* @param optimizer optimizer to use for the fitting
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,48,"public PolynomialFitter(int degree, final DifferentiableMultivariateVectorialOptimizer optimizer) {"
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,49,this.fitter = new CurveFitter(optimizer);
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,50,this.degree = degree;
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,53,"/** Add an observed weighted (x,y) point to the sample."
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,54,* @param weight weight of the observed point in the fit
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,55,* @param x abscissa of the point
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,56,"* @param y observed value of the point at x, after fitting we should"
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,57,* have P(x) as close as possible to this value
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,59,"public void addObservedPoint(double weight, double x, double y) {"
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,60,"fitter.addObservedPoint(weight, x, y);"
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,63,"/** Get the polynomial fitting the weighted (x, y) points."
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,64,* @return polynomial function best fitting the observed points
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,65,* @exception OptimizationException if the algorithm failed to converge
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,67,public PolynomialFunction fit()
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,68,throws OptimizationException {
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,69,try {
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,70,"return new PolynomialFunction(fitter.fit(new ParametricPolynomial(), new double[degree + 1]));"
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,71,} catch (FunctionEvaluationException fee) {
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,72,// this should never happen
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,73,throw MathRuntimeException.createInternalError(fee);
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,77,/** Dedicated parametric polynomial class. */
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,78,private static class ParametricPolynomial implements ParametricRealFunction {
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,80,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,81,"public double[] gradient(double x, double[] parameters)"
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,82,throws FunctionEvaluationException {
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,83,final double[] gradient = new double[parameters.length];
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,84,double xn = 1.0;
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,85,for (int i = 0; i < parameters.length; ++i) {
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,86,gradient[i] = xn;
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,87,xn *= x;
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,89,return gradient;
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,92,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,93,"public double value(final double x, final double[] parameters) {"
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,94,double y = 0;
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,95,for (int i = parameters.length - 1; i >= 0; --i) {
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,96,y = y * x + parameters[i];
True,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,98,return y;
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,18,package org.apache.commons.math.optimization.fitting;
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,22,/** This class is a simple container for weighted observed point in
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,23,* {@link CurveFitter curve fitting}.
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,24,* <p>Instances of this class are guaranteed to be immutable.</p>
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,25,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,26,* @since 2.0
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,28,public class WeightedObservedPoint implements Serializable {
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,30,/** Serializable version id. */
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,31,private static final long serialVersionUID = 5306874947404636157L;
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,33,/** Weight of the measurement in the fitting process. */
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,34,private final double weight;
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,36,/** Abscissa of the point. */
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,37,private final double x;
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,39,/** Observed value of the function at x. */
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,40,private final double y;
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,42,/** Simple constructor.
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,43,* @param weight weight of the measurement in the fitting process
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,44,* @param x abscissa of the measurement
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,45,* @param y ordinate of the measurement
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,47,"public WeightedObservedPoint(final double weight, final double x, final double y) {"
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,48,this.weight = weight;
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,49,this.x      = x;
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,50,this.y      = y;
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,53,/** Get the weight of the measurement in the fitting process.
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,54,* @return weight of the measurement in the fitting process
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,56,public double getWeight() {
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,57,return weight;
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,60,/** Get the abscissa of the point.
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,61,* @return abscissa of the point
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,63,public double getX() {
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,64,return x;
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,67,/** Get the observed value of the function at x.
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,68,* @return observed value of the function at x
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,70,public double getY() {
True,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,src/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java,71,return y;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,18,ackage org.spaceroots.mantissa.fitting;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,21,mport java.util.ArrayList;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,22,mport java.util.List;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,24,mport org.spaceroots.mantissa.estimation.*;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,26,** This class is the base class for all curve fitting classes in the package.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,28, <p>This class handles all common features of curve fitting like the
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,29, sample points handling. It declares two methods ({@link
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,30, #valueAt} and {@link #partial}) which should be implemented by
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,31, sub-classes to define the precise shape of the curve they
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,32, represent.</p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,34, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,35, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,39,ublic abstract class AbstractCurveFitter
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,40,"mplements EstimationProblem, Serializable {"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,42,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,43, @param n number of coefficients in the underlying function
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,44, @param estimator estimator to use for the fitting
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,46,"rotected AbstractCurveFitter(int n, Estimator estimator) {"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,48,oefficients   = new EstimatedParameter[n];
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,49,easurements   = new ArrayList();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,50,his.estimator = estimator;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,53,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,54, @param coefficients first estimate of the coefficients. A
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,55, reference to this array is hold by the newly created object. Its
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,56, elements will be adjusted during the fitting process and they will
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,57, be set to the adjusted coefficients at the end.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,58, @param estimator estimator to use for the fitting
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,60,"rotected AbstractCurveFitter(EstimatedParameter[] coefficients,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,61,stimator estimator) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,63,his.coefficients = coefficients;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,64,easurements      = new ArrayList();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,65,his.estimator     = estimator;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,68,"** Add a weighted (x,y) pair to the sample."
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,69, @param weight weight of this pair in the fit
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,70, @param x      abscissa
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,71," @param y      ordinate, we have <code>y = f (x)</code>"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,73,"ublic void addWeightedPair(double weight, double x, double y) {"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,74,"easurements.add(new FitMeasurement(weight, x, y));"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,77,** Perform the fitting.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,79, <p>This method compute the coefficients of the curve that best
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,80, fit the sample of weighted pairs previously given through calls
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,81, to the {@link #addWeightedPair addWeightedPair} method.</p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,83, @return coefficients of the curve
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,84, @exception EstimationException if the fitting is not possible
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,85, (for example if the sample has to few independant points)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,88,ublic double[] fit()
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,89,hrows EstimationException {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,90,/ perform the fit
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,91,stimator.estimate(this);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,93,/ extract the coefficients
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,94,ouble[] fittedCoefficients = new double[coefficients.length];
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,95,or (int i = 0; i < coefficients.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,96,ittedCoefficients[i] = coefficients[i].getEstimate();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,99,eturn fittedCoefficients;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,103,ublic WeightedMeasurement[] getMeasurements() {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,104,eturn (WeightedMeasurement[]) measurements.toArray(new FitMeasurement[measurements.size()]);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,107,** Get the unbound parameters of the problem.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,108," For a curve fitting, none of the function coefficient is bound."
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,109, @return unbound parameters
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,111,ublic EstimatedParameter[] getUnboundParameters() {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,112,eturn (EstimatedParameter[]) coefficients.clone();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,115,** Get all the parameters of the problem.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,116, @return parameters
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,118,ublic EstimatedParameter[] getAllParameters() {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,119,eturn (EstimatedParameter[]) coefficients.clone();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,122,** Utility method to sort the measurements with respect to the abscissa.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,124, <p>This method is provided as a utility for derived classes. As
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,125," an example, the {@link HarmonicFitter} class needs it in order to"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,126, compute a first guess of the coefficients to initialize the
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,127, estimation algorithm.</p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,130,rotected void sortMeasurements() {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,132,"/ Since the samples are almost always already sorted, this"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,133,/ method is implemented as an insertion sort that reorders the
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,134,/ elements in place. Insertion sort is very efficient in this case.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,135,itMeasurement curr = (FitMeasurement) measurements.get(0);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,136,or (int j = 1; j < measurements.size (); ++j) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,137,itMeasurement prec = curr;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,138,urr = (FitMeasurement) measurements.get(j);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,139,f (curr.x < prec.x) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,140,/ the current element should be inserted closer to the beginning
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,141,nt i = j - 1;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,142,itMeasurement mI = (FitMeasurement) measurements.get(i);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,143,hile ((i >= 0) && (curr.x < mI.x)) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,144,"easurements.set(i + 1, mI);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,145,f (i-- != 0) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,146,I = (FitMeasurement) measurements.get(i);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,147, else {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,148,I = null;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,151,"easurements.set(i + 1, curr);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,152,urr = (FitMeasurement) measurements.get(j);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,158,** Get the value of the function at x according to the current parameters value.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,159, @param x abscissa at which the theoretical value is requested
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,160, @return theoretical value at x
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,162,ublic abstract double valueAt(double x);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,164,** Get the derivative of the function at x with respect to parameter p.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,165, @param x abscissa at which the partial derivative is requested
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,166, @param p parameter with respect to which the derivative is requested
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,167, @return partial derivative
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,169,"ublic abstract double partial(double x, EstimatedParameter p);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,171,** This class represents the fit measurements.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,172," One measurement is a weighted pair (x, y), where <code>y = f"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,173, (x)</code> is the value of the function at x abscissa. This class
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,174, is an inner class because the methods related to the computation
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,175, of f values and derivative are proveded by the fitter
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,176, implementations.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,178,ublic class FitMeasurement
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,179,xtends WeightedMeasurement {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,181,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,182, @param weight weight of the measurement in the fitting process
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,183, @param x abscissa of the measurement
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,184, @param y ordinate of the measurement
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,186,"ublic FitMeasurement(double weight, double x, double y) {"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,187,"uper(weight, y);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,188,his.x = x;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,191,** Get the value of the fitted function at x.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,192, @return theoretical value at the measurement abscissa
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,194,ublic double getTheoreticalValue() {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,195,eturn valueAt(x);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,198,** Partial derivative with respect to one function coefficient.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,199, @param p parameter with respect to which the derivative is requested
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,200, @return partial derivative
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,202,ublic double getPartial(EstimatedParameter p) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,203,"eturn partial(x, p);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,206,** Abscissa of the measurement. */
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,207,ublic final double x;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,209,rivate static final long serialVersionUID = -2682582852369995960L;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,213,** Coefficients of the function */
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,214,rotected EstimatedParameter[] coefficients;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,216,** Measurements vector */
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,217,rotected List measurements;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,219,** Estimator for the fitting problem. */
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,220,rivate Estimator estimator;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,18,ackage org.spaceroots.mantissa.fitting;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,22,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,23,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,24,mport org.spaceroots.mantissa.functions.vectorial.SampledFunctionIterator;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,25,mport org.spaceroots.mantissa.functions.vectorial.VectorialValuedPair;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,27,"** This class provides sampled values of the function t -> [f(t)^2, f'(t)^2]."
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,29, This class is a helper class used to compute a first guess of the
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,30, harmonic coefficients of a function <code>f (t) = a cos (omega t +
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,31, phi)</code>.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,33, @see FFPIterator
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,34, @see HarmonicCoefficientsGuesser
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,36, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,37, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,41,lass F2FP2Iterator
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,42,"mplements SampledFunctionIterator, Serializable {"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,44,ublic F2FP2Iterator(AbstractCurveFitter.FitMeasurement[] measurements) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,45,fpIterator = new FFPIterator(measurements);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,48,ublic int getDimension() {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,49,eturn 2;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,52,ublic boolean hasNext() {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,53,eturn ffpIterator.hasNext();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,56,ublic VectorialValuedPair nextSamplePoint()
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,57,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,59,/ get the raw values from the underlying FFPIterator
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,60,ectorialValuedPair point = ffpIterator.nextSamplePoint();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,61,ouble[] y = point.y;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,63,/ square the values
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,64,"eturn new VectorialValuedPair(point.x,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,65,ew double[] {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,66,"[0] * y[0], y[1] * y[1]"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,71,rivate FFPIterator ffpIterator;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,73,rivate static final long serialVersionUID = -8113110433795298072L;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,18,ackage org.spaceroots.mantissa.fitting;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,22,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,23,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,24,mport org.spaceroots.mantissa.functions.vectorial.SampledFunctionIterator;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,25,mport org.spaceroots.mantissa.functions.vectorial.VectorialValuedPair;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,27,"** This class provides sampled values of the function t -> [f(t), f'(t)]."
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,29, This class is a helper class used to compute a first guess of the
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,30, harmonic coefficients of a function <code>f (t) = a cos (omega t +
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,31, phi)</code>.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,33, @see F2FP2Iterator
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,34, @see HarmonicCoefficientsGuesser
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,36, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,37, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,41,lass FFPIterator
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,42,"mplements SampledFunctionIterator, Serializable {"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,44,ublic FFPIterator(AbstractCurveFitter.FitMeasurement[] measurements) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,45,his.measurements = measurements;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,47,/ initialize the points of the raw sample
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,48,urrent   = measurements[0];
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,49,urrentY  = current.getMeasuredValue();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,50,ext      = measurements[1];
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,51,extY     = next.getMeasuredValue();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,52,extIndex = 2;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,56,ublic int getDimension() {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,57,eturn 2;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,60,ublic boolean hasNext() {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,61,eturn nextIndex < measurements.length;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,64,ublic VectorialValuedPair nextSamplePoint()
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,65,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,66,f (nextIndex >= measurements.length) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,67,hrow new ExhaustedSampleException(measurements.length);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,70,/ shift the points
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,71,revious  = current;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,72,reviousY = currentY;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,73,urrent   = next;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,74,urrentY  = nextY;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,75,ext      = measurements[nextIndex++];
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,76,extY     = next.getMeasuredValue();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,78,"/ return the two dimensions vector [f(x), f'(x)]"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,79,ouble[] table = new double[2];
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,80,able[0] = currentY;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,81,able[1] = (nextY - previousY) / (next.x - previous.x);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,82,"eturn new VectorialValuedPair(current.x, table);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,86,rivate AbstractCurveFitter.FitMeasurement[] measurements;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,87,rivate int nextIndex;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,89,rivate AbstractCurveFitter.FitMeasurement previous;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,90,rivate double previousY;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,92,rivate AbstractCurveFitter.FitMeasurement current;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,93,rivate double nextY;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,95,rivate AbstractCurveFitter.FitMeasurement next;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,96,rivate double currentY;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/FFPIterator.java,98,rivate static final long serialVersionUID = -3187229691615380125L;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,18,ackage org.spaceroots.mantissa.fitting;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,22,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,23,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,24,mport org.spaceroots.mantissa.functions.vectorial.SampledFunctionIterator;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,25,mport org.spaceroots.mantissa.functions.vectorial.VectorialValuedPair;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,27,mport org.spaceroots.mantissa.quadrature.vectorial.EnhancedSimpsonIntegratorSampler;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,29,mport org.spaceroots.mantissa.estimation.EstimationException;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,31,** This class guesses harmonic coefficients from a sample.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,33, <p>The algorithm used to guess the coefficients is as follows:</p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,35," <p>We know f (t) at some sampling points t<sub>i</sub> and want to find a,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,36, &omega; and &phi; such that f (t) = a cos (&omega; t + &phi;).
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,37, </p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,39," <p>From the analytical expression, we can compute two primitives :"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,40, <pre>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,41,     If2  (t) = &int; f<sup>2</sup>  = a<sup>2</sup> &times; [t + S (t)] / 2
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,42,     If'2 (t) = &int; f'<sup>2</sup> = a<sup>2</sup> &omega;<sup>2</sup> &times; [t - S (t)] / 2
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,43,     where S (t) = sin (2 (&omega; t + &phi;)) / (2 &omega;)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,44, </pre>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,45, </p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,47, <p>We can remove S between these expressions :
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,48, <pre>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,49,     If'2 (t) = a<sup>2</sup> &omega;<sup>2</sup> t - &omega;<sup>2</sup> If2 (t)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,50, </pre>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,51, </p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,53, <p>The preceding expression shows that If'2 (t) is a linear
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,54, combination of both t and If2 (t): If'2 (t) = A &times; t + B &times; If2 (t)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,55, </p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,57," <p>From the primitive, we can deduce the same form for definite"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,58, integrals between t<sub>1</sub> and t<sub>i</sub> for each t<sub>i</sub> :
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,59, <pre>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,60,   If2 (t<sub>i</sub>) - If2 (t<sub>1</sub>) = A &times; (t<sub>i</sub> - t<sub>1</sub>) + B &times; (If2 (t<sub>i</sub>) - If2 (t<sub>1</sub>))
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,61, </pre>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,62, </p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,64, <p>We can find the coefficients A and B that best fit the sample
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,65, to this linear expression by computing the definite integrals for
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,66, each sample points.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,67, </p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,69," <p>For a bilinear expression z (x<sub>i</sub>, y<sub>i</sub>) = A &times; x<sub>i</sub> + B &times; y<sub>i</sub>, the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,70, coefficients A and B that minimize a least square criterion
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,71," &sum; (z<sub>i</sub> - z (x<sub>i</sub>, y<sub>i</sub>))<sup>2</sup> are given by these expressions:</p>"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,72, <pre>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,74,         &sum;y<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,75,     A = ------------------------
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,76,         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,78,         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,79,     B = ------------------------
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,80,         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,81, </pre>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,82, </p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,85," <p>In fact, we can assume both a and &omega; are positive and"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,86," compute them directly, knowing that A = a<sup>2</sup> &omega;<sup>2</sup> and that"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,87, B = - &omega;<sup>2</sup>. The complete algorithm is therefore:</p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,88, <pre>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,90," for each t<sub>i</sub> from t<sub>1</sub> to t<sub>n-1</sub>, compute:"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,91,   f  (t<sub>i</sub>)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,92,   f' (t<sub>i</sub>) = (f (t<sub>i+1</sub>) - f(t<sub>i-1</sub>)) / (t<sub>i+1</sub> - t<sub>i-1</sub>)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,93,   x<sub>i</sub> = t<sub>i</sub> - t<sub>1</sub>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,94,   y<sub>i</sub> = &int; f<sup>2</sup> from t<sub>1</sub> to t<sub>i</sub>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,95,   z<sub>i</sub> = &int; f'<sup>2</sup> from t<sub>1</sub> to t<sub>i</sub>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,96,"   update the sums &sum;x<sub>i</sub>x<sub>i</sub>, &sum;y<sub>i</sub>y<sub>i</sub>, &sum;x<sub>i</sub>y<sub>i</sub>, &sum;x<sub>i</sub>z<sub>i</sub> and &sum;y<sub>i</sub>z<sub>i</sub>"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,97, end for
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,100,         \  | &sum;y<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,101, a     =  \ | ------------------------
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,102,           \| &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,106,         \  | &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,107, &omega;     =  \ | ------------------------
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,108,           \| &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,110, </pre>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,111, </p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,113," <p>Once we know &omega;, we can compute:"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,114, <pre>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,115,    fc = &omega; f (t) cos (&omega; t) - f' (t) sin (&omega; t)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,116,    fs = &omega; f (t) sin (&omega; t) + f' (t) cos (&omega; t)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,117, </pre>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,118, </p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,120, <p>It appears that <code>fc = a &omega; cos (&phi;)</code> and
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,121," <code>fs = -a &omega; sin (&phi;)</code>, so we can use these"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,122, expressions to compute &phi;. The best estimate over the sample is
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,123, given by averaging these expressions.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,124, </p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,126, <p>Since integrals and means are involved in the preceding
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,127," estimations, these operations run in O(n) time, where n is the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,128, number of measurements.</p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,130, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,131, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,135,ublic class HarmonicCoefficientsGuesser
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,136,mplements Serializable{
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,138,ublic HarmonicCoefficientsGuesser(AbstractCurveFitter.FitMeasurement[] measurements) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,139,his.measurements =
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,140,AbstractCurveFitter.FitMeasurement[]) measurements.clone();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,141,                 = Double.NaN;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,142,mega             = Double.NaN;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,145,** Estimate a first guess of the coefficients.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,147, @exception ExhaustedSampleException if the sample is exhausted.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,149, @exception FunctionException if the integrator throws one.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,151, @exception EstimationException if the sample is too short or if
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,152, the first guess cannot be computed (when the elements under the
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,153, square roots are negative).
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,155,ublic void guess()
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,156,"hrows ExhaustedSampleException, FunctionException, EstimationException {"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,157,uessAOmega();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,158,uessPhi();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,161,** Estimate a first guess of the a and &omega; coefficients.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,163, @exception ExhaustedSampleException if the sample is exhausted.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,165, @exception FunctionException if the integrator throws one.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,167, @exception EstimationException if the sample is too short or if
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,168, the first guess cannot be computed (when the elements under the
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,169, square roots are negative).
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,172,rivate void guessAOmega()
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,173,"hrows ExhaustedSampleException, FunctionException, EstimationException {"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,175,/ initialize the sums for the linear model between the two integrals
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,176,ouble sx2 = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,177,ouble sy2 = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,178,ouble sxy = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,179,ouble sxz = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,180,ouble syz = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,182,/ build the integrals sampler
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,183,2FP2Iterator iter = new F2FP2Iterator(measurements);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,184,ampledFunctionIterator sampler =
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,185,ew EnhancedSimpsonIntegratorSampler(iter);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,186,ectorialValuedPair p0 = sampler.nextSamplePoint();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,187,ouble   p0X = p0.x;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,188,ouble[] p0Y = p0.y;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,190,/ get the points for the linear model
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,191,hile (sampler.hasNext()) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,193,ectorialValuedPair point = sampler.nextSamplePoint();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,194,ouble   pX = point.x;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,195,ouble[] pY = point.y;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,197,ouble x = pX    - p0X;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,198,ouble y = pY[0] - p0Y[0];
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,199,ouble z = pY[1] - p0Y[1];
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,201,x2 += x * x;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,202,y2 += y * y;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,203,xy += x * y;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,204,xz += x * z;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,205,yz += y * z;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,209,/ compute the amplitude and pulsation coefficients
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,210,ouble c1 = sy2 * sxz - sxy * syz;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,211,ouble c2 = sxy * sxz - sx2 * syz;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,212,ouble c3 = sx2 * sy2 - sxy * sxy;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,213,f ((c1 / c2 < 0.0) || (c2 / c3 < 0.0)) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,214,"hrow new EstimationException(""unable to guess a first estimate"");"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,216,     = Math.sqrt(c1 / c2);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,217,mega = Math.sqrt(c2 / c3);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,221,** Estimate a first guess of the &phi; coefficient.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,223, @exception ExhaustedSampleException if the sample is exhausted.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,225, @exception FunctionException if the sampler throws one.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,228,rivate void guessPhi()
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,229,"hrows ExhaustedSampleException, FunctionException {"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,231,ampledFunctionIterator iter = new FFPIterator(measurements);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,233,/ initialize the means
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,234,ouble fcMean = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,235,ouble fsMean = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,237,hile (iter.hasNext()) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,238,ectorialValuedPair point = iter.nextSamplePoint();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,239,ouble   omegaX = omega * point.x;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,240,ouble   cosine = Math.cos(omegaX);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,241,ouble   sine   = Math.sin(omegaX);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,242,cMean += omega * point.y[0] * cosine - point.y[1] *   sine;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,243,sMean += omega * point.y[0] *   sine + point.y[1] * cosine;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,246,"hi = Math.atan2(-fsMean, fcMean);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,250,ublic double getOmega() {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,251,eturn omega;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,254,ublic double getA() {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,255,eturn a;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,258,ublic double getPhi() {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,259,eturn phi;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,262,rivate AbstractCurveFitter.FitMeasurement[] measurements;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,263,rivate double a;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,264,rivate double omega;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,265,rivate double phi;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,267,rivate static final long serialVersionUID = 2400399048702758814L;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,18,ackage org.spaceroots.mantissa.fitting;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,20,mport org.spaceroots.mantissa.estimation.EstimatedParameter;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,21,mport org.spaceroots.mantissa.estimation.EstimationException;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,22,mport org.spaceroots.mantissa.estimation.Estimator;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,23,mport org.spaceroots.mantissa.estimation.GaussNewtonEstimator;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,24,mport org.spaceroots.mantissa.functions.ExhaustedSampleException;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,25,mport org.spaceroots.mantissa.functions.FunctionException;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,27,** This class implements a curve fitting specialized for sinusoids.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,29, <p>Harmonic fitting is a very simple case of curve fitting. The
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,30," estimated coefficients are the amplitude a, the pulsation omega and"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,31, the phase phi: <code>f (t) = a cos (omega t + phi)</code>. They are
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,32, searched by a least square estimator initialized with a rough guess
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,33, based on integrals.</p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,35," <p>This class <emph>is by no means optimized</emph>, neither versus"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,36, space nor versus time performance.</p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,38, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,39, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,43,ublic class HarmonicFitter
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,44,xtends AbstractCurveFitter {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,46,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,47, @param estimator estimator to use for the fitting
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,49,ublic HarmonicFitter(Estimator estimator) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,50,"uper(3, estimator);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,51,"oefficients[0]  = new EstimatedParameter(""a"", 2.0 * Math.PI);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,52,"oefficients[1]  = new EstimatedParameter(""omega"", 0.0);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,53,"oefficients[2]  = new EstimatedParameter(""phi"", 0.0);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,54,irstGuessNeeded = true;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,58, Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,60, <p>This constructor can be used when a first estimate of the
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,61, coefficients is already known.</p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,63, @param coefficients first estimate of the coefficients.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,64, A reference to this array is hold by the newly created
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,65, object. Its elements will be adjusted during the fitting process
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,66, and they will be set to the adjusted coefficients at the end.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,67, @param estimator estimator to use for the fitting
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,70,"ublic HarmonicFitter(EstimatedParameter[] coefficients,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,71,stimator estimator) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,72,"uper(coefficients, estimator);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,73,irstGuessNeeded = false;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,76,ublic double[] fit()
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,77,hrows EstimationException {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,78,f (firstGuessNeeded) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,79,f (measurements.size() < 4) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,80,"hrow new EstimationException(""sample must contain at least {0} points"","
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,81,ew String[] {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,82,nteger.toString(4)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,86,ortMeasurements();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,88,ry {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,89,armonicCoefficientsGuesser guesser =
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,90,ew HarmonicCoefficientsGuesser((FitMeasurement[]) getMeasurements());
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,91,uesser.guess();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,93,oefficients[0].setEstimate(guesser.getA());
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,94,oefficients[1].setEstimate(guesser.getOmega());
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,95,oefficients[2].setEstimate(guesser.getPhi());
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,96, catch(ExhaustedSampleException e) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,97,hrow new EstimationException(e);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,98, catch(FunctionException e) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,99,hrow new EstimationException(e);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,102,irstGuessNeeded = false;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,106,eturn super.fit();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,110,** Get the current amplitude coefficient estimate.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,111," Get a, where <code>f (t) = a cos (omega t + phi)</code>"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,112, @return current amplitude coefficient estimate
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,114,ublic double getAmplitude() {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,115,eturn coefficients[0].getEstimate();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,118,** Get the current pulsation coefficient estimate.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,119," Get omega, where <code>f (t) = a cos (omega t + phi)</code>"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,120, @return current pulsation coefficient estimate
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,122,ublic double getPulsation() {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,123,eturn coefficients[1].getEstimate();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,126,** Get the current phase coefficient estimate.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,127," Get phi, where <code>f (t) = a cos (omega t + phi)</code>"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,128, @return current phase coefficient estimate
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,130,ublic double getPhase() {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,131,eturn coefficients[2].getEstimate();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,134,** Get the value of the function at x according to the current parameters value.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,135, @param x abscissa at which the theoretical value is requested
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,136, @return theoretical value at x
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,138,ublic double valueAt(double x) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,139,ouble a     = coefficients[0].getEstimate();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,140,ouble omega = coefficients[1].getEstimate();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,141,ouble phi   = coefficients[2].getEstimate();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,142,eturn a * Math.cos(omega * x + phi);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,145,** Get the derivative of the function at x with respect to parameter p.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,146, @param x abscissa at which the partial derivative is requested
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,147, @param p parameter with respect to which the derivative is requested
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,148, @return partial derivative
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,150,"ublic double partial(double x, EstimatedParameter p) {"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,151,ouble a     = coefficients[0].getEstimate();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,152,ouble omega = coefficients[1].getEstimate();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,153,ouble phi   = coefficients[2].getEstimate();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,154,f (p == coefficients[0]) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,155,eturn Math.cos(omega * x + phi);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,156, else if (p == coefficients[1]) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,157,eturn -a * x * Math.sin(omega * x + phi);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,158, else {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,159,eturn -a * Math.sin(omega * x + phi);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,163,** Indicator of the need to compute a first guess of the coefficients. */
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,164,rivate boolean firstGuessNeeded;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,166,rivate static final long serialVersionUID = -8722683066277473450L;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,18,ackage org.spaceroots.mantissa.fitting;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,20,mport org.spaceroots.mantissa.estimation.EstimatedParameter;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,22,** This class represents a polynomial coefficient.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,24, <p>Each coefficient is uniquely defined by its degree.</p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,26, @see PolynomialFitter
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,28, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,29, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,32,ublic class PolynomialCoefficient
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,33,xtends EstimatedParameter {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,35,ublic PolynomialCoefficient(int degree) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,36,"uper(""a"" + degree, 0.0);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,37,his.degree = degree;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,40,ublic final int degree;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialCoefficient.java,42,rivate static final long serialVersionUID = 5775845068390259552L;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,18,ackage org.spaceroots.mantissa.fitting;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,20,mport org.spaceroots.mantissa.estimation.EstimatedParameter;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,21,mport org.spaceroots.mantissa.estimation.Estimator;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,22,mport org.spaceroots.mantissa.estimation.GaussNewtonEstimator;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,24,** This class implements a curve fitting specialized for polynomials.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,26, <p>Polynomial fitting is a very simple case of curve fitting. The
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,27, estimated coefficients are the polynom coefficients. They are
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,28, searched by a least square estimator.</p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,30," <p>This class <emph>is by no means optimized</emph>, neither in"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,31, space nor in time performance.</p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,33, @see PolynomialCoefficient
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,35, @version $Id$
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,36, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,40,ublic class PolynomialFitter
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,41,xtends AbstractCurveFitter {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,43,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,45," <p>The polynomial fitter built this way are complete polynoms,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,46, ie. a n-degree polynom has n+1 coefficients. In order to build
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,47, fitter for sparse polynoms (for example <code>a x^20 - b
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,48," x^30</code>, on should first build the coefficients array and"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,49, provide it to {@link
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,50," #PolynomialFitter(PolynomialCoefficient[], int, double, double,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,51, double)}.</p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,52, @param degree maximal degree of the polynom
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,53, @param estimator estimator to use for the fitting
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,55,"ublic PolynomialFitter(int degree, Estimator estimator) {"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,56,"uper(degree + 1, estimator);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,57,or (int i = 0; i < coefficients.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,58,oefficients[i] = new PolynomialCoefficient(i);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,62,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,64, <p>This constructor can be used either when a first estimate of
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,65, the coefficients is already known (which is of little interest
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,66, because the fit cost is the same whether a first guess is known or
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,67, not) or when one needs to handle sparse polynoms like <code>a
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,68, x^20 - b x^30</code>.</p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,70, @param coefficients first estimate of the coefficients.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,71, A reference to this array is hold by the newly created
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,72, object. Its elements will be adjusted during the fitting process
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,73, and they will be set to the adjusted coefficients at the end.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,74, @param estimator estimator to use for the fitting
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,76,"ublic PolynomialFitter(PolynomialCoefficient[] coefficients,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,77,stimator estimator) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,78,"uper(coefficients, estimator);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,81,** Get the value of the function at x according to the current parameters value.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,82, @param x abscissa at which the theoretical value is requested
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,83, @return theoretical value at x
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,85,ublic double valueAt(double x) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,86,ouble y = coefficients[coefficients.length - 1].getEstimate();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,87,or (int i = coefficients.length - 2; i >= 0; --i) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,88, = y * x + coefficients[i].getEstimate();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,90,eturn y;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,93,** Get the derivative of the function at x with respect to parameter p.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,94, @param x abscissa at which the partial derivative is requested
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,95, @param p parameter with respect to which the derivative is requested
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,96, @return partial derivative
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,98,"ublic double partial(double x, EstimatedParameter p) {"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,99,f (p instanceof PolynomialCoefficient) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,100,"eturn Math.pow(x, ((PolynomialCoefficient) p).degree);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,102,"hrow new RuntimeException(""internal error"");"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,105,rivate static final long serialVersionUID = -744904084649890769L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,18,ackage org.spaceroots.mantissa.fitting;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,20,mport java.util.Random;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,21,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,23,mport org.spaceroots.mantissa.estimation.EstimatedParameter;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,24,mport org.spaceroots.mantissa.estimation.LevenbergMarquardtEstimator;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,25,mport org.spaceroots.mantissa.estimation.WeightedMeasurement;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,27,ublic class AbstractCurveFitterTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,28,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,30,ublic AbstractCurveFitterTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,31,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,32,itter = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,35,ublic void testAlreadySorted() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,36,or (double x = 0.0; x < 100.0; x += 1.0) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,37,"itter.addWeightedPair(1.0, x, 0.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,39,heckSorted();
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,42,ublic void testReversed() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,43,or (double x = 0.0; x < 100.0; x += 1.0) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,44,"itter.addWeightedPair(1.0, 100.0 - x, 0.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,46,heckSorted();
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,49,ublic void testRandom() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,50,andom randomizer = new Random(86757343594l);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,51,or (int i = 0; i < 100; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,52,"itter.addWeightedPair(1.0, 10.0 * randomizer.nextDouble(), 0.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,54,heckSorted();
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,57,ublic void checkSorted() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,58,itter.doSort();
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,60,eightedMeasurement[] measurements = fitter.getMeasurements();
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,61,or (int i = 1; i < measurements.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,62,bstractCurveFitter.FitMeasurement m1
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,63, (AbstractCurveFitter.FitMeasurement) measurements[i-1];
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,64,bstractCurveFitter.FitMeasurement m2
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,65, (AbstractCurveFitter.FitMeasurement) measurements[i];
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,66,ssertTrue(m1.x <= m2.x);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,71,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,72,eturn new TestSuite(AbstractCurveFitterTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,75,ublic void setUp() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,76,itter = new DummyFitter();
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,79,ublic void tearDown() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,80,itter = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,83,rivate static class DummyFitter
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,84,xtends AbstractCurveFitter {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,86,ublic DummyFitter() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,87,"uper(10, new LevenbergMarquardtEstimator());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,90,ublic double valueAt(double x) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,91,eturn 0.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,94,"ublic double partial(double x, EstimatedParameter p) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,95,eturn 0.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,98,ublic void doSort() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,99,ortMeasurements();
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,102,rivate static final long serialVersionUID = 4016396219767783678L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,106,rivate DummyFitter fitter;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,18,ackage org.spaceroots.mantissa.fitting;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,20,mport junit.framework.Test;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,21,mport junit.framework.TestSuite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,23,ublic class AllTests {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,24,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,26,"estSuite suite= new TestSuite(""org.spaceroots.mantissa.fitting"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,28,uite.addTest(AbstractCurveFitterTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,29,uite.addTest(PolynomialFitterTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,30,uite.addTest(HarmonicFitterTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AllTests.java,32,eturn suite;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,18,ackage org.spaceroots.mantissa.fitting;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,20,mport java.util.Random;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,21,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,23,mport org.spaceroots.mantissa.estimation.EstimationException;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,24,mport org.spaceroots.mantissa.estimation.LevenbergMarquardtEstimator;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,25,mport org.spaceroots.mantissa.estimation.WeightedMeasurement;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,27,ublic class HarmonicFitterTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,28,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,30,ublic HarmonicFitterTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,31,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,34,ublic void testNoError()
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,35,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,36,"armonicFunction f = new HarmonicFunction(0.2, 3.4, 4.1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,38,armonicFitter fitter =
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,39,ew HarmonicFitter(new LevenbergMarquardtEstimator());
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,40,or (double x = 0.0; x < 1.3; x += 0.01) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,41,"itter.addWeightedPair(1.0, x, f.valueAt(x));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,44,ouble[] coeffs = fitter.fit();
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,46,"armonicFunction fitted = new HarmonicFunction(coeffs[0],"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,47,"oeffs[1],"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,48,oeffs[2]);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,49,ssertTrue(Math.abs(coeffs[0] - f.getA()) < 1.0e-13);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,50,ssertTrue(Math.abs(coeffs[1] - f.getOmega()) < 1.0e-13);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,51,"ssertTrue(Math.abs(coeffs[2] - center(f.getPhi(), coeffs[2])) < 1.0e-13);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,53,or (double x = -1.0; x < 1.0; x += 0.01) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,54,ssertTrue(Math.abs(f.valueAt(x) - fitted.valueAt(x)) < 1.0e-13);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,59,ublic void test1PercentError()
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,60,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,61,andom randomizer = new Random(64925784252l);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,62,"armonicFunction f = new HarmonicFunction(0.2, 3.4, 4.1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,64,armonicFitter fitter =
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,65,ew HarmonicFitter(new LevenbergMarquardtEstimator());
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,66,or (double x = 0.0; x < 10.0; x += 0.1) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,67,"itter.addWeightedPair(1.0, x,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,68,.valueAt(x) + 0.01 * randomizer.nextGaussian());
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,71,ouble[] coeffs = fitter.fit();
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,73,"ew HarmonicFunction(coeffs[0], coeffs[1], coeffs[2]);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,74,ssertTrue(Math.abs(coeffs[0] - f.getA()) < 7.6e-4);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,75,ssertTrue(Math.abs(coeffs[1] - f.getOmega()) < 2.7e-3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,76,"ssertTrue(Math.abs(coeffs[2] - center(f.getPhi(), coeffs[2])) < 1.3e-2);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,78,eightedMeasurement[] measurements = fitter.getMeasurements();
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,79,or (int i = 0; i < measurements.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,80,eightedMeasurement m = measurements[i];
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,81,ssertTrue(Math.abs(measurements[i].getMeasuredValue()
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,82, m.getTheoreticalValue()) < 0.04);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,87,ublic void testUnsorted()
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,88,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,89,andom randomizer = new Random(64925784252l);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,90,"armonicFunction f = new HarmonicFunction(0.2, 3.4, 4.1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,92,armonicFitter fitter =
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,93,ew HarmonicFitter(new LevenbergMarquardtEstimator());
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,95,/ build a regularly spaced array of measurements
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,96,nt size = 100;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,97,ouble[] xTab = new double[size];
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,98,ouble[] yTab = new double[size];
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,99,or (int i = 0; i < size; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,100,Tab[i] = 0.1 * i;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,101,Tab[i] = f.valueAt (xTab[i]) + 0.01 * randomizer.nextGaussian();
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,104,/ shake it
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,105,or (int i = 0; i < size; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,106,nt i1 = randomizer.nextInt(size);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,107,nt i2 = randomizer.nextInt(size);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,108,ouble xTmp = xTab[i1];
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,109,ouble yTmp = yTab[i1];
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,110,Tab[i1] = xTab[i2];
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,111,Tab[i1] = yTab[i2];
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,112,Tab[i2] = xTmp;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,113,Tab[i2] = yTmp;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,116,/ pass it to the fitter
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,117,or (int i = 0; i < size; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,118,"itter.addWeightedPair(1.0, xTab[i], yTab[i]);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,121,ouble[] coeffs = fitter.fit();
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,123,"ew HarmonicFunction(coeffs[0], coeffs[1], coeffs[2]);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,124,ssertTrue(Math.abs(coeffs[0] - f.getA()) < 7.6e-4);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,125,ssertTrue(Math.abs(coeffs[1] - f.getOmega()) < 3.5e-3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,126,"ssertTrue(Math.abs(coeffs[2] - center(f.getPhi(), coeffs[2])) < 1.5e-2);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,128,eightedMeasurement[] measurements = fitter.getMeasurements();
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,129,or (int i = 0; i < measurements.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,130,eightedMeasurement m = measurements[i];
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,131,ssertTrue(Math.abs(m.getMeasuredValue() - m.getTheoreticalValue())
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,132, 0.04);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,136,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,137,eturn new TestSuite(HarmonicFitterTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,140,** Center an angle with respect to another one. */
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,141,"rivate static double center(double a, double ref) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,142,ouble twoPi = Math.PI + Math.PI;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,143,eturn a - twoPi * Math.floor((a + Math.PI - ref) / twoPi);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,146,rivate static class HarmonicFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,147,"ublic HarmonicFunction(double a, double omega, double phi) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,148,his.a     = a;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,149,his.omega = omega;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,150,his.phi   = phi;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,153,ublic double valueAt(double x) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,154,eturn a * Math.cos(omega * x + phi);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,157,ublic double getA() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,158,eturn a;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,161,ublic double getOmega() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,162,eturn omega;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,165,ublic double getPhi() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,166,eturn phi;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,169,rivate double a;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,170,rivate double omega;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,171,rivate double phi;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,18,ackage org.spaceroots.mantissa.fitting;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,20,mport java.util.Random;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,21,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,23,mport org.spaceroots.mantissa.estimation.EstimationException;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,24,mport org.spaceroots.mantissa.estimation.Estimator;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,25,mport org.spaceroots.mantissa.estimation.GaussNewtonEstimator;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,26,mport org.spaceroots.mantissa.estimation.LevenbergMarquardtEstimator;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,28,ublic class PolynomialFitterTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,29,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,31,ublic PolynomialFitterTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,32,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,35,ublic void testNoError()
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,36,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,37,andom randomizer = new Random(64925784252l);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,38,or (int degree = 0; degree < 10; ++degree) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,39,olynom p = new Polynom(degree);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,40,or (int i = 0; i <= degree; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,41,".initCoeff (i, randomizer.nextGaussian());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,44,olynomialFitter fitter =
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,45,"ew PolynomialFitter(degree, new LevenbergMarquardtEstimator());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,46,or (int i = 0; i <= degree; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,47,"itter.addWeightedPair(1.0, i, p.valueAt(i));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,50,olynom fitted = new Polynom(fitter.fit());
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,52,or (double x = -1.0; x < 1.0; x += 0.01) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,53,ouble error = Math.abs(p.valueAt(x) - fitted.valueAt(x))
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,54, (1.0 + Math.abs(p.valueAt(x)));
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,55,ssertTrue(Math.abs(error) < 1.0e-5);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,62,ublic void testSmallError()
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,63,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,64,andom randomizer = new Random(53882150042l);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,65,or (int degree = 0; degree < 10; ++degree) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,66,olynom p = new Polynom(degree);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,67,or (int i = 0; i <= degree; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,68,".initCoeff(i, randomizer.nextGaussian());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,71,olynomialFitter fitter =
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,72,"ew PolynomialFitter(degree, new LevenbergMarquardtEstimator());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,73,or (double x = -1.0; x < 1.0; x += 0.01) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,74,"itter.addWeightedPair(1.0, x,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,75,.valueAt(x) + 0.1 * randomizer.nextGaussian());
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,78,olynom fitted = new Polynom(fitter.fit());
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,80,or (double x = -1.0; x < 1.0; x += 0.01) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,81,ouble error = Math.abs(p.valueAt(x) - fitted.valueAt(x))
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,82, (1.0 + Math.abs(p.valueAt(x)));
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,83,ssertTrue(Math.abs(error) < 0.1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,89,ublic void testRedundantSolvable() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,90,/ Levenberg-Marquardt should handle redundant information gracefully
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,91,"heckUnsolvableProblem(new LevenbergMarquardtEstimator(), true);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,94,ublic void testRedundantUnsolvable() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,95,/ Gauss-Newton should not be able to solve redundant information
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,96,"heckUnsolvableProblem(new GaussNewtonEstimator(10, 1.0e-7, 1.0e-7,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,97,".0e-10),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,98,alse);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,101,"rivate void checkUnsolvableProblem(Estimator estimator,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,102,oolean solvable) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,103,andom randomizer = new Random(1248788532l);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,104,or (int degree = 0; degree < 10; ++degree) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,105,olynom p = new Polynom(degree);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,106,or (int i = 0; i <= degree; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,107,".initCoeff(i, randomizer.nextGaussian());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,110,"olynomialFitter fitter = new PolynomialFitter(degree, estimator);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,112,/ reusing the same point over and over again does not bring
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,113,"/ information, the problem cannot be solved in this case for"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,114,/ degrees greater than 1 (but one point is sufficient for
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,115,/ degree 0)
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,116,or (double x = -1.0; x < 1.0; x += 0.01) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,117,"itter.addWeightedPair(1.0, 0.0, p.valueAt(0.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,120,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,121,itter.fit();
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,122,ssertTrue(solvable || (degree == 0));
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,123, catch(EstimationException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,124,ssertTrue((! solvable) && (degree > 0));
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,131,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,132,eturn new TestSuite(PolynomialFitterTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,135,rivate static class Polynom {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,137,ublic Polynom(int degree) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,138,oeffs = new double[degree + 1];
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,139,or (int i = 0; i < coeffs.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,140,oeffs[i] = 0.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,144,ublic Polynom(double[]coeffs) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,145,his.coeffs = coeffs;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,148,"ublic void initCoeff(int i, double c) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,149,oeffs[i] = c;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,152,ublic double valueAt(double x) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,153,ouble y = coeffs[coeffs.length - 1];
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,154,or (int i = coeffs.length - 2; i >= 0; --i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,155, = y * x + coeffs[i];
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,157,eturn y;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,160,rivate double[] coeffs;
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,1,// Licensed to the Apache Software Foundation (ASF) under one
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,2,// or more contributor license agreements.  See the NOTICE file
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,3,// distributed with this work for additional information
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,4,// regarding copyright ownership.  The ASF licenses this file
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,5,"// to you under the Apache License, Version 2.0 (the"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,6,"// ""License""); you may not use this file except in compliance"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,7,// with the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,9,//   http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,11,"// Unless required by applicable law or agreed to in writing,"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,12,// software distributed under the License is distributed on an
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,13,"// ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,14,"// KIND, either express or implied.  See the License for the"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,15,// specific language governing permissions and limitations
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,16,// under the License.
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,18,package org.apache.commons.math.optimization.fitting;
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,20,import static org.junit.Assert.assertEquals;
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,21,import static org.junit.Assert.assertTrue;
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,23,import java.util.Random;
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,25,import org.apache.commons.math.optimization.OptimizationException;
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,26,import org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,27,import org.apache.commons.math.util.MathUtils;
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,28,import org.junit.Test;
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,30,public class HarmonicFitterTest {
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,32,@Test
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,33,public void testNoError() throws OptimizationException {
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,34,"HarmonicFunction f = new HarmonicFunction(0.2, 3.4, 4.1);"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,36,HarmonicFitter fitter =
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,37,new HarmonicFitter(new LevenbergMarquardtOptimizer());
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,38,for (double x = 0.0; x < 1.3; x += 0.01) {
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,39,"fitter.addObservedPoint(1.0, x, f.value(x));"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,42,HarmonicFunction fitted = fitter.fit();
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,43,"assertEquals(f.getAmplitude(), fitted.getAmplitude(), 1.0e-13);"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,44,"assertEquals(f.getPulsation(), fitted.getPulsation(), 1.0e-13);"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,45,"assertEquals(f.getPhase(),     MathUtils.normalizeAngle(fitted.getPhase(), f.getPhase()), 1.0e-13);"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,47,for (double x = -1.0; x < 1.0; x += 0.01) {
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,48,assertTrue(Math.abs(f.value(x) - fitted.value(x)) < 1.0e-13);
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,53,@Test
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,54,public void test1PercentError() throws OptimizationException {
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,55,Random randomizer = new Random(64925784252l);
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,56,"HarmonicFunction f = new HarmonicFunction(0.2, 3.4, 4.1);"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,58,HarmonicFitter fitter =
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,59,new HarmonicFitter(new LevenbergMarquardtOptimizer());
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,60,for (double x = 0.0; x < 10.0; x += 0.1) {
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,61,"fitter.addObservedPoint(1.0, x,"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,62,f.value(x) + 0.01 * randomizer.nextGaussian());
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,65,HarmonicFunction fitted = fitter.fit();
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,66,"assertEquals(f.getAmplitude(), fitted.getAmplitude(), 7.6e-4);"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,67,"assertEquals(f.getPulsation(), fitted.getPulsation(), 2.7e-3);"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,68,"assertEquals(f.getPhase(),     MathUtils.normalizeAngle(fitted.getPhase(), f.getPhase()), 1.3e-2);"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,72,@Test
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,73,public void testInitialGuess() throws OptimizationException {
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,74,Random randomizer = new Random(45314242l);
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,75,"HarmonicFunction f = new HarmonicFunction(0.2, 3.4, 4.1);"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,77,HarmonicFitter fitter =
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,78,"new HarmonicFitter(new LevenbergMarquardtOptimizer(), new double[] { 0.15, 3.6, 4.5 });"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,79,for (double x = 0.0; x < 10.0; x += 0.1) {
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,80,"fitter.addObservedPoint(1.0, x,"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,81,f.value(x) + 0.01 * randomizer.nextGaussian());
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,84,HarmonicFunction fitted = fitter.fit();
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,85,"assertEquals(f.getAmplitude(), fitted.getAmplitude(), 1.2e-3);"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,86,"assertEquals(f.getPulsation(), fitted.getPulsation(), 3.3e-3);"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,87,"assertEquals(f.getPhase(),     MathUtils.normalizeAngle(fitted.getPhase(), f.getPhase()), 1.7e-2);"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,91,@Test
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,92,public void testUnsorted() throws OptimizationException {
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,93,Random randomizer = new Random(64925784252l);
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,94,"HarmonicFunction f = new HarmonicFunction(0.2, 3.4, 4.1);"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,96,HarmonicFitter fitter =
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,97,new HarmonicFitter(new LevenbergMarquardtOptimizer());
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,99,// build a regularly spaced array of measurements
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,100,int size = 100;
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,101,double[] xTab = new double[size];
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,102,double[] yTab = new double[size];
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,103,for (int i = 0; i < size; ++i) {
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,104,xTab[i] = 0.1 * i;
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,105,yTab[i] = f.value(xTab[i]) + 0.01 * randomizer.nextGaussian();
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,108,// shake it
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,109,for (int i = 0; i < size; ++i) {
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,110,int i1 = randomizer.nextInt(size);
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,111,int i2 = randomizer.nextInt(size);
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,112,double xTmp = xTab[i1];
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,113,double yTmp = yTab[i1];
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,114,xTab[i1] = xTab[i2];
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,115,yTab[i1] = yTab[i2];
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,116,xTab[i2] = xTmp;
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,117,yTab[i2] = yTmp;
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,120,// pass it to the fitter
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,121,for (int i = 0; i < size; ++i) {
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,122,"fitter.addObservedPoint(1.0, xTab[i], yTab[i]);"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,125,HarmonicFunction fitted = fitter.fit();
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,126,"assertEquals(f.getAmplitude(), fitted.getAmplitude(), 7.6e-4);"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,127,"assertEquals(f.getPulsation(), fitted.getPulsation(), 3.5e-3);"
True,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,128,"assertEquals(f.getPhase(),     MathUtils.normalizeAngle(fitted.getPhase(), f.getPhase()), 1.5e-2);"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,1,// Licensed to the Apache Software Foundation (ASF) under one
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,2,// or more contributor license agreements.  See the NOTICE file
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,3,// distributed with this work for additional information
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,4,// regarding copyright ownership.  The ASF licenses this file
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,5,"// to you under the Apache License, Version 2.0 (the"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,6,"// ""License""); you may not use this file except in compliance"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,7,// with the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,9,//   http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,11,"// Unless required by applicable law or agreed to in writing,"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,12,// software distributed under the License is distributed on an
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,13,"// ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,14,"// KIND, either express or implied.  See the License for the"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,15,// specific language governing permissions and limitations
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,16,// under the License.
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,18,package org.apache.commons.math.optimization.fitting;
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,20,import static org.junit.Assert.assertEquals;
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,21,import static org.junit.Assert.assertTrue;
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,23,import java.util.Random;
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,25,import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,26,import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,27,import org.apache.commons.math.optimization.OptimizationException;
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,28,import org.apache.commons.math.optimization.general.GaussNewtonOptimizer;
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,29,import org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,30,import org.junit.Test;
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,32,public class PolynomialFitterTest {
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,34,@Test
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,35,public void testNoError() throws OptimizationException {
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,36,Random randomizer = new Random(64925784252l);
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,37,for (int degree = 1; degree < 10; ++degree) {
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,38,"PolynomialFunction p = buildRandomPolynomial(degree, randomizer);"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,40,PolynomialFitter fitter =
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,41,"new PolynomialFitter(degree, new LevenbergMarquardtOptimizer());"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,42,for (int i = 0; i <= degree; ++i) {
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,43,"fitter.addObservedPoint(1.0, i, p.value(i));"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,46,PolynomialFunction fitted = fitter.fit();
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,48,for (double x = -1.0; x < 1.0; x += 0.01) {
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,49,double error = Math.abs(p.value(x) - fitted.value(x)) /
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,50,(1.0 + Math.abs(p.value(x)));
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,51,"assertEquals(0.0, error, 1.0e-6);"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,58,@Test
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,59,public void testSmallError() throws OptimizationException {
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,60,Random randomizer = new Random(53882150042l);
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,61,double maxError = 0;
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,62,for (int degree = 0; degree < 10; ++degree) {
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,63,"PolynomialFunction p = buildRandomPolynomial(degree, randomizer);"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,65,PolynomialFitter fitter =
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,66,"new PolynomialFitter(degree, new LevenbergMarquardtOptimizer());"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,67,for (double x = -1.0; x < 1.0; x += 0.01) {
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,68,"fitter.addObservedPoint(1.0, x,"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,69,p.value(x) + 0.1 * randomizer.nextGaussian());
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,72,PolynomialFunction fitted = fitter.fit();
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,74,for (double x = -1.0; x < 1.0; x += 0.01) {
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,75,double error = Math.abs(p.value(x) - fitted.value(x)) /
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,76,(1.0 + Math.abs(p.value(x)));
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,77,"maxError = Math.max(maxError, error);"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,78,assertTrue(Math.abs(error) < 0.1);
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,81,assertTrue(maxError > 0.01);
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,85,@Test
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,86,public void testRedundantSolvable() {
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,87,// Levenberg-Marquardt should handle redundant information gracefully
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,88,"checkUnsolvableProblem(new LevenbergMarquardtOptimizer(), true);"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,91,@Test
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,92,public void testRedundantUnsolvable() {
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,93,// Gauss-Newton should not be able to solve redundant information
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,94,DifferentiableMultivariateVectorialOptimizer optimizer =
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,95,new GaussNewtonOptimizer(true);
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,96,"checkUnsolvableProblem(optimizer, false);"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,99,"private void checkUnsolvableProblem(DifferentiableMultivariateVectorialOptimizer optimizer,"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,100,boolean solvable) {
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,101,Random randomizer = new Random(1248788532l);
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,102,for (int degree = 0; degree < 10; ++degree) {
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,103,"PolynomialFunction p = buildRandomPolynomial(degree, randomizer);"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,105,"PolynomialFitter fitter = new PolynomialFitter(degree, optimizer);"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,107,// reusing the same point over and over again does not bring
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,108,"// information, the problem cannot be solved in this case for"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,109,// degrees greater than 1 (but one point is sufficient for
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,110,// degree 0)
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,111,for (double x = -1.0; x < 1.0; x += 0.01) {
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,112,"fitter.addObservedPoint(1.0, 0.0, p.value(0.0));"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,115,try {
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,116,fitter.fit();
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,117,assertTrue(solvable || (degree == 0));
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,118,} catch(OptimizationException e) {
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,119,assertTrue((! solvable) && (degree > 0));
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,126,"private PolynomialFunction buildRandomPolynomial(int degree, Random randomizer) {"
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,127,final double[] coefficients = new double[degree + 1];
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,128,for (int i = 0; i <= degree; ++i) {
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,129,coefficients[i] = randomizer.nextGaussian();
True,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,131,return new PolynomialFunction(coefficients);

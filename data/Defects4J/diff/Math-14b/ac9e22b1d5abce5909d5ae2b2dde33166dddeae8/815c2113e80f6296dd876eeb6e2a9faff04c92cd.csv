is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,2,* Copyright 2004 The Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,17,package org.apache.commons.math.distribution;
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,20,* Normal (Gauss) Distribution.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,21,* Instances of NormalDistribution objects should be created using
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,22,"* {@link DistributionFactory#createNormalDistribution(double, double)}.<p>"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,24,* <p>
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,25,* References:<p>
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,26,* <ul>
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,27,"* <li><a href=""http://mathworld.wolfram.com/NormalDistribution.html"">"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,28,* Normal Distribution</a></li>
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,29,* </ul>
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,30,* </p>
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,32,* @version $Revision: 1.7 $ $Date: 2004/05/05 19:59:11 $
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,34,public interface NormalDistribution extends ContinuousDistribution {
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,36,* Access the mean.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,37,* @return mean for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,39,double getMean();
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,41,* Modify the mean.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,42,* @param mean for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,44,void setMean(double mean);
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,46,* Access the standard deviation.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,47,* @return standard deviation for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,49,double getStandardDeviation();
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,51,* Modify the standard deviation.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,52,* @param sd standard deviation for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,54,void setStandardDeviation(double sd);
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,2,* Copyright 2004 The Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,17,package org.apache.commons.math.distribution;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,19,import java.io.Serializable;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,21,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,22,import org.apache.commons.math.special.Erf;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,25,* Default implementation of
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,26,* {@link org.apache.commons.math.distribution.NormalDistribution}.<p>
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,27,* You can choose the algorithm used to calculate cumulative probability
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,28,* using method {@link #setCdfAlgorithm}. The deafault is the Cody algorithm
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,29,* {@link org.apache.commons.math.distribution.NormalCDFPreciseAlgorithm}
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,31,* @version $Revision: 1.8 $ $Date: 2004/05/05 19:59:11 $
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,33,public class NormalDistributionImpl extends AbstractContinuousDistribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,34,"implements NormalDistribution, Serializable {"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,36,/** The mean of this distribution. */
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,37,private double mean = 0;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,39,/** The standard deviation of this distribution. */
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,40,private double standardDeviation = 1;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,43,* Create a normal distribution using the given mean and standard deviation.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,44,* @param mean mean for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,45,* @param sd standard deviation for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,47,"public NormalDistributionImpl(double mean, double sd){"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,48,super();
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,49,setMean(mean);
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,50,setStandardDeviation(sd);
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,53,* Creates normal distribution with the mean equal to zero and standard
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,54,* deviation equal to one.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,56,public NormalDistributionImpl(){
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,57,"this(0.0, 1.0);"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,60,* Access the mean.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,61,* @return mean for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,63,public double getMean() {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,64,return mean;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,67,* Modify the mean.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,68,* @param mean for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,70,public void setMean(double mean) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,71,this.mean = mean;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,75,* Access the standard deviation.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,76,* @return standard deviation for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,78,public double getStandardDeviation() {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,79,return standardDeviation;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,83,* Modify the standard deviation.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,84,* @param sd standard deviation for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,86,public void setStandardDeviation(double sd) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,87,if (sd <= 0.0) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,88,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,89,"""Standard deviation must be positive."");"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,91,standardDeviation = sd;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,95,"* For this disbution, X, this method returns P(X &lt; <code>x</code>)."
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,96,* @param x the value at which the CDF is evaluated.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,97,* @return CDF evaluted at <code>x</code>.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,98,* @throws MathException if the algorithm fails to converge.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,100,public double cumulativeProbability(double x) throws MathException {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,101,return 0.5 * (1.0 + Erf.erf((x - mean) /
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,102,(standardDeviation * Math.sqrt(2.0))));
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,106,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,107,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,108,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,110,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,111,"* @return domain value lower bound, i.e."
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,112,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,114,protected double getDomainLowerBound(double p) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,115,double ret;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,117,if (p < .5) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,118,ret = -Double.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,119,} else {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,120,ret = getMean();
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,123,return ret;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,127,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,128,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,129,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,131,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,132,"* @return domain value upper bound, i.e."
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,133,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,135,protected double getDomainUpperBound(double p) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,136,double ret;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,138,if (p < .5) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,139,ret = getMean();
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,140,} else {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,141,ret = Double.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,144,return ret;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,148,"* Access the initial domain value, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,149,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,150,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,152,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,153,* @return initial domain value
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,155,protected double getInitialDomain(double p) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,156,double ret;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,158,if (p < .5) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,159,ret = getMean() - getStandardDeviation();
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,160,} else if (p > .5) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,161,ret = getMean() + getStandardDeviation();
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,162,} else {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,163,ret = getMean();
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,166,return ret;
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,2,* Copyright 2004 The Apache Software Foundation.
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,16,package org.apache.commons.math.special;
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,18,import java.io.Serializable;
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,20,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,23,* This is a utility class that provides computation methods related to the
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,24,* error functions.
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,26,* @version $Revision: 1.1 $ $Date: 2004/05/05 19:54:58 $
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,28,public class Erf implements Serializable {
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,31,* Default constructor.  Prohibit instantiation.
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,33,private Erf() {
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,34,super();
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,38,* Returns the error function erf(x).
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,40,* The implementation of this method is based on:
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,41,* <ul>
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,42,* <li>
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,43,"* <a href=""http://mathworld.wolfram.com/Erf.html"">"
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,44,"* Erf</a>, equation (3).</li>"
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,45,* </ul>
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,47,* @param x the value.
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,48,* @return the error function erf(x)
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,49,* @throws MathException if the algorithm fails to converge.
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,51,public static double erf(double x) throws MathException {
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,52,"double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);"
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,53,if (x < 0) {
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,54,ret = -ret;
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,56,return ret;
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,30, @version $Revision: 1.12 $ $Date: 2004/04/02 21:30:08 $
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,30,* @version $Revision: 1.13 $ $Date: 2004/05/05 19:55:14 $
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,47,"ssert.assertTrue(msg, Double.isNaN(actual));"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,47,"Assert.assertTrue("""" + actual + "" is not NaN."","
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,48,Double.isNaN(actual));
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,2,* Copyright 2004 The Apache Software Foundation.
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,17,package org.apache.commons.math.distribution;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,19,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,20,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,22,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,25,*  Tests for NormalDistribution implementation
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,27,"* ""True"" results are taken from R - the same as in Mathematica"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,30,public class NormalDistributionTest extends TestCase {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,32,private NormalDistribution z;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,33,private static final double PRECISION = 10e-6;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,34,private static final double M = 2.1;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,35,private static final double SD = 1.4;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,38,* Constructor for NormalDistributionTest.
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,39,* @param arg0
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,41,public NormalDistributionTest(String arg0) {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,42,super(arg0);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,45,public static void main(String[] args) {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,46,junit.swingui.TestRunner.run(NormalDistributionTest.class);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,49,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,50,super.setUp();
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,51,"z = DistributionFactory.newInstance().createNormalDistribution(M, SD);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,54,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,55,super.tearDown();
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,56,z = null;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,59,public void testCumulativeProbabilitydoubleM_MINUS_2SD() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,60,"testProbability(M - 2*SD, 0.02275013);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,63,public void testCumulativeProbabilitydoubleM_MINUS_SD() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,64,"testProbability(M - SD, 0.1586553);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,67,public void testCumulativeProbabilitydoubleM() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,68,"testProbability(M, 0.5);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,71,public void testCumulativeProbabilitydoubleM_PLUS_SD() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,72,"testProbability(M + SD, 0.8413447);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,75,public void testCumulativeProbabilitydoubleM_PLUS_2SD() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,76,"testProbability(M + 2*SD, 0.9772499);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,79,public void testCumulativeProbabilitydoubleM_PLUS_3SD() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,80,"testProbability(M + 3*SD, 0.9986501);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,83,public void testCumulativeProbabilitydoubleM_PLUS_4SD() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,84,"testProbability(M + 4*SD, 0.9999683);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,87,public void testCumulativeProbabilitydoubleM_PLUS_5SD() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,88,"testProbability(M + 5*SD, 0.9999997);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,91,public void testInverseCumulativeProbability001() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,92,"testValue(-2.226325, .001);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,95,public void testInverseCumulativeProbability010() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,96,"testValue(-1.156887, .010);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,99,public void testInverseCumulativeProbability025() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,100,"testValue(-0.6439496, .025);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,103,public void testInverseCumulativeProbability050() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,104,"testValue(-0.2027951, .050);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,107,public void testInverseCumulativeProbability100() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,108,"testValue(0.3058278, .100);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,111,public void testInverseCumulativeProbability900() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,112,"testValue(3.894172, .900);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,115,public void testInverseCumulativeProbability950() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,116,"testValue(4.402795, .950);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,119,public void testInverseCumulativeProbability975() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,120,"testValue(4.84395, .975);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,123,public void testInverseCumulativeProbability990() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,124,"testValue(5.356887, .990);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,127,public void testInverseCumulativeProbability999() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,128,"testValue(6.426325, .999);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,131,public void testGetMean() {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,132,"assertEquals(M, z.getMean(), 0);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,135,public void testSetMean() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,136,double mu = Math.random();
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,137,z.setMean(mu);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,138,"assertEquals(mu, z.getMean(), 0);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,139,"assertEquals(0.5d, z.cumulativeProbability(mu), PRECISION);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,142,public void testGetStandardDeviation() {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,143,"assertEquals(SD, z.getStandardDeviation(), 0);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,146,public void testSetStandardDeviation() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,147,double sigma = 0.1d + Math.random();
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,148,z.setStandardDeviation(sigma);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,149,"assertEquals(sigma, z.getStandardDeviation(), 0);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,150,"assertEquals(0.84134475, z.cumulativeProbability(z.getMean() + z.getStandardDeviation()), PRECISION );"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,153,"private void testProbability(double x, double expected) throws MathException {"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,154,double actual = Double.NaN;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,155,actual =  z.cumulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,156,"assertEquals(expected, actual, PRECISION);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,159,"private void testValue(double expected, double p) throws MathException {"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,160,double actual = z.inverseCumulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,161,"TestUtils.assertEquals(expected, actual, PRECISION);"
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,2,* Copyright 2004 The Apache Software Foundation
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,5,*  you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,6,*  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,13,*  See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,14,*  limitations under the License.
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,17,package org.apache.commons.math.special;
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,19,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,24,* @version $Revision: 1.1 $ $Date: 2004/05/05 19:54:58 $
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,26,public class ErfTest extends TestCase {
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,28,public void testErf0() throws MathException {
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,29,double actual = Erf.erf(0.0);
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,30,double expected = 0.0;
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,31,"assertEquals(expected, actual, 1.0e-5);"
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,34,public void testErf1960() throws MathException {
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,35,double x = 1.960 / Math.sqrt(2.0);
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,36,double actual = Erf.erf(x);
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,37,double expected = 0.95;
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,38,"assertEquals(expected, actual, 1.0e-5);"
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,40,actual = Erf.erf(-x);
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,41,expected = -expected;
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,42,"assertEquals(expected, actual, 1.0e-5);"
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,45,public void testErf2576() throws MathException {
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,46,double x = 2.576 / Math.sqrt(2.0);
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,47,double actual = Erf.erf(x);
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,48,double expected = 0.99;
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,49,"assertEquals(expected, actual, 1.0e-5);"
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,51,actual = Erf.erf(-x);
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,52,expected = -expected;
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,53,"assertEquals(expected, actual, 1.0e-5);"
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,56,public void testErf2807() throws MathException {
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,57,double x = 2.807 / Math.sqrt(2.0);
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,58,double actual = Erf.erf(x);
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,59,double expected = 0.995;
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,60,"assertEquals(expected, actual, 1.0e-5);"
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,62,actual = Erf.erf(-x);
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,63,expected = -expected;
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,64,"assertEquals(expected, actual, 1.0e-5);"
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,67,public void testErf3291() throws MathException {
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,68,double x = 3.291 / Math.sqrt(2.0);
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,69,double actual = Erf.erf(x);
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,70,double expected = 0.999;
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,71,"assertEquals(expected, actual, 1.0e-5);"
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,73,actual = Erf.erf(-x);
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,74,expected = -expected;
True,src/test/org/apache/commons/math/special/ErfTest.java,src/test/org/apache/commons/math/special/ErfTest.java,75,"assertEquals(expected, actual, 1.0e-5);"

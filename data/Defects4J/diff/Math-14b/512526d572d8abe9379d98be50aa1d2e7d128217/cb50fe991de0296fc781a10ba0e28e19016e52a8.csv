is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,18,package org.apache.commons.math.util;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,20,import java.util.Arrays;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,21,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,22,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,23,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,26,* Converter between unidimensional storage structure and multidimensional
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,27,* conceptual structure.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,28,* This utility will convert from indices in a multidimensional structure
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,29,"* to the corresponding index in a one-dimensional array. For example,"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,30,"* assuming that the ranges (in 3 dimensions) of indices are 2, 4 and 3,"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,31,"* the following correspondences, between 3-tuples indices and unidimensional"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,32,"* indices, will hold:"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,33,* <ul>
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,34,"*  <li>(0, 0, 0) corresponds to 0</li>"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,35,"*  <li>(0, 0, 1) corresponds to 1</li>"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,36,"*  <li>(0, 0, 2) corresponds to 2</li>"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,37,"*  <li>(0, 1, 0) corresponds to 3</li>"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,38,*  <li>...</li>
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,39,"*  <li>(1, 0, 0) corresponds to 12</li>"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,40,*  <li>...</li>
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,41,"*  <li>(1, 3, 2) corresponds to 23</li>"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,42,* </ul>
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,44,public class MultidimensionalCounter implements Iterable<Integer> {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,46,* Number of dimensions.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,48,private final int dimension;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,50,* Offset for each dimension.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,52,private final int[] uniCounterOffset;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,54,* Counter sizes.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,56,private final int[] size;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,58,* Total number of (one-dimensional) slots.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,60,private final int totalSize;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,62,* Index of last dimension.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,64,private final int last;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,67,* Perform iteration over the multidimensional counter.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,69,public class Iterator implements java.util.Iterator<Integer> {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,71,* Multidimensional counter.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,73,private final int[] counter = new int[dimension];
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,75,* Unidimensional counter.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,77,private int count = -1;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,80,* Create an iterator (see {@link MultidimensionalCounter#iterator()}.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,82,Iterator() {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,83,counter[last] = -1;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,87,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,89,public boolean hasNext() {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,90,for (int i = 0; i < dimension; i++) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,91,if (counter[i] != size[i] - 1) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,92,return true;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,95,return false;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,99,* @return the unidimensional count after the counter has been
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,100,* incremented by {@code 1}.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,102,public Integer next() {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,103,for (int i = last; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,104,if (counter[i] == size[i] - 1) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,105,counter[i] = 0;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,106,} else {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,107,++counter[i];
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,108,break;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,112,return ++count;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,116,* Get the current unidimensional counter slot.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,118,* @return the index within the unidimensionl counter.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,120,public int getCount() {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,121,return count;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,124,* Get the current multidimensional counter slots.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,126,* @return the indices within the multidimensional counter.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,128,public int[] getCounts() {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,129,"return Arrays.copyOf(counter, dimension);"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,133,* Get the current count in the selected dimension.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,135,* @param dim Dimension index.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,136,* @return the count at the corresponding index for the current state
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,137,* of the iterator.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,138,* @throws IndexOutOfBoundsException if {@code index} is not in the
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,139,* correct interval (as defined by the length of the argument in the
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,140,* {@link MultidimensionalCounter#MultidimensionalCounter(int[])
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,141,* constructor of the enclosing class}).
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,143,public int getCount(int dim) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,144,return counter[dim];
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,148,* @throws UnsupportedOperationException.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,150,public void remove() {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,151,throw new UnsupportedOperationException();
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,156,* Create a counter.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,158,* @param size Counter sizes (number of slots in each dimension).
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,159,* @throws {@link NotStrictlyPositiveException} if one of the sizes is
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,160,* negative or zero.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,162,public MultidimensionalCounter(int ... size) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,163,dimension = size.length;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,164,"this.size = Arrays.copyOf(size, dimension);"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,166,uniCounterOffset = new int[dimension];
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,168,last = dimension - 1;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,169,int tS = size[last];
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,170,for (int i = 0; i < last; i++) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,171,int count = 1;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,172,for (int j = i + 1; j < dimension; j++) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,173,count *= size[j];
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,175,uniCounterOffset[i] = count;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,176,tS *= size[i];
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,178,uniCounterOffset[last] = 0;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,180,if (tS <= 0) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,181,throw new NotStrictlyPositiveException(tS);
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,184,totalSize = tS;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,188,* Create an iterator over this counter.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,190,* @return the iterator.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,192,public Iterator iterator() {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,193,return new Iterator();
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,197,* Get the number of dimensions of the multidimensional counter.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,199,* @return the number of dimensions.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,201,public int getDimension() {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,202,return dimension;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,206,* Convert to multidimensional counter.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,208,* @param index Index in unidimensional counter.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,209,* @returns the multidimensional counts.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,210,* @throws {@link OutOfRangeException} if {@code index} is not between
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,211,* {@code 0} and the value returned by {@link #getSize()} (excluded).
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,213,public int[] getCounts(int index) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,214,if (index < 0
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,215,|| index >= totalSize) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,216,"throw new OutOfRangeException(index, 0, totalSize);"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,219,final int[] indices = new int[dimension];
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,221,int count = 0;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,222,for (int i = 0; i < last; i++) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,223,int idx = 0;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,224,final int offset = uniCounterOffset[i];
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,225,while (count <= index) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,226,count += offset;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,227,++idx;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,229,--idx;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,230,count -= offset;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,231,indices[i] = idx;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,234,int idx = 1;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,235,while (count < index) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,236,count += idx;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,237,++idx;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,239,--idx;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,240,indices[last] = idx;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,242,return indices;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,246,* Convert to unidimensional counter.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,248,* @param c Indices in multidimensional counter.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,249,* @return the index within the unidimensionl counter.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,250,* @throws {@link DimensionMismatchException} if the size of {@code c}
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,251,* does not match the size of the array given in the contructor.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,252,* @throws {@link OutOfRangeException} if a value of {@code c} is not in
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,253,"* the range of the corresponding dimension, as defined in the"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,254,* {@link #MultidimensionalCounter(int[]) constructor}.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,256,public int getCount(int ... c) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,257,if (c.length != dimension) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,258,"throw new DimensionMismatchException(c.length, dimension);"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,260,int count = 0;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,261,for (int i = 0; i < dimension; i++) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,262,final int index = c[i];
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,263,if (index < 0
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,264,|| index >= size[i]) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,265,"throw new OutOfRangeException(index, 0, size[i] - 1);"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,267,count += uniCounterOffset[i] * c[i];
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,269,return count + c[last];
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,273,* Get the total number of elements.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,275,* @return the total size of the unidimensional counter.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,277,public int getSize() {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,278,return totalSize;
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,281,* Get the number of multidimensional counter slots in each dimension.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,283,* @return the sizes of the multidimensional counter in each dimension.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,285,public int[] getSizes() {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,286,"return Arrays.copyOf(size, dimension);"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,290,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,292,public String toString() {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,293,final StringBuilder sb = new StringBuilder();
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,294,for (int i = 0; i < dimension; i++) {
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,295,"sb.append(""["").append(getCount(i)).append(""]"");"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,297,return sb.toString();
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,18,package org.apache.commons.math.util;
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,20,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,21,import org.apache.commons.math.exception.OutOfRangeException;
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,22,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,24,import org.junit.Test;
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,29,public class MultidimensionalCounterTest {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,30,@Test
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,31,public void testPreconditions() {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,32,MultidimensionalCounter c;
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,34,try {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,35,"c = new MultidimensionalCounter(0, 1);"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,36,"Assert.fail(""NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,37,} catch (NotStrictlyPositiveException e) {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,38,// Expected.
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,40,try {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,41,"c = new MultidimensionalCounter(2, 0);"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,42,"Assert.fail(""NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,43,} catch (NotStrictlyPositiveException e) {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,44,// Expected.
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,46,try {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,47,"c = new MultidimensionalCounter(-1, 1);"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,48,"Assert.fail(""NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,49,} catch (NotStrictlyPositiveException e) {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,50,// Expected.
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,53,"c = new MultidimensionalCounter(2, 3);"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,54,try {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,55,"c.getCount(1, 1, 1);"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,56,"Assert.fail(""DimensionMismatchException expected"");"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,57,} catch (DimensionMismatchException e) {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,58,// Expected.
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,60,try {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,61,"c.getCount(3, 1);"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,62,"Assert.fail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,63,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,64,// Expected.
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,66,try {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,67,"c.getCount(0, -1);"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,68,"Assert.fail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,69,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,70,// Expected.
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,72,try {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,73,c.getCounts(-1);
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,74,"Assert.fail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,75,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,76,// Expected.
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,78,try {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,79,c.getCounts(6);
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,80,"Assert.fail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,81,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,82,// Expected.
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,86,@Test
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,87,public void testIteratorPreconditions() {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,88,"MultidimensionalCounter.Iterator iter = (new MultidimensionalCounter(2, 3)).iterator();"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,89,try {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,90,iter.getCount(-1);
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,91,"Assert.fail(""IndexOutOfBoundsException expected"");"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,92,} catch (IndexOutOfBoundsException e) {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,93,// Expected.
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,95,try {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,96,iter.getCount(2);
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,97,"Assert.fail(""IndexOutOfBoundsException expected"");"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,98,} catch (IndexOutOfBoundsException e) {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,99,// Expected.
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,103,@Test
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,104,public void testMulti2UniConversion() {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,105,"final MultidimensionalCounter c = new MultidimensionalCounter(2, 4, 5);"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,106,"Assert.assertEquals(c.getCount(1, 2, 3), 33);"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,109,@Test
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,110,public void testAccessors() {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,111,"final int[] originalSize = new int[] {2, 6, 5};"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,112,final MultidimensionalCounter c = new MultidimensionalCounter(originalSize);
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,113,final int nDim = c.getDimension();
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,114,"Assert.assertEquals(nDim, originalSize.length);"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,116,final int[] size = c.getSizes();
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,117,for (int i = 0; i < nDim; i++) {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,118,"Assert.assertEquals(originalSize[i], size[i]);"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,122,@Test
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,123,public void testIterationConsistency() {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,124,"final MultidimensionalCounter c = new MultidimensionalCounter(2, 3, 2);"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,125,final int[][] expected = new int[][] {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,126,"{ 0, 0, 0 },"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,127,"{ 0, 0, 1 },"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,128,"{ 0, 1, 0 },"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,129,"{ 0, 1, 1 },"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,130,"{ 0, 2, 0 },"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,131,"{ 0, 2, 1 },"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,132,"{ 1, 0, 0 },"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,133,"{ 1, 0, 1 },"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,134,"{ 1, 1, 0 },"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,135,"{ 1, 1, 1 },"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,136,"{ 1, 2, 0 },"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,137,"{ 1, 2, 1 }"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,140,final int totalSize = c.getSize();
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,141,final int nDim = c.getDimension();
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,142,final MultidimensionalCounter.Iterator iter = c.iterator();
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,143,for (int i = 0; i < totalSize; i++) {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,144,if (!iter.hasNext()) {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,145,"Assert.fail(""Too short"");"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,147,final int uniDimIndex = iter.next();
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,148,"Assert.assertEquals(""Wrong iteration at "" + i, i, uniDimIndex);"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,150,for (int dimIndex = 0; dimIndex < nDim; dimIndex++) {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,151,"Assert.assertEquals(""Wrong multidimensional index for ["" + i + ""]["" + dimIndex + ""]"","
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,152,"expected[i][dimIndex], iter.getCount(dimIndex));"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,155,"Assert.assertEquals(""Wrong unidimensional index for ["" + i + ""]"","
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,156,"c.getCount(expected[i]), uniDimIndex);"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,158,final int[] indices = c.getCounts(uniDimIndex);
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,159,for (int dimIndex = 0; dimIndex < nDim; dimIndex++) {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,160,"Assert.assertEquals(""Wrong multidimensional index for ["" + i + ""]["" + dimIndex + ""]"","
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,161,"expected[i][dimIndex], indices[dimIndex]);"
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,165,if (iter.hasNext()) {
True,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,166,"Assert.fail(""Too long"");"

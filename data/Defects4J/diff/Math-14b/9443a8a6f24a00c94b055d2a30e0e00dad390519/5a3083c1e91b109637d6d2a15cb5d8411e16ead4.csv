is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,28,mport org.apache.commons.math.linear.DefaultRealMatrixChangingVisitor;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,33,mport org.apache.commons.math.linear.MatrixVisitorException;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,34,mport org.apache.commons.math.linear.RealMatrix;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,304,inal RealMatrix highOrder) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,305,ighOrder.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,306,** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,307,Override
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,308,"ublic double visit(int row, int column, double value)"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,309,hrows MatrixVisitorException {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,310,eturn value + c1[row] * (start[column] - end[column]);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,301,final Array2DRowRealMatrix highOrder) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,302,final double[][] data = highOrder.getDataRef();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,303,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,304,final double[] dataI = data[i];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,305,final double c1I = c1[i];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,306,for (int j = 0; j < dataI.length; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,307,dataI[j] += c1I * (start[j] - end[j]);

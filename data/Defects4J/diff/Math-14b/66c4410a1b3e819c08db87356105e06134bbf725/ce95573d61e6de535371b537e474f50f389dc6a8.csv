is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,636,* This class is an implementation of {@link RealVector} with read-only
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,637,* access.
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,638,"* It wraps any {@link RealVector}, and exposes all methods which do not"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,639,* modify it. Invoking methods which should normally result in the
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,640,* modification of the calling {@link RealVector} results in an
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,641,* {@link MathUnsupportedOperationException}. It should be noted that
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,642,* {@link UnmodifiableVector} is <em>not</em> immutable.
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,644,private static final class UnmodifiableVector implements RealVector {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,645,/** The vector for which an unmodifiable view is provided. */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,646,private final RealVector v;
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,649,* Creates a view of the given vector.
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,651,* @param v Vector wrapped in {@code this} view.
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,653,public UnmodifiableVector(RealVector v) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,654,this.v = v;
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,657,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,658,public RealVector mapToSelf(UnivariateRealFunction function) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,659,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,662,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,663,public RealVector map(UnivariateRealFunction function) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,664,return v.map(function);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,667,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,668,public Iterator<Entry> iterator() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,669,final Iterator<Entry> i = v.iterator();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,670,return new Iterator<Entry>() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,671,/** The current entry. */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,672,private final UnmodifiableEntry e = new UnmodifiableEntry();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,674,public boolean hasNext() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,675,return i.hasNext();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,678,public Entry next() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,679,e.setIndex(i.next().getIndex());
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,680,return e;
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,683,public void remove() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,684,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,689,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,690,public Iterator<Entry> sparseIterator() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,691,final Iterator<Entry> i = v.sparseIterator();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,692,return new Iterator<Entry>() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,693,/** The current entry. */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,694,private final UnmodifiableEntry e = new UnmodifiableEntry();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,696,public boolean hasNext() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,697,return i.hasNext();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,700,public Entry next() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,701,e.setIndex(i.next().getIndex());
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,702,return e;
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,705,public void remove() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,706,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,711,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,712,public RealVector copy() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,713,return v.copy();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,716,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,717,public RealVector add(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,718,return v.add(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,721,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,722,public RealVector add(double[] w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,723,return v.add(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,726,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,727,public RealVector subtract(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,728,return v.subtract(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,731,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,732,public RealVector subtract(double[] w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,733,return v.subtract(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,736,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,737,public RealVector mapAdd(double d) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,738,return v.mapAdd(d);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,741,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,742,public RealVector mapAddToSelf(double d) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,743,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,746,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,747,public RealVector mapSubtract(double d) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,748,return v.mapSubtract(d);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,751,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,752,public RealVector mapSubtractToSelf(double d) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,753,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,756,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,757,public RealVector mapMultiply(double d) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,758,return v.mapMultiply(d);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,761,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,762,public RealVector mapMultiplyToSelf(double d) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,763,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,766,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,767,public RealVector mapDivide(double d) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,768,return v.mapDivide(d);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,771,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,772,public RealVector mapDivideToSelf(double d) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,773,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,776,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,777,public RealVector ebeMultiply(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,778,return v.ebeMultiply(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,781,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,782,public RealVector ebeMultiply(double[] w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,783,return v.ebeMultiply(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,786,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,787,public RealVector ebeDivide(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,788,return v.ebeDivide(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,791,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,792,public RealVector ebeDivide(double[] w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,793,return v.ebeDivide(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,796,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,797,public double[] getData() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,798,// TODO It is not specified in the javadoc that getData should
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,799,// return a
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,800,// deep copy
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,801,return v.getData();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,804,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,805,public double dotProduct(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,806,return v.dotProduct(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,809,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,810,public double dotProduct(double[] w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,811,return v.dotProduct(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,814,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,815,public double cosine(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,816,return v.cosine(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,819,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,820,public double cosine(double[] w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,821,return v.cosine(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,824,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,825,public double getNorm() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,826,return v.getNorm();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,829,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,830,public double getL1Norm() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,831,return v.getL1Norm();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,834,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,835,public double getLInfNorm() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,836,return v.getLInfNorm();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,839,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,840,public double getDistance(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,841,return v.getDistance(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,844,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,845,public double getDistance(double[] w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,846,return v.getDistance(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,849,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,850,public double getL1Distance(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,851,return v.getL1Distance(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,854,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,855,public double getL1Distance(double[] w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,856,return v.getL1Distance(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,859,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,860,public double getLInfDistance(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,861,return v.getLInfDistance(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,864,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,865,public double getLInfDistance(double[] w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,866,return v.getLInfDistance(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,869,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,870,public RealVector unitVector() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,871,return v.unitVector();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,874,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,875,public void unitize() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,876,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,879,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,880,public RealVector projection(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,881,return v.projection(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,884,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,885,public RealVector projection(double[] w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,886,return v.projection(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,889,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,890,public RealMatrix outerProduct(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,891,return v.outerProduct(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,894,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,895,public RealMatrix outerProduct(double[] w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,896,return v.outerProduct(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,899,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,900,public double getEntry(int index) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,901,return v.getEntry(index);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,904,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,905,"public void setEntry(int index, double value) {"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,906,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,909,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,910,public int getDimension() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,911,return v.getDimension();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,914,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,915,public RealVector append(RealVector w) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,916,return v.append(w);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,919,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,920,public RealVector append(double d) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,921,return v.append(d);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,924,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,925,public RealVector append(double[] a) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,926,return v.append(a);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,929,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,930,"public RealVector getSubVector(int index, int n) {"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,931,"return v.getSubVector(index, n);"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,934,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,935,"public void setSubVector(int index, RealVector w) {"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,936,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,939,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,940,"public void setSubVector(int index, double[] w) {"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,941,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,944,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,945,public void set(double value) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,946,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,949,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,950,public double[] toArray() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,951,return v.toArray();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,954,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,955,public boolean isNaN() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,956,return v.isNaN();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,959,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,960,public boolean isInfinite() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,961,return v.isInfinite();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,964,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,965,"public RealVector combine(double a, double b, double[] y) {"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,966,"return v.combine(a, b, y);"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,969,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,970,"public RealVector combine(double a, double b, RealVector y) {"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,971,"return v.combine(a, b, y);"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,974,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,975,"public RealVector combineToSelf(double a, double b, double[] y) {"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,976,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,979,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,980,"public RealVector combineToSelf(double a, double b, RealVector y) {"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,981,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,984,/** An entry in the vector. */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,985,private class UnmodifiableEntry extends Entry {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,986,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,987,@Override
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,988,public double getValue() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,989,return v.getEntry(getIndex());
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,992,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,993,@Override
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,994,public void setValue(double newValue) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,995,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1001,* Returns an unmodifiable view of the specified vector.
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1002,* The returned vector has read-only access. An attempt to modify it will
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1003,"* result in a {@link MathUnsupportedOperationException}. However, the"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1004,"* returned vector is <em>not</em> immutable, since any modification of"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1005,* {@code v} will also change the returned view.
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1006,"* For example, in the following piece of code"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1007,* <pre>
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1008,*     RealVector v = new ArrayRealVector(2);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1009,*     RealVector w = RealVector.unmodifiableRealVector(v);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1010,"*     v.setEntry(0, 1.2);"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1011,"*     v.setEntry(1, -3.4);"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1012,* </pre>
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1013,* the changes will be seen in the {@code w} view of {@code v}.
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1015,* @param v Vector for which an unmodifiable view is to be returned.
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1016,* @return an unmodifiable view of {@code v}.
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1018,public static RealVector unmodifiableRealVector(final RealVector v) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,1019,return new UnmodifiableVector(v);
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,3,* contributor license agreements. See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,7,* the License. You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,9,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,17,package org.apache.commons.math.linear;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,20,* This is an implementation of {@link UnmodifiableRealVectorAbstractTest} for
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,21,* unmodifiable views of {@link ArrayRealVectorTest}.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,23,* @version $Id$
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,25,public class UnmodifiableArrayRealVectorTest
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,26,extends UnmodifiableRealVectorAbstractTest {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,28,* Returns a random vector of type {@link ArrayRealVector}.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,30,* @return a new random {@link ArrayRealVector}.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,32,@Override
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,33,public RealVector createVector() {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,34,ArrayRealVector v = new ArrayRealVector(DIM);
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,35,for (int i = 0; i < DIM; i++) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,36,"v.setEntry(i, RANDOM.nextDouble());"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableArrayRealVectorTest.java,38,return v;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,18,package org.apache.commons.math.linear;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,21,* This is an implementation of {@link UnmodifiableRealVectorAbstractTest} for
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,22,* unmodifiable views of {@link OpenMapRealVector}.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,24,* @version $Id$
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,26,public class UnmodifiableOpenMapRealVectorTest
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,27,extends UnmodifiableRealVectorAbstractTest {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,28,/** To ensure sufficient sparsity. */
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,29,public static final double PROBABILITY_OF_ZERO = 0.5;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,32,* Returns a random vector of type {@link ArrayRealVector}.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,34,* @return a new random {@link ArrayRealVector}.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,36,@Override
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,37,public RealVector createVector() {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,38,"OpenMapRealVector v = new OpenMapRealVector(DIM, EPS);"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,39,for (int i = 0; i < DIM; i++) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,40,if (RANDOM.nextDouble() > PROBABILITY_OF_ZERO) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,41,"v.setEntry(i, RANDOM.nextDouble());"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableOpenMapRealVectorTest.java,44,return v;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,3,* contributor license agreements. See the NOTICE file distributed with this
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,4,* work for additional information regarding copyright ownership. The ASF
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,5,"* licenses this file to You under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,6,"* ""License""); you may not use this file except in compliance with the License."
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,7,* You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,9,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,13,"* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,14,* License for the specific language governing permissions and limitations under
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,15,* the License.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,17,package org.apache.commons.math.linear;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,19,import java.lang.reflect.InvocationTargetException;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,20,import java.lang.reflect.Method;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,21,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,22,import java.util.Iterator;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,23,import java.util.Random;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,25,import junit.framework.Assert;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,27,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,28,import org.apache.commons.math.analysis.function.Sin;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,29,import org.apache.commons.math.exception.MathUnsupportedOperationException;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,30,import org.apache.commons.math.linear.RealVector.Entry;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,31,import org.junit.Test;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,34,* This is an abstract test of the {@link AbstractRealVector.UnmodifiableVector}
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,35,* implementation. These unmodifiable vectors decorate a (modifiable)
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,36,"* {@link RealVector}; therefore, a new implementation of this abstract test"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,37,* should be considered for each implementation of {@link RealVector}.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,39,* @version $Id$
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,42,public abstract class UnmodifiableRealVectorAbstractTest {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,43,/** The dimension of the randomly generated vectors. */
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,44,protected static final int DIM = 100;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,45,/** Absolute tolerance. */
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,46,protected static final double EPS = 10 * Math.ulp(1d);
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,48,* The list of methods which are excluded from the general test
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,49,* {@link #testAllButExcluded()}.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,51,protected static final ArrayList<String> EXCLUDE;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,52,/** The random number generator (always initialized with the same seed. */
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,53,protected static final Random RANDOM;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,55,static {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,56,EXCLUDE = new ArrayList<String>();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,57,"EXCLUDE.add(""getEntry"");"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,58,"EXCLUDE.add(""setEntry"");"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,59,"EXCLUDE.add(""getSubVector"");"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,60,"EXCLUDE.add(""setSubVector"");"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,61,"EXCLUDE.add(""iterator"");"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,62,"EXCLUDE.add(""sparseIterator"");"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,63,RANDOM = new Random(20110813);
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,67,* Returns {@code true} if the specified {@code double} are equal (within a
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,68,* given tolerance).
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,70,* @param x First {@code double}.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,71,* @param y Second {@code double}.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,72,* @return {@code true} if {@code x} and {@code y} are equal.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,74,"public static boolean equals(final double x, final double y) {"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,75,if (x == y) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,76,return true;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,77,} else if (Math.abs(x) <= EPS) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,78,return Math.abs(y) <= EPS;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,79,} else if (Math.abs(y) <= EPS) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,80,return Math.abs(x) <= EPS;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,81,} else {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,82,"return Math.abs(x - y) <= EPS * Math.min(Math.abs(x), Math.abs(y));"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,87,* Returns {@code true} if the specified {@code double} arrays are equal
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,88,* (within a given tolerance).
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,90,* @param x First array.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,91,* @param y Second array.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,92,* @return {@code true} if {@code x} and {@code y} are equal.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,94,"public static boolean equals(final double[] x, final double[] y) {"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,95,if (x.length != y.length) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,96,return false;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,98,final int n = x.length;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,99,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,100,"if (!equals(x[i], y[i])) {"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,101,return false;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,104,return true;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,108,* Returns {@code true} if the specified {@code RealVector} are equal
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,109,* (within a given tolerance).
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,111,* @param x First vector.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,112,* @param y Second vector.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,113,* @return {@code true} if {@code x} and {@code y} are equal.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,115,"public static boolean equals(final RealVector x, final RealVector y) {"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,116,if (x.getDimension() != y.getDimension()) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,117,return false;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,119,final int n = x.getDimension();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,120,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,121,"if (!equals(x.getEntry(i), y.getEntry(i))) {"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,122,return false;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,125,return true;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,129,* Returns {@code true} if the specified {@code RealVector} is equal to the
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,130,* specified {@code double} array (within a given tolerance).
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,132,* @param x Vector.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,133,* @param y Array.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,134,* @return {@code true} if {@code x} and {@code y} are equal.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,136,"public static boolean equals(final RealVector x, final double[] y) {"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,137,if (x.getDimension() != y.length) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,138,return false;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,140,final int n = x.getDimension();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,141,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,142,"if (!equals(x.getEntry(i), y[i])) {"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,143,return false;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,146,return true;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,150,* Returns {@code true} if the specified {@code RealMatrix} are equal
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,151,* (within a given tolerance).
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,153,* @param x First matrix.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,154,* @param y Second matrix.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,155,* @return {@code true} if {@code x} and {@code y} are equal.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,157,"public static boolean equals(final RealMatrix x, final RealMatrix y) {"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,158,if (x.getRowDimension() != y.getRowDimension()) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,159,return false;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,161,if (x.getColumnDimension() != y.getColumnDimension()) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,162,return false;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,164,final int rows = x.getRowDimension();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,165,final int cols = x.getColumnDimension();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,166,for (int i = 0; i < rows; i++) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,167,for (int j = 0; j < cols; j++) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,168,"if (!equals(x.getEntry(i, j), y.getEntry(i, j))) {"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,169,return false;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,173,return true;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,177,* Returns {@code true} if the specified {@code Object} are equal.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,179,* @param x First object.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,180,* @param y Second object.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,181,* @return {@code true} if {@code x} and {@code y} are equal.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,182,* @throws IllegalArgumentException if {@code x} and {@code y} could
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,183,* not be compared.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,185,"public static boolean equals(final Object x, final Object y) {"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,186,if (x instanceof Boolean) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,187,if (y instanceof Boolean) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,188,return ((Boolean) x).booleanValue() == ((Boolean) y)
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,189,.booleanValue();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,190,} else {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,191,return false;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,194,if (x instanceof Integer) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,195,if (y instanceof Integer) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,196,return ((Integer) x).intValue() == ((Integer) y).intValue();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,197,} else {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,198,return false;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,200,} else if (x instanceof Double) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,201,if (y instanceof Double) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,202,"return equals(((Double) x).doubleValue(),"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,203,((Double) y).doubleValue());
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,204,} else {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,205,return false;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,207,} else if (x instanceof double[]) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,208,if (y instanceof double[]) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,209,"return equals((double[]) x, (double[]) y);"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,210,} else if (y instanceof RealVector) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,211,"return equals((RealVector) y, (double[]) x);"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,212,} else {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,213,return false;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,215,} else if (x instanceof RealVector) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,216,if (y instanceof double[]) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,217,"return equals((RealVector) x, (double[]) y);"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,218,} else if (y instanceof RealVector) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,219,"return equals((RealVector) x, (RealVector) y);"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,220,} else {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,221,return false;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,223,} else if (x instanceof RealMatrix) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,224,if (y instanceof RealMatrix) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,225,"return equals((RealMatrix) x, (RealMatrix) y);"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,226,} else {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,227,return false;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,229,} else {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,230,"throw new IllegalArgumentException(""could not compare "" + x + "", """
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,231,+ y);
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,236,* Creates a new random vector of a specified type. This vector is then to
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,237,* be wrapped in a {@link AbstractRealVector.UnmodifiableVector}.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,239,* @return a new random vector.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,241,public abstract RealVector createVector();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,244,* Creates a new random object of the specified type.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,246,* @param c
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,247,*            the class of the object to be created.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,248,* @return a new random object.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,249,* @throws IllegalArgumentException
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,250,*             if the specified class is not recognized by this method.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,252,public Object createParameter(final Class<?> c) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,253,if (c == Integer.TYPE) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,254,return Integer.valueOf(RANDOM.nextInt());
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,255,} else if (c == Double.TYPE) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,256,return Double.valueOf(RANDOM.nextDouble());
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,257,} else if (c == double[].class) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,258,final double[] v = new double[DIM];
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,259,for (int i = 0; i < DIM; i++) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,260,v[i] = RANDOM.nextDouble();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,262,return v;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,263,} else if (c.isAssignableFrom(RealVector.class)) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,264,return createVector();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,265,} else if (c.isAssignableFrom(UnivariateRealFunction.class)) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,266,return new Sin();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,267,} else {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,268,"throw new IllegalArgumentException(""could not create "" + c);"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,273,* This is the general test of most methods in
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,274,* {@link AbstractRealVector.UnmodifiableVector}. It works as follows.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,275,"* First, an unmodifiable view of a copy of the specified random vector"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,276,* {@code u} is created: this defines {@code v}. Then the <em>same</em>
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,277,"* method {@code m} is invoked on {@code u} and {@code v}, with randomly"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,278,* generated parameters {@code args}.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,279,* If it turns out that {@code u} has changed after the call of method
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,280,"* {@code m}, then this test checks that the call of this method on"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,281,* {@code v} resulted in a {@link MathUnsupportedOperationException}. If
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,282,"* {@code u} was not modified, then this test checks that the results"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,283,* returned by the call of method {@code m} on {@code u} and {@code v}
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,284,* returned the same result.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,286,* @param m Method to be tested.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,287,* @param u Random vector from which the unmodifiable view is to be
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,288,*constructed.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,289,* @param args Arguments to be passed to method {@code m}.
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,291,"private void callMethod(final Method m, final RealVector u,"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,292,"final Object... args) throws IllegalAccessException,"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,293,"IllegalArgumentException, InvocationTargetException {"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,294,final RealVector uu = u.copy();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,295,final RealVector v = AbstractRealVector
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,296,.unmodifiableRealVector(u.copy());
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,297,"Object exp = m.invoke(u, args);"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,298,"if (equals(uu, u)) {"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,299,"Object act = m.invoke(v, args);"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,300,Assert.assertTrue(m.toGenericString()
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,301,"+ "", unmodifiable vector has changed"", equals(uu, v));"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,302,"Assert.assertTrue(m.toGenericString() + "", wrong result"","
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,303,"equals(exp, act));"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,305,} else {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,306,boolean flag = false;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,307,try {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,308,"m.invoke(v, args);"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,309,} catch (InvocationTargetException e) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,310,if (e.getCause() instanceof MathUnsupportedOperationException) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,311,flag = true;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,314,"Assert.assertTrue(m.toGenericString()+"", exception should have been thrown"", flag);"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,319,"* This test calls {@link #callMethod(Method, RealVector, Object...)} on"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,320,* every method defined in interface {@link RealVector}. It generates the
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,321,* appropriate random arguments. Some methods are manually excluded (see
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,322,"* {@link #EXCLUDE}), they must be handled by separate tests."
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,324,@Test
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,325,"public void testAllButExcluded() throws IllegalAccessException,"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,326,"IllegalArgumentException, InvocationTargetException {"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,327,Method[] method = RealVector.class.getMethods();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,328,for (int i = 0; i < method.length; i++) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,329,Method m = method[i];
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,330,if (!EXCLUDE.contains(m.getName())) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,331,RealVector u = (RealVector) createParameter(RealVector.class);
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,332,Class<?>[] paramType = m.getParameterTypes();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,333,Object[] param = new Object[paramType.length];
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,334,for (int j = 0; j < paramType.length; j++) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,335,param[j] = createParameter(paramType[j]);
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,337,"callMethod(m, u, param);"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,342,@Test
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,343,public void testGetEntry() {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,344,RealVector u = createVector();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,345,RealVector v = AbstractRealVector.unmodifiableRealVector(u);
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,346,for (int i = 0; i < DIM; i++) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,347,"Assert.assertTrue(equals(u.getEntry(i), v.getEntry(i)));"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,351,@Test(expected = MathUnsupportedOperationException.class)
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,352,public void testSetEntry() {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,353,RealVector u = createVector();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,354,RealVector v = AbstractRealVector.unmodifiableRealVector(u);
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,355,for (int i = 0; i < DIM; i++) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,356,"v.setEntry(i, 0d);"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,360,@Test
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,361,public void testGetSubVector() {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,362,RealVector u = createVector();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,363,RealVector v = AbstractRealVector.unmodifiableRealVector(u);
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,364,for (int i = 0; i < DIM; i++) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,365,for (int n = 1; n < DIM - i; n++) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,366,"RealVector exp = u.getSubVector(i, n);"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,367,"RealVector act = v.getSubVector(i, n);"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,368,"Assert.assertTrue(equals(exp, act));"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,373,@Test(expected = MathUnsupportedOperationException.class)
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,374,public void testSetSubVector() {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,375,RealVector u = createVector();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,376,RealVector v = AbstractRealVector.unmodifiableRealVector(u);
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,377,"v.setSubVector(0, new ArrayRealVector());"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,380,@Test
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,381,public void testIterator() {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,382,RealVector u = createVector();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,383,Iterator<Entry> i = u.iterator();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,384,RealVector v = AbstractRealVector.unmodifiableRealVector(u.copy());
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,385,Iterator<Entry> j = v.iterator();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,386,boolean flag;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,387,while (i.hasNext()) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,388,Assert.assertTrue(j.hasNext());
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,389,Entry exp = i.next();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,390,Entry act = j.next();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,391,"Assert.assertTrue(equals(exp.getIndex(), act.getIndex()));"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,392,"Assert.assertTrue(equals(exp.getValue(), act.getValue()));"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,393,exp.setIndex(RANDOM.nextInt(DIM));
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,394,act.setIndex(RANDOM.nextInt(DIM));
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,395,flag = false;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,396,try {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,397,act.setValue(RANDOM.nextDouble());
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,398,} catch (MathUnsupportedOperationException e) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,399,flag = true;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,401,"Assert.assertTrue(""exception should have been thrown"", flag);"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,403,Assert.assertFalse(j.hasNext());
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,406,@Test
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,407,public void testSparseIterator() {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,408,RealVector u = createVector();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,409,Iterator<Entry> i = u.sparseIterator();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,410,RealVector v = AbstractRealVector.unmodifiableRealVector(u.copy());
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,411,Iterator<Entry> j = v.sparseIterator();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,412,boolean flag;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,413,while (i.hasNext()) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,414,Assert.assertTrue(j.hasNext());
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,415,Entry exp = i.next();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,416,Entry act = j.next();
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,417,"Assert.assertTrue(equals(exp.getIndex(), act.getIndex()));"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,418,"Assert.assertTrue(equals(exp.getValue(), act.getValue()));"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,419,exp.setIndex(RANDOM.nextInt(DIM));
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,420,act.setIndex(RANDOM.nextInt(DIM));
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,421,flag = false;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,422,try {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,423,act.setValue(RANDOM.nextDouble());
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,424,} catch (MathUnsupportedOperationException e) {
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,425,flag = true;
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,427,"Assert.assertTrue(""exception should have been thrown"", flag);"
True,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,src/test/java/org/apache/commons/math/linear/UnmodifiableRealVectorAbstractTest.java,429,Assert.assertFalse(j.hasNext());

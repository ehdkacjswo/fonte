is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,52,** Stop indicator.
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,53, <p>This value should be used as the return value of the {@link
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,54, #eventOccurred eventOccurred} method when the integration should be
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,55, stopped after the event ending the current step.</p>
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,57,nt STOP = 0;
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,59,** Reset state indicator.
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,60, <p>This value should be used as the return value of the {@link
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,61, #eventOccurred eventOccurred} method when the integration should
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,62," go on after the event ending the current step, with a new state"
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,63, vector (which will be retrieved thanks to the {@link #resetState
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,64, resetState} method).</p>
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,66,nt RESET_STATE = 1;
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,68,** Reset derivatives indicator.
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,69, <p>This value should be used as the return value of the {@link
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,70, #eventOccurred eventOccurred} method when the integration should
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,71," go on after the event ending the current step, with a new derivatives"
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,72, vector (which will be retrieved thanks to the {@link
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,73, org.apache.commons.math.ode.FirstOrderDifferentialEquations#computeDerivatives}
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,74, method).</p>
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,76,nt RESET_DERIVATIVES = 2;
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,78,** Continue indicator.
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,79, <p>This value should be used as the return value of the {@link
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,80, #eventOccurred eventOccurred} method when the integration should go
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,81, on after the event ending the current step.</p>
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,83,nt CONTINUE = 3;
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,52,/** Enumerate for actions to be performed when an event occurs. */
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,53,public enum Action {
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,55,/** Stop indicator.
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,56,* <p>This value should be used as the return value of the {@link
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,57,* #eventOccurred eventOccurred} method when the integration should be
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,58,* stopped after the event ending the current step.</p>
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,60,"STOP,"
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,62,/** Reset state indicator.
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,63,* <p>This value should be used as the return value of the {@link
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,64,* #eventOccurred eventOccurred} method when the integration should
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,65,"* go on after the event ending the current step, with a new state"
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,66,* vector (which will be retrieved thanks to the {@link #resetState
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,67,* resetState} method).</p>
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,69,"RESET_STATE,"
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,71,/** Reset derivatives indicator.
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,72,* <p>This value should be used as the return value of the {@link
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,73,* #eventOccurred eventOccurred} method when the integration should
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,74,"* go on after the event ending the current step, with a new derivatives"
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,75,* vector (which will be retrieved thanks to the {@link
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,76,* org.apache.commons.math.ode.FirstOrderDifferentialEquations#computeDerivatives}
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,77,* method).</p>
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,79,"RESET_DERIVATIVES,"
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,81,/** Continue indicator.
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,82,* <p>This value should be used as the return value of the {@link
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,83,* #eventOccurred eventOccurred} method when the integration should go
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,84,* on after the event ending the current step.</p>
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,86,CONTINUE;
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,161,"nt eventOccurred(double t, double[] y, boolean increasing);"
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,166,"Action eventOccurred(double t, double[] y, boolean increasing);"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,27,import org.apache.commons.math.ode.events.EventHandler;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,84,rivate int nextAction;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,85,private EventHandler.Action nextAction;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,116,extAction        = EventHandler.CONTINUE;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,117,nextAction        = EventHandler.Action.CONTINUE;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,307,extAction = EventHandler.CONTINUE;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,308,nextAction = EventHandler.Action.CONTINUE;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,316,eturn nextAction == EventHandler.STOP;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,317,return nextAction == EventHandler.Action.STOP;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,332,f (nextAction == EventHandler.RESET_STATE) {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,333,if (nextAction == EventHandler.Action.RESET_STATE) {
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,338,eturn (nextAction == EventHandler.RESET_STATE) ||
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,339,nextAction == EventHandler.RESET_DERIVATIVES);
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,339,return (nextAction == EventHandler.Action.RESET_STATE) ||
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,340,(nextAction == EventHandler.Action.RESET_DERIVATIVES);
False,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,122,"ublic int eventOccurred(double t, double[] y, boolean increasing) {"
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,122,"public Action eventOccurred(double t, double[] y, boolean increasing) {"
False,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,125,eturn EventHandler.RESET_STATE;
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,125,return Action.RESET_STATE;
False,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,144,"ublic int eventOccurred(double t, double[] y, boolean increasing) {"
False,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,145,eturn EventHandler.STOP;
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,144,"public Action eventOccurred(double t, double[] y, boolean increasing) {"
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,145,return Action.STOP;
False,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,42,"ublic int eventOccurred(double t, double[] y, boolean increasing) {"
False,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,43,eturn CONTINUE;
True,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,42,"public Action eventOccurred(double t, double[] y, boolean increasing) {"
True,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,43,return Action.CONTINUE;
False,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,145,"ublic int eventOccurred(double t, double[] y, boolean increasing) {"
False,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,146,eturn STOP;
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,145,"public Action eventOccurred(double t, double[] y, boolean increasing) {"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,146,return Action.STOP;
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,81,"ublic int eventOccurred(double t, double[] y, boolean increasing) {"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,81,"public Action eventOccurred(double t, double[] y, boolean increasing) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,83,eturn CONTINUE;
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,83,return Action.CONTINUE;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,83,"ublic int eventOccurred(double t, double[] y, boolean increasing) {"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,83,"public Action eventOccurred(double t, double[] y, boolean increasing) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,85,eturn CONTINUE;
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,85,return Action.CONTINUE;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,205,"ublic int eventOccurred(double t, double[] y, boolean increasing) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,206,eturn EventHandler.CONTINUE;
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,205,"public Action eventOccurred(double t, double[] y, boolean increasing) {"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,206,return Action.CONTINUE;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,249,"ublic int eventOccurred(double t, double[] y, boolean increasing) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,250,eturn EventHandler.CONTINUE;
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,249,"public Action eventOccurred(double t, double[] y, boolean increasing) {"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,250,return Action.CONTINUE;
False,src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java,src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java,46,"ublic int eventOccurred(double t, double[] y, boolean increasing) {"
True,src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java,src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java,46,"public Action eventOccurred(double t, double[] y, boolean increasing) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java,src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java,48,eturn RESET_DERIVATIVES;
True,src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java,src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java,48,return Action.RESET_DERIVATIVES;

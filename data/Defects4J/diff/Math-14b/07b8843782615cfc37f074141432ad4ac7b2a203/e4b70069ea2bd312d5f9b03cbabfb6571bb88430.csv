is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,75,* Get the coefficients of the polynomial fitting the weighted data points.
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,76,* The degree of the fitting polynomial is {@code guess.length - 1}.
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,78,* @param guess First guess for the coefficients. They must be sorted in
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,79,* increasing order of the polynomial's degree.
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,80,* @param maxEval Maximum number of evaluations of the polynomial.
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,81,* @return the coefficients of the polynomial that best fits the observed points.
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,82,* @throws org.apache.commons.math3.exception.TooManyEvaluationsException if
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,83,* the number of evaluations exceeds {@code maxEval}.
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,84,* @throws org.apache.commons.math3.exception.ConvergenceException
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,85,* if the algorithm failed to converge.
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,87,"public double[] fit(int maxEval, double[] guess) {"
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,88,"return fit(maxEval, new PolynomialFunction.Parametric(), guess);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,141,Test
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,142,ublic void testMath798() {
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,143,inal double tol = 1e-14;
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,144,"inal SimpleVectorValueChecker checker = new SimpleVectorValueChecker(tol, tol);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,145,"inal double[] init = new double[] { 0, 0 };"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,146,inal int maxEval = 3;
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,148,"inal double[] lm = doMath798(new LevenbergMarquardtOptimizer(checker), maxEval, init);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,149,"inal double[] gn = doMath798(new GaussNewtonOptimizer(checker), maxEval, init);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,151,or (int i = 0; i <= 1; i++) {
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,152,"ssert.assertEquals(lm[i], gn[i], tol);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,157, @param optimizer Optimizer.
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,158, @param maxEval Maximum number of function evaluations.
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,159, @param init First guess.
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,160, @return the solution found by the given optimizer.
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,162,"rivate double[] doMath798(DifferentiableMultivariateVectorOptimizer optimizer,"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,163,"nt maxEval,"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,164,ouble[] init) {
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,165,inal CurveFitter fitter = new CurveFitter(optimizer);
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,167,"itter.addObservedPoint(-0.2, -7.12442E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,168,"itter.addObservedPoint(-0.199, -4.33397E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,169,"itter.addObservedPoint(-0.198, -2.823E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,170,"itter.addObservedPoint(-0.197, -1.40405E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,171,"itter.addObservedPoint(-0.196, -7.80821E-15);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,172,"itter.addObservedPoint(-0.195, 6.20484E-14);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,173,"itter.addObservedPoint(-0.194, 7.24673E-14);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,174,"itter.addObservedPoint(-0.193, 1.47152E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,175,"itter.addObservedPoint(-0.192, 1.9629E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,176,"itter.addObservedPoint(-0.191, 2.12038E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,177,"itter.addObservedPoint(-0.19, 2.46906E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,178,"itter.addObservedPoint(-0.189, 2.77495E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,179,"itter.addObservedPoint(-0.188, 2.51281E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,180,"itter.addObservedPoint(-0.187, 2.64001E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,181,"itter.addObservedPoint(-0.186, 2.8882E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,182,"itter.addObservedPoint(-0.185, 3.13604E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,183,"itter.addObservedPoint(-0.184, 3.14248E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,184,"itter.addObservedPoint(-0.183, 3.1172E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,185,"itter.addObservedPoint(-0.182, 3.12912E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,186,"itter.addObservedPoint(-0.181, 3.06761E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,187,"itter.addObservedPoint(-0.18, 2.8559E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,188,"itter.addObservedPoint(-0.179, 2.86806E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,189,"itter.addObservedPoint(-0.178, 2.985E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,190,"itter.addObservedPoint(-0.177, 2.67148E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,191,"itter.addObservedPoint(-0.176, 2.94173E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,192,"itter.addObservedPoint(-0.175, 3.27528E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,193,"itter.addObservedPoint(-0.174, 3.33858E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,194,"itter.addObservedPoint(-0.173, 2.97511E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,195,"itter.addObservedPoint(-0.172, 2.8615E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,196,"itter.addObservedPoint(-0.171, 2.84624E-13);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,198,"inal double[] coeff = fitter.fit(maxEval,"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,199,"ew PolynomialFunction.Parametric(),"
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,200,nit);
False,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,201,eturn coeff;
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,24,import org.apache.commons.math3.exception.TooManyEvaluationsException;
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,111,@Test
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,112,public void testMath798() {
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,113,final double tol = 1e-14;
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,114,"final SimpleVectorValueChecker checker = new SimpleVectorValueChecker(tol, tol);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,115,"final double[] init = new double[] { 0, 0 };"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,116,final int maxEval = 3;
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,118,"final double[] lm = doMath798(new LevenbergMarquardtOptimizer(checker), maxEval, init);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,119,"final double[] gn = doMath798(new GaussNewtonOptimizer(checker), maxEval, init);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,121,for (int i = 0; i <= 1; i++) {
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,122,"Assert.assertEquals(lm[i], gn[i], tol);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,127,* This test shows that the user can set the maximum number of iterations
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,128,* to avoid running for too long.
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,129,"* But in the test case, the real problem is that the tolerance is way too"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,130,* stringent.
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,132,@Test(expected=TooManyEvaluationsException.class)
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,133,public void testMath798WithToleranceTooLow() {
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,134,final double tol = 1e-100;
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,135,"final SimpleVectorValueChecker checker = new SimpleVectorValueChecker(tol, tol);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,136,"final double[] init = new double[] { 0, 0 };"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,137,final int maxEval = 10000; // Trying hard to fit.
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,139,"final double[] lm = doMath798(new LevenbergMarquardtOptimizer(checker), maxEval, init);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,140,"final double[] gn = doMath798(new GaussNewtonOptimizer(checker), maxEval, init);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,142,for (int i = 0; i <= 1; i++) {
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,143,"Assert.assertEquals(lm[i], gn[i], tol);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,148,* @param optimizer Optimizer.
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,149,* @param maxEval Maximum number of function evaluations.
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,150,* @param init First guess.
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,151,* @return the solution found by the given optimizer.
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,153,"private double[] doMath798(DifferentiableMultivariateVectorOptimizer optimizer,"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,154,"int maxEval,"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,155,double[] init) {
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,156,final CurveFitter fitter = new CurveFitter(optimizer);
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,158,"fitter.addObservedPoint(-0.2, -7.12442E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,159,"fitter.addObservedPoint(-0.199, -4.33397E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,160,"fitter.addObservedPoint(-0.198, -2.823E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,161,"fitter.addObservedPoint(-0.197, -1.40405E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,162,"fitter.addObservedPoint(-0.196, -7.80821E-15);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,163,"fitter.addObservedPoint(-0.195, 6.20484E-14);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,164,"fitter.addObservedPoint(-0.194, 7.24673E-14);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,165,"fitter.addObservedPoint(-0.193, 1.47152E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,166,"fitter.addObservedPoint(-0.192, 1.9629E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,167,"fitter.addObservedPoint(-0.191, 2.12038E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,168,"fitter.addObservedPoint(-0.19, 2.46906E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,169,"fitter.addObservedPoint(-0.189, 2.77495E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,170,"fitter.addObservedPoint(-0.188, 2.51281E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,171,"fitter.addObservedPoint(-0.187, 2.64001E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,172,"fitter.addObservedPoint(-0.186, 2.8882E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,173,"fitter.addObservedPoint(-0.185, 3.13604E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,174,"fitter.addObservedPoint(-0.184, 3.14248E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,175,"fitter.addObservedPoint(-0.183, 3.1172E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,176,"fitter.addObservedPoint(-0.182, 3.12912E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,177,"fitter.addObservedPoint(-0.181, 3.06761E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,178,"fitter.addObservedPoint(-0.18, 2.8559E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,179,"fitter.addObservedPoint(-0.179, 2.86806E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,180,"fitter.addObservedPoint(-0.178, 2.985E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,181,"fitter.addObservedPoint(-0.177, 2.67148E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,182,"fitter.addObservedPoint(-0.176, 2.94173E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,183,"fitter.addObservedPoint(-0.175, 3.27528E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,184,"fitter.addObservedPoint(-0.174, 3.33858E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,185,"fitter.addObservedPoint(-0.173, 2.97511E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,186,"fitter.addObservedPoint(-0.172, 2.8615E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,187,"fitter.addObservedPoint(-0.171, 2.84624E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,189,"final double[] coeff = fitter.fit(maxEval,"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,190,"new PolynomialFunction.Parametric(),"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,191,init);
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,192,return coeff;

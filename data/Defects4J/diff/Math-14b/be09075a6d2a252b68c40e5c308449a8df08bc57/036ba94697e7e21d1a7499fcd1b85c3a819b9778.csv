is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,180,** Sampled observations. */
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,181,rivate final WeightedObservedPoint[] observations;
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,183,rivate double a;
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,181,private final double a;
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,185,rivate double omega;
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,183,private final double omega;
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,187,rivate double phi;
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,185,private final double phi;
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,191, @param observations sampled observations
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,192, @throws NumberIsTooSmallException if the sample is too short or if
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,193, the first guess cannot be computed.
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,190,* @param observations Sampled observations.
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,191,* @throws NumberIsTooSmallException if the sample is too short.
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,192,* @throws ZeroException if the abscissa range is zero.
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,193,* @throws MathIllegalStateException when the guessing procedure cannot
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,194,* produce sensible results.
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,201,his.observations = observations.clone();
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,202,final WeightedObservedPoint[] sorted = sortObservations(observations);
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,204,final double aOmega[] = guessAOmega(sorted);
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,205,a = aOmega[0];
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,206,omega = aOmega[1];
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,208,phi = guessPhi(sorted);
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,215,ortObservations();
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,216,uessAOmega();
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,217,uessPhi();
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,228,* @param unsorted Input observations.
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,229,"* @return the input observations, sorted."
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,224,rivate void sortObservations() {
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,231,private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,232,final WeightedObservedPoint[] observations = unsorted.clone();
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,256,return observations;
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,264,"* @param observations Observations, sorted w.r.t. abscissa."
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,268,* @return the guessed amplitude (at index 0) and circular frequency
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,269,* (at index 1).
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,257,rivate void guessAOmega() {
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,271,private double[] guessAOmega(WeightedObservedPoint[] observations) {
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,272,final double[] aOmega = new double[2];
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,308,mega = 2 * Math.PI / xRange;
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,324,aOmega[1] = 2 * Math.PI / xRange;
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,321, = 0.5 * (yMax - yMin);
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,337,aOmega[0] = 0.5 * (yMax - yMin);
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,329, = FastMath.sqrt(c1 / c2);
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,330,mega = FastMath.sqrt(c2 / c3);
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,345,aOmega[0] = FastMath.sqrt(c1 / c2);
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,346,aOmega[1] = FastMath.sqrt(c2 / c3);
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,349,return aOmega;
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,355,"* @param observations Observations, sorted w.r.t. abscissa."
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,356,* @return the guessed phase.
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,337,rivate void guessPhi() {
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,358,private double guessPhi(WeightedObservedPoint[] observations) {
False,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,359,"hi = FastMath.atan2(-fsMean, fcMean);"
True,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java,380,"return FastMath.atan2(-fsMean, fcMean);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java,194,inal HarmonicFitter.ParameterGuesser guesser
False,src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java,195, new HarmonicFitter.ParameterGuesser(points);
False,src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java,202,uesser.guess();
True,src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java,199,final HarmonicFitter.ParameterGuesser guesser
True,src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java,200,= new HarmonicFitter.ParameterGuesser(points);

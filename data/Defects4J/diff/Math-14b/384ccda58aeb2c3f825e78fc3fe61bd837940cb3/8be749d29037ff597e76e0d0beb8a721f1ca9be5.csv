is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,51,rivate static final long serialVersionUID = 20110928L;
True,src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java,51,private static final long serialVersionUID = 20111120L;
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,75,rivate static final long serialVersionUID = 20110928L;
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,75,private static final long serialVersionUID = 20111120L;
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,42,rivate static final long serialVersionUID = 20110928L;
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,42,private static final long serialVersionUID = 20111120L;
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,371,or (int i = 0; i < interpolatedState.length; ++i) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,372,nterpolatedState[i] = currentState[i] -
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,373,neMinusThetaH * (v[0][i] -
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,374,heta * (v[1][i] +
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,375,heta * (v[2][i] +
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,376,ta * (v[3][i] +
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,377,heta * (v[4][i] +
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,378,ta * (v[5][i] +
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,379,heta * (v[6][i])))))));
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,380,nterpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,381,ot3 * v[3][i] + dot4 * v[4][i] +
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,382,ot5 * v[5][i] + dot6 * v[6][i];
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,371,if ((previousState != null) && (theta <= 0.5)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,372,for (int i = 0; i < interpolatedState.length; ++i) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,373,interpolatedState[i] = previousState[i] +
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,374,theta * h * (v[0][i] +
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,375,eta * (v[1][i] +
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,376,theta * (v[2][i] +
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,377,eta * (v[3][i] +
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,378,theta * (v[4][i] +
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,379,eta * (v[5][i] +
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,380,theta * (v[6][i])))))));
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,381,interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,382,dot3 * v[3][i] + dot4 * v[4][i] +
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,383,dot5 * v[5][i] + dot6 * v[6][i];
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,385,} else {
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,386,for (int i = 0; i < interpolatedState.length; ++i) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,387,interpolatedState[i] = currentState[i] -
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,388,oneMinusThetaH * (v[0][i] -
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,389,theta * (v[1][i] +
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,390,theta * (v[2][i] +
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,391,eta * (v[3][i] +
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,392,theta * (v[4][i] +
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,393,eta * (v[5][i] +
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,394,theta * (v[6][i])))))));
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,395,interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,396,dot3 * v[3][i] + dot4 * v[4][i] +
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,397,dot5 * v[5][i] + dot6 * v[6][i];
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,205,inal double[] yTmp    = new double[y.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,205,final double[] yTmp    = y0.clone();
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,297,"System.arraycopy(y, 0, yTmp, 0, y.length);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,45,rivate static final long serialVersionUID = 20110928L;
True,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java,45,private static final long serialVersionUID = 20111120L;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,57,rivate static final long serialVersionUID = 20110928L;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,57,private static final long serialVersionUID = 20111120L;
False,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,36,rivate static final long serialVersionUID = 20110928L;
True,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java,36,private static final long serialVersionUID = 20111120L;
False,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,47,rivate static final long serialVersionUID = 20110928L;
True,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java,47,private static final long serialVersionUID = 20111120L;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,110,inal double[] yTmp    = new double[y0.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,110,final double[] yTmp    = y0.clone();
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,41,/** Previous state. */
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,42,protected double[] previousState;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,58,uper();
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,59,DotK      = null;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,60,ntegrator = null;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,61,previousState = null;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,62,yDotK         = null;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,63,integrator    = null;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,85,inal int dimension = currentState.length;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,89,previousState = interpolator.previousState.clone();
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,89,DotK[k] = new double[dimension];
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,90,"ystem.arraycopy(interpolator.yDotK[k], 0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,91,"DotK[k], 0, dimension);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,93,yDotK[k] = interpolator.yDotK[k].clone();
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,97,previousState = null;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,135,this.previousState = null;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,140,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,141,@Override
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,142,public void shift() {
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,143,previousState = currentState.clone();
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,144,super.shift();
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,157,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,158,out.writeDouble(previousState[i]);
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,183,if (n < 0) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,184,previousState = null;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,185,} else {
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,186,previousState = new double[n];
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,187,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,188,previousState[i] = in.readDouble();
False,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,52,rivate static final long serialVersionUID = 20110928L;
True,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java,52,private static final long serialVersionUID = 20111120L;
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,17,package org.apache.commons.math.ode.events;
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,19,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,21,import java.util.Arrays;
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,23,import org.apache.commons.math.analysis.solvers.PegasusSolver;
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,24,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,25,import org.apache.commons.math.ode.FirstOrderIntegrator;
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,26,import org.apache.commons.math.ode.events.EventHandler;
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,27,import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,28,import org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator;
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,29,import org.junit.Test;
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,31,public class ReappearingEventTest {
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,32,@Test
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,33,public void testDormandPrince() {
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,34,double tEnd = test(1);
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,35,"assertEquals(10.0, tEnd, 1e-7);"
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,38,@Test
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,39,public void testGragg() {
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,40,double tEnd = test(2);
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,41,"assertEquals(10.0, tEnd, 1e-7);"
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,44,public double test(int integratorType) {
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,45,double e = 1e-15;
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,46,FirstOrderIntegrator integrator;
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,47,integrator = (integratorType == 1)
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,48,"? new DormandPrince853Integrator(e, 100.0, 1e-7, 1e-7)"
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,49,": new GraggBulirschStoerIntegrator(e, 100.0, 1e-7, 1e-7);"
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,50,"PegasusSolver rootSolver = new PegasusSolver(e, e);"
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,51,"integrator.addEventHandler(new Event(), 0.1, e, 1000, rootSolver);"
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,52,double t0 = 6.0;
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,53,double tEnd = 10.0;
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,54,"double[] y = {2.0, 2.0, 2.0, 4.0, 2.0, 7.0, 15.0};"
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,55,"return integrator.integrate(new Ode(), t0, y, tEnd, y);"
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,58,private static class Ode implements FirstOrderDifferentialEquations {
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,59,public int getDimension() {
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,60,return 7;
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,63,"public void computeDerivatives(double t, double[] y, double[] yDot) {"
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,64,"Arrays.fill(yDot, 1.0);"
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,68,/** State events for this unit test. */
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,69,protected static class Event implements EventHandler {
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,70,"public double g(double t, double[] y) {"
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,71,return y[6] - 15.0;
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,74,"public Action eventOccurred(double t, double[] y, boolean increasing) {"
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,75,return Action.STOP;
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,78,"public void resetState(double t, double[] y) {"
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,79,// Never called.
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,64,ssert.assertTrue(bos.size () > 750000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,65,ssert.assertTrue(bos.size () < 800000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,64,Assert.assertTrue(bos.size () > 880000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,65,Assert.assertTrue(bos.size () < 900000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,76,ssert.assertTrue(bos.size () > 125000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,77,ssert.assertTrue(bos.size () < 130000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,76,Assert.assertTrue(bos.size () > 135000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,77,Assert.assertTrue(bos.size () < 145000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,76,ssert.assertTrue(bos.size () > 85000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,77,ssert.assertTrue(bos.size () < 95000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,76,Assert.assertTrue(bos.size () > 90000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,77,Assert.assertTrue(bos.size () < 100000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,64,ssert.assertTrue(bos.size () > 750000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,65,ssert.assertTrue(bos.size () < 800000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,64,Assert.assertTrue(bos.size () > 880000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,65,Assert.assertTrue(bos.size () < 900000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,76,ssert.assertTrue(bos.size () > 170000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,77,ssert.assertTrue(bos.size () < 175000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,76,Assert.assertTrue(bos.size () > 185000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,77,Assert.assertTrue(bos.size () < 195000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,65,ssert.assertTrue(bos.size () > 120000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,66,ssert.assertTrue(bos.size () < 125000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,65,Assert.assertTrue(bos.size () > 135000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,66,Assert.assertTrue(bos.size () < 145000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,64,ssert.assertTrue(bos.size () > 750000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,65,ssert.assertTrue(bos.size () < 800000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,64,Assert.assertTrue(bos.size () > 880000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,65,Assert.assertTrue(bos.size () < 900000);

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,595,** Compute &pi; by atan(1/&radic;(3)) = &pi;/6.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,595,/** Compute &pi; using Jonathan and Peter Borwein quartic formula.
False,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,603,fp x = three;
False,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,604, = x.sqrt();
False,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,605, = one.divide(x);
False,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,607,fp denom = one;
False,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,609,fp py = new Dfp(x);
False,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,610,fp y  = new Dfp(x);
False,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,612,or (int i = 1; i < 10000; i++) {
False,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,613, = x.divide(three);
False,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,614,enom = denom.add(two);
False,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,615,f ((i&1) != 0) {
False,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,616, = y.subtract(x.divide(denom));
False,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,617, else {
False,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,618, = y.add(x.divide(denom));
False,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,620,f (y.equals(py)) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,603,Dfp sqrt2   = two.sqrt();
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,604,Dfp yk      = sqrt2.subtract(one);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,605,Dfp four    = two.add(two);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,606,Dfp two2kp3 = two;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,607,Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,609,// The formula converges quartically. This means the number of correct
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,610,// digits is multiplied by 4 at each iteration! Five iterations are
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,611,"// sufficient for about 160 digits, eight iterations give about"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,612,// 10000 digits (this has been checked) and 20 iterations more than
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,613,// 160 billions of digits (this has NOT been checked).
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,614,// So the limit here is considered sufficient for most purposes ...
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,615,for (int i = 1; i < 20; i++) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,616,final Dfp ykM1 = yk;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,618,final Dfp y2         = yk.multiply(yk);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,619,final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,620,final Dfp s          = oneMinusY4.sqrt().sqrt();
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,621,yk = one.subtract(s).divide(one.add(s));
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,623,two2kp3 = two2kp3.multiply(four);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,625,final Dfp p = one.add(yk);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,626,final Dfp p2 = p.multiply(p);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,627,ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,629,if (yk.equals(ykM1)) {
False,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,623,y = new Dfp(y);
False,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,626,"eturn y.multiply(new Dfp(one.getField(), 6));"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,634,return one.divide(ak);

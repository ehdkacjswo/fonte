is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1624,nt sum = 0;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1624,double sum = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1626,inal int dp = p1[i] - p2[i];
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1626,final double dp = p1[i] - p2[i];
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,98,* JIRA: MATH-305
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,100,"* Two points, one cluster, one iteration"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,102,@Test
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,103,public void testPerformClusterAnalysisDegenerate() {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,104,KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,105,new Random(1746432956321l));
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,106,EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,107,"new EuclideanIntegerPoint(new int[] { 1959, 325100 }),"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,108,"new EuclideanIntegerPoint(new int[] { 1960, 373200 }), };"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,109,"List<Cluster<EuclideanIntegerPoint>> clusters = transformer.cluster(Arrays.asList(points), 1, 1);"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,110,"assertEquals(1, clusters.size());"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,111,"assertEquals(2, (clusters.get(0).getPoints().size()));"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,112,"EuclideanIntegerPoint pt1 = new EuclideanIntegerPoint(new int[] { 1959, 325100 });"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,113,"EuclideanIntegerPoint pt2 = new EuclideanIntegerPoint(new int[] { 1960, 373200 });"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,114,assertTrue(clusters.get(0).getPoints().contains(pt1));
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,115,assertTrue(clusters.get(0).getPoints().contains(pt2));

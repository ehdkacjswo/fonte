is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,118, @param result the result to set
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,118,* @param newResult the result to set
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,121,"rotected final void setResult(double result, int iterationCount) {"
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,122,his.result = result;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,121,"protected final void setResult(double newResult, int iterationCount) {"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,122,this.result         = newResult;
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,137, @param result the result to set
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,137,* @param newResult the result to set
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,140,"rotected final void setResult(final double result, final int iterationCount) {"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,141,his.result         = result;
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,140,"protected final void setResult(final double newResult, final int iterationCount) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,141,this.result         = newResult;
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,174, @param f the function
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,174,* @param function the function
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,180,inal UnivariateRealFunction f)
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,180,final UnivariateRealFunction function)
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,182,inal double f1 = f.value(lower);
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,183,inal double f2 = f.value(upper);
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,182,final double f1 = function.value(lower);
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,183,final double f2 = function.value(upper);
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,238, @param f function
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,238,* @param function function
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,244,inal UnivariateRealFunction f)
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,244,final UnivariateRealFunction function)
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,248,"f (!isBracketing(lower, upper, f)) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,248,"if (!isBracketing(lower, upper, function)) {"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,252,"ower, upper, f.value(lower), f.value(upper));"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,252,"lower, upper, function.value(lower), function.value(upper));"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1004, @param real the real part
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1005, @param imaginary the imaginary part
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1004,* @param realPart the real part
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1005,* @param imaginaryPart the imaginary part
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1009,"rotected Complex createComplex(double real, double imaginary) {"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1010,"eturn new Complex(real, imaginary);"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1009,"protected Complex createComplex(double realPart, double imaginaryPart) {"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1010,"return new Complex(realPart, imaginaryPart);"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,38,rivate double alpha;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,38,private double shape;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,41,rivate double beta;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,41,private double scale;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,75,eturn alpha;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,75,return shape;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,83,eturn beta;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,83,return scale;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,124,his.alpha = alpha;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,124,this.shape = alpha;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,137,his.beta = beta;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,137,this.scale = beta;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,176,inal int rows = problem.getMeasurements().length;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,177,inal int cols = problem.getUnboundParameters().length;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,178,inal int max  = cols * rows;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,179,ouble[][] jTj = new double[cols][cols];
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,180,or (int i = 0; i < cols; ++i) {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,181,or (int j = i; j < cols; ++j) {
True,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,176,final int n = problem.getMeasurements().length;
True,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,177,final int m = problem.getUnboundParameters().length;
True,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,178,final int max  = m * n;
True,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,179,double[][] jTj = new double[m][m];
True,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,180,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,181,for (int j = i; j < m; ++j) {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,183,or (int k = 0; k < max; k += cols) {
True,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,183,for (int k = 0; k < max; k += m) {
False,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,60, @param representation representation of the chromosome
True,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,60,* @param chromosomeRepresentation representation of the chromosome
False,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,64,rotected abstract void checkValidity(List<T> representation) throws InvalidRepresentationException;
True,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,64,protected abstract void checkValidity(List<T> chromosomeRepresentation) throws InvalidRepresentationException;
False,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,90, @param representation
True,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,90,* @param chromosomeRepresentation
False,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,95,ublic abstract AbstractListChromosome<T> newFixedLengthChromosome(final List<T> representation);
True,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,95,public abstract AbstractListChromosome<T> newFixedLengthChromosome(final List<T> chromosomeRepresentation);
False,src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java,51,rotected void checkValidity(List<Integer> representation) throws InvalidRepresentationException {
False,src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java,52,or (int i : representation) {
True,src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java,51,protected void checkValidity(List<Integer> chromosomeRepresentation) throws InvalidRepresentationException {
True,src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java,52,for (int i : chromosomeRepresentation) {
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,175,rotected void checkValidity(java.util.List<Double> representation) throws InvalidRepresentationException {
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,176,or (double val : representation) {
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,175,protected void checkValidity(java.util.List<Double> chromosomeRepresentation) throws InvalidRepresentationException {
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,176,for (double val : chromosomeRepresentation) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,854,ouble eMin = (i0 == n0) ? 0 : work[4 * n0 - 6];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,855,ouble eMax = 0;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,856,ouble qMax = work[4 * n0 - 4];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,857,ouble qMin = qMax;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,854,double offDiagMin = (i0 == n0) ? 0 : work[4 * n0 - 6];
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,855,double offDiagMax = 0;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,856,double diagMax    = work[4 * n0 - 4];
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,857,double diagMin    = diagMax;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,864,f (qMin >= 4 * eMax) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,865,"Min = Math.min(qMin, work[i + 4]);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,866,"Max = Math.max(eMax, work[i + 2]);"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,864,if (diagMin >= 4 * offDiagMax) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,865,"diagMin    = Math.min(diagMin, work[i + 4]);"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,866,"offDiagMax = Math.max(offDiagMax, work[i + 2]);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,868,"Max = Math.max(qMax, work[i] + work[i + 2]);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,869,"Min = Math.min(eMin, work[i + 2]);"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,868,"diagMax    = Math.max(diagMax, work[i] + work[i + 2]);"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,869,"offDiagMin = Math.min(offDiagMin, work[i + 2]);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,871,ork[4 * n0 - 2] = eMin;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,871,work[4 * n0 - 2] = offDiagMin;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,874,"Min = -Math.max(0, qMin - 2 * Math.sqrt(qMin * eMax));"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,874,"dMin = -Math.max(0, diagMin - 2 * Math.sqrt(diagMin * offDiagMax));"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,890,work[4 * n0 - 1] <= TOLERANCE_2 * qMax) &&
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,890,(work[4 * n0 - 1] <= TOLERANCE_2 * diagMax) &&
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,892,nt split = i0 - 1;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,893,Max = work[4 * i0];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,894,Min = work[4 * i0 + 2];
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,892,int split  = i0 - 1;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,893,diagMax    = work[4 * i0];
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,894,offDiagMin = work[4 * i0 + 2];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,902,Max         = 0;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,903,Min         = work[i + 6];
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,902,diagMax      = 0;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,903,offDiagMin   = work[i + 6];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,906,"Max         = Math.max(qMax, work[i + 4]);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,907,"Min         = Math.min(eMin, work[i + 2]);"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,906,"diagMax      = Math.max(diagMax, work[i + 4]);"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,907,"offDiagMin   = Math.min(offDiagMin, work[i + 2]);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,911,ork[4 * n0 - 2] = eMin;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,911,work[4 * n0 - 2] = offDiagMin;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1665, @param tau shift to apply to sigma
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1665,* @param shift shift to apply to sigma
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1667,rivate void updateSigma(final double tau) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1667,private void updateSigma(final double shift) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1671,f (tau < sigma) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1672,igmaLow += tau;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1671,if (shift < sigma) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1672,sigmaLow += shift;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1677,inal double t = sigma + tau;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1678,igmaLow += sigma - (t - tau);
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1677,final double t = sigma + shift;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1678,sigmaLow += sigma - (t - shift);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1734,inal double g = work[sixI] + d[i] * work[sixI + 9] / work[sixI + 10];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1735,inal double absG = Math.abs(g);
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1734,final double absG = Math.abs(work[sixI] + d[i] * work[sixI + 9] / work[sixI + 10]);
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,36,rivate final int rowDimension;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,36,private final int rows;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,39,rivate final int columnDimension;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,39,private final int columns;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,51,his.rowDimension = rowDimension;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,52,his.columnDimension = columnDimension;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,51,this.rows    = rowDimension;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,52,this.columns = columnDimension;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,61,his.rowDimension = matrix.rowDimension;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,62,his.columnDimension = matrix.columnDimension;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,61,this.rows    = matrix.rows;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,62,this.columns = matrix.columns;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,82,eturn columnDimension;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,82,return columns;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,111,inal int row = iterator.key() / columnDimension;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,112,inal int col = iterator.key() - row * columnDimension;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,111,final int row = iterator.key() / columns;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,112,final int col = iterator.key() - row * columns;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,146,inal int row = iterator.key() / columnDimension;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,147,inal int col = iterator.key() - row * columnDimension;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,146,final int row = iterator.key() / columns;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,147,final int col = iterator.key() - row * columns;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,167,"inal BlockRealMatrix out = new BlockRealMatrix(rowDimension, outCols);"
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,167,"final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,172,inal int i        = key / columnDimension;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,173,inal int k        = key % columnDimension;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,172,final int i        = key / columns;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,173,final int k        = key % columns;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,198,"penMapRealMatrix out = new OpenMapRealMatrix(rowDimension, outCols);"
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,198,"OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,203,inal int i        = key / columnDimension;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,204,inal int k        = key % columnDimension;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,203,final int i        = key / columns;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,204,final int k        = key % columns;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,235,eturn rowDimension;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,235,return rows;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,288,eturn row * columnDimension + column;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,288,return row * columns + column;
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,40,rivate final int rowDimension;
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,40,private final int rows;
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,44,rivate final int columnDimension;
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,44,private final int columns;
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,53,owDimension = 0;
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,54,olumnDimension= 0;
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,53,rows = 0;
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,54,columns= 0;
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,70,his.rowDimension = rowDimension;
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,71,his.columnDimension = columnDimension;
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,70,this.rows = rowDimension;
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,71,this.columns = columnDimension;
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,81,owDimension = other.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,82,olumnDimension = other.getColumnDimension();
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,81,rows = other.getRowDimension();
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,82,columns = other.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,92,owDimension = other.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,93,olumnDimension = other.getColumnDimension();
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,92,rows = other.getRowDimension();
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,93,columns = other.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,95,or (int i = 0; i < rowDimension; i++) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,96,or (int j = 0; j < columnDimension; j++) {
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,95,for (int i = 0; i < rows; i++) {
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,96,for (int j = 0; j < columns; j++) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,134,eturn columnDimension;
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,134,return columns;
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,148,eturn rowDimension;
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,148,return rows;
False,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,187,eturn row * columnDimension + column;
True,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java,187,return row * columns + column;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,187, @param equations differential equations set
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,187,* @param ode differential equations set
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,194,"rotected void sanityChecks(final FirstOrderDifferentialEquations equations,"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,194,"protected void sanityChecks(final FirstOrderDifferentialEquations ode,"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,199,f (equations.getDimension() != y0.length) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,199,if (ode.getDimension() != y0.length) {
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,203,"quations.getDimension(), y0.length);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,203,"ode.getDimension(), y0.length);"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,206,f (equations.getDimension() != y.length) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,206,if (ode.getDimension() != y.length) {
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,210,"quations.getDimension(), y.length);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,210,"ode.getDimension(), y.length);"
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,186, @param starter starter integrator
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,186,* @param starterIntegrator starter integrator
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,188,ublic void setStarterIntegrator(FirstOrderIntegrator starter) {
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,189,his.starter = starter;
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,188,public void setStarterIntegrator(FirstOrderIntegrator starterIntegrator) {
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,189,this.starter = starterIntegrator;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,141, @param t0 value of the independent <i>time</i> variable at the
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,141,* @param tStart value of the independent <i>time</i> variable at the
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,143, @param y0 array containing the current value of the state vector
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,143,* @param yStart array containing the current value of the state vector
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,148,"ublic void reinitializeBegin(final double t0, final double[] y0)"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,148,"public void reinitializeBegin(final double tStart, final double[] yStart)"
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,150,his.t0 = t0;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,151,"0 = handler.g(t0, y0);"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,150,t0 = tStart;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,151,"g0 = handler.g(tStart, yStart);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,153," @param performTest if true, stability check will be performed,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,153,"* @param performStabilityCheck if true, stability check will be performed,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,155, @param maxIter maximal number of iterations for which checks are
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,155,* @param maxNumIter maximal number of iterations for which checks are
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,158, @param maxChecks maximal number of checks for each iteration
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,158,* @param maxNumChecks maximal number of checks for each iteration
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,160, @param stabilityReduction stepsize reduction factor in case of
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,160,* @param stepsizeReductionFactor stepsize reduction factor in case of
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,164,"ublic void setStabilityCheck(final boolean performTest,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,165,"inal int maxIter, final int maxChecks,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,166,inal double stabilityReduction) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,164,"public void setStabilityCheck(final boolean performStabilityCheck,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,165,"final int maxNumIter, final int maxNumChecks,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,166,final double stepsizeReductionFactor) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,168,his.performTest = performTest;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,169,his.maxIter     = (maxIter   <= 0) ? 2 : maxIter;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,170,his.maxChecks   = (maxChecks <= 0) ? 1 : maxChecks;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,168,this.performTest = performStabilityCheck;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,169,this.maxIter     = (maxNumIter   <= 0) ? 2 : maxNumIter;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,170,this.maxChecks   = (maxNumChecks <= 0) ? 1 : maxNumChecks;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,172,f ((stabilityReduction < 0.0001) || (stabilityReduction > 0.9999)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,172,if ((stepsizeReductionFactor < 0.0001) || (stepsizeReductionFactor > 0.9999)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,175,his.stabilityReduction = stabilityReduction;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,175,this.stabilityReduction = stepsizeReductionFactor;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,195, @param stepControl1 first stepsize control factor (the factor is
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,195,* @param control1 first stepsize control factor (the factor is
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,197, @param stepControl2 second stepsize control factor (the factor
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,197,* @param control2 second stepsize control factor (the factor
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,199, @param stepControl3 third stepsize control factor (the factor is
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,199,* @param control3 third stepsize control factor (the factor is
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,201, @param stepControl4 fourth stepsize control factor (the factor
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,201,* @param control4 fourth stepsize control factor (the factor
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,204,"ublic void setStepsizeControl(final double stepControl1, final double stepControl2,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,205,"inal double stepControl3, final double stepControl4) {"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,204,"public void setStepsizeControl(final double control1, final double control2,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,205,"final double control3, final double control4) {"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,207,f ((stepControl1 < 0.0001) || (stepControl1 > 0.9999)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,207,if ((control1 < 0.0001) || (control1 > 0.9999)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,210,his.stepControl1 = stepControl1;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,210,this.stepControl1 = control1;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,213,f ((stepControl2 < 0.0001) || (stepControl2 > 0.9999)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,213,if ((control2 < 0.0001) || (control2 > 0.9999)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,216,his.stepControl2 = stepControl2;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,216,this.stepControl2 = control2;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,219,f ((stepControl3 < 0.0001) || (stepControl3 > 0.9999)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,219,if ((control3 < 0.0001) || (control3 > 0.9999)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,222,his.stepControl3 = stepControl3;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,222,this.stepControl3 = control3;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,225,f ((stepControl4 < 1.0001) || (stepControl4 > 999.9)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,225,if ((control4 < 1.0001) || (control4 > 999.9)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,228,his.stepControl4 = stepControl4;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,228,this.stepControl4 = control4;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,249, @param maxOrder maximal order in the extrapolation table (the
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,249,* @param maximalOrder maximal order in the extrapolation table (the
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,251, @param orderControl1 first order control factor (the factor is
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,251,* @param control1 first order control factor (the factor is
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,253, @param orderControl2 second order control factor (the factor
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,253,* @param control2 second order control factor (the factor
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,256,"ublic void setOrderControl(final int maxOrder,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,257,"inal double orderControl1, final double orderControl2) {"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,256,"public void setOrderControl(final int maximalOrder,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,257,"final double control1, final double control2) {"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,259,f ((maxOrder <= 6) || (maxOrder % 2 != 0)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,259,if ((maximalOrder <= 6) || (maximalOrder % 2 != 0)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,263,f ((orderControl1 < 0.0001) || (orderControl1 > 0.9999)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,263,if ((control1 < 0.0001) || (control1 > 0.9999)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,266,his.orderControl1 = orderControl1;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,266,this.orderControl1 = control1;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,269,f ((orderControl2 < 0.0001) || (orderControl2 > 0.9999)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,269,if ((control2 < 0.0001) || (control2 > 0.9999)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,272,his.orderControl2 = orderControl2;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,272,this.orderControl2 = control2;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,355," @param useInterpolationError if true, interpolation error is used"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,355,"* @param useInterpolationErrorForControl if true, interpolation error is used"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,357, @param mudif interpolation order control parameter (the parameter
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,357,* @param mudifControlParameter interpolation order control parameter (the parameter
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,360,"ublic void setInterpolationControl(final boolean useInterpolationError,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,361,inal int mudif) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,360,"public void setInterpolationControl(final boolean useInterpolationErrorForControl,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,361,final int mudifControlParameter) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,363,his.useInterpolationError = useInterpolationError;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,363,this.useInterpolationError = useInterpolationErrorForControl;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,365,f ((mudif <= 0) || (mudif >= 7)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,365,if ((mudifControlParameter <= 0) || (mudifControlParameter >= 7)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,368,his.mudif = mudif;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,368,this.mudif = mudifControlParameter;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,111, @param integrator integrator being used
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,111,* @param rkIntegrator integrator being used
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,114, @param yDotK reference to the integrator array holding all the
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,114,* @param yDotArray reference to the integrator array holding all the
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,118,"ublic void reinitialize(final AbstractIntegrator integrator,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,119,"inal double[] y, final double[][] yDotK, final boolean forward) {"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,118,"public void reinitialize(final AbstractIntegrator rkIntegrator,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,119,"final double[] y, final double[][] yDotArray, final boolean forward) {"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,121,his.yDotK = yDotK;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,122,his.integrator = integrator;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,121,this.yDotK = yDotArray;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,122,this.integrator = rkIntegrator;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,167, @param forward integration direction indicator
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,167,* @param isForward integration direction indicator
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,169,"rotected void reinitialize(final double[] y, final boolean forward) {"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,169,"protected void reinitialize(final double[] y, final boolean isForward) {"
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,181,his.forward      = forward;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,181,this.forward      = isForward;
False,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,117, @param referenceTime time at which all arrays are defined
False,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,118, @param scalingH step size used in the scaled and nordsieck arrays
False,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,119, @param scaled reference to the integrator array holding the first
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,117,* @param time time at which all arrays are defined
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,118,* @param stepSize step size used in the scaled and nordsieck arrays
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,119,* @param scaledDerivative reference to the integrator array holding the first
False,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,121, @param nordsieck reference to the integrator matrix holding the
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,121,* @param nordsieckVector reference to the integrator matrix holding the
False,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,124,"ublic void reinitialize(final double referenceTime, final double scalingH,"
False,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,125,"inal double[] scaled, final Array2DRowRealMatrix nordsieck) {"
False,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,126,his.referenceTime = referenceTime;
False,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,127,his.scalingH      = scalingH;
False,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,128,his.scaled        = scaled;
False,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,129,his.nordsieck     = nordsieck;
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,124,"public void reinitialize(final double time, final double stepSize,"
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,125,"final double[] scaledDerivative,"
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,126,final Array2DRowRealMatrix nordsieckVector) {
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,127,this.referenceTime = time;
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,128,this.scalingH      = stepSize;
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,129,this.scaled        = scaledDerivative;
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,130,this.nordsieck     = nordsieckVector;
False,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,139, @param scalingH new step size to use in the scaled and nordsieck arrays
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,140,* @param stepSize new step size to use in the scaled and nordsieck arrays
False,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,141,ublic void rescale(final double scalingH) {
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,142,public void rescale(final double stepSize) {
False,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,143,inal double ratio = scalingH / this.scalingH;
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,144,final double ratio = stepSize / scalingH;
False,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,158,his.scalingH = scalingH;
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,159,scalingH = stepSize;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,249,ublic void setConvergenceChecker(RealConvergenceChecker checker) {
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,250,his.checker = checker;
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,249,public void setConvergenceChecker(RealConvergenceChecker convergenceChecker) {
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,250,this.checker = convergenceChecker;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,259,"ublic RealPointValuePair optimize(final MultivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,260,"inal GoalType goalType,"
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,261,inal double[] startPoint)
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,259,"public RealPointValuePair optimize(final MultivariateRealFunction function,"
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,260,"final GoalType goalType,"
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,261,final double[] startPoint)
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,273,his.f = f;
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,273,this.f = function;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,82,rivate DifferentiableMultivariateVectorialFunction f;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,82,private DifferentiableMultivariateVectorialFunction function;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,88,rotected double[] target;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,88,protected double[] targetValues;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,91,rotected double[] weights;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,91,protected double[] residualsWeights;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,151,ublic void setConvergenceChecker(VectorialConvergenceChecker checker) {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,152,his.checker = checker;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,151,public void setConvergenceChecker(VectorialConvergenceChecker convergenceChecker) {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,152,this.checker = convergenceChecker;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,185,inal double factor = -Math.sqrt(weights[i]);
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,185,final double factor = -Math.sqrt(residualsWeights[i]);
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,205,bjective = f.value(point);
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,205,objective = function.value(point);
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,212,inal double residual = target[i] - objective[i];
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,212,final double residual = targetValues[i] - objective[i];
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,214,ost += weights[i] * residual * residual;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,214,cost += residualsWeights[i] * residual * residual;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,234,riterion += weights[i] * residual * residual;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,234,criterion += residualsWeights[i] * residual * residual;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,247,hiSquare += residual * residual / weights[i];
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,247,chiSquare += residual * residual / residualsWeights[i];
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,332,his.f         = f;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,333,F             = f.jacobian();
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,334,his.target    = target.clone();
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,335,his.weights   = weights.clone();
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,336,his.point     = startPoint.clone();
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,337,his.residuals = new double[target.length];
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,332,function         = f;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,333,jF               = f.jacobian();
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,334,targetValues     = target.clone();
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,335,residualsWeights = weights.clone();
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,336,this.point       = startPoint.clone();
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,337,this.residuals   = new double[target.length];
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,64,rivate DifferentiableMultivariateRealFunction f;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,64,private DifferentiableMultivariateRealFunction function;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,70,rotected GoalType goalType;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,70,protected GoalType goal;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,121,ublic void setConvergenceChecker(RealConvergenceChecker checker) {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,122,his.checker = checker;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,121,public void setConvergenceChecker(RealConvergenceChecker convergenceChecker) {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,122,this.checker = convergenceChecker;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,143, @param point point at which the gradient must be evaluated
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,143,* @param evaluationPoint point at which the gradient must be evaluated
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,147,rotected double[] computeObjectiveGradient(final double[] point)
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,147,protected double[] computeObjectiveGradient(final double[] evaluationPoint)
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,150,eturn gradient.value(point);
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,150,return gradient.value(evaluationPoint);
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,155, @param point point at which the objective function must be evaluated
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,155,* @param evaluationPoint point at which the objective function must be evaluated
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,161,rotected double computeObjectiveValue(final double[] point)
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,161,protected double computeObjectiveValue(final double[] evaluationPoint)
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,165,oint);
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,165,evaluationPoint);
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,167,eturn f.value(point);
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,167,return function.value(evaluationPoint);
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,182,his.f        = f;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,183,radient      = f.gradient();
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,184,his.goalType = goalType;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,185,oint         = startPoint.clone();
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,182,function = f;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,183,gradient = f.gradient();
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,184,goal     = goalType;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,185,point    = startPoint.clone();
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,84,inal double weight   = weights[i];
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,85,inal double residual = objective[i] - target[i];
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,84,final double weight   = residualsWeights[i];
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,85,final double residual = objective[i] - targetValues[i];
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,86," @param solver solver to use during line search, may be null"
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,86,"* @param lineSearchSolver solver to use during line search, may be null"
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,90,ublic void setLineSearchSolver(final UnivariateRealSolver solver) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,91,his.solver = solver;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,90,public void setLineSearchSolver(final UnivariateRealSolver lineSearchSolver) {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,91,this.solver = lineSearchSolver;
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,127,f (goalType == GoalType.MINIMIZE) {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,127,if (goal == GoalType.MINIMIZE) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,171,f (goalType == GoalType.MINIMIZE) {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,171,if (goal == GoalType.MINIMIZE) {
False,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,47,rotected LinearObjectiveFunction f;
True,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,47,protected LinearObjectiveFunction function;
False,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,50,rotected Collection<LinearConstraint> constraints;
True,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,50,protected Collection<LinearConstraint> linearConstraints;
False,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,53,rotected GoalType goalType;
True,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,53,protected GoalType goal;
False,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,56,rotected boolean restrictToNonNegative;
True,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,56,protected boolean nonNegative;
False,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,98,his.f                     = f;
False,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,99,his.constraints           = constraints;
False,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,100,his.goalType              = goalType;
False,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,101,his.restrictToNonNegative = restrictToNonNegative;
True,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,98,this.function          = f;
True,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,99,this.linearConstraints = constraints;
True,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,100,this.goal              = goalType;
True,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,101,this.nonNegative       = restrictToNonNegative;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,187,"ew SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon);"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,187,"new SimplexTableau(function, linearConstraints, goal, nonNegative, epsilon);"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,195, @param constraints original (not normalized) constraints
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,195,* @param originalConstraints original (not normalized) constraints
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,198,ublic List<LinearConstraint> normalizeConstraints(Collection<LinearConstraint> constraints) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,198,public List<LinearConstraint> normalizeConstraints(Collection<LinearConstraint> originalConstraints) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,200,or (LinearConstraint constraint : constraints) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,200,for (LinearConstraint constraint : originalConstraints) {
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,186,andomGenerator rand = getRan();
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,187,ouble r = rand.nextDouble();
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,186,double r = getRan().nextDouble();
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,207,andomGenerator rand = getRan();
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,208,ouble r = rand.nextDouble();
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,206,double r = getRan().nextDouble();
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,359,andomGenerator rand = getRan();
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,357,final RandomGenerator generator = getRan();
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,369,nd = rand.nextDouble();
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,367,rnd = generator.nextDouble();
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,461,andomGenerator rand = getRan();
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,462,eturn sigma * rand.nextGaussian() + mu;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,459,return sigma * getRan().nextGaussian() + mu;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,484,andomGenerator rand = getRan();
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,485,ouble unif = rand.nextDouble();
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,481,final RandomGenerator generator = getRan();
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,482,double unif = generator.nextDouble();
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,487,nif = rand.nextDouble();
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,484,unif = generator.nextDouble();
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,514,andomGenerator rand = getRan();
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,511,final RandomGenerator generator = getRan();
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,517,ouble u = rand.nextDouble();
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,514,double u = generator.nextDouble();
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,519, = rand.nextDouble();
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,516,u = generator.nextDouble();
False,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,127, @param data matrix with columns representing variables to correlate
True,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,127,* @param matrix matrix with columns representing variables to correlate
False,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,130,ublic RealMatrix computeCorrelationMatrix(double[][] data) {
False,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,131,eturn computeCorrelationMatrix(new BlockRealMatrix(data));
True,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,130,public RealMatrix computeCorrelationMatrix(double[][] matrix) {
True,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,131,return computeCorrelationMatrix(new BlockRealMatrix(matrix));
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,484, @param isBiasCorrected The isBiasCorrected to set.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,484,* @param biasCorrected The isBiasCorrected to set.
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,486,ublic void setBiasCorrected(boolean isBiasCorrected) {
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,487,his.isBiasCorrected = isBiasCorrected;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,486,public void setBiasCorrected(boolean biasCorrected) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,487,this.isBiasCorrected = biasCorrected;
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,56, @param tTest the new instance to use
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,56,* @param chiSquareTest the new instance to use
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,59,ublic static void setChiSquareTest(TTest tTest) {
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,60,estUtils.tTest = tTest;
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,59,public static void setChiSquareTest(TTest chiSquareTest) {
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,60,TestUtils.tTest = chiSquareTest;
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,340, @param expansionFactor factor to be checked
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,341, @param contractionCriteria criteria to be checked
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,340,* @param expansion factor to be checked
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,341,* @param contraction criteria to be checked
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,345,rotected void checkContractExpand(
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,346,"loat contractionCriteria,"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,347,loat expansionFactor) {
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,345,"protected void checkContractExpand(float contraction, float expansion) {"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,349,f (contractionCriteria < expansionFactor) {
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,347,if (contraction < expansion) {
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,354,"ontractionCriteria, expansionFactor);"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,352,"contraction, expansion);"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,357,f (contractionCriteria <= 1.0) {
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,355,if (contraction <= 1.0) {
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,362,ontractionCriteria);
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,360,contraction);
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,365,f (expansionFactor <= 1.0) {
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,363,if (expansion <= 1.0) {
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,368,xpansionFactor);
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,366,expansion);
False,src/test/java/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/java/org/apache/commons/math/genetics/DummyBinaryChromosome.java,35,ublic AbstractListChromosome<Integer> newFixedLengthChromosome(List<Integer> representation) {
False,src/test/java/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/java/org/apache/commons/math/genetics/DummyBinaryChromosome.java,36,eturn new DummyBinaryChromosome(representation);
True,src/test/java/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/java/org/apache/commons/math/genetics/DummyBinaryChromosome.java,35,public AbstractListChromosome<Integer> newFixedLengthChromosome(List<Integer> chromosomeRepresentation) {
True,src/test/java/org/apache/commons/math/genetics/DummyBinaryChromosome.java,src/test/java/org/apache/commons/math/genetics/DummyBinaryChromosome.java,36,return new DummyBinaryChromosome(chromosomeRepresentation);
False,src/test/java/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/java/org/apache/commons/math/genetics/DummyRandomKey.java,35,ublic AbstractListChromosome<Double> newFixedLengthChromosome(List<Double> representation) {
False,src/test/java/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/java/org/apache/commons/math/genetics/DummyRandomKey.java,36,eturn new DummyRandomKey(representation);
True,src/test/java/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/java/org/apache/commons/math/genetics/DummyRandomKey.java,35,public AbstractListChromosome<Double> newFixedLengthChromosome(List<Double> chromosomeRepresentation) {
True,src/test/java/org/apache/commons/math/genetics/DummyRandomKey.java,src/test/java/org/apache/commons/math/genetics/DummyRandomKey.java,36,return new DummyRandomKey(chromosomeRepresentation);
False,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,116,ublic AbstractListChromosome<Integer> newFixedLengthChromosome(List<Integer> representation) {
False,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,117,eturn new FindOnes(representation);
True,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,116,public AbstractListChromosome<Integer> newFixedLengthChromosome(List<Integer> chromosomeRepresentation) {
True,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,117,return new FindOnes(chromosomeRepresentation);
False,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,127,ublic AbstractListChromosome<Double> newFixedLengthChromosome(List<Double> representation) {
False,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,128,eturn new MinPermutations(representation);
True,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,127,public AbstractListChromosome<Double> newFixedLengthChromosome(List<Double> chromosomeRepresentation) {
True,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,128,return new MinPermutations(chromosomeRepresentation);

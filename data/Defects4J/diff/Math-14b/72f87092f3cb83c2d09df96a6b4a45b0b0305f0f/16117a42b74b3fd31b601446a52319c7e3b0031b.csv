is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,36,  The internal storage array starts with capacity determined by the
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,37," <code>initialCapacity</code> property, which can be set by the constructor."
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,36,* The internal storage array starts with capacity determined by the
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,37,"* {@code initialCapacity} property, which can be set by the constructor."
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,39, {@link #addElement(double)} appends elements to the end of the array.  When
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,40," there are no open entries at the end of the internal storage array, the"
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,41, array is expanded.  The size of the expanded array depends on the
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,42, <code>expansionMode</code> and <code>expansionFactor</code> properties.
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,43, The <code>expansionMode</code> determines whether the size of the array is
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,44, multiplied by the <code>expansionFactor</code> (MULTIPLICATIVE_MODE) or if
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,45, the expansion is additive (ADDITIVE_MODE -- <code>expansionFactor</code>
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,46, storage locations added).  The default <code>expansionMode</code> is
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,47, MULTIPLICATIVE_MODE and the default <code>expansionFactor</code>
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,48, is 2.0.
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,39,* {@link #addElement(double)} appends elements to the end of the array.
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,40,"* When there are no open entries at the end of the internal storage array,"
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,41,* the array is expanded.  The size of the expanded array depends on the
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,42,* {@code expansionMode} and {@code expansionFactor} properties.
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,43,* The {@code expansionMode} determines whether the size of the array is
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,44,* multiplied by the {@code expansionFactor}
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,45,* ({@link ExpansionMode#MULTIPLICATIVE}) or if the expansion is additive
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,46,* ({@link ExpansionMode#ADDITIVE} -- {@code expansionFactor} storage
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,47,* locations added).
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,48,* The default {@code expansionMode} is {@code MULTIPLICATIVE} and the default
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,49,* {@code expansionFactor} is 2.
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,59, elements (the <code>numElements</code> property) and if the difference
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,60,* elements (the {@code numElements} property) and if the difference
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,61, <code>numElements + 1.</code>  The determination of when the internal
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,62," storage array is ""too large"" depends on the <code>expansionMode</code> and"
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,63, <code>contractionFactor</code> properties.  If  the <code>expansionMode</code>
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,64," is <code>MULTIPLICATIVE</code>, contraction is triggered when the"
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,65, ratio between storage array length and <code>numElements</code> exceeds
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,66, <code>contractionFactor.</code>  If the <code>expansionMode</code>
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,67," is <code>ADDITIVE</code>, the number of excess storage locations"
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,68, is compared to <code>contractionFactor.</code>
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,62,* {@code numElements + 1}.  The determination of when the internal
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,63,"* storage array is ""too large"" depends on the {@code expansionMode} and"
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,64,* {@code contractionFactor} properties.  If  the {@code expansionMode}
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,65,"* is {@code MULTIPLICATIVE}, contraction is triggered when the"
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,66,* ratio between storage array length and {@code numElements} exceeds
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,67,* {@code contractionFactor.}  If the {@code expansionMode}
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,68,"* is {@code ADDITIVE}, the number of excess storage locations"
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,69,* is compared to {@code contractionFactor}.
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,72, <code>expansionFactor</code> must not exceed the
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,73, <code>contractionFactor.</code> Constructors and mutators for both of these
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,74," properties enforce this requirement, throwing IllegalArgumentException if it"
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,75, is violated.
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,73,* {@code expansionFactor} must not exceed the {@code contractionFactor}.
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,74,* Constructors and mutators for both of these properties enforce this
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,75,"* requirement, throwing a {@code MathIllegalArgumentException} if it is"
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,76,* violated.
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,108, <code>internalArray.length * expansionFactor</code>
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,109," if <code>expansionMode</code> is set to MULTIPLICATIVE_MODE, or"
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,110, <code>internalArray.length + expansionFactor</code> if
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,111, <code>expansionMode</code> is set to ADDITIVE_MODE.
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,109,* {@code internalArray.length * expansionFactor}
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,110,"* if {@code expansionMode} is set to MULTIPLICATIVE_MODE, or"
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,111,* {@code internalArray.length + expansionFactor} if
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,112,* {@code expansionMode} is set to ADDITIVE_MODE.
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,116, Determines whether array expansion by <code>expansionFactor</code>
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,117,* Determines whether array expansion by {@code expansionFactor}
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,140, array.  The addressable elements in the array are <code>
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,141," internalArray[startIndex],...,internalArray[startIndex + numElements -1]"
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,142, </code>
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,141,* array.  The addressable elements in the array are
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,142,"* {@code internalArray[startIndex],...,internalArray[startIndex + numElements - 1]}."
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,165,ublic ResizableDoubleArray()
False,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,166,hrows MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,165,public ResizableDoubleArray() {
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,763,* Provides <em>direct</em> access to the internal storage array.
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,764,* Please note that this method returns a reference to this object's
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,765,"* storage array, not a copy."
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,766,* <br/>
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,767,"* To correctly address elements of the array, the ""start index"" is"
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,768,* required (available via the {@link #getStartIndex() getStartIndex}
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,769,* method.
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,770,* <br/>
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,771,* This method should only be used to avoid copying the internal array.
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,772,* The returned value <em>must</em> be used for reading only; other
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,773,* uses could lead to this object becoming inconsistent.
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,774,* <br/>
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,775,* The {@link #getElements} method has no such limitation since it
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,776,* returns a copy of this array's addressable elements.
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,778,* @return the internal storage array used by this object.
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,779,* @since 3.1
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,781,protected double[] getArrayRef() {
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,782,return internalArray;
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,786,"* Returns the ""start index"" of the internal array."
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,787,* This index is the position of the first addressable element in the
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,788,* internal storage array.
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,789,* The addressable elements in the array are at indices contained in
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,790,"* the interval [{@link #getStartIndex()},"
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,791,*               {@link #getStartIndex()} + {@link #getNumElements()} - 1].
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,793,* @return the start index.
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,794,* @since 3.1
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,796,protected int getStartIndex() {
True,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java,797,return startIndex;
True,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,544,@Test
True,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,545,public void testGetArrayRef() {
True,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,546,final ResizableDoubleArray a = new ResizableDoubleArray();
True,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,548,"// Modify ""a"" through the public API."
True,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,549,final int index = 20;
True,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,550,final double v1 = 1.2;
True,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,551,"a.setElement(index, v1);"
True,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,553,// Modify the internal storage through the protected API.
True,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,554,final double v2 = v1 + 3.4;
True,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,555,final double[] aInternalArray = a.getArrayRef();
True,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,556,aInternalArray[a.getStartIndex() + index] = v2;
True,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java,558,"Assert.assertEquals(v2, a.getElement(index), 0d);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,21,import com.google.javascript.jscomp.Scope.Var;
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,170,"rivate Map<String, Node> aliases = Maps.newHashMap();"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,171,"private Map<String, Var> aliases = Maps.newHashMap();"
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,249,"liases.put(n.getString(), n.getFirstChild());"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,250,"aliases.put(n.getString(), t.getScope().getVar(n.getString()));"
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,252,/ Undeclare the variable.
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,253,.getScope().undeclare(t.getScope().getVar(n.getString()));
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,263,f (type == Token.NAME && NodeUtil.isAssignmentOp(parent)) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,261,if (type == Token.NAME && NodeUtil.isAssignmentOp(parent) &&
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,262,n == parent.getFirstChild()) {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,278,ode aliasedNode = aliases.get(n.getString());
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,279,/ The variable should not exist since we undeclared it when we found
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,280,"/ it.  If it does exist, it's because it's been overridden."
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,281,f (t.getScope().getVar(n.getString()) == null &&
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,282,liasedNode != null) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,277,String name = n.getString();
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,278,Var aliasVar = aliases.get(name);
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,280,// Check if this name points to an alias.
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,281,if (aliasVar != null &&
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,282,t.getScope().getVar(name) == aliasVar) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,289,Node aliasedNode = aliasVar.getInitialValue();
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,312,ode aliasedNode = aliases.get(baseName);
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,313,f (aliasedNode != null) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,313,Var aliasVar = aliases.get(baseName);
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,314,if (aliasVar != null) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,315,Node aliasedNode = aliasVar.getInitialValue();
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,19,import com.google.common.base.Preconditions;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,20,mport com.google.common.collect.Maps;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,25,mport java.util.Collection;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,26,mport java.util.Collections;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,27,mport java.util.Comparator;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,24,import java.util.ArrayDeque;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,25,import java.util.Deque;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,29,mport java.util.Map;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,37,* @author johnlenz@google.com (John Lenz)
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,54, The input source file.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,52,* The JSON escaped input source file.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,78, The original name of the token found at the position
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,76,* The JSON escaped original name of the token found at the position
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,89,ut.append(escapeString(sourceFile));
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,87,out.append(sourceFile);
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,92,"ut.append(originalPosition.getLineNumber() + """");"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,90,out.append(String.valueOf(originalPosition.getLineNumber()));
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,95,"ut.append(originalPosition.getCharacterIndex() + """");"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,93,out.append(String.valueOf(originalPosition.getCharacterIndex()));
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,99,ut.append(escapeString(originalName));
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,97,out.append(originalName);
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,108, Information about a particular line in the compiled (generated) source.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,110,rivate static class LineMapping {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,112, The line number of this line (indexed by 0).
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,114,nt lineNumber;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,117, The number of characters on this line.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,118," Note: This is not guarenteed to be accurate, but"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,119, rather merely reflects the number of characters as
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,120," known by the source map, which is good enough for"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,121, our purposes (because we do not have any information
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,122, for the missing characters anyway).
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,124,nt length;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,127, The list of all character mappings. Equivalent
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,128, to the values found in the charToMap.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,130,ist<LineCharMapping> characterMappings = Lists.newArrayList();
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,133, A mapping of each character index on the line to
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,134, its equivalent LineCharMapping describing that character's
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,135, original source file and location.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,137,"ap<Integer, LineCharMapping> charToMap = Maps.newHashMap();"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,140, Appends the line mapping's character map to the given
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,141, buffer.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,143,oid appendCharMapTo(Appendable out) throws IOException {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,144,"ut.append(""["");"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,146,or (int j = 0; j <= length; ++j) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,147,f (j > 0) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,148,"ut.append("","");"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,151,ineCharMapping current = charToMap.get(j);
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,153,f (current == null) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,154,"ut.append(""-1"");"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,155, else {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,156,ut.append(String.valueOf(current.basisMapping.id));
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,160,"ut.append(""]"");"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,165, Maps a range of characters in the compiled source file
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,166, back to a given Mapping.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,168,rivate static class LineCharMapping {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,170, The starting character in the compiled code.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,172,nt startCharacter;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,175, The ending character in the compiled code.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,177,nt endCharacter;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,180, The mapping associated with this character range
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,181, on the line(s) in the compiled code.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,183,apping basisMapping;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,187, The list of mappings stored in this map.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,105,* A pre-order traversal ordered list of mappings stored in this map.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,212, Adds a mapping for the given node.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,130,* Cache of escaped source file name.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,132,private String lastSourceFile = null;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,133,private String lastSourceFileEscaped = null;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,136,* Adds a mapping for the given node.  Mappings must be added in order.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,219,bject sourceFile = node.getProp(Node.SOURCEFILE_PROP);
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,143,String sourceFile = (String)node.getProp(Node.SOURCEFILE_PROP);
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,152,"// The source file rarely changes, so cache the escaped string."
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,153,String escapedSourceFile;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,154,"if (lastSourceFile != sourceFile) {  // yes, ""s1 != s2"" not ""!s1.equals(s2)"""
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,155,lastSourceFile = sourceFile;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,156,lastSourceFileEscaped = escapeString(sourceFile);
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,158,escapedSourceFile = lastSourceFileEscaped;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,231,apping.sourceFile = sourceFile.toString();
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,163,mapping.sourceFile = escapedSourceFile;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,234,bject originalName = node.getProp(Node.ORIGINALNAME_PROP);
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,166,String originalName = (String)node.getProp(Node.ORIGINALNAME_PROP);
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,236,apping.originalName = originalName.toString();
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,168,mapping.originalName = escapeString(originalName);
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,233,// TODO(johnlenz): correct this.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,234,"// Preconditions.checkState(mappings.isEmpty(),"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,235,"//     ""Must be set prior to adding mappings"");"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,315, Return structure from a determineLineMappings() call.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,249,* Scan the mappings and return the last line mapped.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,317,rivate static class LineMappingInformation {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,318,"ap<Integer, LineMapping> mappings;"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,319,nt maxLine;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,321,"ublic LineMappingInformation(Map<Integer, LineMapping> mappings,"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,322,nt maxLine) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,323,his.maxLine = maxLine;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,324,his.mappings = mappings;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,329, Build the list of mappings per line and per each character on
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,330, that line. This will allow consumers of this source map to ask:
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,331," ""Which mapping best describes this character on this line in the"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,332," generated source code?""."
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,334,rivate LineMappingInformation determineLineMappings() {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,251,private int findLastLine() {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,336,"ap<Integer, LineMapping> lineMappings = Maps.newHashMap();"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,339,nt prefixLine = prefixPosition.getLineNumber();
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,341,nt startPositionLine =
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,342,refixLine + mapping.startPosition.getLineNumber();
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,344,nt endPositionLine = prefixLine + mapping.endPosition.getLineNumber();
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,346,/ Determine the size of the line.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,254,int endPositionLine = mapping.endPosition.getLineNumber();
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,349,/ Iterate over each (possibly partial) line in the generated file that
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,350,/ this mapping represents.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,351,or (int i = startPositionLine; i <= endPositionLine; ++i) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,352,ineMapping lineMapping = lineMappings.get(i);
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,354,"/ If there is no line mapping for the current line, create it."
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,355,f (lineMapping == null) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,356,ineMapping = new LineMapping();
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,357,ineMapping.lineNumber = i;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,358,"ineMappings.put(i, lineMapping);"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,361,nt startCharacter = mapping.startPosition.getCharacterIndex();
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,363,/ If this is the first line of the generated source file
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,364,"/ (before we consider the prefix added), then add the"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,365,/ offset on the line caused by the inclusion of the prefix.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,366,f (mapping.startPosition.getLineNumber() == 0) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,367,tartCharacter += prefixPosition.getCharacterIndex();
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,370,nt endCharacter = mapping.endPosition.getCharacterIndex();
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,372,f (mapping.endPosition.getLineNumber() == 0) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,373,ndCharacter += prefixPosition.getCharacterIndex();
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,376,/ Set the length of the current line's mapping.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,377,"ineMapping.length = Math.max(lineMapping.length, endCharacter);"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,379,"/ If we are not on the starting line, then it means the current"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,380,/ mapping is multiline and must start on the 0th character.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,381,f (i > startPositionLine) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,382,tartCharacter = 0;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,385,"/ If we are not on the ending line, then it means the current"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,386,/ mapping is multiline and must start on the last character.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,387,f (i < endPositionLine) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,388,ndCharacter = Integer.MAX_VALUE;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,391,/ Create the line character mapping for this character.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,392,ineCharMapping lcm = new LineCharMapping();
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,393,cm.startCharacter = startCharacter;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,394,cm.endCharacter = endCharacter;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,395,cm.basisMapping = mapping;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,397,ineMapping.characterMappings.add(lcm);
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,401,"eturn new LineMappingInformation(lineMappings, maxLine);"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,406," For each character on each of the lines, find the LineCharMapping which"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,407, best represents the generation of that character. This is done by finding
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,408, ALL the LineCharMappings which span that character and then taking the one
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,409," with the *smallest* span. For example, this means that if you have an LCM"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,410," representing a block and an LCM inside of it representing a string literal,"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,411," the string literal will (correctly) be chosen, because its span is smaller"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,412, than that of the block for the characters representing the string literal.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,414,rivate void buildCharacterMappings(Collection<LineMapping> lineMappings) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,415,or (LineMapping lineMapping : lineMappings) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,416,or (int i = 0; i <= lineMapping.length; ++i) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,417,nt minLength = Integer.MAX_VALUE;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,418,ineCharMapping current = null;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,420,"ollections.sort(lineMapping.characterMappings,"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,421,ew Comparator<LineCharMapping>() {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,422,Override
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,423,"ublic int compare(LineCharMapping first, LineCharMapping second) {"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,424,apping firstBasis = first.basisMapping;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,425,apping secondBasis = second.basisMapping;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,427,tring firstName = firstBasis.originalName;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,428,tring secondName = secondBasis.originalName;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,430,"irstName = firstName == null ? """" : firstName;"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,431,"econdName = secondName == null ? """" : secondName;"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,433,eturn firstName.compareTo(secondName);
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,437,or (LineCharMapping lcm : lineMapping.characterMappings) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,438,/ Ignore LCMs that do not include the current character.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,439,f (i < lcm.startCharacter || i > lcm.endCharacter) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,440,ontinue;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,443,nt lcmLength = lcm.endCharacter - lcm.startCharacter;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,445,/ Give precedence to items with names.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,446,f (lcmLength == minLength && lcm.basisMapping.originalName != null) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,447,urrent = lcm;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,448,ontinue;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,451,f (lcmLength < minLength) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,452,inLength = lcmLength;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,453,urrent = lcm;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,457,"ineMapping.charToMap.put(i, current);"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,463, Retrieves the mapping for the given position in the generated source file.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,465,apping getMappingFor(Position position) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,466,/ Build the map for each line.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,467,ineMappingInformation info = determineLineMappings();
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,468,"ap<Integer, LineMapping> lineMappings = info.mappings;"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,470,/ Build the character maps for each line.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,471,uildCharacterMappings(lineMappings.values());
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,473,ineMapping lineMapping = lineMappings.get(position.getLineNumber());
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,475,f (lineMapping == null) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,476,eturn null;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,479,ineCharMapping lcm =
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,480,ineMapping.charToMap.get(position.getCharacterIndex());
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,483,f (lcm == null) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,484,eturn null;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,487,eturn lcm.basisMapping;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,257,// Adjust for the prefix.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,258,return maxLine + prefixPosition.getLineNumber();
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,498,/ Build the map for each line.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,499,ineMappingInformation info = determineLineMappings();
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,501,"ap<Integer, LineMapping> lineMappings = info.mappings;"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,502,nt maxLine = info.maxLine;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,504,/ Build the character maps for each line.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,505,uildCharacterMappings(lineMappings.values());
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,300,int maxLine = findLastLine();
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,542,"ut.append((maxLine + 1) + """");"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,306,out.append(String.valueOf(maxLine + 1));
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,545,or (int i = 0; i <= maxLine; ++i) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,546,ineMapping lineMapping = lineMappings.get(i);
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,548,f (lineMapping == null) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,549,"ut.append(""[]"");"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,550, else {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,551,ineMapping.appendCharMapTo(out);
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,554,"ut.append(""\n"");"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,308,(new LineMapper(out)).appendLineMappings();
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,560,/ Add legacy file mapping section.  This data is never used but it is
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,561,/ need for the current file format.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,313,// This section is unused but we need one entry per line to
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,314,// prevent changing the format.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,569,or (int i = 0; i < mappings.size(); ++i) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,570,apping mapping = mappings.get(i);
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,322,for (Mapping mapping : mappings) {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,329,* A class to build the line/character to mappings section
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,330,* of the source map.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,332,private class LineMapper {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,333,// The destination.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,334,private final Appendable out;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,335,// The last line and column written
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,336,private int line;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,337,private int col;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,338,// Whether the current line has had a value written yet.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,339,private boolean firstChar = true;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,341,private final static int UNMAPPED = -1;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,342,"private final static String UNMAPPED_STRING = ""-1"";"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,344,LineMapper(Appendable out) {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,345,this.out = out;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,348,// Append the line mapping entries.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,349,void appendLineMappings() throws IOException {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,350,Preconditions.checkState(!mappings.isEmpty());
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,352,// Start the first line.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,353,openLine();
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,355,// The mapping list is ordered as a pre-order traversal.  The mapping
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,356,// positions give us enough information to rebuild the stack and this
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,357,// allows the building of the source map in O(n) time.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,358,Deque<Mapping> stack = new ArrayDeque<Mapping>();
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,359,for (Mapping m : mappings) {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,360,// Find the closest ancestor of the current mapping:
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,361,"// An overlapping mapping is an ancestor of the current mapping, any"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,362,// non-overlapping mappings are siblings (or cousins) and must be
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,363,// closed in the reverse order of when they encountered.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,364,"while (!stack.isEmpty() && !isOverlapped(stack.peek(), m)) {"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,365,Mapping previous = stack.pop();
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,366,writeClosedMapping(previous);
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,369,// Any gaps between the current line position and the start of the
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,370,// current mapping belong to the parent.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,371,Mapping parent = stack.peek();
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,372,"writeCharsBetween(parent, m);"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,374,stack.push(m);
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,377,"// There are no more children to be had, simply close the remaining"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,378,// mappings in the reverse order of when they encountered.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,379,while (!stack.isEmpty()) {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,380,Mapping m = stack.pop();
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,381,writeClosedMapping(m);
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,384,// And close the final line.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,385,closeLine();
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,389,* Begin the entry for a new line.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,391,private void openLine() throws IOException {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,392,"out.append(""["");"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,393,this.firstChar = true;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,397,* End the entry for a line.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,399,private void closeLine() throws IOException {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,400,"out.append(""]\n"");"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,404,* Add a new char position entry.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,405,* @param id The mapping id to record.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,407,private void addCharEntry(String id) throws IOException {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,408,if (firstChar) {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,409,firstChar = false;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,410,} else {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,411,"out.append("","");"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,413,out.append(id);
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,417,* @return The line adjusted for the prefix position.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,419,private int getAdjustedLine(Position p) {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,420,return p.getLineNumber() + prefixPosition.getLineNumber();
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,424,* @return The column adjusted for the prefix position.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,426,private int getAdjustedCol(Position p) {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,427,int rawLine = p.getLineNumber();
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,428,int rawCol = p.getCharacterIndex();
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,429,// Only the first line needs the character position adjusted.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,430,return (rawLine != 0)
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,431,? rawCol : rawCol + prefixPosition.getCharacterIndex();
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,435,* @return Whether m1 ends before m2 starts.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,437,"private boolean isOverlapped(Mapping m1, Mapping m2) {"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,438,"// No need to use adjusted values here, relative positions are sufficient."
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,439,int l1 = m1.endPosition.getLineNumber();
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,440,int l2 = m2.startPosition.getLineNumber();
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,441,int c1 = m1.endPosition.getCharacterIndex();
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,442,int c2 = m2.startPosition.getCharacterIndex();
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,444,return (l1 == l2 && c1 >= c2) || l1 > l2;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,448,* Write any needed entries from the current position to the end of the
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,449,* provided mapping.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,451,private void writeClosedMapping(Mapping m) throws IOException {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,452,int nextLine = getAdjustedLine(m.endPosition);
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,453,int nextCol = getAdjustedCol(m.endPosition);
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,454,// If this anything remaining in this mapping beyond the
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,455,"// current line and column position, write it out now."
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,456,if (line < nextLine || (line == nextLine && col < nextCol)) {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,457,"writeCharsUpTo(nextLine, nextCol, m.id);"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,462,* Write any needed entries to complete the provided mapping.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,464,"private void writeCharsBetween(Mapping prev, Mapping next)"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,465,throws IOException {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,466,int nextLine = getAdjustedLine(next.startPosition);
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,467,int nextCol = getAdjustedCol(next.startPosition);
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,468,"// If the previous value is null, no mapping exists use the special"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,469,"// ""unmapped value""(-1)."
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,470,int id = (prev != null) ? prev.id : UNMAPPED;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,471,"writeCharsUpTo(nextLine, nextCol, id);"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,475,* Write any entries needed between the current position the next position
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,476,* and update the current position.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,478,private void writeCharsUpTo(
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,479,"int nextLine, int nextCol, int id)"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,480,throws IOException {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,481,"Preconditions.checkState(line <= nextLine, """");"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,482,Preconditions.checkState(line < nextLine || col <= nextCol);
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,484,if (line == nextLine && col == nextCol) {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,485,// Nothing to do.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,486,return;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,489,String idString = (id == UNMAPPED) ? UNMAPPED_STRING : String.valueOf(id);
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,490,for (int i = line; i <= nextLine; i++) {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,491,if (i == nextLine) {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,492,for (int j = col; j < nextCol; j++) {
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,493,addCharEntry(idString);
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,495,break;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,498,closeLine();
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,499,openLine();
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,502,line = nextLine;
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,503,col = nextCol;
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,811,String assertedNodeName = assertedNode.getQualifiedName();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,813,witch (assertedNode.getType()) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,814,ase Token.NAME:
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,815,SType type = getJSType(assertedNode);
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,816,SType narrowed = type.restrictByNotNullOrUndefined();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,817,f (type != narrowed) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,818,cope = scope.createChildFlowScope();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,819,"edeclare(scope, assertedNode.getString(), narrowed);"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,821,reak;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,822,ase Token.AND:
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,823,ase Token.OR:
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,824,ooleanOutcomePair conditionOutcomes =
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,825,"raverseWithinShortCircuitingBinOp(assertedNode, scope);"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,826,cope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,827,"ssertedNode, conditionOutcomes.getOutcomeFlowScope("
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,828,"ssertedNode.getType(), true), true);"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,829,reak;
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,814,if (assertedNodeName != null) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,815,JSType type = getJSType(assertedNode);
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,816,JSType narrowed = type.restrictByNotNullOrUndefined();
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,817,if (type != narrowed) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,818,scope = scope.createChildFlowScope();
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,819,"redeclare(scope, assertedNodeName, narrowed);"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,821,} else if (assertedNode.getType() == Token.AND ||
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,822,assertedNode.getType() == Token.OR) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,823,BooleanOutcomePair conditionOutcomes =
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,824,"traverseWithinShortCircuitingBinOp(assertedNode, scope);"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,825,scope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,826,"assertedNode, conditionOutcomes.getOutcomeFlowScope("
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,827,"assertedNode.getType(), true), true);"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,831, else if (assertedNode.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,829,} else if (assertedNodeName != null) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,837,"edeclare(scope, assertedNode.getString(), narrowed);"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,835,"redeclare(scope, assertedNodeName, narrowed);"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,154,public void testShadowedVar() {
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,155,"test(""var Popup = {};"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,156,"""var OtherPopup = {};"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,157,"""goog.scope(function() {"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,158,"""  var Popup = OtherPopup;"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,159,"""  Popup.newMethod = function() { return new Popup(); };"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,161,"""var Popup = {};"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,162,"""var OtherPopup = {};"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,163,"""OtherPopup.newMethod = function() { return new OtherPopup(); };"");"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,338,public void testAliasNonRedefinition() {
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,339,"test(""var y = {}; goog.scope(function() { goog.dom = y; });"","
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,340,"""var y = {}; goog.dom = y;"");"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,19,import com.google.common.base.Preconditions;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,20,import com.google.common.collect.LinkedListMultimap;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,22,import com.google.common.collect.Multimap;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,26,import org.json.JSONArray;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,27,import org.json.JSONException;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,28,import org.json.JSONObject;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,31,import java.io.Reader;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,32,import java.io.StringReader;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,33,import java.util.Collection;
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,71,"[0]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,81,"""[]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,86,"[0,0,0,0,0,0,0,0,2,2,2,4,4,4,4,5,5,5,5,3,8,8,8,8,9,9,9,9,"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,87,"10,10,10,10,11,11,12,12,12,12,12,12,13,13,13,13,13,6]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,96,"""[1,1,1,1,1,1,1,1,2,2,3,4,4,4,3,5,5,5,3,6,8,8,8,7,9,9,9,7,"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,97,"""10,10,10,7,11,12,12,12,12,12,12,12,13,13,13,13,6]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,115,"[0,0,0,0,0,0,0,0,2,2,2,4,4,4,4,5,5,5,5,3,8,8,8,8,9,9,9,"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,116,"9,10,10,10,10,11,11,11,11,12,12,12,12,12,12,13,13,13,"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,117,"13,13,6]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,126,"""[1,1,1,1,1,1,1,1,2,2,3,4,4,4,3,5,5,5,3,6,8,8,8,7,9,9,9,"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,127,"""7,10,10,10,7,11,11,11,12,12,12,12,12,12,12,13,13,13,"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,128,"""13,6]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,145,"[2,2,2,2]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,156,"""[2,2,2]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,166,public void testGoldenOutput4() throws Exception {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,167,"checkSourceMap(""c:\\myfile.js"","
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,168,"""foo;   boo;   goo;"","
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,170,"""/** Begin line maps. **/"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,171,"""{ \""file\"" : \""testMap\"", \""count\"": 1 }\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,172,"""[2,2,2,4,4,4,4,6,6,6,6]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,174,"""/** Begin file information. **/\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,175,"""[]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,177,"""/** Begin mapping definitions. **/\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,178,"""[\""c:\\\\myfile.js\"",1,0]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,179,"""[\""c:\\\\myfile.js\"",1,0]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,180,"""[\""c:\\\\myfile.js\"",1,0,\""foo\""]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,181,"""[\""c:\\\\myfile.js\"",1,7]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,182,"""[\""c:\\\\myfile.js\"",1,7,\""boo\""]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,183,"""[\""c:\\\\myfile.js\"",1,14]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,184,"""[\""c:\\\\myfile.js\"",1,14,\""goo\""]\n"");"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,228,public String sourceMapFileContent;
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,208,"ap<String, Token> tokens = Maps.newHashMap();"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,241,"Map<String, Token> tokens = Maps.newLinkedHashMap();"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,258,/ Find all instances of the __XXX__ pattern in the generated
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,291,// Find all instances of the __XXX__ pattern in the original
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,295,// Find all instances of the __XXX__ pattern in the generated
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,296,// source code.
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,297,"Map<String, Token> resultTokens = findTokens(result.generatedSource);"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,264,"ap<String, Token> resultTokens = findTokens(result.generatedSource);"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,305,SourceMapReader reader = new SourceMapReader();
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,306,try {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,307,reader.parse(result.sourceMapFileContent);
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,308,} catch (SourceMapParseException e) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,309,"throw new RuntimeException(""unexpected exception"", e);"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,272,ourceMap.Mapping mapping =
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,273,esult.sourceMap.getMappingFor(token.position);
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,315,OriginalMapping mapping = reader.getMappingForLine(
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,316,"token.position.getLineNumber() + 1,"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,317,token.position.getCharacterIndex() + 1);
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,283,"ssertEquals(mapping.originalPosition.getLineNumber(),"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,327,"assertEquals(mapping.position.getLineNumber(),"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,289,ssertNotNull(mapping.originalName);
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,333,assertTrue(!mapping.originalName.isEmpty());
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,293,f (mapping.originalName != null) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,337,if (!mapping.originalName.isEmpty()) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,373,StringBuilder sb = new StringBuilder();
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,374,try {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,375,"result.sourceMap.appendTo(sb, ""testcode"");"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,376,} catch (IOException e) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,377,"throw new RuntimeException(""unexpected exception"", e);"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,383,rr.sourceMapFileContent = sb.toString();
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,387,public static class SourceMapParseException extends IOException {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,388,public SourceMapParseException(String message) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,389,super(message);
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,393,public static class OriginalMapping {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,394,public final String srcfile;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,395,public final Position position;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,396,public final String originalName;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,398,"OriginalMapping(String srcfile, int line, int column, String name) {"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,399,this.srcfile = srcfile;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,400,"this.position = new Position(line, column);"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,401,this.originalName = name;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,406,* Class for parsing and representing a SourceMap
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,407,* TODO(johnlenz): This would be best as a seperate open-source component.
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,408,*     Remove this when it is.
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,410,public class SourceMapReader {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,411,"private static final String LINEMAP_HEADER = ""/** Begin line maps. **/"";"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,412,private static final String FILEINFO_HEADER =
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,413,"""/** Begin file information. **/"";"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,415,private static final String DEFINITION_HEADER =
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,416,"""/** Begin mapping definitions. **/"";"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,419,* Internal class for parsing the SourceMap. Used to maintain parser
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,420,* state in an easy to use instance.
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,422,private class ParseState {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,423,private Reader reader = null;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,424,private int currentPosition = 0;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,426,public ParseState(String contents) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,427,this.reader = new StringReader(contents);
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,431,* Consumes a single character. If we have already reached the end
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,432,"* of the string, returns  -1."
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,434,private int consumeCharacter() {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,435,try {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,436,currentPosition++;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,437,return reader.read();
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,438,} catch (IOException iox) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,439,// Should never happen. Local reader.
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,440,"throw new IllegalStateException(""IOException raised by reader"");"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,445,* Consumes the specified value found in the contents string. If the value
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,446,"* is not found, throws a parse exception."
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,448,public void consume(String value) throws SourceMapParseException {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,449,for (int i = 0; i < value.length(); ++i) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,450,int ch = consumeCharacter();
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,452,if (ch == -1 || ch != value.charAt(i)) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,453,"fail(""At character "" + currentPosition + "" expected: "" + value);"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,459,* Consumes characters until the newline character is found or the string
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,460,* has been entirely consumed. Returns the string consumed (without the
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,461,* newline).
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,463,public String consumeUntilEOL() throws SourceMapParseException {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,464,StringBuilder sb = new StringBuilder();
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,466,int ch = -1;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,468,while ((ch = consumeCharacter()) != '\n') {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,469,if (ch == -1) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,470,return sb.toString();
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,473,sb.append((char) ch);
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,476,return sb.toString();
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,480,* Indicates that parsing has failed by throwing a parse exception.
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,482,public void fail(String message) throws SourceMapParseException {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,483,throw new SourceMapParseException(message);
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,488,"* Mapping from a line number (0-indexed), to a list of mapping IDs, one for"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,489,"* each character on the line. For example, if the array for line 2 is"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,490,"* [4,,,,5,6,,,7], then there will be the entry:"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,492,"* 1 => {4, 4, 4, 4, 5, 6, 6, 6, 7}"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,495,"private Multimap<Integer, Integer> characterMap = null;"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,498,* Map of Mapping IDs to the actual mapping object.
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,500,"private Map<Integer, OriginalMapping> mappings = null;"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,502,public SourceMapReader() {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,506,* Parses the given contents containing a source map.
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,508,public void parse(String contents) throws SourceMapParseException {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,509,ParseState parser = new ParseState(contents);
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,511,characterMap = LinkedListMultimap.create();
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,512,mappings = Maps.newHashMap();
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,514,try {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,515,// /** Begin line maps. **/{ count: 2 }
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,516,parser.consume(LINEMAP_HEADER);
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,517,String countJSON = parser.consumeUntilEOL();
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,519,JSONObject countObject = new JSONObject(countJSON);
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,521,"if (!countObject.has(""count"")) {"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,522,"parser.fail(""Missing 'count'"");"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,525,"int lineCount = countObject.getInt(""count"");"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,527,if (lineCount <= 0) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,528,"parser.fail(""Count must be >= 1"");"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,531,"// [0,,,,,,1,2]"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,532,for (int i = 0; i < lineCount; ++i) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,533,String currentLine = parser.consumeUntilEOL();
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,535,// Blank lines are allowed in the spec to indicate no mapping
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,536,// information for the line.
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,537,if (currentLine.isEmpty()) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,538,continue;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,541,JSONArray charArray = new JSONArray(currentLine);
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,543,int lastID = -1;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,545,for (int j = 0; j < charArray.length(); ++j) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,546,int mappingID = lastID;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,548,if (!charArray.isNull(j)) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,549,mappingID = charArray.optInt(j);
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,552,// Save the current character's mapping.
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,553,"characterMap.put(i, mappingID);"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,555,lastID = mappingID;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,559,// /** Begin file information. **/
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,560,parser.consume(FILEINFO_HEADER);
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,562,if (parser.consumeUntilEOL().length() > 0) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,563,"parser.fail(""Unexpected token after file information header"");"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,566,"// File information. Not used, so we just consume it."
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,567,for (int i = 0; i < lineCount; ++i) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,568,parser.consumeUntilEOL();
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,571,// /** Begin mapping definitions. **/
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,572,parser.consume(DEFINITION_HEADER);
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,574,if (parser.consumeUntilEOL().length() > 0) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,575,"parser.fail(""Unexpected token after definition header"");"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,578,String currentLine = null;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,580,"// ['d.js', 3, 78, 'foo']"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,581,for (int mappingID = 0;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,582,(currentLine = parser.consumeUntilEOL()).length() > 0;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,583,++mappingID) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,585,JSONArray mapArray = new JSONArray(currentLine);
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,587,if (mapArray.length() < 3) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,588,"parser.fail(""Invalid mapping array"");"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,591,OriginalMapping mapping = new OriginalMapping(
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,592,"mapArray.getString(0), // srcfile"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,593,"mapArray.getInt(1),    // line"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,594,"mapArray.getInt(2),    // column"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,595,"mapArray.optString(3, """")); // identifier"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,597,"mappings.put(mappingID, mapping);"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,599,} catch (JSONException ex) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,600,"parser.fail(""JSON parse exception: "" + ex);"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,604,"public OriginalMapping getMappingForLine(int lineNumber, int columnIndex) {"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,605,"Preconditions.checkNotNull(characterMap, ""parse() must be called first"");"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,607,if (!characterMap.containsKey(lineNumber - 1)) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,608,return null;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,611,Collection<Integer> mapIds = characterMap.get(lineNumber - 1);
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,613,int columnPosition = columnIndex - 1;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,614,if (columnPosition >= mapIds.size() || columnPosition < 0) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,615,return null;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,618,// TODO(user): Find a way to make this faster.
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,619,Integer[] mapIdsAsArray = new Integer[mapIds.size()];
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,620,mapIds.<Integer>toArray(mapIdsAsArray);
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,622,int mapId = mapIdsAsArray[columnPosition];
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,624,if (mapId < 0) {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,625,return null;
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,628,return mappings.get(mapId);
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,264,public void testAssert6() {
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,265,JSType startType = createNullableType(OBJECT_TYPE);
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,266,"assuming(""x.y"", startType);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,267,"inFunction(""out1 = x.y; goog.asserts.assert(x.y); out2 = x.y;"");"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,268,"verify(""out1"", startType);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,269,"verify(""out2"", OBJECT_TYPE);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,320,public void testAssertObject3() {
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,321,JSType startType = createNullableType(OBJECT_TYPE);
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,322,"assuming(""x.y"", startType);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,323,"inFunction(""out1 = x.y; goog.asserts.assertObject(x.y); out2 = x.y;"");"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,324,"verify(""out1"", startType);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,325,"verify(""out2"", OBJECT_TYPE);"

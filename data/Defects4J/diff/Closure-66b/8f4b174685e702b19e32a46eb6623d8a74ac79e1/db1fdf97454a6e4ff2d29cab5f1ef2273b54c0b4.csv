is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,19,import com.google.javascript.jscomp.regex.RegExpTree;
False,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,24, regular expressions to be unoptimizable.
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,25,"* regular expressions to be unoptimizable, and checks that regular expressions"
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,26,* are syntactically valid.
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,36,static final DiagnosticType MALFORMED_REGEXP = DiagnosticType.warning(
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,37,"""JSC_MALFORMED_REGEXP"","
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,38,"""Malformed Regular Expression: {0}"");"
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,71,// Check the syntax of regular expression patterns.
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,72,} else if (n.getType() == Token.REGEXP) {
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,73,String pattern = n.getFirstChild().getString();
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,74,String flags = n.getChildCount() == 2
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,75,"? n.getLastChild().getString() : """";"
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,76,try {
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,77,"RegExpTree.parseRegExp(pattern, flags);"
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,78,} catch (IllegalArgumentException ex) {
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,79,"t.report(n, MALFORMED_REGEXP, ex.getMessage());"
False,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,161,heckRegExp.REGEXP_REFERENCE);
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,161,"CheckRegExp.REGEXP_REFERENCE,"
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,162,CheckRegExp.MALFORMED_REGEXP);
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,387,nt type = blockChild.getType();
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,2,* Copyright 2011 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,19,import com.google.javascript.jscomp.regex.RegExpTree;
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,20,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,21,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,24,* Simplifies regular expression patterns and flags.
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,27,class PeepholeSimplifyRegExp extends AbstractPeepholeOptimization {
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,29,@Override
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,30,Node optimizeSubtree(Node subtree) {
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,31,if (subtree.getType() == Token.REGEXP) {
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,32,// Split regexp into pattern and flags.
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,33,String pattern = subtree.getFirstChild().getString();
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,34,String flags = subtree.getChildCount() == 2
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,35,"? subtree.getLastChild().getString() : """";"
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,36,// Parse to an AST and optimize.
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,37,RegExpTree regexTree;
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,38,try {
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,39,"regexTree = RegExpTree.parseRegExp(pattern, flags);"
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,40,} catch (IllegalArgumentException ex) {
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,41,// Warnings are propagated in the CheckRegExp pass.
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,42,return subtree;
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,44,regexTree = regexTree.simplify(flags);
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,45,// Decompose the AST.
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,46,String literal = regexTree.toString();
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,47,"String newPattern = literal.substring(1, literal.length() - 1);"
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,48,// Remove unnecessary flags and order them consistently for gzip.
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,49,String newFlags = (
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,50,// The g flags cannot match or replace more than one instance if it is
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,51,// anchored at the front and back as in /^foo$/ and if the anchors are
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,52,// relative to the whole string.
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,53,"// But if the regex has capturing groups, then the match operator"
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,54,// would return capturing groups without the g flag.
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,55,"(flags.contains(""g"")"
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,56,"&& (!RegExpTree.matchesWholeInput(regexTree, flags)"
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,57,|| regexTree.hasCapturingGroup())
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,58,"? ""g"" : """")"
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,59,// Remove the i flag if it doesn't have any effect.
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,60,// E.g. /[a-z0-9_]/i -> /\w/
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,61,"+ (flags.contains(""i"") && regexTree.isCaseSensitive() ? ""i"" : """")"
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,62,"// If the regular expression contains no anchors, then the m flag has"
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,63,// no effect.
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,64,"+ (flags.contains(""m"") && regexTree.containsAnchor() ? ""m"" : """"));"
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,65,// Update the original if something was done.
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,66,if (!(newPattern.equals(pattern) && newFlags.equals(flags))) {
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,67,subtree.getFirstChild().setString(newPattern);
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,68,"if (!"""".equals(newFlags)) {"
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,69,subtree.getLastChild().setString(newFlags);
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,70,} else if (subtree.getChildCount() == 2) {
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,71,subtree.getLastChild().detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,73,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,src/com/google/javascript/jscomp/PeepholeSimplifyRegExp.java,76,return subtree;
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,2,* Copyright 2011 The Closure Compiler Authors.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,19,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,21,public class PeepholeSimplifyRegExpTest extends CompilerTestCase {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,23,public final void testWaysOfMatchingEmptyString() {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,24,"testSame(""/(?:)/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,25,"test(""/(?:)/i"", ""/(?:)/"");  // We can get rid of i flag when no letters."
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,26,"test(""/.{0}/i"", ""/(?:)/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,27,"test(""/[^\\0-\\uffff]{0}/"", ""/(?:)/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,28,// Cannot get rid of capturing groups.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,29,"testSame(""/(){0}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,32,public final void testCharsetOptimizations() {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,33,"testSame(""/./"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,34,"test(""/[\\0-\\uffff]/"", ""/[\\S\\s]/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,35,"test(""/[^\\0-\\uffff]/"", ""/(?!)/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,36,"test(""/[^\\0-\\x40\\x42-\\uffff]/"", ""/A/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,37,"test(""/[0-9a-fA-F]/i"", ""/[\\da-f]/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,38,"test(""/[0-9a-zA-Z_$]/i"", ""/[\\w$]/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,39,"test(""/[()*+\\-,]/g"", ""/[(--]/g"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,40,"test(""/[()*+\\-,z]/g"", ""/[(--z]/g"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,41,"test(""/[\\-\\.\\/0]/g"", ""/[--0]/g"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,42,"test(""/[\\-\\.\\/0\\n]/g"", ""/[\\n\\--0]/g"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,43,"test(""/[\\[\\\\\\]]/g"", ""/[[-\\]]/g"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,44,"test(""/[\\[\\\\\\]\\^]/g"", ""/[[-^]/g"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,45,"test(""/[\\^`_]/g"", ""/[\\^-`]/g"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,46,"test(""/[^\\^`_]/g"", ""/[^^-`]/g"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,47,"test(""/^(?=[^a-z])/i"", ""/^(?=[\\W\\d_])/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,48,"test(""/^[^a-z0-9]/i"", ""/^[\\W_]/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,49,"test(""/[0-FA-Z]/"", ""/[0-Z]/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,50,"test(""/[0-9]/"", ""/\\d/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,51,"test(""/[^0-9]/"", ""/\\D/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,52,"testSame(""/\\D/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,53,"test(""/[_a-z0-9]/i"", ""/\\w/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,54,"test(""/[0-9_a-z]/i"", ""/\\w/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,55,"test(""/[_a-z0-9]/"", ""/[\\d_a-z]/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,56,"test(""/[_E-Za-f0-9]/i"", ""/\\w/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,57,"test(""/[E-Za-f]/i"", ""/[a-z]/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,58,"test(""/[_E-Za-f0-9]/"", ""/[\\dE-Z_a-f]/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,59,// Test case normalization.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,60,// U+00CA and U+00EA are E and e with ^ above
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,61,"test(""/[\\u00ca\\u00ea]/"", ""/[\\xca\\xea]/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,62,"test(""/[\\u00ca\\u00ea]/i"", ""/\\xca/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,63,"// IE (at least 6, 7, and 8) do not include \xA0 in \s so when an author"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,64,// explicitly includes it make sure it appears in the output.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,65,"testSame(""/^[\\s\\xa0]*$/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,66,"test(""/^(?:\\s|\\xA0)*$/"", ""/^[\\s\\xa0]*$/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,69,public final void testCharsetFixup() {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,70,"testSame(""/[a-z]/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,71,// This is the case.  The below produces no output in squarefree.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,72,// (function () {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,73,//   // Runs to just before the letter 'a' and starts right after 'z'.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,74,//   var re = /[^\0-`{-\uffff]/i
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,75,//   for (var i = 0; i < 0x10000; ++i) {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,76,//     var s = String.fromCharCode(i);
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,77,//     if (re.test(s)) { print(s + ' : ' + s.charCodeAt(0).toString(16)); }
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,80,"test(""/[^\\0-`{-\\uffff]/i"", ""/(?!)/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,81,"// This looks a bit odd, but"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,82,"// /[^a-z]/i is the same as all non-word characters, all digits, and _ and"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,83,// /[\W\d_]/ is the same length.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,84,"test(""/[^a-z]/i"", ""/[\\W\\d_]/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,87,public final void testGroups() {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,88,"testSame(""/foo(bar)baz/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,91,public final void testBackReferences() {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,92,"testSame(""/foo(bar)baz(?:\\1|\\x01)boo/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,93,"// But when there is no group to refer to, then the back-reference *is*"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,94,// the same as an octal escape.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,95,"test(""/foo(?:bar)baz(?:\\1|\\x01)boo/"", ""/foobarbaz\\x01boo/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,96,"// \\8 is never an octal escape.  If there is no 8th group, then it"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,97,// is the literal character '8'
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,98,"test(""/foo(?:bar)baz(?:\\8|8)boo/"", ""/foobarbaz8boo/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,99,// \10 can be a capturing group.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,100,"test(""/(1?)(2?)(3?)(4?)(5?)(6?)(7?)(8?)(9?)(A?)(B?)"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,101,"+ ""\\12\\11\\10\\9\\8\\7\\6\\5\\4\\3\\2\\1\\0/"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,102,"""/(1?)(2?)(3?)(4?)(5?)(6?)(7?)(8?)(9?)(A?)(B?)"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,103,"// \\12 does not match any group, so is treated as group 1 followed"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,104,// by literal 2.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,105,"+ ""\\1(?:2)\\11\\10\\9\\8\\7\\6\\5\\4\\3\\2\\1\\0/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,106,// But \1 should not be emitted followed by a digit un-parenthesized.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,107,"test(""/(1?)(2?)(3?)(4?)(5?)(6?)(7?)(8?)(9?)(A?)(B?)(?:\\1)0/"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,108,"""/(1?)(2?)(3?)(4?)(5?)(6?)(7?)(8?)(9?)(A?)(B?)\\1(?:0)/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,109,// \012 is never treated as a group even when there are 12 groups.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,110,"test(""/(1?)(2?)(3?)(4?)(5?)(6?)(7?)(8?)(9?)(A?)(B?)(C?)"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,111,"+ ""\\012\\11\\10\\9\\8\\7\\6\\5\\4\\3\\2\\1\\0/"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,112,"""/(1?)(2?)(3?)(4?)(5?)(6?)(7?)(8?)(9?)(A?)(B?)(C?)"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,113,"+ ""\\n\\11\\10\\9\\8\\7\\6\\5\\4\\3\\2\\1\\0/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,116,public final void testSingleCharAlterations() {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,117,"test(""/a|B|c|D/i"", ""/[a-d]/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,118,"test(""/a|B|c|D/"", ""/[BDac]/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,119,"test(""/a|[Bc]|D/"", ""/[BDac]/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,120,"test(""/[aB]|[cD]/"", ""/[BDac]/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,121,"test(""/a|B|c|D|a|B/i"", ""/[a-d]/i"");  // Duplicates."
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,122,"test(""/a|A|/i"", ""/a?/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,125,public final void testAlterations() {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,126,"testSame(""/foo|bar/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,127,"test(""/Foo|BAR/i"", ""/foo|bar/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,128,"test(""/Foo||BAR/"", ""/Foo||BAR/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,129,"test(""/Foo|BAR|/"", ""/Foo|BAR|/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,132,public final void testNestedAlterations() {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,133,"test(""/foo|bar|(?:baz|boo)|far/"", ""/foo|bar|baz|boo|far/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,136,public final void testEscapeSequencesAndNonLatinChars() {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,137,"test(""/\u1234/i"", ""/\\u1234/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,138,"testSame(""/\\u1234/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,139,"test(""/\u00A0/"", ""/\\xa0/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,140,"test(""/\\u00A0/"", ""/\\xa0/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,141,"test(""/\\u00a0/"", ""/\\xa0/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,144,public final void testAnchors() {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,145,// m changes the meaning of anchors which is useless if there are none.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,146,"testSame(""/foo(?!$)/gm"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,147,"test(""/./m"", ""/./"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,148,"test(""/\\^/m"", ""/\\^/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,149,"test(""/[\\^]/m"", ""/\\^/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,150,"testSame(""/(^|foo)bar/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,151,"testSame(""/^.|.$/gm"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,152,"test(""/foo(?=)$/m"", ""/foo$/m"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,153,// We can get rid of the g when there are no capturing groups and the
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,154,// pattern is fully anchored.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,155,"test(""/^foo$/g"", ""/^foo$/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,158,public final void testRepetitions() {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,159,"testSame(""/a*/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,160,"testSame(""/a+/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,161,"testSame(""/a+?/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,162,"testSame(""/a?/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,163,"testSame(""/a{6}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,164,"testSame(""/a{4,}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,165,"testSame(""/a{4,6}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,166,"testSame(""/a{4,6}?/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,167,"test(""/(?:a?)?/"", ""/a?/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,168,"test(""/(?:a?)*/"", ""/a*/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,169,"test(""/(?:a*)?/"", ""/a*/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,170,"test(""/a(?:a*)?/"", ""/a+/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,171,"test(""/(?:a{2,3}){3,4}/"", ""/a{6,12}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,172,"test(""/a{2,3}a{3,4}/"", ""/a{5,7}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,173,"testSame(""/a{2,3}b{3,4}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,174,"test(""/a*a*/"", ""/a*/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,175,"test(""/a+a+/"", ""/a{2,}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,176,"test(""/a+a*/"", ""/a+/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,177,// In partial repetitions the open curly is treated literally.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,178,"test(""/a{/"", ""/a\\{/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,179,"test(""/a{}/"", ""/a\\{}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,180,"test(""/a{,3}/"", ""/a\\{,3}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,181,"test(""/a{x}/"", ""/a\\{x}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,182,"test(""/a{-1}/"", ""/a\\{-1}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,183,"test(""/a{3,1}/"", ""/a\\{3,1}/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,186,public final void testMoreCharsets() {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,187,"test(""var a = /[\\x00\\x22\\x26\\x27\\x3c\\x3e]/g"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,188,"""var a = /[\\0\""&'<>]/g"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,189,"test(""var b = /[\\x00\\x22\\x27\\x3c\\x3e]/g"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,190,"""var b = /[\\0\""'<>]/g"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,191,"test(""var c = /[\\x00\\x09-\\x0d \\x22\\x26\\x27\\x2d\\/\\x3c-\\x3e`"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,192,"+ ""\\x85\\xa0\\u2028\\u2029]/g"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,193,"""var c = /[\\0\\t-\\r \""&'/<->`\\x85\\xa0\\u2028\\u2029-]/g"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,194,"test(""var d = /[\\x00\\x09-\\x0d \\x22\\x27\\x2d\\/\\x3c-\\x3e`"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,195,"+ ""\\x85\\xa0\\u2028\\u2029]/g"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,196,"""var d = /[\\0\\t-\\r \""'/<->`\\x85\\xa0\\u2028\\u2029-]/g"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,197,"test(""var e = /[\\x00\\x08-\\x0d\\x22\\x26\\x27\\/\\x3c-\\x3e\\\\"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,198,"+ ""\\x85\\u2028\\u2029]/g"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,199,"""var e = /[\\0\\b-\\r\""&'/<->\\\\\\x85\\u2028\\u2029]/g"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,200,"test(""var f = /[\\x00\\x08-\\x0d\\x22\\x24\\x26-\\/\\x3a\\x3c-\\x3f"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,201,"+ ""\\x5b-\\x5e\\x7b-\\x7d\\x85\\u2028\\u2029]/g"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,202,"""var f = /[\\0\\b-\\r\""$&-/:<-?[-^{-}\\x85\\u2028\\u2029]/g"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,203,"test(""var g = /[\\x00\\x08-\\x0d\\x22\\x26-\\x2a\\/\\x3a-\\x3e@\\\\"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,204,"+ ""\\x7b\\x7d\\x85\\xa0\\u2028\\u2029]/g"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,205,"""var g = /[\\0\\b-\\r\""&-*/:->@\\\\{}\\x85\\xa0\\u2028\\u2029]/g"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,206,"test(""var h = /^(?!-*(?:expression|(?:moz-)?binding))(?:[.#]?-?"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,207,"+ ""(?:[_a-z0-9][_a-z0-9-]*)(?:-[_a-z][_a-z0-9-]*)*-?|-?"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,208,"+ ""(?:[0-9]+(?:\\.[0-9]*)?|\\.[0-9])(?:[a-z]{1,2}|%)?|!important|)$/i"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,209,"""var h = /^(?!-*(?:expression|(?:moz-)?binding))(?:[#.]?-?"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,210,"+ ""\\w[\\w-]*(?:-[_a-z][\\w-]*)*-?|-?"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,211,"+ ""(?:\\d+(?:\\.\\d*)?|\\.\\d)(?:[a-z]{1,2}|%)?|!important|)$/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,212,"test(""var i = /^(?:(?:https?|mailto):|[^&:\\/?#]*(?:[\\/?#]|$))/i"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,213,"""var i = /^(?:(?:https?|mailto):|[^#&/:?]*(?:[#/?]|$))/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,214,"test(""var j = /^(?!style|on|action|archive|background|cite|classid"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,215,"+ ""|codebase|data|dsync|href|longdesc|src|usemap)(?:[a-z0-9_$:-]*"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,216,"+ ""|dir=(?:ltr|rtl))$/i"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,217,"""var j = /^(?!style|on|action|archive|background|cite|classid"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,218,"+ ""|codebase|data|dsync|href|longdesc|src|usemap)(?:[\\w$:-]*"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,219,"+ ""|dir=(?:ltr|rtl))$/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,220,"test(""var k = /^(?!script|style|title|textarea|xmp|no)[a-z0-9_$:-]*$/i"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,221,"""var k = /^(?!script|style|title|textarea|xmp|no)[\\w$:-]*$/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,222,"test(""var l = /<(?:!|\\/?[a-z])(?:[^>'\""]|\""[^\""]*\""|'[^']*')*>/gi"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,223,"""var l = /<(?:!|\\/?[a-z])(?:[^\""'>]|\""[^\""]*\""|'[^']*')*>/gi"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,226,public final void testMoreRegularExpression() {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,227,"testSame(""/\""/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,228,"testSame(""/'/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,229,"test(""/(?:[^<\\/\""'\\s\\\\]|<(?!\\/script))+/i"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,230,"""/(?:[^\\s\""'/<\\\\]|<(?!\\/script))+/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,231,"testSame(""/-->/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,232,"testSame(""/<!--/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,233,"testSame(""/<\\/(\\w+)\\b/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,234,"testSame(""/<\\/?/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,235,"test(""/<script(?=[\\s>\\/]|$)/i"", ""/<script(?=[\\s/>]|$)/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,236,"test(""/<style(?=[\\s>\\/]|$)/i"", ""/<style(?=[\\s/>]|$)/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,237,"test(""/<textarea(?=[\\s>\\/]|$)/i"", ""/<textarea(?=[\\s/>]|$)/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,238,"test(""/<title(?=[\\s>\\/]|$)/i"", ""/<title(?=[\\s/>]|$)/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,239,"test(""/<xmp(?=[\\s>\\/]|$)/i"", ""/<xmp(?=[\\s/>]|$)/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,240,"testSame(""/[\""']/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,241,"test(""/[\\\\)\\s]/"", ""/[\\s)\\\\]/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,242,"test(""/[\\f\\r\\n\\u2028\\u2029]/"", ""/[\\n\\f\\r\\u2028\\u2029]/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,243,"test(""/[\\n\\r\\f]/"", ""/[\\n\\f\\r]/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,244,"testSame(""/\\*\\//"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,245,"testSame(""/\\//"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,246,"testSame(""/\\/\\*/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,247,"testSame(""/\\/\\//"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,248,"testSame(""/\\\\(?:\\r\\n?|[\\n\\f\""])/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,249,"testSame(""/\\\\(?:\\r\\n?|[\\n\\f'])/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,250,"testSame(""/\\burl\\s*\\(\\s*([\""']?)/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,251,"testSame(""/\\s+/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,252,"test(""/^(?:[^'\\\\\\n\\r\\u2028\\u2029<]|\\\\(?:\\r\\n?|[^\\r<]"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,253,"+ ""|<(?!\\/script))|<(?!\\/script))/i"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,254,"""/^(?:[^\\n\\r'<\\\\\\u2028\\u2029]|\\\\(?:\\r\\n?|[^\\r<]"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,255,"+ ""|<(?!\\/script))|<(?!\\/script))/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,256,"test(""/^(?:[^\\\""\\\\\\n\\r\\u2028\\u2029<]|\\\\(?:\\r\\n?"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,257,"+ ""|[^\\r<]|<(?!\\/script))|<(?!\\/script))/i"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,258,"""/^(?:[^\\n\\r\""<\\\\\\u2028\\u2029]|\\\\(?:\\r\\n?"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,259,"+ ""|[^\\r<]|<(?!\\/script))|<(?!\\/script))/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,260,"test(""/^(?:[^\\[\\\\\\/<\\n\\r\\u2028\\u2029]|\\\\[^\\n\\r\\u2028\\u2029]"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,261,"+ ""|\\\\?<(?!\\/script)|\\[(?:[^\\]\\\\<\\n\\r\\u2028\\u2029]|"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,262,"+ ""\\\\(?:[^\\n\\r\\u2028\\u2029]))*|\\\\?<(?!\\/script)\\])/i"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,263,"""/^(?:[^\\n\\r/<[\\\\\\u2028\\u2029]|\\\\."""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,264,"+ ""|\\\\?<(?!\\/script)|\\[(?:[^\\n\\r<\\\\\\]\\u2028\\u2029]|"""
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,265,"+ ""\\\\.)*|\\\\?<(?!\\/script)])/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,266,"testSame(""/^(?=>|\\s+[\\w-]+\\s*=)/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,267,"test(""/^(?=[\\/\\s>])/"", ""/^(?=[\\s/>])/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,268,"test(""/^(?=[^\""'\\s>])/"", ""/^(?=[^\\s\""'>])/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,269,"testSame(""/^/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,270,"testSame(""/^[^<]+/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,271,"test(""/^[a-z0-9:-]*(?:[a-z0-9]|$)/i"", ""/^[\\d:a-z-]*(?:[^\\W_]|$)/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,272,"testSame(""/^[a-z]+/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,273,"testSame(""/^\\s*\""/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,274,"testSame(""/^\\s*'/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,275,"testSame(""/^\\s*([a-z][\\w-]*)/i"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,276,"testSame(""/^\\s*=/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,277,"testSame(""/^\\s*\\/?>/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,278,"testSame(""/^\\s+$/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,279,"testSame(""/^\\s+/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,282,public final void testPrecedence() {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,283,// Repetition binds more tightly than concatenation.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,284,"testSame(""/ab?/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,285,"testSame(""/(?:ab)?/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,286,// Concatenation bind more tightly than alterations.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,287,"testSame(""/foo|bar/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,288,"testSame(""/f(?:oo|ba)r/"");"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,291,public final void testMalformedRegularExpressions() {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,292,test(
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,293,"""/(?<!foo)/"", ""/(?<!foo)/"",  // Lookbehind not valid in ES."
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,294,"null,  // No error."
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,295,CheckRegExp.MALFORMED_REGEXP);  // Warning.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,296,test(
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,298,"null,  // No error."
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,299,CheckRegExp.MALFORMED_REGEXP);  // Warning.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,300,test(
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,302,"null,  // No error."
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,303,CheckRegExp.MALFORMED_REGEXP);  // Warning.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,304,test(
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,305,"""/\\uabc/"", ""/\\uabc/"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,306,"null,  // No error."
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,307,CheckRegExp.MALFORMED_REGEXP);  // Warning.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,308,test(
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,309,"""/\\uabcg/"", ""/\\uabcg/"","
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,310,"null,  // No error."
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,311,CheckRegExp.MALFORMED_REGEXP);  // Warning.
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,314,@Override
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,315,protected CompilerPass getProcessor(Compiler compiler) {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,316,final CompilerPass simplifier = new PeepholeOptimizationsPass(
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,317,"compiler, new PeepholeSimplifyRegExp());"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,318,final CompilerPass checker = new CheckRegExp(compiler);
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,320,return new CompilerPass() {
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,321,@Override
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,322,"public void process(Node externs, Node root) {"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,323,"checker.process(externs, root);"
True,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,test/com/google/javascript/jscomp/PeepholeSimplifyRegExpTest.java,324,"simplifier.process(externs, root);"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,2,* Copyright 2011 The Closure Compiler Authors.
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,17,package com.google.javascript.jscomp.regex;
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,19,import java.util.BitSet;
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,20,import java.util.Random;
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,22,import com.google.javascript.jscomp.regex.CharRanges;
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,24,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,26,public class CharRangesTest extends TestCase {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,28,static final long SEED = Long.parseLong(System.getProperty(
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,29,"""junit.random.seed"", """" + System.currentTimeMillis()));"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,31,public final void testAgainstRegularImplementation() {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,32,Random rnd = new Random(SEED);
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,34,for (int run = 10; --run >= 0;) {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,35,"// Fill with bits in the range [0x1000, 0x3000)."
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,36,BitSet bs = new BitSet();
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,37,for (int i = 0x1000; --i >= 0;) {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,38,bs.set(0x1000 + rnd.nextInt(0x3000));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,41,// Create an equivalent sparse bit set
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,42,int[] members = new int[bs.cardinality()];
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,43,"for (int i = -1, k = 0; k < members.length; ++k) {"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,44,members[k] = i = bs.nextSetBit(i + 1);
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,46,CharRanges sbs = CharRanges.withMembers(members);
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,48,// Check all bits including past the min/max bit
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,49,for (int i = 0; i < 0x5000; ++i) {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,50,if (bs.get(i) != sbs.contains(i)) {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,51,"fail(""sbs="" + sbs + "", bs="" + bs + "", difference at bit "" + i);"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,57,public final void testEmptyCharRanges() {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,58,CharRanges sbs = CharRanges.EMPTY;
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,59,for (int i = -1000; i < 1000; ++i) {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,60,assertFalse(sbs.contains(i));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,62,"assertEquals(""[]"", sbs.toString());"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,65,public final void testCharRangesFactories() {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,66,"CharRanges isbs = CharRanges.withMembers(new int[] { 0, 1, 4, 9 });"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,67,"CharRanges isbs2 = CharRanges.withMembers(new int[] { 0, 1, 4, 9 });"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,68,"assertEquals(""[0x0-0x1 0x4 0x9]"", isbs.toString());"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,70,CharRanges esbs = CharRanges.withMembers(new int[0]);
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,72,"assertEquals(isbs, isbs);"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,73,"assertEquals(isbs, isbs2);"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,74,assertFalse(isbs.equals(esbs));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,75,assertFalse(isbs.equals(null));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,76,assertFalse(isbs.equals(new Object()));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,78,"assertEquals(isbs.hashCode(), isbs2.hashCode());"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,79,assertFalse(isbs.hashCode() == esbs.hashCode());
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,82,public final void testRangeConstructor() {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,83,try {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,84,CharRanges.withRanges(new int[] { 1 });
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,85,"fail(""Mismatched ranges"");"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,86,} catch (IllegalArgumentException ex) {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,87,// pass
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,90,try {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,91,"CharRanges.withRanges(new int[] { 1, 4, 4, 5 });"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,92,"fail(""Discontiguous ranges"");"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,93,} catch (IllegalArgumentException ex) {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,94,// pass
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,97,try {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,98,"CharRanges.withRanges(new int[] { 4, 5, 1, 3 });"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,99,"fail(""Misordered ranges"");"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,100,} catch (IllegalArgumentException ex) {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,101,// pass
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,104,try {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,105,"CharRanges.withRanges(new int[] { 0, 0 });"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,106,"fail(""Empty range"");"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,107,} catch (IllegalArgumentException ex) {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,108,// pass
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,112,public final void testDupeMembers() {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,113,"CharRanges sbs1 = CharRanges.withMembers(new int[] { 0, 1, 4, 9 });"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,114,"assertEquals(sbs1.toString(), ""[0x0-0x1 0x4 0x9]"", sbs1.toString());"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,116,"CharRanges sbs2 = CharRanges.withMembers(new int[] { 9, 1, 4, 1, 0 });"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,117,"assertEquals(sbs2.toString(), ""[0x0-0x1 0x4 0x9]"", sbs2.toString());"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,119,"assertEquals(sbs1, sbs2);"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,120,"assertEquals(sbs1.hashCode(), sbs2.hashCode());"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,122,for (int i = -10; i < 20; ++i) {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,123,"assertEquals("""" + i, sbs1.contains(i), sbs2.contains(i));"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,127,public final void testDifference() {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,128,//                     1               2               3
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,129,//     0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,130,// b-a  DD         DD DDD        D      DDD
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,131,// a      AAAAAAAAA      A A A A   A AAA   AAA A A
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,132,// b    BBB  BBB  BBB BBB        B B    BBB
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,133,// a-b     DD   DD       D D D D     DDD   DDD D D
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,134,CharRanges a = CharRanges.withRanges(new int[] {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,135,"0x03, 0x0C, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,136,"0x1C, 0x1D, 0x1E, 0x21, 0x24, 0x27, 0x28, 0x29, 0x2A, 0x2B });"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,137,CharRanges b = CharRanges.withRanges(new int[] {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,138,"0x01, 0x04, 0x06, 0x09, 0x0B, 0x0E, 0x0F, 0x12, 0x1A, 0x1B,"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,139,"0x1C, 0x1D, 0x21, 0x24 });"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,140,CharRanges empty = CharRanges.withMembers(new int[0]);
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,142,"assertEquals(empty, empty.union(empty));"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,143,"assertEquals(a, a.union(empty));"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,144,"assertEquals(b, empty.union(b));"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,146,CharRanges aSb = a.difference(b);
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,147,assertEquals(
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,148,"""[0x4-0x5 0x9-0xa 0x12 0x14 0x16 0x18 0x1e-0x20 0x24-0x26 0x28 0x2a]"","
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,149,aSb.toString());
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,150,assertTrue(a.containsAll(aSb));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,151,assertFalse(aSb.containsAll(a));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,152,assertFalse(aSb.containsAll(b));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,154,CharRanges bSa = b.difference(a);
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,155,assertEquals(
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,156,"""[0x1-0x2 0xc-0xd 0xf-0x11 0x1a 0x21-0x23]"","
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,157,bSa.toString());
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,158,assertTrue(b.containsAll(bSa));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,159,assertFalse(bSa.containsAll(a));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,160,assertFalse(bSa.containsAll(b));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,162,// Check that a and b not changed by operation
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,163,assertEquals(
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,164,"""[0x3-0xb 0x12 0x14 0x16 0x18 0x1c 0x1e-0x20 0x24-0x26 0x28 0x2a]"","
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,165,a.toString());
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,166,assertEquals(
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,167,"""[0x1-0x3 0x6-0x8 0xb-0xd 0xf-0x11 0x1a 0x1c 0x21-0x23]"","
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,168,b.toString());
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,170,//    0 1 2 3 4 5 6 7 8 9 a b c d e f
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,171,// m: * * * *     *     * *       * *
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,172,// s:     *     * * *     * *   * *
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,173,// d: * *   *           *           *
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,174,"CharRanges m = CharRanges.withMembers(0, 1, 2, 3, 6, 9, 0xa, 0xe, 0xf);"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,175,"CharRanges s = CharRanges.withMembers(2, 5, 6, 7, 0xa, 0xb, 0xd, 0xe);"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,176,CharRanges d = m.difference(s);
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,177,"assertEquals(""[0x0-0x1 0x3 0x9 0xf]"", d.toString());"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,178,assertTrue(m.containsAll(d));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,179,assertFalse(d.containsAll(m));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,180,assertFalse(d.containsAll(s));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,181,assertFalse(s.containsAll(d));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,182,assertTrue(d.containsAll(d));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,185,public final void testUnion() {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,186,//                 1               2               3
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,187,// 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,188,//    AAAAAAAAA      A A A A   A AAA   AAA A A
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,189,//  BBB  BBB  BBB BBB        B B    BBB
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,190,//  UUUUUUUUUUUUU UUUU U U U U U UUUUUUUUU U U
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,191,CharRanges a = CharRanges.withRanges(new int[] {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,192,"0x03, 0x0C, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,193,"0x1C, 0x1D, 0x1E, 0x21, 0x24, 0x27, 0x28, 0x29, 0x2A, 0x2B });"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,194,CharRanges b = CharRanges.withRanges(new int[] {
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,195,"0x01, 0x04, 0x06, 0x09, 0x0B, 0x0E, 0x0F, 0x12, 0x1A, 0x1B,"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,196,"0x1C, 0x1D, 0x21, 0x24 });"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,197,CharRanges empty = CharRanges.withMembers(new int[0]);
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,199,"assertEquals(empty, empty.union(empty));"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,200,"assertEquals(a, a.union(empty));"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,201,"assertEquals(b, empty.union(b));"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,203,CharRanges aUb = a.union(b);
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,204,assertEquals(
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,205,"""[0x1-0xd 0xf-0x12 0x14 0x16 0x18 0x1a 0x1c 0x1e-0x26 0x28 0x2a]"","
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,206,aUb.toString());
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,207,"assertEquals(aUb, b.union(a));"
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,208,assertTrue(aUb.containsAll(a));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,209,assertTrue(aUb.containsAll(b));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,210,assertFalse(a.containsAll(b));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,211,assertFalse(b.containsAll(a));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,212,assertTrue(a.containsAll(a));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,213,assertTrue(b.containsAll(b));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,214,assertTrue(aUb.containsAll(aUb));
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,216,// Check that a and b not changed by operation
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,217,assertEquals(
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,218,"""[0x3-0xb 0x12 0x14 0x16 0x18 0x1c 0x1e-0x20 0x24-0x26 0x28 0x2a]"","
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,219,a.toString());
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,220,assertEquals(
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,221,"""[0x1-0x3 0x6-0x8 0xb-0xd 0xf-0x11 0x1a 0x1c 0x21-0x23]"","
True,test/com/google/javascript/jscomp/regex/CharRangesTest.java,test/com/google/javascript/jscomp/regex/CharRangesTest.java,222,b.toString());

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,521,// Class loading
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,522, Returns the class represented by <code>className</code> using the <code>classLoader</code>.  This implementation
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,523," supports names like ""<code>java.lang.String[]</code>"" as well as ""<code>[Ljava.lang.String;</code>""."
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,524,* Returns the class represented by <code>className</code> using the
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,525,* <code>classLoader</code>.  This implementation supports names like
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,526,"* ""<code>java.lang.String[]</code>"" as well as ""<code>[Ljava.lang.String;</code>""."
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,525, @param classLoader the class loader to use to load the class
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,526, @param className   the class name
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,528,* @param classLoader  the class loader to use to load the class
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,529,* @param className  the class name
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,531,"ublic static Class getClass( ClassLoader classLoader, String className, boolean initialize )"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,532,hrows ClassNotFoundException {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,534,public static Class getClass(
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,535,"ClassLoader classLoader, String className, boolean initialize) throws ClassNotFoundException {"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,534,f( abbreviationMap.containsKey( className ) ) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,535,"lazz = Class.forName( ""["" + abbreviationMap.get( className ), initialize, classLoader ).getComponentType();"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,537,lse {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,538,"lazz = Class.forName( toProperClassName( className ), initialize, classLoader );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,537,if (abbreviationMap.containsKey(className)) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,538,"String clsName = ""["" + abbreviationMap.get(className);"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,539,"clazz = Class.forName(clsName, initialize, classLoader).getComponentType();"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,540,} else {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,541,"clazz = Class.forName(toProperClassName(className), initialize, classLoader);"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,544, Returns the (initialized) class represented by <code>className</code> using the <code>classLoader</code>.  This
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,545," implementation supports names like ""<code>java.lang.String[]</code>"" as well as"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,547,* Returns the (initialized) class represented by <code>className</code>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,548,* using the <code>classLoader</code>.  This implementation supports names
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,549,"* like ""<code>java.lang.String[]</code>"" as well as"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,548, @param classLoader the class loader to use to load the class
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,549, @param className   the class name
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,552,* @param classLoader  the class loader to use to load the class
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,553,* @param className  the class name
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,553,"ublic static Class getClass( ClassLoader classLoader, String className ) throws ClassNotFoundException {"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,554,"eturn getClass( classLoader, className, true );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,557,"public static Class getClass(ClassLoader classLoader, String className) throws ClassNotFoundException {"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,558,"return getClass(classLoader, className, true);"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,558, Returns the (initialized )class represented by <code>className</code> using the current thread's context class
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,559," loader.  This implementation supports names like ""<code>java.lang.String[]</code>"" as well as"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,562,* Returns the (initialized )class represented by <code>className</code>
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,563,* using the current thread's context class loader. This implementation
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,564,"* supports names like ""<code>java.lang.String[]</code>"" as well as"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,562, @param className the class name
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,567,* @param className  the class name
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,566,ublic static Class getClass( String className ) throws ClassNotFoundException {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,567,eturn getClass( Thread.currentThread().getContextClassLoader() == null ? ClassUtils.class.getClassLoader() :
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,568,"hread.currentThread().getContextClassLoader(), className, true );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,571,public static Class getClass(String className) throws ClassNotFoundException {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,572,"return getClass(className, true);"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,572, Returns the class represented by <code>className</code> using the current thread's context class loader. This
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,573," implementation supports names like ""<code>java.lang.String[]</code>"" as well as"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,576,* Returns the class represented by <code>className</code> using the
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,577,* current thread's context class loader. This implementation supports
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,578,"* names like ""<code>java.lang.String[]</code>"" as well as"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,577, @param initialize whether the class must be initialized
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,582,* @param initialize  whether the class must be initialized
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,581,"ublic static Class getClass( String className, boolean initialize ) throws ClassNotFoundException {"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,582,eturn getClass( Thread.currentThread().getContextClassLoader() == null ? ClassUtils.class.getClassLoader() :
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,583,"hread.currentThread().getContextClassLoader(), className, initialize );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,586,"public static Class getClass(String className, boolean initialize) throws ClassNotFoundException {"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,587,ClassLoader contextCL = Thread.currentThread().getContextClassLoader();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,588,ClassLoader loader = contextCL == null ? ClassUtils.class.getClassLoader() : contextCL;
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,589,"return getClass(loader, className, initialize );"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,586,rivate static String toProperClassName( String className ) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,587,lassName = StringUtils.deleteWhitespace( className );
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,588,f( className == null ) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,589,"hrow new NullArgumentException( ""className"" );"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,591,"lse if( className.endsWith( ""[]"" ) ) {"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,592,inal StringBuffer classNameBuffer = new StringBuffer();
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,593,"hile( className.endsWith( ""[]"" ) ) {"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,594,"lassName = className.substring( 0, className.length() - 2 );"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,595,"lassNameBuffer.append( ""["" );"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,597,inal String abbreviation = ( String ) abbreviationMap.get( className );
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,598,f( abbreviation != null ) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,599,lassNameBuffer.append( abbreviation );
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,593,* Converts a class name to a JLS stle class name.
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,595,* @param className  the class name
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,596,* @return the converted name
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,598,private static String toProperClassName(String className) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,599,className = StringUtils.deleteWhitespace(className);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,600,if (className == null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,601,"throw new NullArgumentException(""className"");"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,602,"} else if (className.endsWith(""[]"")) {"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,603,StringBuffer classNameBuffer = new StringBuffer();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,604,"while (className.endsWith(""[]"")) {"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,605,"className = className.substring(0, className.length() - 2);"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,606,"classNameBuffer.append(""["");"
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,601,lse {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,602,"lassNameBuffer.append( ""L"" ).append( className ).append( "";"" );"
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,608,String abbreviation = (String) abbreviationMap.get(className);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,609,if (abbreviation != null) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,610,classNameBuffer.append(abbreviation);
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,611,} else {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,612,"classNameBuffer.append(""L"").append(className).append("";"");"

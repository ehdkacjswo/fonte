is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,20,import java.io.IOException;
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,22,import java.io.ObjectInputStream;
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,24,import java.io.OutputStream;
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,25,import java.io.Serializable;
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,44,"static final String CLASS_NOT_FOUND_MESSAGE = ""ClassNotFoundSerializationTest.readObject fake exception"";"
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,45,"protected static final String SERIALIZE_IO_EXCEPTION_MESSAGE = ""Anonymous OutputStream I/O exception"";"
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,178,public void testSerializeIOException() throws Exception {
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,179,"// forces an IOException when the ObjectOutputStream is created, to test not closing the stream"
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,180,// in the finally block
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,181,OutputStream streamTest = new OutputStream() {
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,182,public void write(int arg0) throws IOException {
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,183,throw new IOException(SERIALIZE_IO_EXCEPTION_MESSAGE);
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,186,try {
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,187,"SerializationUtils.serialize(iMap, streamTest);"
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,189,catch(SerializationException e) {
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,190,"assertEquals(""java.io.IOException: "" + SERIALIZE_IO_EXCEPTION_MESSAGE, e.getMessage());"
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,246,public void testDeserializeStreamClassNotFound() throws Exception {
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,247,ByteArrayOutputStream streamReal = new ByteArrayOutputStream();
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,248,ObjectOutputStream oos = new ObjectOutputStream(streamReal);
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,249,oos.writeObject(new ClassNotFoundSerializationTest());
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,250,oos.flush();
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,251,oos.close();
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,253,ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,254,try {
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,255,Object test = SerializationUtils.deserialize(inTest);
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,256,} catch(SerializationException se) {
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,257,"assertEquals(""java.lang.ClassNotFoundException: "" + CLASS_NOT_FOUND_MESSAGE, se.getMessage());"
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,387,class ClassNotFoundSerializationTest implements Serializable
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,390,"private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException    {"
True,src/test/org/apache/commons/lang/SerializationUtilsTest.java,src/test/org/apache/commons/lang/SerializationUtilsTest.java,391,throw new ClassNotFoundException(SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE);

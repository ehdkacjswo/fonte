is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,5,* reserved.
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,9,* are met:
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,17,*    distribution.
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,54,package org.apache.commons.lang.math;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,59,* <p><code>DoubleRange</code> represents an inclusive range of <code>double</code>s.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,61,* @author Stephen Colebourne
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,62,* @since 2.0
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,63,"* @version $Id: DoubleRange.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,65,public final class DoubleRange extends Range implements Serializable {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,67,private static final long serialVersionUID = 71849363892740L;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,69,/* The minimum number in this range (inclusive). */
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,70,private final double min;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,71,/* The maximum number in this range (inclusive). */
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,72,private final double max;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,74,/** Cached output minObject (class is immutable) */
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,75,private transient Double minObject = null;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,76,/** Cached output maxObject (class is immutable) */
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,77,private transient Double maxObject = null;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,78,/** Cached output hashCode (class is immutable) */
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,79,private transient int hashCode = 0;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,80,/** Cached output toString (class is immutable) */
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,81,private transient String toString = null;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,84,* <p>Constructs a new <code>DoubleRange</code> using the specified
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,85,* number as both the minimum and maximum in this range.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,87,* @param number  the number to use for this range
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,88,* @throws IllegalArgumentException if the number is <code>NaN</code>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,90,public DoubleRange(double number) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,91,super();
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,92,if (Double.isNaN(number)) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,93,"throw new IllegalArgumentException(""The number must not be NaN"");"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,95,this.min = number;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,96,this.max = number;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,100,* <p>Constructs a new <code>DoubleRange</code> using the specified
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,101,* number as both the minimum and maximum in this range.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,103,"* @param number  the number to use for this range, must not be null"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,104,* @throws IllegalArgumentException if the number is <code>null</code>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,105,* @throws IllegalArgumentException if the number is <code>NaN</code>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,107,public DoubleRange(Number number) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,108,super();
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,109,if (number == null) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,110,"throw new IllegalArgumentException(""The number must not be null"");"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,112,this.min = number.doubleValue();
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,113,this.max = number.doubleValue();
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,114,if (Double.isNaN(min) || Double.isNaN(max)) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,115,"throw new IllegalArgumentException(""The number must not be NaN"");"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,117,if (number instanceof Double) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,118,this.minObject = (Double) number;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,119,this.maxObject = (Double) number;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,124,* <p>Constructs a new <code>DoubleRange</code> with the specified
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,125,* minimum and maximum numbers (both inclusive).</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,127,"* <p>The arguments may be passed in the order (min,max) or (max,min). The"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,128,* getMinimum and getMaximum methods will return the correct values.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,130,"* @param number1  first number that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,131,"* @param number2  second number that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,132,* @throws IllegalArgumentException if either number is <code>NaN</code>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,134,"public DoubleRange(double number1, double number2) {"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,135,super();
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,136,if (Double.isNaN(number1) || Double.isNaN(number2)) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,137,"throw new IllegalArgumentException(""The numbers must not be NaN"");"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,139,if (number2 < number1) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,140,this.min = number2;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,141,this.max = number1;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,142,} else {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,143,this.min = number1;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,144,this.max = number2;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,149,* <p>Constructs a new <code>DoubleRange</code> with the specified
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,150,* minimum and maximum numbers (both inclusive).</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,152,"* <p>The arguments may be passed in the order (min,max) or (max,min). The"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,153,* getMinimum and getMaximum methods will return the correct values.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,155,"* @param number1  first number that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,156,"* @param number2  second number that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,157,* @throws IllegalArgumentException if either number is <code>null</code>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,158,* @throws IllegalArgumentException if either number is <code>NaN</code>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,160,"public DoubleRange(Number number1, Number number2) {"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,161,super();
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,162,if (number1 == null || number2 == null) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,163,"throw new IllegalArgumentException(""The numbers must not be null"");"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,165,double number1val = number1.doubleValue();
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,166,double number2val = number2.doubleValue();
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,167,if (Double.isNaN(number1val) || Double.isNaN(number2val)) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,168,"throw new IllegalArgumentException(""The numbers must not be NaN"");"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,170,if (number2val < number1val) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,171,this.min = number2val;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,172,this.max = number1val;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,173,if (number2 instanceof Double) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,174,this.minObject = (Double) number2;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,176,if (number1 instanceof Double) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,177,this.maxObject = (Double) number1;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,179,} else {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,180,this.min = number1val;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,181,this.max = number2val;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,182,if (number1 instanceof Double) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,183,this.minObject = (Double) number1;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,185,if (number2 instanceof Double) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,186,this.maxObject = (Double) number2;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,191,// Accessors
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,195,* <p>Returns the minimum number in this range.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,197,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,199,public Number getMinimumNumber() {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,200,if (minObject == null) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,201,minObject = new Double(min);
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,203,return minObject;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,207,* <p>Gets the minimum number in this range as a <code>long</code>.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,209,* <p>This conversion can lose information for large values or decimals.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,211,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,213,public long getMinimumLong() {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,214,return (long) min;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,218,* <p>Gets the minimum number in this range as a <code>int</code>.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,220,* <p>This conversion can lose information for large values or decimals.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,222,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,224,public int getMinimumInteger() {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,225,return (int) min;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,229,* <p>Gets the minimum number in this range as a <code>double</code>.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,231,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,233,public double getMinimumDouble() {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,234,return min;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,238,* <p>Gets the minimum number in this range as a <code>float</code>.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,240,* <p>This conversion can lose information for large values.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,242,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,244,public float getMinimumFloat() {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,245,return (float) min;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,249,* <p>Returns the maximum number in this range.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,251,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,253,public Number getMaximumNumber() {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,254,if (maxObject == null) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,255,maxObject = new Double(max);
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,257,return maxObject;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,261,* <p>Gets the maximum number in this range as a <code>long</code>.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,263,* <p>This conversion can lose information for large values or decimals.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,265,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,267,public long getMaximumLong() {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,268,return (long) max;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,272,* <p>Gets the maximum number in this range as a <code>int</code>.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,274,* <p>This conversion can lose information for large values or decimals.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,276,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,278,public int getMaximumInteger() {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,279,return (int) max;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,283,* <p>Gets the maximum number in this range as a <code>double</code>.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,285,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,287,public double getMaximumDouble() {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,288,return max;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,292,* <p>Gets the maximum number in this range as a <code>float</code>.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,294,* <p>This conversion can lose information for large values.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,296,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,298,public float getMaximumFloat() {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,299,return (float) max;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,302,// Tests
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,306,* <p>Tests whether the specified <code>number</code> occurs within
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,307,* this range using <code>double</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,309,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,311,"* @param number  the number to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,312,* @return <code>true</code> if the specified number occurs within this range
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,314,public boolean includesNumber(Number number) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,315,if (number == null) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,316,return false;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,318,return includesDouble(number.doubleValue());
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,322,* <p>Tests whether the specified <code>double</code> occurs within
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,323,* this range using <code>double</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,325,* <p>This implementation overrides the superclass for performance as it is
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,326,* the most common case.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,328,* @param value  the double to test
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,329,* @return <code>true</code> if the specified number occurs within this
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,330,*  range by <code>double</code> comparison
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,332,public boolean includesDouble(double value) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,333,return (value >= min && value <= max);
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,336,// Range tests
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,340,* <p>Tests whether the specified range occurs entirely within this range
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,341,* using <code>double</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,343,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,345,"* @param range  the range to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,346,* @return <code>true</code> if the specified range occurs entirely within this range
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,347,* @throws IllegalArgumentException if the range is not of this type
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,349,public boolean includesRange(Range range) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,350,if (range == null) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,351,return false;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,353,return includesDouble(range.getMinimumDouble()) &&
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,354,includesDouble(range.getMaximumDouble());
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,358,* <p>Tests whether the specified range overlaps with this range
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,359,* using <code>double</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,361,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,363,"* @param range  the range to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,364,* @return <code>true</code> if the specified range overlaps with this range
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,366,public boolean overlapsRange(Range range) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,367,if (range == null) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,368,return false;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,370,return range.includesDouble(min) ||
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,371,range.includesDouble(max) ||
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,372,includesDouble(range.getMinimumDouble());
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,375,// Basics
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,379,* <p>Compares this range to another object to test if they are equal.</p>.
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,381,"* <p>To be equal, the class, minimum and maximum must be equal.</p>"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,383,* @param obj the reference object with which to compare
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,384,* @return <code>true</code> if this object is equal
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,386,public boolean equals(Object obj) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,387,if (obj == this) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,388,return true;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,390,if (obj instanceof DoubleRange == false) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,391,return false;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,393,DoubleRange range = (DoubleRange) obj;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,394,return (Double.doubleToLongBits(min) == Double.doubleToLongBits(range.min) &&
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,395,Double.doubleToLongBits(max) == Double.doubleToLongBits(range.max));
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,399,* <p>Gets a hashCode for the range.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,401,* @return a hash code value for this object
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,403,public int hashCode() {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,404,if (hashCode == 0) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,405,hashCode = 17;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,406,hashCode = 37 * hashCode + getClass().hashCode();
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,407,long lng = Double.doubleToLongBits(min);
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,408,hashCode = 37 * hashCode + ((int) (lng ^ (lng >> 32)));
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,409,lng = Double.doubleToLongBits(max);
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,410,hashCode = 37 * hashCode + ((int) (lng ^ (lng >> 32)));
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,412,return hashCode;
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,416,* <p>Gets the range as a <code>String</code>.</p>
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,418,"* <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,420,* @return the <code>String</code> representation of this range
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,422,public String toString() {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,423,if (toString == null) {
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,424,StringBuffer buf = new StringBuffer(32);
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,425,"buf.append(""Range["");"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,426,buf.append(min);
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,427,"buf.append(',');"
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,428,buf.append(max);
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,429,buf.append(']');
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,430,toString = buf.toString();
True,src/java/org/apache/commons/lang/math/DoubleRange.java,src/java/org/apache/commons/lang/math/DoubleRange.java,432,return toString;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,5,* reserved.
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,9,* are met:
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,17,*    distribution.
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,54,package org.apache.commons.lang.math;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,59,* <p><code>FloatRange</code> represents an inclusive range of <code>float</code>s.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,61,* @author Stephen Colebourne
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,62,* @since 2.0
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,63,"* @version $Id: FloatRange.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,65,public final class FloatRange extends Range implements Serializable {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,67,private static final long serialVersionUID = 71849363892750L;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,69,/* The minimum number in this range (inclusive). */
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,70,private final float min;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,71,/* The maximum number in this range (inclusive). */
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,72,private final float max;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,74,/** Cached output minObject (class is immutable) */
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,75,private transient Float minObject = null;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,76,/** Cached output maxObject (class is immutable) */
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,77,private transient Float maxObject = null;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,78,/** Cached output hashCode (class is immutable) */
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,79,private transient int hashCode = 0;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,80,/** Cached output toString (class is immutable) */
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,81,private transient String toString = null;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,84,* <p>Constructs a new <code>FloatRange</code> using the specified
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,85,* number as both the minimum and maximum in this range.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,87,* @param number  the number to use for this range
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,88,* @throws IllegalArgumentException if the number is <code>NaN</code>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,90,public FloatRange(float number) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,91,super();
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,92,if (Float.isNaN(number)) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,93,"throw new IllegalArgumentException(""The number must not be NaN"");"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,95,this.min = number;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,96,this.max = number;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,100,* <p>Constructs a new <code>FloatRange</code> using the specified
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,101,* number as both the minimum and maximum in this range.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,103,"* @param number  the number to use for this range, must not be null"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,104,* @throws IllegalArgumentException if the number is <code>null</code>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,105,* @throws IllegalArgumentException if the number is <code>NaN</code>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,107,public FloatRange(Number number) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,108,super();
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,109,if (number == null) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,110,"throw new IllegalArgumentException(""The number must not be null"");"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,112,this.min = number.floatValue();
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,113,this.max = number.floatValue();
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,114,if (Float.isNaN(min) || Float.isNaN(max)) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,115,"throw new IllegalArgumentException(""The number must not be NaN"");"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,117,if (number instanceof Float) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,118,this.minObject = (Float) number;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,119,this.maxObject = (Float) number;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,124,* <p>Constructs a new <code>FloatRange</code> with the specified
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,125,* minimum and maximum numbers (both inclusive).</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,127,"* <p>The arguments may be passed in the order (min,max) or (max,min). The"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,128,* getMinimum and getMaximum methods will return the correct values.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,130,"* @param number1  first number that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,131,"* @param number2  second number that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,132,* @throws IllegalArgumentException if either number is <code>NaN</code>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,134,"public FloatRange(float number1, float number2) {"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,135,super();
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,136,if (Float.isNaN(number1) || Float.isNaN(number2)) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,137,"throw new IllegalArgumentException(""The numbers must not be NaN"");"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,139,if (number2 < number1) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,140,this.min = number2;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,141,this.max = number1;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,142,} else {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,143,this.min = number1;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,144,this.max = number2;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,149,* <p>Constructs a new <code>FloatRange</code> with the specified
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,150,* minimum and maximum numbers (both inclusive).</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,152,"* <p>The arguments may be passed in the order (min,max) or (max,min). The"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,153,* getMinimum and getMaximum methods will return the correct values.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,155,"* @param number1  first number that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,156,"* @param number2  second number that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,157,* @throws IllegalArgumentException if either number is <code>null</code>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,158,* @throws IllegalArgumentException if either number is <code>NaN</code>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,160,"public FloatRange(Number number1, Number number2) {"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,161,super();
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,162,if (number1 == null || number2 == null) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,163,"throw new IllegalArgumentException(""The numbers must not be null"");"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,165,float number1val = number1.floatValue();
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,166,float number2val = number2.floatValue();
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,167,if (Float.isNaN(number1val) || Float.isNaN(number2val)) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,168,"throw new IllegalArgumentException(""The numbers must not be NaN"");"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,170,if (number2val < number1val) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,171,this.min = number2val;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,172,this.max = number1val;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,173,if (number2 instanceof Float) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,174,this.minObject = (Float) number2;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,176,if (number1 instanceof Float) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,177,this.maxObject = (Float) number1;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,179,} else {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,180,this.min = number1val;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,181,this.max = number2val;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,182,if (number1 instanceof Float) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,183,this.minObject = (Float) number1;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,185,if (number2 instanceof Float) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,186,this.maxObject = (Float) number2;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,191,// Accessors
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,195,* <p>Returns the minimum number in this range.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,197,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,199,public Number getMinimumNumber() {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,200,if (minObject == null) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,201,minObject = new Float(min);
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,203,return minObject;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,207,* <p>Gets the minimum number in this range as a <code>long</code>.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,209,* <p>This conversion can lose information for large values or decimals.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,211,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,213,public long getMinimumLong() {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,214,return (long) min;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,218,* <p>Gets the minimum number in this range as a <code>int</code>.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,220,* <p>This conversion can lose information for large values or decimals.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,222,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,224,public int getMinimumInteger() {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,225,return (int) min;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,229,* <p>Gets the minimum number in this range as a <code>double</code>.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,231,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,233,public double getMinimumDouble() {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,234,return min;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,238,* <p>Gets the minimum number in this range as a <code>float</code>.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,240,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,242,public float getMinimumFloat() {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,243,return min;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,247,* <p>Returns the maximum number in this range.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,249,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,251,public Number getMaximumNumber() {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,252,if (maxObject == null) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,253,maxObject = new Float(max);
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,255,return maxObject;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,259,* <p>Gets the maximum number in this range as a <code>long</code>.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,261,* <p>This conversion can lose information for large values or decimals.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,263,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,265,public long getMaximumLong() {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,266,return (long) max;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,270,* <p>Gets the maximum number in this range as a <code>int</code>.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,272,* <p>This conversion can lose information for large values or decimals.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,274,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,276,public int getMaximumInteger() {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,277,return (int) max;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,281,* <p>Gets the maximum number in this range as a <code>double</code>.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,283,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,285,public double getMaximumDouble() {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,286,return max;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,290,* <p>Gets the maximum number in this range as a <code>float</code>.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,292,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,294,public float getMaximumFloat() {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,295,return max;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,298,// Tests
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,302,* <p>Tests whether the specified <code>number</code> occurs within
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,303,* this range using <code>float</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,305,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,307,"* @param number  the number to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,308,* @return <code>true</code> if the specified number occurs within this range
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,310,public boolean includesNumber(Number number) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,311,if (number == null) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,312,return false;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,314,return includesFloat(number.floatValue());
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,318,* <p>Tests whether the specified <code>float</code> occurs within
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,319,* this range using <code>float</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,321,* <p>This implementation overrides the superclass for performance as it is
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,322,* the most common case.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,324,* @param value  the float to test
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,325,* @return <code>true</code> if the specified number occurs within this
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,326,*  range by <code>float</code> comparison
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,328,public boolean includesFloat(float value) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,329,return (value >= min && value <= max);
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,332,// Range tests
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,336,* <p>Tests whether the specified range occurs entirely within this range
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,337,* using <code>float</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,339,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,341,"* @param range  the range to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,342,* @return <code>true</code> if the specified range occurs entirely within this range
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,343,* @throws IllegalArgumentException if the range is not of this type
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,345,public boolean includesRange(Range range) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,346,if (range == null) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,347,return false;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,349,return includesFloat(range.getMinimumFloat()) &&
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,350,includesFloat(range.getMaximumFloat());
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,354,* <p>Tests whether the specified range overlaps with this range
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,355,* using <code>float</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,357,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,359,"* @param range  the range to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,360,* @return <code>true</code> if the specified range overlaps with this range
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,362,public boolean overlapsRange(Range range) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,363,if (range == null) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,364,return false;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,366,return range.includesFloat(min) ||
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,367,range.includesFloat(max) ||
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,368,includesFloat(range.getMinimumFloat());
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,371,// Basics
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,375,* <p>Compares this range to another object to test if they are equal.</p>.
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,377,"* <p>To be equal, the class, minimum and maximum must be equal.</p>"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,379,* @param obj the reference object with which to compare
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,380,* @return <code>true</code> if this object is equal
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,382,public boolean equals(Object obj) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,383,if (obj == this) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,384,return true;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,386,if (obj instanceof FloatRange == false) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,387,return false;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,389,FloatRange range = (FloatRange) obj;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,390,return (Float.floatToIntBits(min) == Float.floatToIntBits(range.min) &&
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,391,Float.floatToIntBits(max) == Float.floatToIntBits(range.max));
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,395,* <p>Gets a hashCode for the range.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,397,* @return a hash code value for this object
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,399,public int hashCode() {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,400,if (hashCode == 0) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,401,hashCode = 17;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,402,hashCode = 37 * hashCode + getClass().hashCode();
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,403,hashCode = 37 * hashCode + Float.floatToIntBits(min);
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,404,hashCode = 37 * hashCode + Float.floatToIntBits(max);
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,406,return hashCode;
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,410,* <p>Gets the range as a <code>String</code>.</p>
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,412,"* <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,414,* @return the <code>String</code> representation of this range
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,416,public String toString() {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,417,if (toString == null) {
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,418,StringBuffer buf = new StringBuffer(32);
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,419,"buf.append(""Range["");"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,420,buf.append(min);
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,421,"buf.append(',');"
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,422,buf.append(max);
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,423,buf.append(']');
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,424,toString = buf.toString();
True,src/java/org/apache/commons/lang/math/FloatRange.java,src/java/org/apache/commons/lang/math/FloatRange.java,426,return toString;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,5,* reserved.
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,9,* are met:
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,17,*    distribution.
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,54,package org.apache.commons.lang.math;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,59,* <p><code>IntRange</code> represents an inclusive range of <code>int</code>s.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,61,* @author Stephen Colebourne
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,62,* @since 2.0
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,63,"* @version $Id: IntRange.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,65,public final class IntRange extends Range implements Serializable {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,67,private static final long serialVersionUID = 71849363892730L;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,69,/* The minimum number in this range (inclusive). */
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,70,private final int min;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,71,/* The maximum number in this range (inclusive). */
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,72,private final int max;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,74,/** Cached output minObject (class is immutable) */
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,75,private transient Integer minObject = null;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,76,/** Cached output maxObject (class is immutable) */
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,77,private transient Integer maxObject = null;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,78,/** Cached output hashCode (class is immutable) */
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,79,private transient int hashCode = 0;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,80,/** Cached output toString (class is immutable) */
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,81,private transient String toString = null;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,84,* <p>Constructs a new <code>IntRange</code> using the specified
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,85,* number as both the minimum and maximum in this range.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,87,* @param number  the number to use for this range
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,89,public IntRange(int number) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,90,super();
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,91,this.min = number;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,92,this.max = number;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,96,* <p>Constructs a new <code>IntRange</code> using the specified
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,97,* number as both the minimum and maximum in this range.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,99,"* @param number  the number to use for this range, must not be null"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,100,* @throws IllegalArgumentException if the number is <code>null</code>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,102,public IntRange(Number number) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,103,super();
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,104,if (number == null) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,105,"throw new IllegalArgumentException(""The number must not be null"");"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,107,this.min = number.intValue();
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,108,this.max = number.intValue();
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,109,if (number instanceof Integer) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,110,this.minObject = (Integer) number;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,111,this.maxObject = (Integer) number;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,116,* <p>Constructs a new <code>IntRange</code> with the specified
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,117,* minimum and maximum numbers (both inclusive).</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,119,"* <p>The arguments may be passed in the order (min,max) or (max,min). The"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,120,* getMinimum and getMaximum methods will return the correct values.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,122,"* @param number1  first number that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,123,"* @param number2  second number that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,125,"public IntRange(int number1, int number2) {"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,126,super();
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,127,if (number2 < number1) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,128,this.min = number2;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,129,this.max = number1;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,130,} else {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,131,this.min = number1;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,132,this.max = number2;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,137,* <p>Constructs a new <code>IntRange</code> with the specified
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,138,* minimum and maximum numbers (both inclusive).</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,140,"* <p>The arguments may be passed in the order (min,max) or (max,min). The"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,141,* getMinimum and getMaximum methods will return the correct values.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,143,"* @param number1  first number that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,144,"* @param number2  second number that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,145,* @throws IllegalArgumentException if either number is <code>null</code>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,147,"public IntRange(Number number1, Number number2) {"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,148,super();
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,149,if (number1 == null || number2 == null) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,150,"throw new IllegalArgumentException(""The numbers must not be null"");"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,152,int number1val = number1.intValue();
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,153,int number2val = number2.intValue();
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,154,if (number2val < number1val) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,155,this.min = number2val;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,156,this.max = number1val;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,157,if (number2 instanceof Integer) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,158,this.minObject = (Integer) number2;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,160,if (number1 instanceof Integer) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,161,this.maxObject = (Integer) number1;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,163,} else {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,164,this.min = number1val;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,165,this.max = number2val;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,166,if (number1 instanceof Integer) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,167,this.minObject = (Integer) number1;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,169,if (number2 instanceof Integer) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,170,this.maxObject = (Integer) number2;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,175,// Accessors
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,179,* <p>Returns the minimum number in this range.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,181,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,183,public Number getMinimumNumber() {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,184,if (minObject == null) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,185,minObject = new Integer(min);
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,187,return minObject;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,191,* <p>Gets the minimum number in this range as a <code>long</code>.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,193,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,195,public long getMinimumLong() {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,196,return min;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,200,* <p>Gets the minimum number in this range as a <code>int</code>.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,202,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,204,public int getMinimumInteger() {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,205,return min;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,209,* <p>Gets the minimum number in this range as a <code>double</code>.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,211,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,213,public double getMinimumDouble() {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,214,return min;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,218,* <p>Gets the minimum number in this range as a <code>float</code>.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,220,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,222,public float getMinimumFloat() {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,223,return min;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,227,* <p>Returns the maximum number in this range.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,229,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,231,public Number getMaximumNumber() {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,232,if (maxObject == null) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,233,maxObject = new Integer(max);
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,235,return maxObject;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,239,* <p>Gets the maximum number in this range as a <code>long</code>.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,241,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,243,public long getMaximumLong() {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,244,return max;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,248,* <p>Gets the maximum number in this range as a <code>int</code>.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,250,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,252,public int getMaximumInteger() {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,253,return max;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,257,* <p>Gets the maximum number in this range as a <code>double</code>.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,259,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,261,public double getMaximumDouble() {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,262,return max;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,266,* <p>Gets the maximum number in this range as a <code>float</code>.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,268,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,270,public float getMaximumFloat() {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,271,return max;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,274,// Tests
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,278,* <p>Tests whether the specified <code>number</code> occurs within
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,279,* this range using <code>int</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,281,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,283,"* @param number  the number to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,284,* @return <code>true</code> if the specified number occurs within this range
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,286,public boolean includesNumber(Number number) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,287,if (number == null) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,288,return false;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,290,return includesInteger(number.intValue());
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,294,* <p>Tests whether the specified <code>int</code> occurs within
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,295,* this range using <code>int</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,297,* <p>This implementation overrides the superclass for performance as it is
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,298,* the most common case.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,300,* @param value  the int to test
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,301,* @return <code>true</code> if the specified number occurs within this
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,302,*  range by <code>int</code> comparison
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,304,public boolean includesInteger(int value) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,305,return (value >= min && value <= max);
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,308,// Range tests
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,312,* <p>Tests whether the specified range occurs entirely within this range
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,313,* using <code>int</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,315,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,317,"* @param range  the range to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,318,* @return <code>true</code> if the specified range occurs entirely within this range
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,319,* @throws IllegalArgumentException if the range is not of this type
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,321,public boolean includesRange(Range range) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,322,if (range == null) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,323,return false;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,325,return includesInteger(range.getMinimumInteger()) &&
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,326,includesInteger(range.getMaximumInteger());
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,330,* <p>Tests whether the specified range overlaps with this range
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,331,* using <code>int</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,333,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,335,"* @param range  the range to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,336,* @return <code>true</code> if the specified range overlaps with this range
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,338,public boolean overlapsRange(Range range) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,339,if (range == null) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,340,return false;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,342,return range.includesInteger(min) ||
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,343,range.includesInteger(max) ||
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,344,includesInteger(range.getMinimumInteger());
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,347,// Basics
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,351,* <p>Compares this range to another object to test if they are equal.</p>.
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,353,"* <p>To be equal, the class, minimum and maximum must be equal.</p>"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,355,* @param obj the reference object with which to compare
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,356,* @return <code>true</code> if this object is equal
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,358,public boolean equals(Object obj) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,359,if (obj == this) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,360,return true;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,362,if (obj instanceof IntRange == false) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,363,return false;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,365,IntRange range = (IntRange) obj;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,366,return (min == range.min && max == range.max);
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,370,* <p>Gets a hashCode for the range.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,372,* @return a hash code value for this object
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,374,public int hashCode() {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,375,if (hashCode == 0) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,376,hashCode = 17;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,377,hashCode = 37 * hashCode + getClass().hashCode();
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,378,hashCode = 37 * hashCode + min;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,379,hashCode = 37 * hashCode + max;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,381,return hashCode;
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,385,* <p>Gets the range as a <code>String</code>.</p>
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,387,"* <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,389,* @return the <code>String</code> representation of this range
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,391,public String toString() {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,392,if (toString == null) {
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,393,StringBuffer buf = new StringBuffer(32);
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,394,"buf.append(""Range["");"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,395,buf.append(min);
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,396,"buf.append(',');"
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,397,buf.append(max);
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,398,buf.append(']');
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,399,toString = buf.toString();
True,src/java/org/apache/commons/lang/math/IntRange.java,src/java/org/apache/commons/lang/math/IntRange.java,401,return toString;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,5,* reserved.
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,9,* are met:
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,17,*    distribution.
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,54,package org.apache.commons.lang.math;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,59,* <p><code>LongRange</code> represents an inclusive range of <code>long</code>s.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,61,* @author Stephen Colebourne
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,62,* @since 2.0
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,63,"* @version $Id: LongRange.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,65,public final class LongRange extends Range implements Serializable {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,67,private static final long serialVersionUID = 71849363892720L;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,69,/* The minimum number in this range (inclusive). */
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,70,private final long min;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,71,/* The maximum number in this range (inclusive). */
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,72,private final long max;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,74,/** Cached output minObject (class is immutable) */
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,75,private transient Long minObject = null;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,76,/** Cached output maxObject (class is immutable) */
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,77,private transient Long maxObject = null;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,78,/** Cached output hashCode (class is immutable) */
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,79,private transient int hashCode = 0;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,80,/** Cached output toString (class is immutable) */
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,81,private transient String toString = null;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,84,* <p>Constructs a new <code>LongRange</code> using the specified
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,85,* number as both the minimum and maximum in this range.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,87,* @param number  the number to use for this range
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,89,public LongRange(long number) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,90,super();
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,91,this.min = number;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,92,this.max = number;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,96,* <p>Constructs a new <code>LongRange</code> using the specified
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,97,* number as both the minimum and maximum in this range.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,99,"* @param number  the number to use for this range, must not be null"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,100,* @throws IllegalArgumentException if the number is <code>null</code>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,102,public LongRange(Number number) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,103,super();
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,104,if (number == null) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,105,"throw new IllegalArgumentException(""The number must not be null"");"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,107,this.min = number.longValue();
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,108,this.max = number.longValue();
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,109,if (number instanceof Long) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,110,this.minObject = (Long) number;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,111,this.maxObject = (Long) number;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,116,* <p>Constructs a new <code>LongRange</code> with the specified
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,117,* minimum and maximum numbers (both inclusive).</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,119,"* <p>The arguments may be passed in the order (min,max) or (max,min). The"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,120,* getMinimum and getMaximum methods will return the correct values.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,122,"* @param number1  first number that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,123,"* @param number2  second number that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,125,"public LongRange(long number1, long number2) {"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,126,super();
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,127,if (number2 < number1) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,128,this.min = number2;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,129,this.max = number1;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,130,} else {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,131,this.min = number1;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,132,this.max = number2;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,137,* <p>Constructs a new <code>LongRange</code> with the specified
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,138,* minimum and maximum numbers (both inclusive).</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,140,"* <p>The arguments may be passed in the order (min,max) or (max,min). The"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,141,* getMinimum and getMaximum methods will return the correct values.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,143,"* @param number1  first number that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,144,"* @param number2  second number that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,145,* @throws IllegalArgumentException if either number is <code>null</code>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,147,"public LongRange(Number number1, Number number2) {"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,148,super();
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,149,if (number1 == null || number2 == null) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,150,"throw new IllegalArgumentException(""The numbers must not be null"");"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,152,long number1val = number1.longValue();
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,153,long number2val = number2.longValue();
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,154,if (number2val < number1val) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,155,this.min = number2val;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,156,this.max = number1val;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,157,if (number2 instanceof Long) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,158,this.minObject = (Long) number2;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,160,if (number1 instanceof Long) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,161,this.maxObject = (Long) number1;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,163,} else {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,164,this.min = number1val;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,165,this.max = number2val;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,166,if (number1 instanceof Long) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,167,this.minObject = (Long) number1;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,169,if (number2 instanceof Long) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,170,this.maxObject = (Long) number2;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,175,// Accessors
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,179,* <p>Returns the minimum number in this range.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,181,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,183,public Number getMinimumNumber() {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,184,if (minObject == null) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,185,minObject = new Long(min);
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,187,return minObject;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,191,* <p>Gets the minimum number in this range as a <code>long</code>.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,193,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,195,public long getMinimumLong() {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,196,return min;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,200,* <p>Gets the minimum number in this range as a <code>int</code>.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,202,* <p>This conversion can lose information for large values.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,204,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,206,public int getMinimumInteger() {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,207,return (int) min;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,211,* <p>Gets the minimum number in this range as a <code>double</code>.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,213,* <p>This conversion can lose information for large values.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,215,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,217,public double getMinimumDouble() {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,218,return min;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,222,* <p>Gets the minimum number in this range as a <code>float</code>.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,224,* <p>This conversion can lose information for large values.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,226,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,228,public float getMinimumFloat() {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,229,return min;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,233,* <p>Returns the maximum number in this range.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,235,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,237,public Number getMaximumNumber() {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,238,if (maxObject == null) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,239,maxObject = new Long(max);
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,241,return maxObject;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,245,* <p>Gets the maximum number in this range as a <code>long</code>.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,247,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,249,public long getMaximumLong() {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,250,return max;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,254,* <p>Gets the maximum number in this range as a <code>int</code>.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,256,* <p>This conversion can lose information for large values.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,258,public int getMaximumInteger() {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,259,return (int) max;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,263,* <p>Gets the maximum number in this range as a <code>double</code>.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,265,* <p>This conversion can lose information for large values.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,267,public double getMaximumDouble() {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,268,return max;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,272,* <p>Gets the maximum number in this range as a <code>float</code>.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,274,* <p>This conversion can lose information for large values.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,276,public float getMaximumFloat() {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,277,return max;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,280,// Tests
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,284,* <p>Tests whether the specified <code>number</code> occurs within
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,285,* this range using <code>long</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,287,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,289,"* @param number  the number to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,290,* @return <code>true</code> if the specified number occurs within this range
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,292,public boolean includesNumber(Number number) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,293,if (number == null) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,294,return false;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,296,return includesLong(number.longValue());
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,300,* <p>Tests whether the specified <code>long</code> occurs within
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,301,* this range using <code>long</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,303,* <p>This implementation overrides the superclass for performance as it is
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,304,* the most common case.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,306,* @param value  the long to test
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,307,* @return <code>true</code> if the specified number occurs within this
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,308,*  range by <code>long</code> comparison
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,310,public boolean includesLong(long value) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,311,return (value >= min && value <= max);
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,314,// Range tests
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,318,* <p>Tests whether the specified range occurs entirely within this range
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,319,* using <code>long</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,321,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,323,"* @param range  the range to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,324,* @return <code>true</code> if the specified range occurs entirely within this range
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,325,* @throws IllegalArgumentException if the range is not of this type
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,327,public boolean includesRange(Range range) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,328,if (range == null) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,329,return false;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,331,return includesLong(range.getMinimumLong()) &&
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,332,includesLong(range.getMaximumLong());
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,336,* <p>Tests whether the specified range overlaps with this range
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,337,* using <code>long</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,339,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,341,"* @param range  the range to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,342,* @return <code>true</code> if the specified range overlaps with this range
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,344,public boolean overlapsRange(Range range) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,345,if (range == null) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,346,return false;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,348,return range.includesLong(min) ||
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,349,range.includesLong(max) ||
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,350,includesLong(range.getMinimumLong());
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,353,// Basics
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,357,* <p>Compares this range to another object to test if they are equal.</p>.
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,359,"* <p>To be equal, the class, minimum and maximum must be equal.</p>"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,361,* @param obj the reference object with which to compare
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,362,* @return <code>true</code> if this object is equal
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,364,public boolean equals(Object obj) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,365,if (obj == this) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,366,return true;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,368,if (obj instanceof LongRange == false) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,369,return false;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,371,LongRange range = (LongRange) obj;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,372,return (min == range.min && max == range.max);
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,376,* <p>Gets a hashCode for the range.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,378,* @return a hash code value for this object
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,380,public int hashCode() {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,381,if (hashCode == 0) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,382,hashCode = 17;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,383,hashCode = 37 * hashCode + getClass().hashCode();
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,384,hashCode = 37 * hashCode + ((int) (min ^ (min >> 32)));
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,385,hashCode = 37 * hashCode + ((int) (max ^ (max >> 32)));
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,387,return hashCode;
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,391,* <p>Gets the range as a <code>String</code>.</p>
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,393,"* <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,395,* @return the <code>String</code> representation of this range
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,397,public String toString() {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,398,if (toString == null) {
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,399,StringBuffer buf = new StringBuffer(32);
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,400,"buf.append(""Range["");"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,401,buf.append(min);
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,402,"buf.append(',');"
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,403,buf.append(max);
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,404,buf.append(']');
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,405,toString = buf.toString();
True,src/java/org/apache/commons/lang/math/LongRange.java,src/java/org/apache/commons/lang/math/LongRange.java,407,return toString;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,5,* reserved.
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,9,* are met:
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,17,*    distribution.
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,54,package org.apache.commons.lang.math;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,59,* <p><code>NumberRange</code> represents an inclusive range of
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,60,* {@link java.lang.Number Number} objects of the same type.</p>
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,62,"* @author <a href=""mailto:chrise@esha.com"">Christopher Elkins</a>"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,63,* @author Stephen Colebourne
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,64,* @since 2.0 (previously in org.apache.commons.lang)
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,65,"* @version $Id: NumberRange.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,67,public final class NumberRange extends Range implements Serializable {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,69,private static final long serialVersionUID = 71849363892710L;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,71,/* The minimum number in this range. */
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,72,private final Number min;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,73,/* The maximum number in this range. */
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,74,private final Number max;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,76,/** Cached output hashCode (class is immutable) */
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,77,private transient int hashCode = 0;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,78,/** Cached output toString (class is immutable) */
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,79,private transient String toString = null;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,82,* <p>Constructs a new <code>NumberRange</code> using the specified
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,83,* number as both the minimum and maximum in this range.</p>
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,85,* @param num the number to use for this range
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,86,* @throws IllegalArgumentException if the number is <code>null</code>
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,87,* @throws IllegalArgumentException if the number doesn't implement <code>Comparable</code>
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,88,* @throws IllegalArgumentException if the number is <code>Double.NaN</code> or <code>Float.NaN</code>
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,90,public NumberRange(Number num) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,91,if (num == null) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,92,"throw new IllegalArgumentException(""The number must not be null"");"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,94,if (num instanceof Comparable == false) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,95,"throw new IllegalArgumentException(""The number must implement Comparable"");"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,97,if (num instanceof Double && ((Double) num).isNaN()) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,98,"throw new IllegalArgumentException(""The number must not be NaN"");"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,100,if (num instanceof Float && ((Float) num).isNaN()) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,101,"throw new IllegalArgumentException(""The number must not be NaN"");"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,104,this.min = num;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,105,this.max = num;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,109,* <p>Constructs a new <code>NumberRange</code> with the specified
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,110,* minimum and maximum numbers (both inclusive).</p>
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,112,"* <p>The arguments may be passed in the order (min,max) or (max,min). The"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,113,* {@link #getMinimum()} and {@link #getMaximum()} methods will return the
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,114,* correct value.</p>
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,116,* <p>This constructor is designed to be used with two <code>Number</code>
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,117,"* objects of the same type. If two objects of different types are passed in,"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,118,* an exception is thrown.</p>
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,120,"* @param num1  first number that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,121,"* @param num2  second number that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,122,* @throws IllegalArgumentException if either number is <code>null</code>
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,123,* @throws IllegalArgumentException if the numbers are of different types
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,124,* @throws IllegalArgumentException if the numbers don't implement <code>Comparable</code>
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,126,"public NumberRange(Number num1, Number num2) {"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,127,if (num1 == null || num2 == null) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,128,"throw new IllegalArgumentException(""The numbers must not be null"");"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,130,if (num1.getClass() != num2.getClass()) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,131,"throw new IllegalArgumentException(""The numbers must be of the same type"");"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,133,if (num1 instanceof Comparable == false) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,134,"throw new IllegalArgumentException(""The numbers must implement Comparable"");"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,136,if (num1 instanceof Double) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,137,if (((Double) num1).isNaN() || ((Double) num2).isNaN()) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,138,"throw new IllegalArgumentException(""The number must not be NaN"");"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,140,} else if (num1 instanceof Float) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,141,if (((Float) num1).isNaN() || ((Float) num2).isNaN()) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,142,"throw new IllegalArgumentException(""The number must not be NaN"");"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,146,int compare = ((Comparable) num1).compareTo(num2);
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,147,if (compare == 0) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,148,this.min = num1;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,149,this.max = num1;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,150,} else if (compare > 0) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,151,this.min = num2;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,152,this.max = num1;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,153,} else {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,154,this.min = num1;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,155,this.max = num2;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,159,// Accessors
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,163,* <p>Returns the minimum number in this range.</p>
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,165,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,167,public Number getMinimumNumber() {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,168,return min;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,172,* <p>Returns the maximum number in this range.</p>
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,174,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,176,public Number getMaximumNumber() {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,177,return max;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,180,// Tests
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,184,* <p>Tests whether the specified <code>number</code> occurs within
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,185,* this range.</p>
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,187,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,189,"* @param number  the number to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,190,* @return <code>true</code> if the specified number occurs within this range
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,191,* @throws IllegalArgumentException if the number is of a different type to the range
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,193,public boolean includesNumber(Number number) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,194,if (number == null) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,195,return false;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,197,if (number.getClass() != min.getClass()) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,198,"throw new IllegalArgumentException(""The number must be of the same type as the range numbers"");"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,200,int compareMin = ((Comparable) min).compareTo(number);
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,201,int compareMax = ((Comparable) max).compareTo(number);
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,202,return (compareMin <= 0 && compareMax >= 0);
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,205,// Range tests
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,207,// use Range implementations
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,209,// Basics
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,213,* <p>Compares this range to another object to test if they are equal.</p>.
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,215,"* <p>To be equal, the class, minimum and maximum must be equal.</p>"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,217,* @param obj the reference object with which to compare
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,218,* @return <code>true</code> if this object is equal
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,220,public boolean equals(Object obj) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,221,if (obj == this) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,222,return true;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,224,if (obj instanceof NumberRange == false) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,225,return false;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,227,NumberRange range = (NumberRange) obj;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,228,return min.equals(range.min) && max.equals(range.max);
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,232,* <p>Gets a hashCode for the range.</p>
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,234,* @return a hash code value for this object
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,236,public int hashCode() {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,237,if (hashCode == 0) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,238,hashCode = 17;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,239,hashCode = 37 * hashCode + getClass().hashCode();
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,240,hashCode = 37 * hashCode + min.hashCode();
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,241,hashCode = 37 * hashCode + max.hashCode();
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,243,return hashCode;
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,247,* <p>Gets the range as a <code>String</code>.</p>
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,249,"* <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,251,* @return the <code>String</code> representation of this range
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,253,public String toString() {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,254,if (toString == null) {
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,255,StringBuffer buf = new StringBuffer(32);
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,256,"buf.append(""Range["");"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,257,buf.append(min);
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,258,"buf.append(',');"
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,259,buf.append(max);
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,260,buf.append(']');
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,261,toString = buf.toString();
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,263,return toString;
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,5,* reserved.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,9,* are met:
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,17,*    distribution.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,54,package org.apache.commons.lang.math;
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,56,import org.apache.commons.lang.NumberUtils;
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,59,* <p><code>Range</code> represents a range of numbers of the same type.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,61,* <p>Specific subclasses hold the range values as different types. Each
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,62,* subclass should be immutable and {@link java.io.Serializable Serializable}
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,63,* if possible.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,65,* @author Stephen Colebourne
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,66,* @since 2.0
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,67,"* @version $Id: Range.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,69,public abstract class Range {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,72,* <p>Constructs a new range.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,74,public Range() {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,75,super();
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,78,// Accessors
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,82,* <p>Gets the minimum number in this range.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,84,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,86,public abstract Number getMinimumNumber();
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,89,* <p>Gets the minimum number in this range as a <code>long</code>.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,91,* <p>This implementation uses the {@link #getMinimumNumber()} method.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,92,* Subclasses may be able to optimise this.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,94,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,96,public long getMinimumLong() {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,97,return getMinimumNumber().longValue();
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,101,* <p>Gets the minimum number in this range as a <code>int</code>.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,103,* <p>This implementation uses the {@link #getMinimumNumber()} method.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,104,* Subclasses may be able to optimise this.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,106,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,108,public int getMinimumInteger() {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,109,return getMinimumNumber().intValue();
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,113,* <p>Gets the minimum number in this range as a <code>double</code>.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,115,* <p>This implementation uses the {@link #getMinimumNumber()} method.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,116,* Subclasses may be able to optimise this.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,118,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,120,public double getMinimumDouble() {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,121,return getMinimumNumber().doubleValue();
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,125,* <p>Gets the minimum number in this range as a <code>float</code>.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,127,* <p>This implementation uses the {@link #getMinimumNumber()} method.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,128,* Subclasses may be able to optimise this.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,130,* @return the minimum number in this range
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,132,public float getMinimumFloat() {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,133,return getMinimumNumber().floatValue();
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,137,* <p>Gets the maximum number in this range.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,139,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,141,public abstract Number getMaximumNumber();
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,144,* <p>Gets the maximum number in this range as a <code>long</code>.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,146,* <p>This implementation uses the {@link #getMaximumNumber()} method.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,147,* Subclasses may be able to optimise this.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,149,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,151,public long getMaximumLong() {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,152,return getMaximumNumber().longValue();
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,156,* <p>Gets the maximum number in this range as a <code>int</code>.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,158,* <p>This implementation uses the {@link #getMaximumNumber()} method.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,159,* Subclasses may be able to optimise this.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,161,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,163,public int getMaximumInteger() {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,164,return getMaximumNumber().intValue();
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,168,* <p>Gets the maximum number in this range as a <code>double</code>.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,170,* <p>This implementation uses the {@link #getMaximumNumber()} method.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,171,* Subclasses may be able to optimise this.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,173,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,175,public double getMaximumDouble() {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,176,return getMaximumNumber().doubleValue();
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,180,* <p>Gets the maximum number in this range as a <code>float</code>.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,182,* <p>This implementation uses the {@link #getMaximumNumber()} method.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,183,* Subclasses may be able to optimise this.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,185,* @return the maximum number in this range
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,187,public float getMaximumFloat() {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,188,return getMaximumNumber().floatValue();
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,191,// Include tests
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,195,* <p>Tests whether the specified <code>Number</code> occurs within
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,196,* this range.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,198,* <p>The exact comparison implementation varies by subclass. It is
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,199,* intended that an <code>int</code> specific subclass will compare using
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,200,* <code>int</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,202,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,204,"* @param number  the number to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,205,* @return <code>true</code> if the specified number occurs within this range
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,206,* @throws IllegalArgumentException if the <code>Number</code> cannot be compared
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,208,public abstract boolean includesNumber(Number number);
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,211,* <p>Tests whether the specified <code>Number</code> occurs within
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,212,* this range using <code>long</code> comparison..</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,214,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,216,* <p>This implementation forwards to the {@link #includesLong(long)} method.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,218,"* @param value  the long to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,219,* @return <code>true</code> if the specified number occurs within this
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,220,*  range by <code>long</code> comparison
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,222,public boolean includesLong(Number value) {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,223,if (value == null) {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,224,return false;
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,226,return includesLong(value.longValue());
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,230,* <p>Tests whether the specified <code>long</code> occurs within
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,231,* this range using <code>long</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,233,* <p>This implementation uses the {@link #getMinimumLong()} and
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,234,* {@link #getMaximumLong()} methods and should be good for most uses.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,236,* @param value  the long to test
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,237,* @return <code>true</code> if the specified number occurs within this
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,238,*  range by <code>long</code> comparison
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,240,public boolean includesLong(long value) {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,241,return (value >= getMinimumLong() && value <= getMaximumLong());
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,245,* <p>Tests whether the specified <code>Number</code> occurs within
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,246,* this range using <code>int</code> comparison..</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,248,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,250,* <p>This implementation forwards to the {@link #includesInteger(int)} method.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,252,"* @param value  the integer to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,253,* @return <code>true</code> if the specified number occurs within this
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,254,*  range by <code>int</code> comparison
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,256,public boolean includesInteger(Number value) {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,257,if (value == null) {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,258,return false;
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,260,return includesInteger(value.intValue());
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,264,* <p>Tests whether the specified <code>int</code> occurs within
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,265,* this range using <code>int</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,267,* <p>This implementation uses the {@link #getMinimumInteger()} and
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,268,* {@link #getMaximumInteger()} methods and should be good for most uses.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,270,* @param value  the int to test
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,271,* @return <code>true</code> if the specified number occurs within this
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,272,*  range by <code>int</code> comparison
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,274,public boolean includesInteger(int value) {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,275,return (value >= getMinimumInteger() && value <= getMaximumInteger());
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,279,* <p>Tests whether the specified <code>Number</code> occurs within
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,280,* this range using <code>double</code> comparison..</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,282,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,284,* <p>This implementation forwards to the {@link #includesDouble(double)} method.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,286,"* @param value  the double to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,287,* @return <code>true</code> if the specified number occurs within this
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,288,*  range by <code>double</code> comparison
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,290,public boolean includesDouble(Number value) {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,291,if (value == null) {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,292,return false;
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,294,return includesDouble(value.doubleValue());
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,298,* <p>Tests whether the specified <code>double</code> occurs within
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,299,* this range using <code>double</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,301,* <p>This implementation uses the {@link #getMinimumDouble()} and
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,302,* {@link #getMaximumDouble()} methods and should be good for most uses.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,304,* @param value  the double to test
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,305,* @return <code>true</code> if the specified number occurs within this
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,306,*  range by <code>double</code> comparison
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,308,public boolean includesDouble(double value) {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,309,"int compareMin = NumberUtils.compare(getMinimumDouble(), value);"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,310,"int compareMax = NumberUtils.compare(getMaximumDouble(), value);"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,311,return (compareMin <= 0 && compareMax >= 0);
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,315,* <p>Tests whether the specified <code>Number</code> occurs within
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,316,* this range using <code>float</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,318,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,320,* <p>This implementation forwards to the {@link #includesFloat(float)} method.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,322,"* @param value  the float to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,323,* @return <code>true</code> if the specified number occurs within this
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,324,*  range by <code>float</code> comparison
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,326,public boolean includesFloat(Number value) {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,327,if (value == null) {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,328,return false;
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,330,return includesFloat(value.floatValue());
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,334,* <p>Tests whether the specified <code>float</code> occurs within
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,335,* this range using <code>float</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,337,* <p>This implementation uses the {@link #getMinimumFloat()} and
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,338,* {@link #getMaximumFloat()} methods and should be good for most uses.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,340,* @param value  the float to test
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,341,* @return <code>true</code> if the specified number occurs within this
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,342,*  range by <code>float</code> comparison
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,344,public boolean includesFloat(float value) {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,345,"int compareMin = NumberUtils.compare(getMinimumFloat(), value);"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,346,"int compareMax = NumberUtils.compare(getMaximumFloat(), value);"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,347,return (compareMin <= 0 && compareMax >= 0);
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,350,// Range tests
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,354,* <p>Tests whether the specified range occurs entirely within this range.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,356,* <p>The exact comparison implementation varies by subclass. It is
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,357,* intended that an <code>int</code> specific subclass will compare using
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,358,* <code>int</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,360,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,362,* <p>This implementation uses the {@link #includesNumber(Number)} method.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,363,* Subclasses may be able to optimise this.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,365,"* @param range  the range to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,366,* @return <code>true</code> if the specified range occurs entirely within
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,367,"*  this range; otherwise, <code>false</code>"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,368,* @throws IllegalArgumentException if the <code>Range</code> cannot be compared
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,370,public boolean includesRange(Range range) {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,371,if (range == null) {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,372,return false;
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,374,return includesNumber(range.getMinimumNumber()) &&
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,375,includesNumber(range.getMaximumNumber());
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,379,* <p>Tests whether the specified range overlaps with this range.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,381,* <p>The exact comparison implementation varies by subclass. It is
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,382,* intended that an <code>int</code> specific subclass will compare using
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,383,* <code>int</code> comparison.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,385,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,387,* <p>This implementation uses the {@link #includesNumber(Number)} and
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,388,* {@link #includesRange(Range)} methods.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,389,* Subclasses may be able to optimise this.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,391,"* @param range  the range to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,392,* @return <code>true</code> if the specified range overlaps with this
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,393,"*  range; otherwise, <code>false</code>"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,394,* @throws IllegalArgumentException if the <code>Range</code> cannot be compared
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,396,public boolean overlapsRange(Range range) {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,397,if (range == null) {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,398,return false;
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,400,return range.includesNumber(getMinimumNumber()) ||
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,401,range.includesNumber(getMaximumNumber()) ||
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,402,includesNumber(range.getMinimumNumber());
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,405,// Basics
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,409,* <p>Compares this range to another object to test if they are equal.</p>.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,411,"* <p>To be equal, the class, minimum and maximum must be equal.</p>"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,413,* <p>This implementation uses the {@link #getMinimumNumber()} and
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,414,* {@link #getMaximumNumber()} methods.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,415,* Subclasses may be able to optimise this.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,417,* @param obj the reference object with which to compare
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,418,* @return <code>true</code> if this object is equal
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,420,public boolean equals(Object obj) {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,421,if (obj == this) {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,422,return true;
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,423,} else if (obj == null || obj.getClass() != getClass()) {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,424,return false;
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,425,} else {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,426,Range range = (Range) obj;
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,427,return getMinimumNumber().equals(range.getMinimumNumber()) &&
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,428,getMaximumNumber().equals(range.getMaximumNumber());
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,433,* <p>Gets a hashCode for the range.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,435,* <p>This implementation uses the {@link #getMinimumNumber()} and
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,436,* {@link #getMaximumNumber()} methods.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,437,* Subclasses may be able to optimise this.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,439,* @return a hash code value for this object
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,441,public int hashCode() {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,442,int result = 17;
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,443,result = 37 * result + getClass().hashCode();
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,444,result = 37 * result + getMinimumNumber().hashCode();
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,445,result = 37 * result + getMaximumNumber().hashCode();
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,446,return result;
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,450,* <p>Gets the range as a <code>String</code>.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,452,"* <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,454,* <p>This implementation uses the {@link #getMinimumNumber()} and
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,455,* {@link #getMaximumNumber()} methods.
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,456,* Subclasses may be able to optimise this.</p>
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,458,* @return the <code>String</code> representation of this range
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,460,public String toString() {
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,461,StringBuffer buf = new StringBuffer(32);
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,462,"buf.append(""Range["");"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,463,buf.append(getMinimumNumber());
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,464,"buf.append(',');"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,465,buf.append(getMaximumNumber());
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,466,buf.append(']');
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,467,return buf.toString();
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,5,* reserved.
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,9,* are met:
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,17,*    distribution.
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,54,package org.apache.commons.lang.math;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,60,* Test cases for the {@link Range} classes.
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,62,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,63,"* @version $Id: AbstractRangeTest.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,65,public abstract class AbstractRangeTest extends TestCase {
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,67,protected Range tenToTwenty;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,68,protected Range otherRange;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,70,protected Integer five;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,71,protected Integer ten;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,72,protected Integer twelve;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,73,protected Integer fifteen;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,74,protected Integer twenty;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,75,protected Integer twentyFive;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,76,protected Long long8;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,77,protected Long long10;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,78,protected Long long12;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,79,protected Long long20;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,80,protected Long long21;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,81,protected Double double8;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,82,protected Double double10;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,83,protected Double double12;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,84,protected Double double20;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,85,protected Double double21;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,86,protected Float float8;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,87,protected Float float10;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,88,protected Float float12;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,89,protected Float float20;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,90,protected Float float21;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,92,private static class InnerNumber extends Number {
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,93,public double doubleValue() {
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,94,return 12d;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,96,public float floatValue() {
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,97,return 12f;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,99,public int intValue() {
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,100,return 12;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,102,public long longValue() {
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,103,return 12L;
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,108,protected InnerNumber nonComparable = new InnerNumber();
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,111,public AbstractRangeTest(String name) {
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,112,super(name);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,115,public void setUp() {
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,116,five        = new Integer(5);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,117,ten         = new Integer(10);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,118,twelve      = new Integer(12);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,119,fifteen     = new Integer(15);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,120,twenty      = new Integer(20);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,121,twentyFive  = new Integer(25);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,122,long8       = new Long(8);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,123,long10      = new Long(10);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,124,long12      = new Long(12);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,125,long20      = new Long(20);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,126,long21      = new Long(21);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,127,double8     = new Double(8);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,128,double10    = new Double(10);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,129,double12    = new Double(12);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,130,double20    = new Double(20);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,131,double21    = new Double(21);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,132,float8      = new Float(8);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,133,float10     = new Float(10);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,134,float12     = new Float(12);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,135,float20     = new Float(20);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,136,float21     = new Float(21);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,141,public void testGetMinimum() {
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,142,"assertEquals(10L, tenToTwenty.getMinimumLong());"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,143,"assertEquals(10, tenToTwenty.getMinimumInteger());"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,144,"assertEquals(10d, tenToTwenty.getMinimumDouble(), 0.00001d);"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,145,"assertEquals(10f, tenToTwenty.getMinimumFloat(), 0.00001f);"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,148,public void testGetMaximum() {
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,149,"assertEquals(20L, tenToTwenty.getMaximumLong());"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,150,"assertEquals(20, tenToTwenty.getMaximumInteger());"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,151,"assertEquals(20d, tenToTwenty.getMaximumDouble(), 0.00001d);"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,152,"assertEquals(20f, tenToTwenty.getMaximumFloat(), 0.00001f);"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,157,public void testIncludesLong() {
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,158,"assertEquals(false, tenToTwenty.includesLong(null));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,159,"assertEquals(true, tenToTwenty.includesLong(nonComparable));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,161,"assertEquals(false, tenToTwenty.includesLong(five));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,162,"assertEquals(true, tenToTwenty.includesLong(ten));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,163,"assertEquals(true, tenToTwenty.includesLong(fifteen));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,164,"assertEquals(true, tenToTwenty.includesLong(twenty));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,165,"assertEquals(false, tenToTwenty.includesLong(twentyFive));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,167,"assertEquals(false, tenToTwenty.includesLong(long8));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,168,"assertEquals(true, tenToTwenty.includesLong(long10));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,169,"assertEquals(true, tenToTwenty.includesLong(long12));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,170,"assertEquals(true, tenToTwenty.includesLong(long20));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,171,"assertEquals(false, tenToTwenty.includesLong(long21));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,173,"assertEquals(false, tenToTwenty.includesLong(double8));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,174,"assertEquals(true, tenToTwenty.includesLong(double10));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,175,"assertEquals(true, tenToTwenty.includesLong(double12));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,176,"assertEquals(true, tenToTwenty.includesLong(double20));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,177,"assertEquals(false, tenToTwenty.includesLong(double21));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,179,"assertEquals(false, tenToTwenty.includesLong(float8));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,180,"assertEquals(true, tenToTwenty.includesLong(float10));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,181,"assertEquals(true, tenToTwenty.includesLong(float12));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,182,"assertEquals(true, tenToTwenty.includesLong(float20));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,183,"assertEquals(false, tenToTwenty.includesLong(float21));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,185,"assertEquals(false, tenToTwenty.includesLong(9L));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,186,"assertEquals(true, tenToTwenty.includesLong(10L));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,187,"assertEquals(true, tenToTwenty.includesLong(15L));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,188,"assertEquals(true, tenToTwenty.includesLong(20L));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,189,"assertEquals(false, tenToTwenty.includesLong(21L));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,192,public void testIncludesInteger() {
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,193,"assertEquals(false, tenToTwenty.includesInteger(null));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,194,"assertEquals(true, tenToTwenty.includesInteger(nonComparable));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,196,"assertEquals(false, tenToTwenty.includesInteger(five));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,197,"assertEquals(true, tenToTwenty.includesInteger(ten));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,198,"assertEquals(true, tenToTwenty.includesInteger(fifteen));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,199,"assertEquals(true, tenToTwenty.includesInteger(twenty));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,200,"assertEquals(false, tenToTwenty.includesInteger(twentyFive));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,202,"assertEquals(false, tenToTwenty.includesInteger(long8));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,203,"assertEquals(true, tenToTwenty.includesInteger(long10));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,204,"assertEquals(true, tenToTwenty.includesInteger(long12));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,205,"assertEquals(true, tenToTwenty.includesInteger(long20));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,206,"assertEquals(false, tenToTwenty.includesInteger(long21));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,208,"assertEquals(false, tenToTwenty.includesInteger(double8));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,209,"assertEquals(true, tenToTwenty.includesInteger(double10));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,210,"assertEquals(true, tenToTwenty.includesInteger(double12));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,211,"assertEquals(true, tenToTwenty.includesInteger(double20));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,212,"assertEquals(false, tenToTwenty.includesInteger(double21));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,214,"assertEquals(false, tenToTwenty.includesInteger(float8));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,215,"assertEquals(true, tenToTwenty.includesInteger(float10));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,216,"assertEquals(true, tenToTwenty.includesInteger(float12));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,217,"assertEquals(true, tenToTwenty.includesInteger(float20));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,218,"assertEquals(false, tenToTwenty.includesInteger(float21));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,220,"assertEquals(false, tenToTwenty.includesInteger(9));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,221,"assertEquals(true, tenToTwenty.includesInteger(10));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,222,"assertEquals(true, tenToTwenty.includesInteger(15));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,223,"assertEquals(true, tenToTwenty.includesInteger(20));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,224,"assertEquals(false, tenToTwenty.includesInteger(21));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,227,public void testIncludesDouble() {
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,228,"assertEquals(false, tenToTwenty.includesDouble(null));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,229,"assertEquals(true, tenToTwenty.includesDouble(nonComparable));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,231,"assertEquals(false, tenToTwenty.includesDouble(five));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,232,"assertEquals(true, tenToTwenty.includesDouble(ten));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,233,"assertEquals(true, tenToTwenty.includesDouble(fifteen));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,234,"assertEquals(true, tenToTwenty.includesDouble(twenty));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,235,"assertEquals(false, tenToTwenty.includesDouble(twentyFive));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,237,"assertEquals(false, tenToTwenty.includesDouble(long8));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,238,"assertEquals(true, tenToTwenty.includesDouble(long10));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,239,"assertEquals(true, tenToTwenty.includesDouble(long12));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,240,"assertEquals(true, tenToTwenty.includesDouble(long20));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,241,"assertEquals(false, tenToTwenty.includesDouble(long21));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,243,"assertEquals(false, tenToTwenty.includesDouble(double8));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,244,"assertEquals(true, tenToTwenty.includesDouble(double10));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,245,"assertEquals(true, tenToTwenty.includesDouble(double12));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,246,"assertEquals(true, tenToTwenty.includesDouble(double20));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,247,"assertEquals(false, tenToTwenty.includesDouble(double21));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,249,"assertEquals(false, tenToTwenty.includesDouble(float8));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,250,"assertEquals(true, tenToTwenty.includesDouble(float10));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,251,"assertEquals(true, tenToTwenty.includesDouble(float12));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,252,"assertEquals(true, tenToTwenty.includesDouble(float20));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,253,"assertEquals(false, tenToTwenty.includesDouble(float21));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,255,"assertEquals(false, tenToTwenty.includesDouble(9d));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,256,"assertEquals(true, tenToTwenty.includesDouble(10d));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,257,"assertEquals(true, tenToTwenty.includesDouble(15d));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,258,"assertEquals(true, tenToTwenty.includesDouble(20d));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,259,"assertEquals(false, tenToTwenty.includesDouble(21d));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,262,public void testIncludesFloat() {
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,263,"assertEquals(false, tenToTwenty.includesFloat(null));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,264,"assertEquals(true, tenToTwenty.includesFloat(nonComparable));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,266,"assertEquals(false, tenToTwenty.includesFloat(five));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,267,"assertEquals(true, tenToTwenty.includesFloat(ten));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,268,"assertEquals(true, tenToTwenty.includesFloat(fifteen));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,269,"assertEquals(true, tenToTwenty.includesFloat(twenty));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,270,"assertEquals(false, tenToTwenty.includesFloat(twentyFive));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,272,"assertEquals(false, tenToTwenty.includesFloat(long8));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,273,"assertEquals(true, tenToTwenty.includesFloat(long10));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,274,"assertEquals(true, tenToTwenty.includesFloat(long12));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,275,"assertEquals(true, tenToTwenty.includesFloat(long20));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,276,"assertEquals(false, tenToTwenty.includesFloat(long21));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,278,"assertEquals(false, tenToTwenty.includesFloat(double8));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,279,"assertEquals(true, tenToTwenty.includesFloat(double10));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,280,"assertEquals(true, tenToTwenty.includesFloat(double12));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,281,"assertEquals(true, tenToTwenty.includesFloat(double20));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,282,"assertEquals(false, tenToTwenty.includesFloat(double21));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,284,"assertEquals(false, tenToTwenty.includesFloat(float8));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,285,"assertEquals(true, tenToTwenty.includesFloat(float10));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,286,"assertEquals(true, tenToTwenty.includesFloat(float12));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,287,"assertEquals(true, tenToTwenty.includesFloat(float20));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,288,"assertEquals(false, tenToTwenty.includesFloat(float21));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,290,"assertEquals(false, tenToTwenty.includesFloat(9f));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,291,"assertEquals(true, tenToTwenty.includesFloat(10f));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,292,"assertEquals(true, tenToTwenty.includesFloat(15f));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,293,"assertEquals(true, tenToTwenty.includesFloat(20f));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,294,"assertEquals(false, tenToTwenty.includesFloat(21f));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,299,public void testIncludesRange() {
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,300,"assertEquals(false, tenToTwenty.includesRange(createRange(five, five)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,301,"assertEquals(false, tenToTwenty.includesRange(createRange(five, ten)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,302,"assertEquals(false, tenToTwenty.includesRange(createRange(five, twelve)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,303,"assertEquals(false, tenToTwenty.includesRange(createRange(five, fifteen)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,304,"assertEquals(false, tenToTwenty.includesRange(createRange(five, twenty)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,305,"assertEquals(false, tenToTwenty.includesRange(createRange(five, twentyFive)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,307,"assertEquals(true, tenToTwenty.includesRange(createRange(ten, ten)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,308,"assertEquals(true, tenToTwenty.includesRange(createRange(ten, twelve)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,309,"assertEquals(true, tenToTwenty.includesRange(createRange(ten, fifteen)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,310,"assertEquals(true, tenToTwenty.includesRange(createRange(ten, twenty)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,311,"assertEquals(false, tenToTwenty.includesRange(createRange(ten, twentyFive)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,313,"assertEquals(true, tenToTwenty.includesRange(createRange(twelve, twelve)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,314,"assertEquals(true, tenToTwenty.includesRange(createRange(twelve, fifteen)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,315,"assertEquals(true, tenToTwenty.includesRange(createRange(twelve, twenty)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,316,"assertEquals(false, tenToTwenty.includesRange(createRange(twelve, twentyFive)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,318,"assertEquals(true, tenToTwenty.includesRange(createRange(fifteen, fifteen)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,319,"assertEquals(true, tenToTwenty.includesRange(createRange(fifteen, twenty)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,320,"assertEquals(false, tenToTwenty.includesRange(createRange(fifteen, twentyFive)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,322,"assertEquals(true, tenToTwenty.includesRange(createRange(twenty, twenty)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,323,"assertEquals(false, tenToTwenty.includesRange(createRange(twenty, twentyFive)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,325,"assertEquals(false, tenToTwenty.includesRange(createRange(twentyFive, twentyFive)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,328,public void testOverlapsRange() {
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,329,"assertEquals(false, tenToTwenty.overlapsRange(createRange(five, five)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,330,"assertEquals(true, tenToTwenty.overlapsRange(createRange(five, ten)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,331,"assertEquals(true, tenToTwenty.overlapsRange(createRange(five, twelve)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,332,"assertEquals(true, tenToTwenty.overlapsRange(createRange(five, fifteen)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,333,"assertEquals(true, tenToTwenty.overlapsRange(createRange(five, twenty)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,334,"assertEquals(true, tenToTwenty.overlapsRange(createRange(five, twentyFive)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,336,"assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, ten)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,337,"assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, twelve)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,338,"assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, fifteen)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,339,"assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, twenty)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,340,"assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, twentyFive)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,342,"assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, twelve)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,343,"assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, fifteen)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,344,"assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, twenty)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,345,"assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, twentyFive)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,347,"assertEquals(true, tenToTwenty.overlapsRange(createRange(fifteen, fifteen)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,348,"assertEquals(true, tenToTwenty.overlapsRange(createRange(fifteen, twenty)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,349,"assertEquals(true, tenToTwenty.overlapsRange(createRange(fifteen, twentyFive)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,351,"assertEquals(true, tenToTwenty.overlapsRange(createRange(twenty, twenty)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,352,"assertEquals(true, tenToTwenty.overlapsRange(createRange(twenty, twentyFive)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,354,"assertEquals(false, tenToTwenty.overlapsRange(createRange(twentyFive, twentyFive)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,359,public void testEquals() {
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,360,"assertEquals(false, tenToTwenty.equals(createRange(ten, fifteen)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,361,"assertEquals(false, tenToTwenty.equals(createRange(ten, twentyFive)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,363,"assertEquals(false, tenToTwenty.equals(createRange(fifteen, twenty)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,364,"assertEquals(false, tenToTwenty.equals(createRange(five, twenty)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,366,"assertEquals(false, tenToTwenty.equals(createRange(five, ten)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,367,"assertEquals(false, tenToTwenty.equals(createRange(ten)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,369,"assertEquals(true, tenToTwenty.equals(createRange(ten, twenty)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,370,"assertEquals(true, tenToTwenty.equals(createRange(twenty, ten)));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,372,"assertEquals(false, tenToTwenty.equals(null));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,373,"assertEquals(false, tenToTwenty.equals(new Object()));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,374,"assertEquals(false, tenToTwenty.equals(otherRange));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,377,public void testHashCode() {
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,378,"assertEquals(tenToTwenty.hashCode(), tenToTwenty.hashCode());"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,379,assertTrue(tenToTwenty.hashCode() != 0);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,382,public void testToString() {
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,383,"assertEquals(""Range[10,20]"", tenToTwenty.toString());"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,384,"assertEquals(""Range[-20,-10]"", createRange(new Integer(-20), new Integer(-10)).toString());"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,388,protected abstract Range createRange(Integer integer);
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,389,"protected abstract Range createRange(Integer integer1, Integer integer2);"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,5,* reserved.
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,9,* are met:
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,17,*    distribution.
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,54,package org.apache.commons.lang.math;
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,60,* Test cases for the {@link DoubleRange} class.
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,62,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,63,"* @version $Id: DoubleRangeTest.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,65,public final class DoubleRangeTest extends AbstractRangeTest {
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,67,public DoubleRangeTest(String name) {
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,68,super(name);
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,71,public static Test suite() {
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,72,TestSuite suite = new TestSuite(DoubleRangeTest.class);
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,73,"suite.setName(""DoubleRange Tests"");"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,74,return suite;
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,77,public void setUp() {
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,78,super.setUp();
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,79,"tenToTwenty = new DoubleRange(double10, double20);"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,80,"otherRange = new NumberRange(ten, twenty);"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,83,"protected Range createRange(Integer integer1, Integer integer2) {"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,84,"return new DoubleRange(integer1, integer2);"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,86,protected Range createRange(Integer integer) {
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,87,return new NumberRange(integer);
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,92,public void testConstructor1a() {
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,93,DoubleRange nr = new DoubleRange(8d);
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,94,"assertEquals(double8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,95,"assertEquals(double8, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,97,try {
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,98,new DoubleRange(Double.NaN);
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,99,fail();
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,100,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,103,public void testConstructor1b() {
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,104,DoubleRange nr = new DoubleRange(double8);
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,105,"assertSame(double8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,106,"assertSame(double8, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,108,Range r = new DoubleRange(nonComparable);
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,110,try {
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,111,new DoubleRange(null);
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,112,fail();
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,113,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,114,try {
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,115,new DoubleRange(new Double(Double.NaN));
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,116,fail();
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,117,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,120,public void testConstructor2a() {
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,121,"DoubleRange nr = new DoubleRange(8d, 10d);"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,122,"assertEquals(double8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,123,"assertEquals(double10, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,125,"nr = new DoubleRange(10d, 8d);"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,126,"assertEquals(double8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,127,"assertEquals(double10, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,129,try {
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,130,"new DoubleRange(Double.NaN, 8d);"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,131,fail();
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,132,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,135,public void testConstructor2b() {
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,136,"DoubleRange nr = new DoubleRange(double8, double10);"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,137,"assertSame(double8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,138,"assertSame(double10, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,140,"nr = new DoubleRange(double10, double8);"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,141,"assertSame(double8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,142,"assertSame(double10, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,144,"nr = new DoubleRange(double8, double10);"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,145,"assertSame(double8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,146,"assertEquals(double10, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,148,// not null
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,149,try {
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,150,"new DoubleRange(double8, null);"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,151,fail();
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,152,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,153,try {
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,154,"new DoubleRange(null, double8);"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,155,fail();
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,156,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,157,try {
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,158,"new DoubleRange(null, null);"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,159,fail();
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,160,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,162,try {
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,163,"new DoubleRange(new Double(Double.NaN), double10);"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,164,fail();
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,165,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,170,public void testIncludesNumber() {
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,171,"assertEquals(false, tenToTwenty.includesNumber(null));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,172,"assertEquals(true, tenToTwenty.includesNumber(nonComparable));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,174,"assertEquals(false, tenToTwenty.includesNumber(five));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,175,"assertEquals(true, tenToTwenty.includesNumber(ten));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,176,"assertEquals(true, tenToTwenty.includesNumber(fifteen));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,177,"assertEquals(true, tenToTwenty.includesNumber(twenty));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,178,"assertEquals(false, tenToTwenty.includesNumber(twentyFive));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,180,"assertEquals(false, tenToTwenty.includesNumber(long8));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,181,"assertEquals(true, tenToTwenty.includesNumber(long10));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,182,"assertEquals(true, tenToTwenty.includesNumber(long12));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,183,"assertEquals(true, tenToTwenty.includesNumber(long20));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,184,"assertEquals(false, tenToTwenty.includesNumber(long21));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,186,"assertEquals(false, tenToTwenty.includesNumber(double8));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,187,"assertEquals(true, tenToTwenty.includesNumber(double10));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,188,"assertEquals(true, tenToTwenty.includesNumber(double12));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,189,"assertEquals(true, tenToTwenty.includesNumber(double20));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,190,"assertEquals(false, tenToTwenty.includesNumber(double21));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,192,"assertEquals(false, tenToTwenty.includesNumber(float8));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,193,"assertEquals(true, tenToTwenty.includesNumber(float10));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,194,"assertEquals(true, tenToTwenty.includesNumber(float12));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,195,"assertEquals(true, tenToTwenty.includesNumber(float20));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,196,"assertEquals(false, tenToTwenty.includesNumber(float21));"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,199,public void testToString() {
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,200,"assertEquals(""Range[10.0,20.0]"", tenToTwenty.toString());"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,201,"assertEquals(""Range[-20.0,-10.0]"", createRange(new Integer(-20), new Integer(-10)).toString());"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,5,* reserved.
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,9,* are met:
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,17,*    distribution.
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,54,package org.apache.commons.lang.math;
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,60,* Test cases for the {@link FloatRange} class.
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,62,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,63,"* @version $Id: FloatRangeTest.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,65,public final class FloatRangeTest extends AbstractRangeTest {
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,67,public FloatRangeTest(String name) {
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,68,super(name);
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,71,public static Test suite() {
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,72,TestSuite suite = new TestSuite(FloatRangeTest.class);
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,73,"suite.setName(""FloatRange Tests"");"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,74,return suite;
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,77,public void setUp() {
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,78,super.setUp();
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,79,"tenToTwenty = new FloatRange(float10, float20);"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,80,"otherRange = new NumberRange(ten, twenty);"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,83,"protected Range createRange(Integer integer1, Integer integer2) {"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,84,"return new FloatRange(integer1, integer2);"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,86,protected Range createRange(Integer integer) {
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,87,return new NumberRange(integer);
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,92,public void testConstructor1a() {
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,93,FloatRange nr = new FloatRange(8f);
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,94,"assertEquals(float8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,95,"assertEquals(float8, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,97,try {
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,98,new FloatRange(Float.NaN);
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,99,fail();
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,100,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,103,public void testConstructor1b() {
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,104,FloatRange nr = new FloatRange(float8);
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,105,"assertSame(float8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,106,"assertSame(float8, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,108,Range r = new FloatRange(nonComparable);
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,110,try {
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,111,new FloatRange(null);
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,112,fail();
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,113,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,114,try {
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,115,new FloatRange(new Double(Double.NaN));
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,116,fail();
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,117,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,120,public void testConstructor2a() {
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,121,"FloatRange nr = new FloatRange(8f, 10f);"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,122,"assertEquals(float8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,123,"assertEquals(float10, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,125,"nr = new FloatRange(10f, 8f);"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,126,"assertEquals(float8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,127,"assertEquals(float10, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,129,try {
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,130,"new FloatRange(Float.NaN, 8f);"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,131,fail();
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,132,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,135,public void testConstructor2b() {
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,136,"FloatRange nr = new FloatRange(float8, float10);"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,137,"assertSame(float8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,138,"assertSame(float10, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,140,"nr = new FloatRange(float10, float8);"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,141,"assertSame(float8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,142,"assertSame(float10, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,144,"nr = new FloatRange(float8, float10);"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,145,"assertSame(float8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,146,"assertEquals(float10, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,148,// not null
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,149,try {
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,150,"new FloatRange(float8, null);"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,151,fail();
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,152,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,153,try {
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,154,"new FloatRange(null, float8);"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,155,fail();
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,156,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,157,try {
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,158,"new FloatRange(null, null);"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,159,fail();
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,160,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,162,try {
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,163,"new FloatRange(new Double(Double.NaN), float10);"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,164,fail();
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,165,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,170,public void testIncludesNumber() {
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,171,"assertEquals(false, tenToTwenty.includesNumber(null));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,172,"assertEquals(true, tenToTwenty.includesNumber(nonComparable));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,174,"assertEquals(false, tenToTwenty.includesNumber(five));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,175,"assertEquals(true, tenToTwenty.includesNumber(ten));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,176,"assertEquals(true, tenToTwenty.includesNumber(fifteen));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,177,"assertEquals(true, tenToTwenty.includesNumber(twenty));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,178,"assertEquals(false, tenToTwenty.includesNumber(twentyFive));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,180,"assertEquals(false, tenToTwenty.includesNumber(long8));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,181,"assertEquals(true, tenToTwenty.includesNumber(long10));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,182,"assertEquals(true, tenToTwenty.includesNumber(long12));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,183,"assertEquals(true, tenToTwenty.includesNumber(long20));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,184,"assertEquals(false, tenToTwenty.includesNumber(long21));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,186,"assertEquals(false, tenToTwenty.includesNumber(double8));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,187,"assertEquals(true, tenToTwenty.includesNumber(double10));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,188,"assertEquals(true, tenToTwenty.includesNumber(double12));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,189,"assertEquals(true, tenToTwenty.includesNumber(double20));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,190,"assertEquals(false, tenToTwenty.includesNumber(double21));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,192,"assertEquals(false, tenToTwenty.includesNumber(float8));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,193,"assertEquals(true, tenToTwenty.includesNumber(float10));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,194,"assertEquals(true, tenToTwenty.includesNumber(float12));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,195,"assertEquals(true, tenToTwenty.includesNumber(float20));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,196,"assertEquals(false, tenToTwenty.includesNumber(float21));"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,199,public void testToString() {
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,200,"assertEquals(""Range[10.0,20.0]"", tenToTwenty.toString());"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,201,"assertEquals(""Range[-20.0,-10.0]"", createRange(new Integer(-20), new Integer(-10)).toString());"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,5,* reserved.
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,9,* are met:
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,17,*    distribution.
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,54,package org.apache.commons.lang.math;
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,60,* Test cases for the {@link IntRange} class.
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,62,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,63,"* @version $Id: IntRangeTest.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,65,public final class IntRangeTest extends AbstractRangeTest {
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,67,public IntRangeTest(String name) {
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,68,super(name);
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,71,public static Test suite() {
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,72,TestSuite suite = new TestSuite(IntRangeTest.class);
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,73,"suite.setName(""IntRange Tests"");"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,74,return suite;
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,77,public void setUp() {
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,78,super.setUp();
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,79,"tenToTwenty = new IntRange(ten, twenty);"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,80,"otherRange = new NumberRange(ten, twenty);"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,83,"protected Range createRange(Integer integer1, Integer integer2) {"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,84,"return new IntRange(integer1, integer2);"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,86,protected Range createRange(Integer integer) {
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,87,return new NumberRange(integer);
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,92,public void testConstructor1a() {
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,93,IntRange nr = new IntRange(5);
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,94,"assertEquals(five, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,95,"assertEquals(five, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,98,public void testConstructor1b() {
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,99,IntRange nr = new IntRange(five);
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,100,"assertSame(five, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,101,"assertSame(five, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,103,Range r = new IntRange(nonComparable);
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,105,try {
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,106,new IntRange(null);
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,107,fail();
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,108,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,111,public void testConstructor2a() {
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,112,"IntRange nr = new IntRange(5, 10);"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,113,"assertEquals(five, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,114,"assertEquals(ten, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,116,"nr = new IntRange(5, 10);"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,117,"assertEquals(five, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,118,"assertEquals(ten, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,121,public void testConstructor2b() {
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,122,"IntRange nr = new IntRange(five, ten);"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,123,"assertSame(five, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,124,"assertSame(ten, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,126,"nr = new IntRange(ten, five);"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,127,"assertSame(five, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,128,"assertSame(ten, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,130,"nr = new IntRange(five, long10);"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,131,"assertSame(five, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,132,"assertEquals(ten, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,134,// not null
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,135,try {
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,136,"new IntRange(five, null);"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,137,fail();
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,138,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,139,try {
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,140,"new IntRange(null, five);"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,141,fail();
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,142,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,143,try {
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,144,"new IntRange(null, null);"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,145,fail();
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,146,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,151,public void testIncludesNumber() {
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,152,"assertEquals(false, tenToTwenty.includesNumber(null));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,153,"assertEquals(true, tenToTwenty.includesNumber(nonComparable));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,155,"assertEquals(false, tenToTwenty.includesNumber(five));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,156,"assertEquals(true, tenToTwenty.includesNumber(ten));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,157,"assertEquals(true, tenToTwenty.includesNumber(fifteen));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,158,"assertEquals(true, tenToTwenty.includesNumber(twenty));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,159,"assertEquals(false, tenToTwenty.includesNumber(twentyFive));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,161,"assertEquals(false, tenToTwenty.includesNumber(long8));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,162,"assertEquals(true, tenToTwenty.includesNumber(long10));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,163,"assertEquals(true, tenToTwenty.includesNumber(long12));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,164,"assertEquals(true, tenToTwenty.includesNumber(long20));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,165,"assertEquals(false, tenToTwenty.includesNumber(long21));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,167,"assertEquals(false, tenToTwenty.includesNumber(double8));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,168,"assertEquals(true, tenToTwenty.includesNumber(double10));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,169,"assertEquals(true, tenToTwenty.includesNumber(double12));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,170,"assertEquals(true, tenToTwenty.includesNumber(double20));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,171,"assertEquals(false, tenToTwenty.includesNumber(double21));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,173,"assertEquals(false, tenToTwenty.includesNumber(float8));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,174,"assertEquals(true, tenToTwenty.includesNumber(float10));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,175,"assertEquals(true, tenToTwenty.includesNumber(float12));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,176,"assertEquals(true, tenToTwenty.includesNumber(float20));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,177,"assertEquals(false, tenToTwenty.includesNumber(float21));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,180,public void testIncludesIntegerBig() {
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,181,"IntRange big = new IntRange(Integer.MAX_VALUE, Integer.MAX_VALUE- 2);"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,182,"assertEquals(true, big.includesInteger(Integer.MAX_VALUE - 1));"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,183,"assertEquals(false, big.includesInteger(Integer.MAX_VALUE - 3));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,5,* reserved.
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,9,* are met:
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,17,*    distribution.
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,54,package org.apache.commons.lang.math;
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,60,* Test cases for the {@link LongRange} class.
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,62,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,63,"* @version $Id: LongRangeTest.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,65,public final class LongRangeTest extends AbstractRangeTest {
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,67,public LongRangeTest(String name) {
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,68,super(name);
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,71,public static Test suite() {
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,72,TestSuite suite = new TestSuite(LongRangeTest.class);
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,73,"suite.setName(""LongRange Tests"");"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,74,return suite;
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,77,public void setUp() {
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,78,super.setUp();
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,79,"tenToTwenty = new LongRange(long10, long20);"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,80,"otherRange = new NumberRange(ten, twenty);"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,83,"protected Range createRange(Integer integer1, Integer integer2) {"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,84,"return new LongRange(integer1, integer2);"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,86,protected Range createRange(Integer integer) {
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,87,return new NumberRange(integer);
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,92,public void testConstructor1a() {
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,93,LongRange nr = new LongRange(8L);
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,94,"assertEquals(long8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,95,"assertEquals(long8, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,98,public void testConstructor1b() {
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,99,LongRange nr = new LongRange(long8);
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,100,"assertSame(long8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,101,"assertSame(long8, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,103,Range r = new LongRange(nonComparable);
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,105,try {
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,106,new LongRange(null);
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,107,fail();
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,108,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,111,public void testConstructor2a() {
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,112,"LongRange nr = new LongRange(8L, 10L);"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,113,"assertEquals(long8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,114,"assertEquals(long10, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,116,"nr = new LongRange(10L, 8L);"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,117,"assertEquals(long8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,118,"assertEquals(long10, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,121,public void testConstructor2b() {
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,122,"LongRange nr = new LongRange(long8, long10);"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,123,"assertSame(long8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,124,"assertSame(long10, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,126,"nr = new LongRange(long10, long8);"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,127,"assertSame(long8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,128,"assertSame(long10, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,130,"nr = new LongRange(long8, long10);"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,131,"assertSame(long8, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,132,"assertEquals(long10, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,134,// not null
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,135,try {
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,136,"new LongRange(long8, null);"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,137,fail();
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,138,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,139,try {
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,140,"new LongRange(null, long8);"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,141,fail();
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,142,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,143,try {
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,144,"new LongRange(null, null);"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,145,fail();
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,146,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,151,public void testIncludesNumber() {
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,152,"assertEquals(false, tenToTwenty.includesNumber(null));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,153,"assertEquals(true, tenToTwenty.includesNumber(nonComparable));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,155,"assertEquals(false, tenToTwenty.includesNumber(five));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,156,"assertEquals(true, tenToTwenty.includesNumber(ten));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,157,"assertEquals(true, tenToTwenty.includesNumber(fifteen));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,158,"assertEquals(true, tenToTwenty.includesNumber(twenty));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,159,"assertEquals(false, tenToTwenty.includesNumber(twentyFive));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,161,"assertEquals(false, tenToTwenty.includesNumber(long8));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,162,"assertEquals(true, tenToTwenty.includesNumber(long10));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,163,"assertEquals(true, tenToTwenty.includesNumber(long12));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,164,"assertEquals(true, tenToTwenty.includesNumber(long20));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,165,"assertEquals(false, tenToTwenty.includesNumber(long21));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,167,"assertEquals(false, tenToTwenty.includesNumber(double8));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,168,"assertEquals(true, tenToTwenty.includesNumber(double10));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,169,"assertEquals(true, tenToTwenty.includesNumber(double12));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,170,"assertEquals(true, tenToTwenty.includesNumber(double20));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,171,"assertEquals(false, tenToTwenty.includesNumber(double21));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,173,"assertEquals(false, tenToTwenty.includesNumber(float8));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,174,"assertEquals(true, tenToTwenty.includesNumber(float10));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,175,"assertEquals(true, tenToTwenty.includesNumber(float12));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,176,"assertEquals(true, tenToTwenty.includesNumber(float20));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,177,"assertEquals(false, tenToTwenty.includesNumber(float21));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,180,public void testIncludesLongBig() {
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,181,"LongRange big = new LongRange(Long.MAX_VALUE, Long.MAX_VALUE- 2);"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,182,"assertEquals(true, big.includesLong(Long.MAX_VALUE - 1));"
True,src/test/org/apache/commons/lang/math/LongRangeTest.java,src/test/org/apache/commons/lang/math/LongRangeTest.java,183,"assertEquals(false, big.includesLong(Long.MAX_VALUE - 3));"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,5,* reserved.
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,9,* are met:
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,17,*    distribution.
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,54,package org.apache.commons.lang.math;
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,59,import junit.textui.TestRunner;
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,61,* Test suite for the Math package.
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,63,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,64,"* @version $Id: MathTestSuite.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,66,public class MathTestSuite extends TestCase {
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,69,* Construct a new instance.
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,71,public MathTestSuite(String name) {
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,72,super(name);
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,76,* Command-line interface.
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,78,public static void main(String[] args) {
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,79,TestRunner.run(suite());
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,83,* Get the suite of tests
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,85,public static Test suite() {
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,86,TestSuite suite = new TestSuite();
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,87,"suite.setName(""Commons-Lang-Math Tests"");"
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,88,suite.addTest(DoubleRangeTest.suite());
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,89,suite.addTest(FloatRangeTest.suite());
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,90,suite.addTest(IntRangeTest.suite());
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,91,suite.addTest(LongRangeTest.suite());
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,92,suite.addTest(NumberRangeTest.suite());
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,93,return suite;
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,5,* reserved.
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,9,* are met:
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,17,*    distribution.
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,54,package org.apache.commons.lang.math;
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,60,* Test cases for the {@link NumberRange} class.
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,62,"* @author <a href=""mailto:chrise@esha.com"">Christopher Elkins</a>"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,63,"* @author <a href=""mailto:ridesmet@users.sourceforge.net"">Ringo De Smet</a>"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,64,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,65,"* @version $Id: NumberRangeTest.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,67,public final class NumberRangeTest extends AbstractRangeTest {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,69,public NumberRangeTest(String name) {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,70,super(name);
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,73,public static Test suite() {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,74,TestSuite suite = new TestSuite(NumberRangeTest.class);
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,75,"suite.setName(""NumberRange Tests"");"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,76,return suite;
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,79,public void setUp() {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,80,super.setUp();
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,81,"tenToTwenty = new NumberRange(ten, twenty);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,82,"otherRange = new IntRange(ten, twenty);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,85,"protected Range createRange(Integer integer1, Integer integer2) {"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,86,"return new NumberRange(integer1, integer2);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,88,protected Range createRange(Integer integer) {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,89,return new NumberRange(integer);
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,94,public void testConstructor1() {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,95,NumberRange nr = new NumberRange(five);
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,96,"assertSame(five, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,97,"assertSame(five, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,99,try {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,100,new NumberRange(null);
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,101,fail();
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,102,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,103,try {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,104,new NumberRange(nonComparable);
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,105,fail();
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,106,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,109,public void testConstructor2() {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,110,"NumberRange nr = new NumberRange(five, ten);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,111,"assertSame(five, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,112,"assertSame(ten, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,114,"nr = new NumberRange(ten, five);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,115,"assertSame(five, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,116,"assertSame(ten, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,118,// not null
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,119,try {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,120,"new NumberRange(five, null);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,121,fail();
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,122,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,123,try {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,124,"new NumberRange(null, five);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,125,fail();
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,126,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,127,try {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,128,"new NumberRange(null, null);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,129,fail();
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,130,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,132,// no mixed types
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,133,try {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,134,"new NumberRange(five, long21);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,135,fail();
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,136,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,138,// must be comparable
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,139,try {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,140,"new NumberRange(nonComparable, nonComparable);"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,141,fail();
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,142,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,144,// no double NaN
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,145,try {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,146,"new NumberRange(new Double(0), new Double(Double.NaN));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,147,fail();
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,148,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,150,try {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,151,"new NumberRange(new Double(Double.NaN), new Double(0));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,152,fail();
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,153,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,155,// no float NaN
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,156,try {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,157,"new NumberRange(new Float(0), new Float(Float.NaN));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,158,fail();
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,159,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,161,try {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,162,"new NumberRange(new Float(Float.NaN), new Float(0));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,163,fail();
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,164,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,169,public void testIncludesNumber() {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,170,"assertEquals(false, tenToTwenty.includesNumber(null));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,171,"assertEquals(false, tenToTwenty.includesNumber(five));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,172,"assertEquals(true, tenToTwenty.includesNumber(ten));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,173,"assertEquals(true, tenToTwenty.includesNumber(fifteen));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,174,"assertEquals(true, tenToTwenty.includesNumber(twenty));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,175,"assertEquals(false, tenToTwenty.includesNumber(twentyFive));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,177,try {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,178,tenToTwenty.includesNumber(long21);
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,179,fail();
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,180,} catch (IllegalArgumentException ex) {}
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,183,public void testIncludesLongBig() {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,184,// original NumberRange class failed this test
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,185,"NumberRange big = new NumberRange(new Long(Long.MAX_VALUE), new Long(Long.MAX_VALUE- 2));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,186,"assertEquals(true, big.includesLong(Long.MAX_VALUE - 1));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,187,"assertEquals(false, big.includesLong(Long.MAX_VALUE - 3));"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,39,* Default constructor.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,40,"* For the new instance to be useful, the maximal count must be set"
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,41,* by calling {@link #setMaximalCount(int) setMaximalCount}.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,43,public Incrementor() {
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,44,this(0);
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,48,* Defines a maximal count.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,50,* @param max Maximal count.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,52,public Incrementor(int max) {
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,53,maximalCount = max;
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,54,count = 0;
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,59,* This does not automatically reset the current count to zero (see
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,60,* {@link #resetCount()}).
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,87,* Check whether a single increment is allowed.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,89,* @return {@code false} if the next call to {@link #incrementCount(int)
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,90,"* incrementCount} will trigger a {@code MaxCountExceededException},"
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,91,* {@code true} otherwise.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,93,public boolean canIncrement() {
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,94,return count < maximalCount;
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,24,@Test
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,25,public void testConstructor1() {
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,26,final Incrementor i = new Incrementor();
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,27,"Assert.assertEquals(0, i.getMaximalCount());"
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,28,"Assert.assertEquals(0, i.getCount());"
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,31,@Test
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,32,public void testConstructor2() {
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,33,final Incrementor i = new Incrementor(10);
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,34,"Assert.assertEquals(10, i.getMaximalCount());"
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,35,"Assert.assertEquals(0, i.getCount());"
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,38,@Test
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,39,public void testCanIncrement1() {
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,40,final Incrementor i = new Incrementor(3);
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,41,Assert.assertTrue(i.canIncrement());
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,42,i.incrementCount();
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,43,Assert.assertTrue(i.canIncrement());
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,44,i.incrementCount();
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,45,Assert.assertTrue(i.canIncrement());
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,46,i.incrementCount();
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,47,Assert.assertFalse(i.canIncrement());
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,50,@Test
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,51,public void testCanIncrement2() {
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,52,final Incrementor i = new Incrementor(3);
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,53,while (i.canIncrement()) {
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,54,i.incrementCount();
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,57,"// Must keep try/catch because the exception must be generated here,"
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,58,// and not in the previous loop.
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,59,try {
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,60,i.incrementCount();
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,61,"Assert.fail(""MaxCountExceededException expected"");"
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,62,} catch (MaxCountExceededException e) {
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,63,// Expected.
False,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,46,Test(expected = MaxCountExceededException.class)
True,src/test/java/org/apache/commons/math/util/IncrementorTest.java,src/test/java/org/apache/commons/math/util/IncrementorTest.java,88,@Test(expected=MaxCountExceededException.class)

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,799,/** Check if instance is less than or equal to 0.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,800,"* @return true if instance is not NaN and less than or equal to 0, false otherwise"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,802,public boolean negativeOrNull() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,804,if (isNaN()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,805,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,806,"dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,807,return false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,810,return (sign < 0) || ((mant[mant.length - 1] == 0) && !isInfinite());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,814,/** Check if instance is strictly less than 0.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,815,"* @return true if instance is not NaN and less than or equal to 0, false otherwise"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,817,public boolean strictlyNegative() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,819,if (isNaN()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,820,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,821,"dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,822,return false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,825,return (sign < 0) && ((mant[mant.length - 1] != 0) || isInfinite());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,829,/** Check if instance is greater than or equal to 0.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,830,"* @return true if instance is not NaN and greater than or equal to 0, false otherwise"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,832,public boolean positiveOrNull() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,834,if (isNaN()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,835,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,836,"dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,837,return false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,840,return (sign > 0) || ((mant[mant.length - 1] == 0) && !isInfinite());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,844,/** Check if instance is strictly greater than 0.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,845,"* @return true if instance is not NaN and greater than or equal to 0, false otherwise"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,847,public boolean strictlyPositive() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,849,if (isNaN()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,850,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,851,"dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,852,return false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,855,return (sign > 0) && ((mant[mant.length - 1] != 0) || isInfinite());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,859,/** Get the absolute value of instance.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,860,* @return absolute value of instance
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,862,public Dfp abs() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,863,Dfp result = newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,864,result.sign = 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,865,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,882,/** Check if instance is equal to zero.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,883,* @return true if instance is equal to zero
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,885,public boolean isZero() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,887,if (isNaN()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,888,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,889,"dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,890,return false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,893,return (mant[mant.length - 1] == 0) && !isInfinite();
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1518,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1519,public void testIsZero() {
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1520,Assert.assertTrue(field.getZero().isZero());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1521,Assert.assertTrue(field.getZero().negate().isZero());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1522,Assert.assertTrue(field.newDfp(+0.0).isZero());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1523,Assert.assertTrue(field.newDfp(-0.0).isZero());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1524,Assert.assertFalse(field.newDfp(1.0e-90).isZero());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1525,Assert.assertFalse(nan.isZero());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1526,Assert.assertFalse(nan.negate().isZero());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1527,Assert.assertFalse(pinf.isZero());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1528,Assert.assertFalse(pinf.negate().isZero());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1529,Assert.assertFalse(ninf.isZero());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1530,Assert.assertFalse(ninf.negate().isZero());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1533,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1534,public void testSignPredicates() {
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1536,Assert.assertTrue(field.getZero().negativeOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1537,Assert.assertTrue(field.getZero().positiveOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1538,Assert.assertFalse(field.getZero().strictlyNegative());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1539,Assert.assertFalse(field.getZero().strictlyPositive());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1541,Assert.assertTrue(field.getZero().negate().negativeOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1542,Assert.assertTrue(field.getZero().negate().positiveOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1543,Assert.assertFalse(field.getZero().negate().strictlyNegative());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1544,Assert.assertFalse(field.getZero().negate().strictlyPositive());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1546,Assert.assertFalse(field.getOne().negativeOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1547,Assert.assertTrue(field.getOne().positiveOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1548,Assert.assertFalse(field.getOne().strictlyNegative());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1549,Assert.assertTrue(field.getOne().strictlyPositive());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1551,Assert.assertTrue(field.getOne().negate().negativeOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1552,Assert.assertFalse(field.getOne().negate().positiveOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1553,Assert.assertTrue(field.getOne().negate().strictlyNegative());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1554,Assert.assertFalse(field.getOne().negate().strictlyPositive());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1556,Assert.assertFalse(nan.negativeOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1557,Assert.assertFalse(nan.positiveOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1558,Assert.assertFalse(nan.strictlyNegative());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1559,Assert.assertFalse(nan.strictlyPositive());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1561,Assert.assertFalse(nan.negate().negativeOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1562,Assert.assertFalse(nan.negate().positiveOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1563,Assert.assertFalse(nan.negate().strictlyNegative());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1564,Assert.assertFalse(nan.negate().strictlyPositive());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1566,Assert.assertFalse(pinf.negativeOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1567,Assert.assertTrue(pinf.positiveOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1568,Assert.assertFalse(pinf.strictlyNegative());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1569,Assert.assertTrue(pinf.strictlyPositive());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1571,Assert.assertTrue(pinf.negate().negativeOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1572,Assert.assertFalse(pinf.negate().positiveOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1573,Assert.assertTrue(pinf.negate().strictlyNegative());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1574,Assert.assertFalse(pinf.negate().strictlyPositive());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1576,Assert.assertTrue(ninf.negativeOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1577,Assert.assertFalse(ninf.positiveOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1578,Assert.assertTrue(ninf.strictlyNegative());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1579,Assert.assertFalse(ninf.strictlyPositive());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1581,Assert.assertFalse(ninf.negate().negativeOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1582,Assert.assertTrue(ninf.negate().positiveOrNull());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1583,Assert.assertFalse(ninf.negate().strictlyNegative());
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1584,Assert.assertTrue(ninf.negate().strictlyPositive());

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,23,mport org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,23,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,27,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,52, <p>{@code P(x0 <= X <= x1) = P(X <= x1) - P(X <= x0 - 1)}</p>
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,53,* <p>{@code P(x0 < X <= x1) = P(X <= x1) - P(X <= x0)}</p>
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,54,"ublic double cumulativeProbability(int x0, int x1) {"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,55,"public double cumulativeProbability(int x0, int x1) throws NumberIsTooLargeException {"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,56,hrow new NumberIsTooSmallException(
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,57,"ocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,58,"1, x0, true);"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,57,"throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,58,"x0, x1, true);"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,60,eturn cumulativeProbability(x1) - cumulativeProbability(x0 - 1);
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,60,return cumulativeProbability(x1) - cumulativeProbability(x0);
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,63,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,64,ublic int inverseCumulativeProbability(final double p) {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,65,f (p < 0 || p > 1) {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,64,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,66,* The default implementation returns
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,67,* <ul>
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,68,"* <li>{@link #getSupportLowerBound()} for {@code p = 0},</li>"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,69,"* <li>{@link #getSupportUpperBound()} for {@code p = 1}, and</li>"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,70,"* <li>{@link #solveInverseCumulativeProbability(double, int, int)} for"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,71,*     {@code 0 < p < 1}.</li>
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,72,* </ul>
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,74,public int inverseCumulativeProbability(final double p) throws OutOfRangeException {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,75,if (p < 0.0 || p > 1.0) {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,69,"/ by default, do simple bisection."
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,70,/ subclasses can override if there is a better method.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,71,nt x0 = getDomainLowerBound(p);
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,72,nt x1 = getDomainUpperBound(p);
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,73,ouble pm;
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,74,hile (x0 < x1) {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,75,nt xm = x0 + (x1 - x0) / 2;
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,76,m = checkedCumulativeProbability(xm);
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,77,f (pm > p) {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,78,/ update x1
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,79,f (xm == x1) {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,80,/ this can happen with integer division
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,81,/ simply decrement x1
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,82,-x1;
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,83, else {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,84,/ update x1 normally
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,85,1 = xm;
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,87, else {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,88,/ update x0
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,89,f (xm == x0) {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,90,/ this can happen with integer division
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,91,/ simply increment x0
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,92,+x0;
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,93, else {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,94,/ update x0 normally
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,95,0 = xm;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,79,int lower = getSupportLowerBound();
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,80,if (p == 0.0) {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,81,return lower;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,83,if (lower == Integer.MIN_VALUE) {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,84,if (checkedCumulativeProbability(lower) >= p) {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,85,return lower;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,87,} else {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,88,"lower -= 1; // this ensures cumulativeProbability(lower) < p, which"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,89,// is important for the solving step
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,100,/ insure x0 is the correct critical point
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,101,m = checkedCumulativeProbability(x0);
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,102,hile (pm > p) {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,103,-x0;
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,104,m = checkedCumulativeProbability(x0);
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,92,int upper = getSupportUpperBound();
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,93,if (p == 1.0) {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,94,return upper;
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,107,eturn x0;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,97,// use the one-sided Chebyshev inequality to narrow the bracket
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,98,// cf. AbstractRealDistribution.inverseCumulativeProbability(double)
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,99,final double mu = getNumericalMean();
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,100,final double sigma = FastMath.sqrt(getNumericalVariance());
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,101,final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,102,Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,103,if (chebyshevApplies) {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,104,double k = FastMath.sqrt((1.0 - p) / p);
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,105,double tmp = mu - k * sigma;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,106,if (tmp > lower) {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,107,lower = ((int) Math.ceil(tmp)) - 1;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,109,k = 1.0 / k;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,110,tmp = mu + k * sigma;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,111,if (tmp < upper) {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,112,upper = ((int) Math.ceil(tmp)) - 1;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,116,"return solveInverseCumulativeProbability(p, lower, upper);"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,111," Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,112, bracket a CDF root. This method is used by
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,113, {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,120,* This is a utility function used by {@link
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,121,* #inverseCumulativeProbability(double)}. It assumes {@code 0 < p < 1} and
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,122,* that the inverse cumulative probability lies in the bracket {@code
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,123,"* (lower, upper]}. The implementation does simple bisection to find the"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,124,* smallest {@code p}-quantile <code>inf{x in Z | P(X<=x) >= p}</code>.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,115, @param p the desired probability for the critical value ({@code 0 < p < 1})
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,116," @return a domain value lower bound, i.e. a value {@code x} such that"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,117, {@code P(X <= x) < p}
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,126,* @param p the cumulative probability
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,127,* @param lower a value satisfying {@code cumulativeProbability(lower) < p}
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,128,* @param upper a value satisfying {@code p <= cumulativeProbability(upper)}
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,129,* @return the smallest {@code p}-quantile of this distribution
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,119,rotected abstract int getDomainLowerBound(double p);
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,131,"protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,132,while (lower + 1 < upper) {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,133,int xm = (lower + upper) / 2;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,134,if (xm < lower || xm > upper) {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,136,* Overflow.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,137,* There will never be an overflow in both calculation methods
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,138,* for xm at the same time
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,140,xm = lower + (upper - lower) / 2;
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,122," Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,123, bracket a CDF root. This method is used by
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,124, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,126, @param p the desired probability for the critical value ({@code 0 < p < 1})
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,127," @return a domain value upper bound, i.e. a value {@code x} such that"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,128, {@code P(X <= x) >= p}
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,130,rotected abstract int getDomainUpperBound(double p);
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,143,double pm = checkedCumulativeProbability(xm);
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,144,if (pm >= p) {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,145,upper = xm;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,146,} else {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,147,lower = xm;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,150,return upper;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,101,"et = 1.0 - Beta.regularizedBeta(getProbabilityOfSuccess(),"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,101,"ret = 1.0 - Beta.regularizedBeta(probabilityOfSuccess,"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,108, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,110, This implementation return -1 when {@code p == 0} and
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,111, {@code Integer.MAX_VALUE} when {@code p == 1}.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,113,Override
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,114,ublic int inverseCumulativeProbability(final double p) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,115,/ handle extreme values explicitly
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,116,f (p == 0) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,117,eturn -1;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,119,f (p == 1) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,120,eturn Integer.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,123,/ use default bisection impl
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,124,eturn super.inverseCumulativeProbability(p);
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,127,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,128,Override
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,129,rotected int getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,130,eturn -1;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,133,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,134,Override
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,135,rotected int getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,136,eturn numberOfTrials;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,146,eturn getNumberOfTrials() * getProbabilityOfSuccess();
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,114,return numberOfTrials * probabilityOfSuccess;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,156,inal double p = getProbabilityOfSuccess();
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,157,eturn getNumberOfTrials() * p * (1 - p);
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,124,final double p = probabilityOfSuccess;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,125,return numberOfTrials * p * (1 - p);
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,163, The lower bound of the support is always 0 no matter the number of trials
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,164, and probability parameter.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,131,* The lower bound of the support is always 0 except for the probability
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,132,* parameter {@code p = 1}.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,166, @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,134,* @return lower bound of the support (0 or the number of trials)
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,169,eturn 0;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,137,return probabilityOfSuccess < 1.0 ? 0 : numberOfTrials;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,175, The upper bound of the support is the number of trials.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,143,* The upper bound of the support is the number of trials except for the
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,144,* probability parameter {@code p = 0}.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,177, @return upper bound of the support (equal to number of trials)
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,146,* @return upper bound of the support (number of trials or 0)
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,180,eturn getNumberOfTrials();
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,149,return probabilityOfSuccess > 0.0 ? numberOfTrials : 0;
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,124,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,125,Override
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,126,rotected int getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,127,"eturn getLowerDomain(populationSize, numberOfSuccesses, sampleSize);"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,130,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,131,Override
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,132,rotected int getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,133,"eturn getUpperDomain(sampleSize, numberOfSuccesses);"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,19,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,20,import org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,28," words, this method represents the probability mass function for the"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,29, distribution.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,31,"* words, this method represents the probability mass function (PMF)"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,32,* for the distribution.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,31, @param x the point at which the probability density function is evaluated.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,32, @return the value of the probability density function at {@code x}
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,34,* @param x the point at which the PMF is evaluated
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,35,* @return the value of the probability mass function at {@code x}
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,39," words, this method represents the probability distribution function, or"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,40, PDF for the distribution.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,42,"* words, this method represents the (cumulative) distribution function"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,43,* (CDF) for this distribution.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,42, @param x the point at which the PDF is evaluated
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,43, @return PDF for this distribution.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,45,* @param x the point at which the CDF is evaluated
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,46,* @return the probability that a random variable with this
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,47,* distribution takes a value less than or equal to {@code x}
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,49," to this distribution, this method returns {@code P(x0 <= X <= x1)}."
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,53,"* to this distribution, this method returns {@code P(x0 < X <= x1)}."
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,51, @param x0 the inclusive lower bound
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,55,* @param x0 the exclusive lower bound
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,53, @return the cumulative probability
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,54, @throws IllegalArgumentException if {@code x0 > x1}
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,57,* @return the probability that a random variable with this distribution
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,58,"* will take a value between {@code x0} and {@code x1},"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,59,* excluding the lower and including the upper endpoint
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,60,* @throws NumberIsTooLargeException if {@code x0 > x1}
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,56,"ouble cumulativeProbability(int x0, int x1);"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,62,"double cumulativeProbability(int x0, int x1) throws NumberIsTooLargeException;"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,59," For this distribution, {@code X}, this method returns the largest"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,60, {@code x} such that {@code P(X <= x) <= p}.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,61, <br/>
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,62, Note that this definition implies:
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,65,* Computes the quantile function of this distribution.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,66,"* For a random variable {@code X} distributed according to this distribution,"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,67,* the returned value is
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,64,"  <li> If there is a minimum value, {@code m}, with positive"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,65,"   probability under (the density of) {@code X}, then {@code m - 1} is"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,66,   returned by {@code inverseCumulativeProbability(0).}  If there is
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,67,"   no such value {@code m},  {@code Integer.MIN_VALUE} is returned."
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,68,  </li>
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,69,"  <li> If there is a maximum value, {@code M}, such that"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,70,"   {@code P(X <= M) = 1}, then {@code M} is returned by"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,71,   {@code inverseCumulativeProbability(1)}.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,72,"   If there is no such value, {@code M}, {@code Integer.MAX_VALUE} is"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,73,   returned.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,74,  </li>
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,69,"* <li><code>inf{x in Z | P(X<=x) >= p}</code> for {@code 0 < p <= 1},</li>"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,70,* <li><code>inf{x in Z | P(X<=x) > 0}</code> for {@code p = 0}.</li>
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,72,"* If the result exceeds the range of the data type {@code int},"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,73,* then {@code Integer.MIN_VALUE} or {@code Integer.MAX_VALUE} is returned.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,78, @return the largest {@code x} such that {@code P(X < x) <= p}
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,79, @throws IllegalArgumentException if {@code p} is not between 0 and 1
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,80, (inclusive)
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,76,* @return the smallest {@code p}-quantile of this distribution
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,77,* (largest 0-quantile for {@code p = 0})
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,78,* @throws OutOfRangeException if {@code p < 0} or {@code p > 1}
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,82,nt inverseCumulativeProbability(double p);
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,80,int inverseCumulativeProbability(double p) throws OutOfRangeException;
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,102, Access the lower bound of the support.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,100,* Access the lower bound of the support. This method must return the same
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,101,"* value as {@code inverseCumulativeProbability(0)}. In other words, this"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,102,* method must return
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,103,* <p><code>inf {x in Z | P(X <= x) > 0}</code>.</p>
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,110, Access the upper bound of the support.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,111,* Access the upper bound of the support. This method must return the same
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,112,"* value as {@code inverseCumulativeProbability(1)}. In other words, this"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,113,* method must return
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,114,* <p><code>inf {x in R | P(X <= x) = 1}</code>.</p>
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,19,import org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,20,mport org.apache.commons.math.exception.NotPositiveException;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,71, Create a Pascal distribution with the given number of trials and
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,71,* Create a Pascal distribution with the given number of successes and
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,76, @throws NotPositiveException if the number of successes is not positive
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,76,* @throws NotStrictlyPositiveException if the number of successes is not positive
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,81,"hrows NotPositiveException, OutOfRangeException {"
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,82,f (r < 0) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,83,"hrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,81,"throws NotStrictlyPositiveException, OutOfRangeException {"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,82,if (r <= 0) {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,83,"throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,"
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,139, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,141, Returns {@code -1} when {@code p == 0} and
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,142, {@code Integer.MAX_VALUE} when {@code p == 1}.
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,144,Override
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,145,ublic int inverseCumulativeProbability(final double p) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,146,nt ret;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,148,/ handle extreme values explicitly
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,149,f (p == 0) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,150,et = -1;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,151, else if (p == 1) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,152,et = Integer.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,153, else {
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,154,et = super.inverseCumulativeProbability(p);
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,157,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,160,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,161,Override
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,162,rotected int getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,163,eturn -1;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,166,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,167,Override
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,168,rotected int getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,169,/ use MAX - 1 because MAX causes loop
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,170,eturn Integer.MAX_VALUE - 1;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,212, parameters. Positive infinity is symbolised by {@code Integer.MAX_VALUE}.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,177,* parameters. Positive infinity is symbolized by {@code Integer.MAX_VALUE}.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,177,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,178,Override
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,179,rotected int getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,180,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,183,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,184,Override
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,185,rotected int getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,186,eturn Integer.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,114,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,115,Override
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,116,rotected int getDomainLowerBound(final double p) {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,117,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,120,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,121,Override
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,122,rotected int getDomainUpperBound(final double p) {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,123,eturn numberOfElements;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,179, used by {@link #getNumericalVariance()}
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,167,* Used by {@link #getNumericalVariance()}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1079,"inal double target = nextUniform(0, 1);"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1080,inal int glb = distribution.inverseCumulativeProbability(target);
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1081,f (distribution.cumulativeProbability(glb) == 1.0d) { // No mass above
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1082,eturn glb;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1083, else {
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1084,eturn glb + 1;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1079,"return distribution.inverseCumulativeProbability(nextUniform(0, 1));"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,33,ublic void testCumulativeProbabilitiesSingleIntegerArguments() throws Exception {
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,34,nt lower = 1;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,32,public void testCumulativeProbabilitiesSingleArguments() throws Exception {
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,37,"iceDistribution.cumulativeProbability(lower), Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,38,ower++;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,35,"diceDistribution.cumulativeProbability(i), Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,40,"ssert.assertEquals(0,"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,41,"iceDistribution.cumulativeProbability(-1), Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,42,"ssert.assertEquals(1,"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,37,"Assert.assertEquals(0.0,"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,38,"diceDistribution.cumulativeProbability(0), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,39,"Assert.assertEquals(1.0,"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,48,nt lower = 1;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,45,int lower = 0;
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,51,"/ cum(1,6) = p(1 <= X <= 6) = 1, cum(2,5) = 4/6, cum(3,4) = 2/6"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,52,"ssert.assertEquals(1 - p * 2 * i,"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,48,"// cum(0,6) = p(0 < X <= 6) = 1, cum(1,5) = 4/6, cum(2,4) = 2/6"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,49,"Assert.assertEquals(1 - p * 2 * i,"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,57,or (int i = 1; i < 7; i++) {
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,58,"ssert.assertEquals(p, diceDistribution.cumulativeProbability(i, i), 1E-12);"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,54,for (int i = 0; i < 6; i++) {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,55,"Assert.assertEquals(p, diceDistribution.cumulativeProbability(i, i+1), 1E-12);"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,88,Override
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,89,rotected int getDomainLowerBound(double p) {
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,90,eturn 1;
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,93,Override
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,94,rotected int getDomainUpperBound(double p) {
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,95,eturn 6;
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,77,"eturn new int[] { -1, 1, 2, 3, 4, 4, 9, 9, 9, 8, 8, Integer.MAX_VALUE };"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,77,"return new int[] { 0, 2, 3, 4, 5, 5, 10, 10, 10, 9, 9, 10 };"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,85,"etDistribution(new BinomialDistribution(5, 0.0d));"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,85,"BinomialDistribution dist = new BinomialDistribution(5, 0.0d);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,86,setDistribution(dist);
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,91,"etInverseCumulativeTestValues(new int[] { -1, -1 });"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,92,"setInverseCumulativeTestValues(new int[] { 0, 0 });"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,96,"Assert.assertEquals(dist.getSupportLowerBound(), 0);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,97,"Assert.assertEquals(dist.getSupportUpperBound(), 0);"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,100,"etDistribution(new BinomialDistribution(5, 1.0d));"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,103,"BinomialDistribution dist = new BinomialDistribution(5, 1.0d);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,104,setDistribution(dist);
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,106,"etInverseCumulativeTestValues(new int[] { 4, 4 });"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,110,"setInverseCumulativeTestValues(new int[] { 5, 5 });"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,114,"Assert.assertEquals(dist.getSupportLowerBound(), 5);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,115,"Assert.assertEquals(dist.getSupportUpperBound(), 5);"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,41,"eturn new HypergeometricDistribution(10,5, 5);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,41,"return new HypergeometricDistribution(10, 5, 5);"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,80,"eturn new int[] {-1, -1, 0, 0, 0, 0, 4, 3, 3, 3, 3, 5};"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,80,"return new int[] {0, 0, 1, 1, 1, 1, 5, 4, 4, 4, 4, 5};"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,88,"etDistribution(new HypergeometricDistribution(5,5,3));"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,88,"HypergeometricDistribution dist = new HypergeometricDistribution(5,5,3);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,89,setDistribution(dist);
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,94,"etInverseCumulativeTestValues(new int[] {2, 2});"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,95,"setInverseCumulativeTestValues(new int[] {3, 3});"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,99,"Assert.assertEquals(dist.getSupportLowerBound(), 3);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,100,"Assert.assertEquals(dist.getSupportUpperBound(), 3);"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,103,"etDistribution(new HypergeometricDistribution(5,0,3));"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,106,"HypergeometricDistribution dist = new HypergeometricDistribution(5,0,3);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,107,setDistribution(dist);
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,109,"etInverseCumulativeTestValues(new int[] {-1, -1});"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,113,"setInverseCumulativeTestValues(new int[] {0, 0});"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,117,"Assert.assertEquals(dist.getSupportLowerBound(), 0);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,118,"Assert.assertEquals(dist.getSupportUpperBound(), 0);"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,118,"etDistribution(new HypergeometricDistribution(5,3,5));"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,124,"HypergeometricDistribution dist = new HypergeometricDistribution(5,3,5);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,125,setDistribution(dist);
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,124,"etInverseCumulativeTestValues(new int[] {2, 2});"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,131,"setInverseCumulativeTestValues(new int[] {3, 3});"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,135,"Assert.assertEquals(dist.getSupportLowerBound(), 3);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,136,"Assert.assertEquals(dist.getSupportUpperBound(), 3);"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,205,ouble pdf = data[i][1];
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,206,ouble actualPdf = dist.probability(x);
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,207,"estUtils.assertRelativelyEquals(""Expected equals for <""+x+""> pdf"",pdf, actualPdf, 1.0e-9);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,214,double pmf = data[i][1];
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,215,double actualPmf = dist.probability(x);
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,216,"TestUtils.assertRelativelyEquals(""Expected equals for <""+x+""> pmf"",pmf, actualPmf, 1.0e-9);"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,196,@Test
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,197,public void testConsistencyAtSupportBounds() {
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,198,final int lower = distribution.getSupportLowerBound();
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,199,"Assert.assertEquals(""Cumulative probability mmust be 0 below support lower bound."","
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,200,"0.0, distribution.cumulativeProbability(lower - 1), 0.0);"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,201,"Assert.assertEquals(""Cumulative probability of support lower bound must be equal to probability mass at this point."","
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,202,"distribution.probability(lower), distribution.cumulativeProbability(lower), tolerance);"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,203,"Assert.assertEquals(""Inverse cumulative probability of 0 must be equal to support lower bound."","
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,204,"lower, distribution.inverseCumulativeProbability(0.0));"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,206,final int upper = distribution.getSupportUpperBound();
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,207,if (upper != Integer.MAX_VALUE)
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,208,"Assert.assertEquals(""Cumulative probability of support upper bound must be equal to 1."","
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,209,"1.0, distribution.cumulativeProbability(upper), 0.0);"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,210,"Assert.assertEquals(""Inverse cumulative probability of 1 must be equal to support upper bound."","
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,211,"upper, distribution.inverseCumulativeProbability(1.0));"
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,78,"eturn new double[] {0, 0.001d, 0.010d, 0.025d, 0.050d, 0.100d, 0.999d,"
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,79,".990d, 0.975d, 0.950d, 0.900d, 1};"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,78,"return new double[] {0.0, 0.001, 0.010, 0.025, 0.050, 0.100, 0.999,"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,79,"0.990, 0.975, 0.950, 0.900, 1.0};"
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,85,"eturn new int[] {-1, -1, -1, -1, 0, 0, 13, 10, 9, 8, 7, Integer.MAX_VALUE};"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,85,"return new int[] {0, 0, 0, 0, 1, 1, 14, 11, 10, 9, 8, Integer.MAX_VALUE};"
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,93,"etDistribution(new PascalDistribution(5,0.0d));"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,93,"setDistribution(new PascalDistribution(5, 0.0d));"
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,99,"etInverseCumulativeTestValues(new int[] {Integer.MAX_VALUE - 1, Integer.MAX_VALUE - 1});"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,99,"setInverseCumulativeTestValues(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE});"
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,108,"etDistribution(new PascalDistribution(5,1.0d));"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,108,"setDistribution(new PascalDistribution(5, 1.0d));"
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,114,"etInverseCumulativeTestValues(new int[] {-1, -1});"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,114,"setInverseCumulativeTestValues(new int[] {0, 0});"
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,90, Increased 3rd and 7th values slightly as computed cumulative
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,91, probabilities for corresponding values exceeds the target value (still
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,92, within tolerance).
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,96,"eturn new double[] { 0d,  0.018315638889d, 0.0915781944437d,"
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,97,".238103305554d, 0.433470120367d, 0.62883693518,"
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,98,".78513038704d,  0.99716023388d, 0.999999998077 };"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,93,IntegerDistribution dist = getDistribution();
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,94,"return new double[] { 0d, 0.018315638886d, 0.018315638890d,"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,95,"0.091578194441d, 0.091578194445d, 0.238103305552d,"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,96,"0.238103305556d, dist.cumulativeProbability(3),"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,97,"dist.cumulativeProbability(4), dist.cumulativeProbability(5),"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,98,"dist.cumulativeProbability(10), dist.cumulativeProbability(20)};"
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,106,"eturn new int[] { -1, 0, 1, 2, 3, 4, 5, 10, 20};"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,106,"return new int[] { 0, 0, 1, 1, 2, 2, 3, 3, 4, 5, 10, 20};"
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,135,"ssert.assertEquals(-1, dist.inverseCumulativeProbability(0d));"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,135,"Assert.assertEquals(0, dist.inverseCumulativeProbability(0d));"
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,212,ssert.assertTrue(p >= dist.cumulativeProbability(ret));
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,213,ssert.assertTrue(p < dist.cumulativeProbability(ret + 1));
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,212,Assert.assertTrue(p <= dist.cumulativeProbability(ret));
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,213,Assert.assertTrue(p > dist.cumulativeProbability(ret - 1));
False,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,82,"eturn new double[] {0, 0.001d, 0.010d, 0.025d, 0.050d, 0.3414d, 0.3415d, 0.999d,"
False,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,83,".990d, 0.975d, 0.950d, 0.900d, 1};"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,82,"return new double[] {0d, 0.001d, 0.010d, 0.025d, 0.050d, 0.3413d, 0.3415d, 0.999d,"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,83,"0.990d, 0.975d, 0.950d, 0.900d, 1d};"
False,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,89,"eturn new int[] {0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 8, 7, 10};"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,89,"return new int[] {1, 1, 1, 1, 1, 1, 2, 10, 10, 10, 9, 8, 10};"
False,src/test/java/org/apache/commons/math/random/ISAACTest.java,src/test/java/org/apache/commons/math/random/ISAACTest.java,27,eturn new ISAACRandom(1000);
True,src/test/java/org/apache/commons/math/random/ISAACTest.java,src/test/java/org/apache/commons/math/random/ISAACTest.java,27,return new ISAACRandom(500);
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,420,nt binWidth = 1;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,420,int binWidth = 0;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,425,"owerBinMass = poissonDistribution.cumulativeProbability(lower, lower + binWidth - 1);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,426,"pperBinMass = poissonDistribution.cumulativeProbability(upper - binWidth + 1, upper);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,427,"idthSufficient = FastMath.min(lowerBinMass, upperBinMass) * sampleSize >= minExpectedCount;"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,426,"lowerBinMass = poissonDistribution.cumulativeProbability(lower - 1, lower + binWidth - 1);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,427,"upperBinMass = poissonDistribution.cumulativeProbability(upper - binWidth - 1, upper - 1);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,428,"widthSufficient = FastMath.min(lowerBinMass, upperBinMass) * sampleSize >= minExpectedCount;"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,444,inBounds.add(bound);
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,445,inBounds.add(upper);
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,444,"binBounds.add(upper); // The size of bin [binBounds[binCount - 2], upper) satisfies binWidth <= size < 2*binWidth."
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,471," // Expected count is (mass in [binBounds[i], binBounds[i+1])) * sampleSize"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,470,"} // Expected count is (mass in [binBounds[i-1], binBounds[i])) * sampleSize"
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,34, Tests RandomGenerator methods directly and also executes RandomDataTest
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,34,* Tests RandomGenerator methods directly and also executes RandomDataTest
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,50, Override this method in subclasses to provide a concrete generator to test.
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,50,* Override this method in subclasses to provide a concrete generator to test.
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,138,xpected[k] = (double) smallSampleSize *
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,138,expected[k] = (double) smallSampleSize *
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,262,or (int i = 0; i < 10000; ++i) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,262,final int N = 10000;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,263,for (int i = 0; i < N; ++i) {
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,265,"ssert.assertEquals(0.5, sample.getMean(), 0.02);"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,266,"Assert.assertEquals(""Note: This test will fail randomly about 1 in 100 times."","
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,267,"0.5, sample.getMean(), FastMath.sqrt(N/12.0) * 2.576);"
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,267,"ample.getStandardDeviation(),"
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,268,.01);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,269,"sample.getStandardDeviation(), 0.01);"
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,274,or (int i = 0; i < 1000; ++i) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,275,final int N = 1000;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,276,for (int i = 0; i < N; ++i) {
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,277,"ssert.assertEquals(0.5, sample.getMean(), 0.01);"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,279,"Assert.assertEquals(""Note: This test will fail randomly about 1 in 100 times."","
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,280,"0.5, sample.getMean(), FastMath.sqrt(N/12.0) * 2.576);"
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,279,"ample.getStandardDeviation(),"
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,280,.01);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,282,"sample.getStandardDeviation(), 0.01);"
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,291,or (int k = 0; k < 10000; ++k) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,293,final int N = 10000;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,294,for (int k = 0; k < N; ++k) {
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,298,"ssert.assertTrue(""Walked too far astray: "" + walk, FastMath.abs(walk) < 120);"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,301,"Assert.assertTrue(""Walked too far astray: "" + walk + ""\nNote: This "" +"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,302,"""test will fail randomly about 1 in 100 times."","
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,303,FastMath.abs(walk) < FastMath.sqrt(N) * 2.576);
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,304,or (int k = 0; k < 1000; ++k) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,309,final int N = 1000;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,310,for (int k = 0; k < N; ++k) {
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,311,"ssert.assertTrue(""Walked too far astray: "" + walk, FastMath.abs(walk) < 100);"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,317,"Assert.assertTrue(""Walked too far astray: "" + walk + ""\nNote: This "" +"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,318,"""test will fail randomly about 1 in 100 times."","
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,319,FastMath.abs(walk) < FastMath.sqrt(N) * 2.576);
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,317,or (int k = 0; k < 10000; ++k) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,325,final int N = 10000;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,326,for (int k = 0; k < N; ++k) {
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,324,ssert.assertTrue(FastMath.abs(walk) < 250);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,333,"Assert.assertTrue(""Walked too far astray: "" + walk + ""\nNote: This "" +"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,334,"""test will fail randomly about 1 in 100 times."","
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,335,FastMath.abs(walk) < FastMath.sqrt(N) * 2.576);
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,372,"ssert.assertTrue(Arrays.equals(values[0], values[1]));"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,383,"Assert.assertTrue(Arrays.equals(values[0], values[1]));"
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,379,"ssert.assertTrue(Arrays.equals(values[0], values[1]));"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,390,"Assert.assertTrue(Arrays.equals(values[0], values[1]));"
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,386,"ssert.assertTrue(Arrays.equals(values[0], values[1]));"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,397,"Assert.assertTrue(Arrays.equals(values[0], values[1]));"
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,393,"ssert.assertTrue(Arrays.equals(values[0], values[1]));"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,404,"Assert.assertTrue(Arrays.equals(values[0], values[1]));"
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,400,"ssert.assertTrue(Arrays.equals(values[0], values[1]));"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,411,"Assert.assertTrue(Arrays.equals(values[0], values[1]));"
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,407,"ssert.assertTrue(Arrays.equals(values[0], values[1]));"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,418,"Assert.assertTrue(Arrays.equals(values[0], values[1]));"
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,414,"ssert.assertTrue(Arrays.equals(values[0], values[1]));"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,425,"Assert.assertTrue(Arrays.equals(values[0], values[1]));"
False,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,27,eturn new Well1024a(100);
True,src/test/java/org/apache/commons/math/random/Well1024aTest.java,src/test/java/org/apache/commons/math/random/Well1024aTest.java,27,return new Well1024a(1000);

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,94,esetEvaluations();
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,94,evaluations.resetCount();
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,182,** Reset the number of evaluations to zero.
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,182,/** Prepare the start of an integration.
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,183,* @param t0 start value of the independent <i>time</i> variable
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,184,* @param y0 array containing the start value of the state vector
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,185,* @param t target time for the integration
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,184,rotected void resetEvaluations() {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,187,"protected void initIntegration(final double t0, final double[] y0, final double t) {"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,191,for (final EventState state : eventsStates) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,192,"state.getEventHandler().init(t0, y0, t);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,195,for (StepHandler handler : stepHandlers) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,196,"handler.init(t0, y0, t);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,199,setStateInitialized(false);
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,115,eset();
True,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,115,initialTime = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,116,finalTime   = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,117,forward     = true;
True,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,118,index       = 0;
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,166,** Reset the step handler.
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,167, Initialize the internal data as required before the first step is
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,168, handled.
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,170,ublic void reset() {
True,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,169,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,170,"public void init(double t0, double[] y0, double t) {"
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,385,ublic void reset() {
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,385,"public void init(double t0, double[] y0, double t) {"
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,90,/** Initialize event handler at the start of an ODE integration.
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,91,* <p>
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,92,* This method is called once at the start of the integration. It
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,93,* may be used by the event handler to initialize some internal data
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,94,* if needed.
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,95,* </p>
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,96,* @param t0 start value of the independent <i>time</i> variable
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,97,* @param y0 array containing the start value of the state vector
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,98,* @param t target time for the integration
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,100,"void init(double t0, double[] y0, double t);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,25,mport org.apache.commons.math.ode.sampling.StepHandler;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,197,esetEvaluations();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,211,or (StepHandler handler : stepHandlers) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,212,andler.reset();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,214,etStateInitialized(false);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,209,"initIntegration(equations.getTime(), y0, t);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,28,mport org.apache.commons.math.ode.sampling.StepHandler;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,214,esetEvaluations();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,231,or (StepHandler handler : stepHandlers) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,232,andler.reset();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,234,etStateInitialized(false);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,229,"initIntegration(equations.getTime(), y0, t);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,23,mport org.apache.commons.math.ode.sampling.StepHandler;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,197,esetEvaluations();
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,218,or (StepHandler handler : stepHandlers) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,219,andler.reset();
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,221,etStateInitialized(false);
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,216,"initIntegration(equations.getTime(), y0, t);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,549,esetEvaluations();
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,616,or (StepHandler handler : stepHandlers) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,617,andler.reset();
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,619,etStateInitialized(false);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,615,"initIntegration(equations.getTime(), y0, t);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,25,mport org.apache.commons.math.ode.sampling.StepHandler;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,99,esetEvaluations();
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,122,or (StepHandler handler : stepHandlers) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,123,andler.reset();
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,125,etStateInitialized(false);
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,120,"initIntegration(equations.getTime(), y0, t);"
False,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,53,** Reset the step handler.
False,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,54, Initialize the internal data as required before the first step is
False,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,55, handled.
False,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,57,ublic void reset() {
True,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,53,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java,54,"public void init(double t0, double[] y0, double t) {"
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,43,** Reset the step handler.
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,44, Initialize the internal data as required before the first step is
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,45, handled.
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,47,oid reset();
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,43,/** Initialize step handler at the start of an ODE integration.
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,44,* <p>
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,45,* This method is called once at the start of the integration. It
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,46,* may be used by the step handler to initialize some internal data
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,47,* if needed.
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,48,* </p>
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,49,* @param t0 start value of the independent <i>time</i> variable
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,50,* @param y0 array containing the start value of the state vector
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,51,* @param t target time for the integration
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,53,"void init(double t0, double[] y0, double t);"
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,50, Handle the last accepted step
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,51, @param interpolator interpolator for the last accepted step. For
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,52," efficiency purposes, the various integrators reuse the same"
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,53," object on each call, so if the instance wants to keep it across"
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,54, all calls (for example to provide at the end of the integration a
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,55," continuous model valid throughout the integration range, as the"
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,56, {@link org.apache.commons.math.ode.ContinuousOutputModel
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,57," ContinuousOutputModel} class does), it should build a local copy"
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,58, using the clone method of the interpolator and store this copy.
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,59, Keeping only a reference to the interpolator and reusing it will
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,60, result in unpredictable behavior (potentially crashing the application).
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,61, @param isLast true if the step is the last one
False,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,63,"oid handleStep(StepInterpolator interpolator, boolean isLast);"
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,56,* Handle the last accepted step
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,57,* @param interpolator interpolator for the last accepted step. For
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,58,"* efficiency purposes, the various integrators reuse the same"
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,59,"* object on each call, so if the instance wants to keep it across"
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,60,* all calls (for example to provide at the end of the integration a
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,61,"* continuous model valid throughout the integration range, as the"
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,62,* {@link org.apache.commons.math.ode.ContinuousOutputModel
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,63,"* ContinuousOutputModel} class does), it should build a local copy"
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,64,* using the clone method of the interpolator and store this copy.
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,65,* Keeping only a reference to the interpolator and reusing it will
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,66,* result in unpredictable behavior (potentially crashing the application).
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,67,* @param isLast true if the step is the last one
True,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java,69,"void handleStep(StepInterpolator interpolator, boolean isLast);"
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,164,his.h       = FastMath.abs(h);
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,165,his.handler = handler;
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,166,his.mode    = mode;
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,167,his.bounds  = bounds;
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,168,eset();
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,164,this.h          = FastMath.abs(h);
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,165,this.handler    = handler;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,166,this.mode       = mode;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,167,this.bounds     = bounds;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,168,firstTime       = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,169,lastTime        = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,170,lastState       = null;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,171,lastDerivatives = null;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,172,forward         = true;
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,171,** Reset the step handler.
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,172, Initialize the internal data as required before the first step is
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,173, handled.
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,175,ublic void reset() {
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,175,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,176,"public void init(double t0, double[] y0, double t) {"
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,118,"public void init(double t0, double[] y0, double t) {"
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,143,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,58,eset();
True,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,58,maxValueError = 0;
True,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,59,maxTimeError  = 0;
True,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,60,lastError     = 0;
True,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,61,expectedStepStart = Double.NaN;
False,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,61,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,64,"public void init(double t0, double[] y0, double t) {"
True,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,39,"public void init(double t0, double[] y0, double t) {"
True,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,117,"public void init(double t0, double[] y0, double t) {"
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,138,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java,139,"public void init(double t0, double[] y0, double t) {"
True,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java,71,"public void init(double t0, double[] y0, double t) {"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,74,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,245,eset();
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,248,maxError = 0;
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,247,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,250,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,284,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,287,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,127,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,127,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,268,eset();
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,270,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,269,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,309,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,308,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,115,"ublic void handleStep(StepInterpolator interpolator, boolean isLast) {"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,115,"public void handleStep(StepInterpolator interpolator, boolean isLast) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,135,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,135,"public void init(double t0, double[] y0, double t) {"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,76,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,292,eset();
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,294,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,296,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,329,eset();
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,331,firstTime = true;
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,332,minStep = 0;
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,333,maxStep = 0;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,331,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,335,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,135,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,135,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,166,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,166,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,180,eset();
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,182,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,181,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,219,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,218,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,274,ublic void reset() {}
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,274,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,303,eset();
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,305,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,305,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,340,eset();
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,340,firstTime = true;
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,341,minStep = 0;
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,342,maxStep = 0;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,342,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,344,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,137,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,137,"public void init(double t0, double[] y0, double t) {"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,205,"public void init(double t0, double[] y0, double t) {"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,251,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,135,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,135,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,166,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,166,"public void init(double t0, double[] y0, double t) {"
True,src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java,src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java,46,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,173,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,173,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,213,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,213,"public void init(double t0, double[] y0, double t) {"
False,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,71,ublic void reset() {
True,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,71,"public void init(double t0, double[] y0, double t) {"

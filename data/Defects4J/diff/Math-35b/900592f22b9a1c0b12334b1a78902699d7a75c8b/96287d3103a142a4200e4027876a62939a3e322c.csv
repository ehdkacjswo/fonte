is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,60, <li>returns <code>true</code> iff the parameters designate a subarray of
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,60,* <li>returns <code>true</code> iff the parameters designate a subarray of
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,64," <li>returns <code>false</li> if the array is non-null, but"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,64,"* <li>returns <code>false</li> if the array is non-null, but"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,108,"* This method is used by <code>evaluate(double[], double[], int, int)</code> methods"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,109,* to verify that the begin and length parameters designate a subarray of positive length
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,110,"* and the weights are all non-negative, non-NaN, finite, and not all zero."
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,111,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,112,* <ul>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,113,* <li>returns <code>true</code> iff the parameters designate a subarray of
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,114,* positive length and the weights array contains legitimate values.</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,115,* <li>throws <code>IllegalArgumentException</code> if any of the following are true:
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,116,* <ul><li>the values array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,117,*     <li>the weights array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,118,*     <li>the weights array does not have the same length as the values array</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,119,*     <li>the weights array contains one or more infinite values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,120,*     <li>the weights array contains one or more NaN values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,121,*     <li>the weights array contains negative values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,122,*     <li>the start and length arguments do not determine a valid array</li></ul>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,123,* </li>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,124,"* <li>returns <code>false</li> if the array is non-null, but"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,125,* <code>length</code> is 0.
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,126,* </ul></p>
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,128,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,129,* @param weights the weights array
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,130,* @param begin index of the first array element to include
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,131,* @param length the number of elements to include
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,132,* @return true if the parameters are valid and designate a subarray of positive length
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,133,* @throws IllegalArgumentException if the indices are invalid or the array is null
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,135,protected boolean test(
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,136,"final double[] values,"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,137,"final double[] weights,"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,138,"final int begin,"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,139,final int length) {
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,141,if (weights == null) {
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,142,"throw MathRuntimeException.createIllegalArgumentException(""input weights array is null"");"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,145,if (weights.length !=  values.length) {
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,146,throw MathRuntimeException.createIllegalArgumentException(
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,147,"""Different number of weights and values"");"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,150,boolean containsPositiveWeight = false;
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,151,for (int i = begin; i < begin + length; i++) {
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,152,if (Double.isNaN(weights[i])) {
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,153,throw MathRuntimeException.createIllegalArgumentException(
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,154,"""NaN weight at index {0}"", i);"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,156,if (Double.isInfinite(weights[i])) {
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,157,throw MathRuntimeException.createIllegalArgumentException(
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,158,"""Infinite weight at index {0}"", i);"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,160,if (weights[i] < 0) {
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,161,throw MathRuntimeException.createIllegalArgumentException(
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,162,"""negative weight {0} at index {1} "", weights[i], i);"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,164,if (!containsPositiveWeight && weights[i] > 0.0) {
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,165,containsPositiveWeight = true;
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,169,if (!containsPositiveWeight) {
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,170,throw MathRuntimeException.createIllegalArgumentException(
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,171,"""weight array must contain at least one non-zero value"");"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,174,"return test(values, begin, length);"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,25, <p>Computes the arithmetic mean of a set of values. Uses the definitional
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,25,* <p>Computes the arithmetic mean of a set of values. Uses the definitional
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,33," stream of (unstored) values, the value of the statistic that"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,33,"* stream of (unstored) values, the value of the statistic that"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,172,* Returns the weighted arithmetic mean of the entries in the specified portion of
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,173,"* the input array, or <code>Double.NaN</code> if the designated subarray"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,174,* is empty.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,175,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,176,* Throws <code>IllegalArgumentException</code> if either array is null.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,177,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,178,* See {@link Mean} for details on the computing algorithm. The two-pass algorithm
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,179,"* described above is used here, with weights applied in computing both the original"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,180,* estimate and the correction factor.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,181,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,182,* Throws <code>IllegalArgumentException</code> if any of the following are true:
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,183,* <ul><li>the values array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,184,*     <li>the weights array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,185,*     <li>the weights array does not have the same length as the values array</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,186,*     <li>the weights array contains one or more infinite values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,187,*     <li>the weights array contains one or more NaN values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,188,*     <li>the weights array contains negative values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,189,*     <li>the start and length arguments do not determine a valid array</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,190,* </ul></p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,192,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,193,* @param weights the weights array
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,194,* @param begin index of the first array element to include
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,195,* @param length the number of elements to include
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,196,* @return the mean of the values or Double.NaN if length = 0
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,197,* @throws IllegalArgumentException if the parameters are not valid
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,199,"public double evaluate(final double[] values, final double[] weights,"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,200,"final int begin, final int length) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,201,"if (test(values, weights, begin, length)) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,202,Sum sum = new Sum();
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,204,// Compute initial estimate using definitional formula
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,205,"double sumw = sum.evaluate(weights,begin,length);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,206,"double xbarw = sum.evaluate(values, weights, begin, length) / sumw;"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,208,// Compute correction factor in second pass
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,209,double correction = 0;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,210,for (int i = begin; i < begin + length; i++) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,211,correction += weights[i] * (values[i] - xbarw);
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,213,return xbarw + (correction/sumw);
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,215,return Double.NaN;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,23,import org.apache.commons.math.stat.descriptive.summary.Sum;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,26," ""sample variance"" definitional formula is used:"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,27,"* ""sample variance"" definitional formula is used:"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,36, <li> The <code>getResult</code> method computes the variance using
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,37,* <li> The <code>getResult</code> method computes the variance using
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,42, full array of values in memory to execute a two-pass algorithm.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,43,* full array of values in memory to execute a two-pass algorithm.
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,45," American Statistician, August 1983.</li></ul>"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,46, Note that adding values using <code>increment</code> or
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,46,"* American Statistician, vol. 37, no. 3 (1983) pp. 242-247.</li></ul>"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,47,* Note that adding values using <code>increment</code> or
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,48," sometimes give a different, less accurate, result than executing"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,49,"* sometimes give a different, less accurate, result than executing"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,83, value of the statisic.  True means that bias is corrected.  See
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,84,* value of the statisic.  True means that bias is corrected.  See
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,132,his.isBiasCorrected = isBiasCorrected;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,133,this.isBiasCorrected = isBiasCorrected;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,146, {@inheritDoc}
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,147," <p>If all values are available, it is more accurate to use"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,147,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,148,"* <p>If all values are available, it is more accurate to use"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,150, <code>evaluate</code> leverages the fact that is has the full
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,151, list of values together to execute a two-pass algorithm.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,151,* <code>evaluate</code> leverages the fact that is has the full
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,152,* list of values together to execute a two-pass algorithm.
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,197," Returns the variance of the entries in the input array, or"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,198,"* Returns the variance of the entries in the input array, or"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,260,* <p>Returns the weighted variance of the entries in the specified portion of
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,261,"* the input array, or <code>Double.NaN</code> if the designated subarray"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,262,* is empty.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,263,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,264,* Uses the formula <pre>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,265,*   &Sigma;(weights[i]*(values[i] - weightedMean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,266,* </pre>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,267,* where weightedMean is the weighted mean</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,268,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,269,* This formula will not return the same result as the unweighted variance when all
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,270,"* weights are equal, unless all weights are equal to 1. The formula assumes that"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,271,"* weights are to be treated as ""expansion values,"" as will be the case if for example"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,272,* the weights represent frequency counts. To normalize weights so that the denominator
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,273,"* in the variance computation equals the length of the input vector minus one, use <pre>"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,274,"*   <code>evaluate(values, MathUtils.normalizeArray(weights, values.length)); </code>"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,275,* </pre>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,276,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,277,* Returns 0 for a single-value (i.e. length = 1) sample.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,278,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,279,* Throws <code>IllegalArgumentException</code> if any of the following are true:
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,280,* <ul><li>the values array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,281,*     <li>the weights array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,282,*     <li>the weights array does not have the same length as the values array</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,283,*     <li>the weights array contains one or more infinite values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,284,*     <li>the weights array contains one or more NaN values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,285,*     <li>the weights array contains negative values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,286,*     <li>the start and length arguments do not determine a valid array</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,287,* </ul></p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,288,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,289,* Does not change the internal state of the statistic.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,290,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,291,* Throws <code>IllegalArgumentException</code> if either array is null.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,293,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,294,* @param weights the weights array
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,295,* @param begin index of the first array element to include
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,296,* @param length the number of elements to include
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,297,* @return the variance of the values or Double.NaN if length = 0
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,298,* @throws IllegalArgumentException if the parameters are not valid
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,300,"public double evaluate(final double[] values, final double[] weights,"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,301,"final int begin, final int length) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,303,double var = Double.NaN;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,305,"if (test(values, weights,begin, length)) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,306,clear();
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,307,if (length == 1) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,308,var = 0.0;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,309,} else if (length > 1) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,310,Mean mean = new Mean();
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,311,"double m = mean.evaluate(values, weights, begin, length);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,312,"var = evaluate(values, weights, m, begin, length);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,315,return var;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,260," the input array, using the precomputed mean value.  Returns"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,320,"* the input array, using the precomputed mean value.  Returns"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,284,"ublic double evaluate(final double[] values, final double mean,"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,344,"public double evaluate(final double[] values, final double mean,"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,301,ouble len = length;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,361,double len = length;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,373,* Returns the weighted variance of the entries in the specified portion of
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,374,"* the input array, using the precomputed weighted mean value.  Returns"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,375,* <code>Double.NaN</code> if the designated subarray is empty.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,376,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,377,* Uses the formula <pre>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,378,*   &Sigma;(weights[i]*(values[i] - mean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,379,* </pre></p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,380,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,381,* The formula used assumes that the supplied mean value is the weighted arithmetic
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,382,"* mean of the sample data, not a known population parameter. This method"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,383,* is supplied only to save computation when the mean has already been
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,384,* computed.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,385,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,386,* This formula will not return the same result as the unweighted variance when all
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,387,"* weights are equal, unless all weights are equal to 1. The formula assumes that"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,388,"* weights are to be treated as ""expansion values,"" as will be the case if for example"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,389,* the weights represent frequency counts. To normalize weights so that the denominator
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,390,"* in the variance computation equals the length of the input vector minus one, use <pre>"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,391,"*   <code>evaluate(values, MathUtils.normalizeArray(weights, values.length)); </code>"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,392,* </pre>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,393,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,394,* Returns 0 for a single-value (i.e. length = 1) sample.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,395,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,396,* Throws <code>IllegalArgumentException</code> if any of the following are true:
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,397,* <ul><li>the values array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,398,*     <li>the weights array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,399,*     <li>the weights array does not have the same length as the values array</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,400,*     <li>the weights array contains one or more infinite values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,401,*     <li>the weights array contains one or more NaN values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,402,*     <li>the weights array contains negative values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,403,*     <li>the start and length arguments do not determine a valid array</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,404,* </ul></p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,405,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,406,* Does not change the internal state of the statistic.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,408,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,409,* @param weights the weights array
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,410,* @param mean the precomputed weighted mean value
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,411,* @param begin index of the first array element to include
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,412,* @param length the number of elements to include
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,413,* @return the variance of the values or Double.NaN if length = 0
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,414,* @throws IllegalArgumentException if the parameters are not valid
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,416,"public double evaluate(final double[] values, final double[] weights,"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,417,"final double mean, final int begin, final int length) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,419,double var = Double.NaN;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,421,"if (test(values, weights, begin, length)) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,422,if (length == 1) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,423,var = 0.0;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,424,} else if (length > 1) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,425,double accum = 0.0;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,426,double dev = 0.0;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,427,for (int i = begin; i < begin + length; i++) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,428,dev = values[i] - mean;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,429,accum += weights[i] * (dev * dev);
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,432,double sumWts = 0;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,433,for (int i = 0; i < weights.length; i++) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,434,sumWts += weights[i];
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,437,if (isBiasCorrected) {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,438,var = accum / (sumWts - 1);
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,439,} else {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,440,var = accum / sumWts;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,444,return var;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,22,import org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,132,* <p>Returns the weighted product of the entries in the specified portion of
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,133,"* the input array, or <code>Double.NaN</code> if the designated subarray"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,134,* is empty.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,136,* <p>Throws <code>IllegalArgumentException</code> if any of the following are true:
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,137,* <ul><li>the values array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,138,*     <li>the weights array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,139,*     <li>the weights array does not have the same length as the values array</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,140,*     <li>the weights array contains one or more infinite values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,141,*     <li>the weights array contains one or more NaN values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,142,*     <li>the weights array contains negative values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,143,*     <li>the start and length arguments do not determine a valid array</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,144,* </ul></p>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,146,"* <p>Uses the formula, <pre>"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,147,*    weighted product = &prod;values[i]<sup>weights[i]</sup>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,148,* </pre>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,149,"* that is, the weights are applied as exponents when computing the weighted product.</p>"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,151,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,152,* @param weights the weights array
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,153,* @param begin index of the first array element to include
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,154,* @param length the number of elements to include
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,155,* @return the product of the values or Double.NaN if length = 0
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,156,* @throws IllegalArgumentException if the parameters are not valid
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,158,"public double evaluate(final double[] values, final double[] weights,"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,159,"final int begin, final int length) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,160,double product = Double.NaN;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,161,"if (test(values, weights, begin, length)) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,162,product = 1.0;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,163,for (int i = begin; i < begin + length; i++) {
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,164,"product *= Math.pow(values[i], weights[i]);"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,167,return product;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,131,* The weighted sum of the entries in the specified portion of
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,132,"* the input array, or <code>Double.NaN</code> if the designated subarray"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,133,* is empty.
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,134,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,135,* Throws <code>IllegalArgumentException</code> if any of the following are true:
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,136,* <ul><li>the values array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,137,*     <li>the weights array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,138,*     <li>the weights array does not have the same length as the values array</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,139,*     <li>the weights array contains one or more infinite values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,140,*     <li>the weights array contains one or more NaN values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,141,*     <li>the weights array contains negative values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,142,*     <li>the start and length arguments do not determine a valid array</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,143,* </ul></p>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,144,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,145,"* Uses the formula, <pre>"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,146,*    weighted sum = &Sigma;(values[i] * weights[i])
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,147,* </pre></p>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,149,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,150,* @param weights the weights array
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,151,* @param begin index of the first array element to include
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,152,* @param length the number of elements to include
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,153,* @return the sum of the values or Double.NaN if length = 0
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,154,* @throws IllegalArgumentException if the parameters are not valid
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,156,"public double evaluate(final double[] values, final double[] weights,"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,157,"final int begin, final int length) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,158,double sum = Double.NaN;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,159,"if (test(values, weights, begin, length)) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,160,sum = 0.0;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,161,for (int i = begin; i < begin + length; i++) {
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,162,sum += (values[i] * weights[i]);
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,165,return sum;
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,43,"protected double[] testWeightsArray = {0.3, 0.2, 1.3, 1.1, 1.0, 1.8};"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,44,"protected double[] testNegativeWeightsArray = {-0.3, 0.2, -1.3, 1.1, 1.0, 1.8};"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,91,try {
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,92,"testStatistic.test(testArray, nullArray, 0, 1);  // null weights array"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,93,"fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,94,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,95,// expected
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,97,try {
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,98,"testStatistic.test(singletonArray, testWeightsArray, 0, 1);  // weights.length != value.length"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,99,"fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,100,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,101,// expected
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,103,try {
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,104,"testStatistic.test(testArray, testNegativeWeightsArray, 0, 6);  // can't have negative weights"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,105,"fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,106,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,107,// expected
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,11," Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,11,"s * Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,19,import java.lang.reflect.Method;
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,20,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,21,import java.util.List;
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,25,import org.apache.commons.math.TestUtils;
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,26,import org.apache.commons.math.random.RandomData;
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,27,import org.apache.commons.math.random.RandomDataImpl;
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,58,protected double weightedMean = 12.366995073891626d;
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,59,protected double weightedVar =   9.974760968886391d;
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,60,protected double weightedStd = Math.sqrt(weightedVar);
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,61,protected double weightedProduct = 8517647448765288000000d;
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,62,protected double weightedSum = 251.05d;
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,52,"12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3,"
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,53,"4.1, 9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10,  8.8,"
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,54,", 12.3 };"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,67,"{ 12.5, 12.0, 11.8, 14.2, 14.9, 14.5, 21.0,  8.2, 10.3, 11.3,"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,68,"14.1,  9.9, 12.2, 12.0, 12.1, 11.0, 19.8, 11.0, 10.0,  8.8,"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,69,"9.0, 12.3 };"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,71,protected double[] testWeightsArray =
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,72,"{  1.5,  0.8,  1.2,  0.4,  0.8,  1.8,  1.2,  1.1,  1.0,  0.7,"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,73,"1.3,  0.6,  0.7,  1.3,  0.7,  1.0,  0.4,  0.1,  1.4,  0.9,"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,74,"1.1,  0.3 };"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,76,protected double[] identicalWeightsArray =
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,77,"{  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,78,"0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,79,"0.5,  0.5 };"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,81,protected double[] unitWeightsArray =
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,82,"{  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,83,"1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,84,"1.0,  1.0 };"
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,68,ublic void testEvaluation() throws Exception {
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,99,public void testEvaluation() throws Exception {
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,116,* Tests consistency of weighted statistic computation.
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,117,"* For statistics that support weighted evaluation, this test case compares"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,118,* the result of direct computation on an array with repeated values with
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,119,* a weighted computation on the corresponding (shorter) array with each
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,120,* value appearing only once but with a weight value equal to its multiplicity
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,121,* in the repeating array.
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,124,public void testWeightedConsistency() throws Exception {
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,126,// See if this statistic computes weighted statistics
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,127,"// If not, skip this test"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,128,UnivariateStatistic statistic = getUnivariateStatistic();
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,129,Method evaluateMethod = null;
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,130,try {
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,131,"evaluateMethod = statistic.getClass().getDeclaredMethod(""evaluate"","
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,132,"double[].class, double[].class, int.class, int.class);"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,133,} catch (NoSuchMethodException ex) {
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,134,return;  // skip test
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,137,// Create arrays of values and corresponding integral weights
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,138,// and longer array with values repeated according to the weights
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,139,final int len = 10;        // length of values array
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,140,final double mu = 0;       // mean of test data
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,141,final double sigma = 5;    // std dev of test data
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,142,double[] values = new double[len];
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,143,double[] weights = new double[len];
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,144,RandomData randomData = new RandomDataImpl();
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,146,// Fill weights array with random int values between 1 and 5
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,147,int[] intWeights = new int[len];
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,148,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,149,"intWeights[i] = randomData.nextInt(1, 5);"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,150,weights[i] = intWeights[i];
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,153,"// Fill values array with random data from N(mu, sigma)"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,154,// and fill valuesList with values from values array with
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,155,"// values[i] repeated weights[i] times, each i"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,156,List<Double> valuesList = new ArrayList<Double>();
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,157,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,158,"double value = randomData.nextGaussian(mu, sigma);"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,159,values[i] = value;
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,160,for (int j = 0; j < intWeights[i]; j++) {
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,161,valuesList.add(new Double(value));
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,165,// Dump valuesList into repeatedValues array
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,166,int sumWeights = valuesList.size();
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,167,double[] repeatedValues = new double[sumWeights];
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,168,for (int i = 0; i < sumWeights; i++) {
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,169,repeatedValues[i] = valuesList.get(i);
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,172,// Compare result of weighted statistic computation with direct computation
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,173,// on array of repeated values
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,174,double weightedResult = (Double) evaluateMethod.invoke(
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,175,"statistic, values, weights, 0, values.length);"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,176,TestUtils.assertRelativelyEquals(
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,177,"statistic.evaluate(repeatedValues), weightedResult, 10E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,62,/**Expected value for  the testArray defined in UnivariateStatisticAbstractTest */
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,63,public double expectedWeightedValue() {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,64,return this.weightedMean;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,74,public void testWeightedMean() {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,75,Mean mean = new Mean();
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,76,"assertEquals(expectedWeightedValue(), mean.evaluate(testArray, testWeightsArray, 0, testArray.length), getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,77,"assertEquals(expectedValue(), mean.evaluate(testArray, identicalWeightsArray, 0, testArray.length), getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,24,import org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,64,/**Expected value for  the testArray defined in UnivariateStatisticAbstractTest */
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,65,public double expectedWeightedValue() {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,66,return this.weightedVar;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,87,"ssertEquals(populationVariance(values), v1.getResult(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,93,"assertEquals(populationVariance(values), v1.getResult(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,91,"ssertEquals(populationVariance(values), v1.getResult(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,97,"assertEquals(populationVariance(values), v1.getResult(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,101,um += (v[i] - mean) * (v[i] - mean);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,107,sum += (v[i] - mean) * (v[i] - mean);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,112,public void testWeightedVariance() {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,113,Variance variance = new Variance();
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,114,"assertEquals(expectedWeightedValue(),"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,115,"variance.evaluate(testArray, testWeightsArray, 0, testArray.length), getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,117,// All weights = 1 -> weighted variance = unweighted variance
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,118,"assertEquals(expectedValue(),"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,119,"variance.evaluate(testArray, unitWeightsArray, 0, testArray.length), getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,121,"// All weights the same -> when weights are normalized to sum to the length of the values array,"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,122,// weighted variance = unweighted value
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,123,"assertEquals(expectedValue(),"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,124,"variance.evaluate(testArray, MathUtils.normalizeArray(identicalWeightsArray, testArray.length),"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,125,"0, testArray.length), getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,70,/**Expected value for  the testArray defined in UnivariateStatisticAbstractTest */
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,71,public double expectedWeightedValue() {
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,72,return this.weightedProduct;
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,80,ssertTrue(Double.isNaN(product.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,85,assertTrue(Double.isNaN(product.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,82,ssertTrue(Double.isNaN(product.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,87,assertTrue(Double.isNaN(product.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,90,public void testWeightedProduct() {
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,91,Product product = new Product();
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,92,"assertEquals(expectedWeightedValue(), product.evaluate(testArray, testWeightsArray, 0, testArray.length),getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,93,"assertEquals(expectedValue(), product.evaluate(testArray, unitWeightsArray, 0, testArray.length), getTolerance());"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,51,eturn new Sum();
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,51,return new Sum();
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,62,/**Expected value for  the testArray defined in UnivariateStatisticAbstractTest */
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,63,public double expectedWeightedValue() {
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,64,return this.weightedSum;
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,72,ssertTrue(Double.isNaN(sum.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,77,assertTrue(Double.isNaN(sum.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,80,public void testWeightedSum() {
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,81,Sum sum = new Sum();
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,82,"assertEquals(expectedWeightedValue(), sum.evaluate(testArray, testWeightsArray, 0, testArray.length), getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,83,"assertEquals(expectedValue(), sum.evaluate(testArray, unitWeightsArray, 0, testArray.length), getTolerance());"

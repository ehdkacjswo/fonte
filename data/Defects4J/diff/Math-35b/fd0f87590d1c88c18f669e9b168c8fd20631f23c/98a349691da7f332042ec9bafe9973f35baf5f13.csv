is_addition,old_file_path,new_file_path,line_num,content
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,148,alue = new Double(d);
True,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,148,value = Double.valueOf(d);
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,152,alue = new Float(f);
True,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,152,value = Float.valueOf(f);
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,156,alue = new Integer(i);
True,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,156,value = Integer.valueOf(i);
False,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,160,alue = new Long(l);
True,src/experimental/org/apache/commons/math/function/DefaultContext.java,src/experimental/org/apache/commons/math/function/DefaultContext.java,160,value = Long.valueOf(l);
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,137,"ynaBean.set(propertyName, new Double(v));"
True,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java,137,"dynaBean.set(propertyName, Double.valueOf(v));"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,63,"italStats vs1 = new VitalStats( new Double(120.0),"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,64,ew Double(96.4) );
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,65,"atient p1 = new Patient( vs1, new Integer( 35 ) );"
True,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,63,"VitalStats vs1 = new VitalStats( Double.valueOf(120.0),"
True,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,64,Double.valueOf(96.4) );
True,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,65,"Patient p1 = new Patient( vs1, Integer.valueOf( 35 ) );"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,69,"italStats vs2 = new VitalStats( new Double(70.0),"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,70,ew Double(97.4) );
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,71,"atient p2 = new Patient( vs2, new Integer( 23 ) );"
True,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,69,"VitalStats vs2 = new VitalStats( Double.valueOf(70.0),"
True,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,70,Double.valueOf(97.4) );
True,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,71,"Patient p2 = new Patient( vs2, Integer.valueOf( 23 ) );"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,75,"italStats vs3 = new VitalStats( new Double(90.0),"
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,76,ew Double(98.6) );
False,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,77,"atient p3 = new Patient( vs3, new Integer( 42 ) );"
True,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,75,"VitalStats vs3 = new VitalStats( Double.valueOf(90.0),"
True,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,76,Double.valueOf(98.6) );
True,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java,77,"Patient p3 = new Patient( vs3, Integer.valueOf( 42 ) );"
False,src/java/org/apache/commons/math/ArgumentOutsideDomainException.java,src/java/org/apache/commons/math/ArgumentOutsideDomainException.java,41,"ew Object[] { new Double(argument), new Double(lower), new Double(upper) });"
True,src/java/org/apache/commons/math/ArgumentOutsideDomainException.java,src/java/org/apache/commons/math/ArgumentOutsideDomainException.java,41,"new Object[] { Double.valueOf(argument), Double.valueOf(lower), Double.valueOf(upper) });"
False,src/java/org/apache/commons/math/DimensionMismatchException.java,src/java/org/apache/commons/math/DimensionMismatchException.java,38,"ew Integer(dimension1), new Integer(dimension2)"
True,src/java/org/apache/commons/math/DimensionMismatchException.java,src/java/org/apache/commons/math/DimensionMismatchException.java,38,"Integer.valueOf(dimension1), Integer.valueOf(dimension2)"
False,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,38,"ew Object[] { new Double(abscissa), new Integer(i1), new Integer(i2) });"
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,38,"new Object[] { Double.valueOf(abscissa), Integer.valueOf(i1), Integer.valueOf(i2) });"
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,43,ew Object[] { new Double(argument) });
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,43,new Object[] { Double.valueOf(argument) });
False,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,44,ew Object[] { new Integer(maxIterations) });
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,44,new Object[] { Integer.valueOf(maxIterations) });
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,202,"ew Object[] { new Integer(numIterations), new Integer(maximumIterations),"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,203,"ew Double(initial), new Double(lowerBound), new Double(upperBound),"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,204,"ew Double(a), new Double(b), new Double(fa), new Double(fb) });"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,202,"new Object[] { Integer.valueOf(numIterations), Integer.valueOf(maximumIterations),"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,203,"Double.valueOf(initial), Double.valueOf(lowerBound), Double.valueOf(upperBound),"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,204,"Double.valueOf(a), Double.valueOf(b), Double.valueOf(fa), Double.valueOf(fb) });"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,453,et = new Double(value);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,453,ret = Double.valueOf(value);
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,101,ew Object[] { new Integer(maxCostEval) });
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,101,new Object[] { Integer.valueOf(maxCostEval) });
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,205,"ew Object[] { new Integer(m), new Integer(p)});"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,205,"new Object[] { Integer.valueOf(m), Integer.valueOf(p)});"
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,404,ew Object[] { new Double(costRelativeTolerance) });
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,404,new Object[] { Double.valueOf(costRelativeTolerance) });
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,409,ew Object[] { new Double(parRelativeTolerance) });
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,409,new Object[] { Double.valueOf(parRelativeTolerance) });
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,413,ew Object[] { new Double(orthoTolerance) });
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,413,new Object[] { Double.valueOf(orthoTolerance) });
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,766,"ew Object[] { new Integer(rows), new Integer(cols) });"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,766,"new Object[] { Integer.valueOf(rows), Integer.valueOf(cols) });"
False,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,42,"ew Object[] { new Double(value), new Integer(maxIterations) });"
True,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,42,"new Object[] { Double.valueOf(value), Integer.valueOf(maxIterations) });"
False,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,54,"ew Object[] { new Double(value), new Long(p), new Long(q) });"
True,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,54,"new Object[] { Double.valueOf(value), Long.valueOf(p), Long.valueOf(q) });"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,201,"ew Integer(equations.getDimension()),"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,202,ew Integer(y0.length)
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,201,"Integer.valueOf(equations.getDimension()),"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,202,Integer.valueOf(y0.length)
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,209,"ew Integer(equations.getDimension()),"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,210,ew Integer(y.length)
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,209,"Integer.valueOf(equations.getDimension()),"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,210,Integer.valueOf(y.length)
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,217,"ew Integer(y0.length),"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,218,ew Integer(vecAbsoluteTolerance.length)
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,217,"Integer.valueOf(y0.length),"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,218,Integer.valueOf(vecAbsoluteTolerance.length)
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,225,"ew Integer(y0.length),"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,226,ew Integer(vecRelativeTolerance.length)
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,225,"Integer.valueOf(y0.length),"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,226,Integer.valueOf(vecRelativeTolerance.length)
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,231,ew Object[] { new Double(Math.abs(t - t0)) });
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,231,new Object[] { Double.valueOf(Math.abs(t - t0)) });
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,333,"ew Double(minStep),"
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,334,ew Double(Math.abs(h))
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,333,"Double.valueOf(minStep),"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,334,Double.valueOf(Math.abs(h))
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,143,"ew Integer(equations.getDimension()),"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,144,ew Integer(y0.length)
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,143,"Integer.valueOf(equations.getDimension()),"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,144,Integer.valueOf(y0.length)
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,151,"ew Integer(equations.getDimension()),"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,152,ew Integer(y.length)
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,151,"Integer.valueOf(equations.getDimension()),"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,152,Integer.valueOf(y.length)
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,157,ew Object[] { new Double(Math.abs(t - t0)) });
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,157,new Object[] { Double.valueOf(Math.abs(t - t0)) });
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,274,al = new Double(str).doubleValue();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,274,val = Double.valueOf(str).doubleValue();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,337,ouble delta = (max - min)/(new Double(binCount)).doubleValue();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,337,double delta = (max - min)/(Double.valueOf(binCount)).doubleValue();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,140,nteger c = new Integer(randomBytes[i]);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,140,Integer c = Integer.valueOf(randomBytes[i]);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,239,nteger c = new Integer(hash[i]);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,239,Integer c = Integer.valueOf(hash[i]);
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,33," i.e. <code>addValue(new Long(2)), addValue(2), addValue(2l)</code> all have"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,33,"* i.e. <code>addValue(Long.valueOf(2)), addValue(2), addValue(2l)</code> all have"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,99,bj = new Long(((Integer) v).longValue());
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,99,obj = Long.valueOf(((Integer) v).longValue());
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,104,"reqTable.put(obj, new Long(1));"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,104,"freqTable.put(obj, Long.valueOf(1));"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,106,"reqTable.put(obj, new Long(count.longValue() + 1));"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,106,"freqTable.put(obj, Long.valueOf(count.longValue() + 1));"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,120,ddValue(new Long(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,120,addValue(Long.valueOf(v));
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,129,ddValue(new Long(v.longValue()));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,129,addValue(Long.valueOf(v.longValue()));
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,138,ddValue(new Long(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,138,addValue(Long.valueOf(v));
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,213,eturn getCount(new Long(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,213,return getCount(Long.valueOf(v));
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,223,eturn getCount(new Long(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,223,return getCount(Long.valueOf(v));
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,262,eturn getPct(new Long(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,262,return getPct(Long.valueOf(v));
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,273,eturn getPct(new Long(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,273,return getPct(Long.valueOf(v));
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,348,eturn getCumFreq(new Long(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,348,return getCumFreq(Long.valueOf(v));
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,360,eturn getCumFreq(new Long(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,360,return getCumFreq(Long.valueOf(v));
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,405,eturn getCumPct(new Long(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,405,return getCumPct(Long.valueOf(v));
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,418,eturn getCumPct(new Long(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,418,return getCumPct(Long.valueOf(v));
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,356,ew Object[] {new Double(p)});
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,356,new Object[] {Double.valueOf(p)});
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,537,ew Object[] {new Double(50.0d)});
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,537,new Object[] {Double.valueOf(50.0d)});
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,158,ew Object[] { new Double(x) });
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,158,new Object[] { Double.valueOf(x) });
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,175,ew Object[] { new Double(x) });
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,175,new Object[] { Double.valueOf(x) });
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,55,eturn new Double(o.toString()).doubleValue();
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,55,return Double.valueOf(o.toString()).doubleValue();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,821,eturn new Double(newA);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,821,return Double.valueOf(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,848,eturn new Double(newA);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,848,return Double.valueOf(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,860,eturn new Double(newA);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,860,return Double.valueOf(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,880,eturn new Double(newA);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,880,return Double.valueOf(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,907,eturn new Double(new double[] { 0.0 });
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,907,return Double.valueOf(new double[] { 0.0 });
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,914,eturn new Double(newA);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,914,return Double.valueOf(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,937,eturn new Double();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,937,return Double.valueOf();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,943,eturn new Double(newA);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,943,return Double.valueOf(newA);
False,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,39,"bject[] arguments = { new Integer(6), new Integer(4) };"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,39,"Object[] arguments = { Integer.valueOf(6), Integer.valueOf(4) };"
False,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,60,"bject[] arguments = { new Integer(6), new Integer(4) };"
True,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/ConvergenceExceptionTest.java,60,"Object[] arguments = { Integer.valueOf(6), Integer.valueOf(4) };"
False,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,39,bject[] arguments = { new Double(0.0) };
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,39,Object[] arguments = { Double.valueOf(0.0) };
False,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,53,bject[] arguments = { new Double(0.0) };
True,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java,53,Object[] arguments = { Double.valueOf(0.0) };
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,38,"bject[] arguments = { new Integer(6), new Integer(4) };"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,38,"Object[] arguments = { Integer.valueOf(6), Integer.valueOf(4) };"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,59,"bject[] arguments = { new Integer(6), new Integer(4) };"
True,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,59,"Object[] arguments = { Integer.valueOf(6), Integer.valueOf(4) };"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,41,"bject[] arguments = { new Integer(6), new Integer(4) };"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,41,"Object[] arguments = { Integer.valueOf(6), Integer.valueOf(4) };"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,62,"bject[] arguments = { new Integer(6), new Integer(4) };"
True,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,62,"Object[] arguments = { Integer.valueOf(6), Integer.valueOf(4) };"
False,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,42,ew Object[] { new Double(1234567) });
True,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java,42,new Object[] { Double.valueOf(1234567) });
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,337,ouble pi = new Double(Math.PI);
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,337,Double pi = Double.valueOf(Math.PI);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,518,ssertFalse(zero.equals(new Double(0)));
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,518,assertFalse(zero.equals(Double.valueOf(0)));
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,187,ew Object[] { new Double(t) });
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,187,new Object[] { Double.valueOf(t) });
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,205,ew Double(cumFreq).doubleValue()/new Double(sumFreq).doubleValue();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,205,Double.valueOf(cumFreq).doubleValue()/Double.valueOf(sumFreq).doubleValue();
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,74,"ssertEquals(""Integer argument cum freq"",4, f.getCumFreq(new Integer(2)));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,74,"assertEquals(""Integer argument cum freq"",4, f.getCumFreq(Integer.valueOf(2)));"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,95,.addValue(new Integer(1));
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,96,.addValue(new Long(1));
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,95,f.addValue(Integer.valueOf(1));
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,96,f.addValue(Long.valueOf(1));
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,98,.addValue(new Integer(-1));
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,98,f.addValue(Integer.valueOf(-1));
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,100,"ssertEquals(""1 count"", 3, f.getCount(new Integer(1)));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,100,"assertEquals(""1 count"", 3, f.getCount(Integer.valueOf(1)));"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,102,"ssertEquals(""1 pct"", 0.6, f.getPct(new Integer(1)), tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,102,"assertEquals(""1 pct"", 0.6, f.getPct(Integer.valueOf(1)), tolerance);"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,144,"ssertEquals(""two pct"",0.25,f.getPct(new Long(2)),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,144,"assertEquals(""two pct"",0.25,f.getPct(Long.valueOf(2)),tolerance);"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,149,"ssertEquals(""two cum pct"",0.50,f.getCumPct(new Long(2)),tolerance);"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,150,"ssertEquals(""Integer argument"",0.50,f.getCumPct(new Integer(2)),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,149,"assertEquals(""two cum pct"",0.50,f.getCumPct(Long.valueOf(2)),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,150,"assertEquals(""Integer argument"",0.50,f.getCumPct(Integer.valueOf(2)),tolerance);"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,180,"ssertEquals(""count, empty table"",0, f.getCount(new Integer(0)));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,180,"assertEquals(""count, empty table"",0, f.getCount(Integer.valueOf(0)));"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,184,"ssertTrue(""pct, empty table"", Double.isNaN(f.getPct(new Integer(0))));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,184,"assertTrue(""pct, empty table"", Double.isNaN(f.getPct(Integer.valueOf(0))));"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,186,"ssertTrue(""cum pct, empty table"", Double.isNaN(f.getCumPct(new Integer(0))));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,186,"assertTrue(""cum pct, empty table"", Double.isNaN(f.getCumPct(Integer.valueOf(0))));"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,220,bj1 = new Integer(1);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,221,nteger int1 = new Integer(1);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,220,obj1 = Integer.valueOf(1);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,221,Integer int1 = Integer.valueOf(1);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,225,.addValue(new Long(2));
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,225,f.addValue(Long.valueOf(2));
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,227,"ssertEquals(""Integer 1 count"", 2, f.getCount(new Integer(1)));"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,228,"ssertEquals(""Integer 1 count"", 2, f.getCount(new Long(1)));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,227,"assertEquals(""Integer 1 count"", 2, f.getCount(Integer.valueOf(1)));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,228,"assertEquals(""Integer 1 count"", 2, f.getCount(Long.valueOf(1)));"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,230,"ssertEquals(""Integer 1 cumPct"", 0.5, f.getCumPct(new Long(1)), tolerance);"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,231,"ssertEquals(""Integer 1 cumPct"", 0.5, f.getCumPct(new Integer(1)), tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,230,"assertEquals(""Integer 1 cumPct"", 0.5, f.getCumPct(Long.valueOf(1)), tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,231,"assertEquals(""Integer 1 cumPct"", 0.5, f.getCumPct(Integer.valueOf(1)), tolerance);"
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,81,ouble value = new Double(valueString);
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,81,Double value = Double.valueOf(valueString);
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,141,eturn new Double(((Long) property).doubleValue());
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,141,return Double.valueOf(((Long) property).doubleValue());
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,146,ist.add(new Double(v));
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,146,list.add(Double.valueOf(v));
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,95,ist.add( new Double(one));
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,95,list.add( Double.valueOf(one));
False,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,126,.addObject(new Integer(12));
True,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,126,u.addObject(Integer.valueOf(12));
False,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,131,.addObject(new Long(21));
True,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,131,u.addObject(Long.valueOf(21));
False,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,135,.addObject(new Float(14.1));
True,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,135,u.addObject(Float.valueOf(14.1f));
False,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,141,.addObject(new Double(19.8));
True,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,141,u.addObject(Double.valueOf(19.8));
False,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,220,ssertFalse(u.equals(new Double(0)));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,220,assertFalse(u.equals(Double.valueOf(0)));
False,src/test/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,59,"ssertFalse(""wrong type"", u.equals(new Double(0)));"
True,src/test/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,59,"assertFalse(""wrong type"", u.equals(Double.valueOf(0)));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,195,"ssertFalse(""wrong type"", u.equals(new Double(0)));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,195,"assertFalse(""wrong type"", u.equals(Double.valueOf(0)));"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,34,ouble input = new Double(expected);
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,34,Double input = Double.valueOf(expected);
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,57,nteger input = new Integer(1);
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,57,Integer input = Integer.valueOf(1);
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,24,rivate Double x = new Double(1.0);
True,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,24,private Double x = Double.valueOf(1.0);

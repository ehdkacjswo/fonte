is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,168,"eturn MathUtils.equals(stat.getResult(), this.getResult()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,169,"athUtils.equals(stat.getN(), this.getN());"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,168,"return MathUtils.equalsIncludingNaN(stat.getResult(), this.getResult()) &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,169,"MathUtils.equalsIncludingNaN(stat.getN(), this.getN());"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,372,"eturn MathUtils.equals(stat.getGeometricMean(), getGeometricMean()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,373,"athUtils.equals(stat.getMax(),           getMax())           &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,374,"athUtils.equals(stat.getMean(),          getMean())          &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,375,"athUtils.equals(stat.getMin(),           getMin())           &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,376,"athUtils.equals(stat.getN(),             getN())             &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,377,"athUtils.equals(stat.getSum(),           getSum())           &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,378,"athUtils.equals(stat.getSumSq(),         getSumSq())         &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,379,"athUtils.equals(stat.getSumLog(),        getSumLog())        &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,372,"return MathUtils.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,373,"MathUtils.equalsIncludingNaN(stat.getMax(),           getMax())           &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,374,"MathUtils.equalsIncludingNaN(stat.getMean(),          getMean())          &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,375,"MathUtils.equalsIncludingNaN(stat.getMin(),           getMin())           &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,376,"MathUtils.equalsIncludingNaN(stat.getN(),             getN())             &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,377,"MathUtils.equalsIncludingNaN(stat.getSum(),           getSum())           &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,378,"MathUtils.equalsIncludingNaN(stat.getSumSq(),         getSumSq())         &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,379,"MathUtils.equalsIncludingNaN(stat.getSumLog(),        getSumLog())        &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,138,"eturn MathUtils.equals(stat.getMax(),      getMax())  &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,139,"athUtils.equals(stat.getMean(),     getMean()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,140,"athUtils.equals(stat.getMin(),      getMin())  &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,141,"athUtils.equals(stat.getN(),        getN())    &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,142,"athUtils.equals(stat.getSum(),      getSum())  &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,143,"athUtils.equals(stat.getVariance(), getVariance());"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,138,"return MathUtils.equalsIncludingNaN(stat.getMax(),      getMax())  &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,139,"MathUtils.equalsIncludingNaN(stat.getMean(),     getMean()) &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,140,"MathUtils.equalsIncludingNaN(stat.getMin(),      getMin())  &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,141,"MathUtils.equalsIncludingNaN(stat.getN(),        getN())    &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,142,"MathUtils.equalsIncludingNaN(stat.getSum(),      getSum())  &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,143,"MathUtils.equalsIncludingNaN(stat.getVariance(), getVariance());"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,363,"eturn MathUtils.equals(stat.getGeometricMean(), getGeometricMean()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,364,"athUtils.equals(stat.getMax(),           getMax())           &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,365,"athUtils.equals(stat.getMean(),          getMean())          &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,366,"athUtils.equals(stat.getMin(),           getMin())           &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,367,"athUtils.equals(stat.getN(),             getN())             &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,368,"athUtils.equals(stat.getSum(),           getSum())           &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,369,"athUtils.equals(stat.getSumsq(),         getSumsq())         &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,370,"athUtils.equals(stat.getVariance(),      getVariance());"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,363,"return MathUtils.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,364,"MathUtils.equalsIncludingNaN(stat.getMax(),           getMax())           &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,365,"MathUtils.equalsIncludingNaN(stat.getMean(),          getMean())          &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,366,"MathUtils.equalsIncludingNaN(stat.getMin(),           getMin())           &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,367,"MathUtils.equalsIncludingNaN(stat.getN(),             getN())             &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,368,"MathUtils.equalsIncludingNaN(stat.getSum(),           getSum())           &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,369,"MathUtils.equalsIncludingNaN(stat.getSumsq(),         getSumsq())         &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,370,"MathUtils.equalsIncludingNaN(stat.getVariance(),      getVariance());"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,406, Returns true iff both arguments are NaN or neither is NaN and they are
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,407, equal
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,406,* Returns true iff they are equal as defined by
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,407,"* {@link #equals(double,double,int) this method}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,411, @return true if the values are equal or both are NaN
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,411,* @return {@code true} if the values are equal.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,412,* @deprecated This method considers that {@code NaN == NaN}. In release
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,413,"* 3.0, the semantics will change in order to comply with IEEE754 where it"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,414,* is specified that {@code NaN != NaN}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,415,* New methods have been added for those cases wher the old semantics is
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,416,"* useful (see e.g. {@link equalsIncludingNaN(double,double)"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,417,* equalsIncludingNaN}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,418, Returns true iff both arguments are equal or within the range of allowed
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,424,* Returns true if both arguments are NaN or neither is NaN and they are
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,425,"* equal as defined by {@link #equals(double,double) this method}."
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,427,* @param x first value
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,428,* @param y second value
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,429,* @return {@code true} if the values are equal or both are NaN.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,431,"public static boolean equalsIncludingNaN(double x, double y) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,432,"return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,436,* Returns true if both arguments are equal or within the range of allowed
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,420, <p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,421," Two NaNs are considered equals, as are two infinities with same sign."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,422, </p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,426, @param eps the amount of absolute error to allow
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,427, @return true if the values are equal or within range of each other
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,441,* @param eps the amount of absolute error to allow.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,442,* @return {@code true} if the values are equal or within range of each other.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,430,"eturn equals(x, y) || (Math.abs(y - x) <= eps);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,445,"return equals(x, y, 1) || Math.abs(y - x) <= eps;"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,434, Returns true iff both arguments are equal or within the range of allowed
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,449,* Returns true if both arguments are NaN or are equal or within the range
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,450,* of allowed error (inclusive).
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,452,* @param x first value
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,453,* @param y second value
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,454,* @param eps the amount of absolute error to allow.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,455,"* @return {@code true} if the values are equal or within range of each other,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,456,* or both are NaN.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,458,"public static boolean equalsIncludingNaN(double x, double y, double eps) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,459,"return equalsIncludingNaN(x, y) || (Math.abs(y - x) <= eps);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,463,* Returns true if both arguments are equal or within the range of allowed
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,465,* Two float numbers are considered equal if there are {@code (maxUlps - 1)}
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,466,* (or less) floating point numbers between them (i.e. two adjacent floating
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,467,* point numbers are considered equal.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,445, point values between {@code x} and {@code y}
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,477,* point values between {@code x} and {@code y}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,448,"/ Check that ""maxUlps"" is non-negative and small enough so that the"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,449,/ default NAN won't compare as equal to anything.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,480,"// Check that ""maxUlps"" is non-negative and small enough so that"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,481,// NaN won't compare as equal to anything (except another NaN).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,463,eturn Math.abs(xInt - yInt) <= maxUlps;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,495,final boolean isEqual = (Math.abs(xInt - yInt) <= maxUlps);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,497,return isEqual && !Double.isNaN(x) && !Double.isNaN(y);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,467, Returns true iff both arguments are null or have same dimensions
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,468," and all their elements are {@link #equals(double,double) equals}"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,501,* Returns true if both arguments are NaN or if they are equal as defined
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,502,"* by {@link #equals(double,double,int) this method}."
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,504,* @param x first value
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,505,* @param y second value
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,506,* @param maxUlps {@code (maxUlps - 1)} is the number of floating point
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,507,* values between {@code x} and {@code y}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,508,* @return {@code true} if both arguments are NaN or if there are less than
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,509,* {@code maxUlps} floating point values between {@code x} and {@code y}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,511,"public static boolean equalsIncludingNaN(double x, double y, int maxUlps) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,512,"return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,516,* Returns true iff both arguments are null or have same dimensions and all
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,517,* their elements are equal as defined by
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,518,"* {@link #equals(double,double) this method}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,473, and equal elements
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,474, @since 1.2
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,523,* and equal elements.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,524,* @deprecated This method considers that {@code NaN == NaN}. In release
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,525,"* 3.0, the semantics will change in order to comply with IEEE754 where it"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,526,* is specified that {@code NaN != NaN}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,527,* New methods have been added for those cases wher the old semantics is
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,528,"* useful (see e.g. {@link equalsIncludingNaN(double[],double[])"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,529,* equalsIncludingNaN}.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,547,* Returns true iff both arguments are null or have same dimensions and all
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,548,* their elements are equal as defined by
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,549,"* {@link #equalsIncludingNaN(double,double) this method}."
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,551,* @param x first array
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,552,* @param y second array
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,553,* @return true if the values are both null or have same dimension and
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,554,* equal elements
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,556,"public static boolean equalsIncludingNaN(double[] x, double[] y) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,557,if ((x == null) || (y == null)) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,558,return !((x == null) ^ (y == null));
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,560,if (x.length != y.length) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,561,return false;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,563,for (int i = 0; i < x.length; ++i) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,564,"if (!equalsIncludingNaN(x[i], y[i])) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,565,return false;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,568,return true;
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,213,"ssertTrue(MathUtils.equals(mean1, dstat.getMean()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,213,"assertTrue(MathUtils.equalsIncludingNaN(mean1, dstat.getMean()));"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,215,"ssertTrue(MathUtils.equals(mean2, dstat.getMean()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,215,"assertTrue(MathUtils.equalsIncludingNaN(mean2, dstat.getMean()));"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,217,"ssertTrue(MathUtils.equals(mean3, dstat.getMean()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,217,"assertTrue(MathUtils.equalsIncludingNaN(mean3, dstat.getMean()));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,317,ublic void testEquals() {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,317,public void testEqualsIncludingNaN() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,327,"ssertTrue(MathUtils.equals(testArray[i], testArray[j]));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,328,"ssertTrue(MathUtils.equals(testArray[j], testArray[i]));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,327,"assertTrue(MathUtils.equalsIncludingNaN(testArray[i], testArray[j]));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,328,"assertTrue(MathUtils.equalsIncludingNaN(testArray[j], testArray[i]));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,330,"ssertTrue(!MathUtils.equals(testArray[i], testArray[j]));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,331,"ssertTrue(!MathUtils.equals(testArray[j], testArray[i]));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,330,"assertTrue(!MathUtils.equalsIncludingNaN(testArray[i], testArray[j]));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,331,"assertTrue(!MathUtils.equalsIncludingNaN(testArray[j], testArray[i]));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,341,"ssertTrue(MathUtils.equals(Double.NaN, Double.NaN, 1.0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,341,"assertFalse(MathUtils.equals(Double.NaN, Double.NaN, 1.0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,349,public void testEqualsIncludingNaNWithAllowedDelta() {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,350,"assertTrue(MathUtils.equalsIncludingNaN(153.0000, 153.0000, .0625));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,351,"assertTrue(MathUtils.equalsIncludingNaN(153.0000, 153.0625, .0625));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,352,"assertTrue(MathUtils.equalsIncludingNaN(152.9375, 153.0000, .0625));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,353,"assertTrue(MathUtils.equalsIncludingNaN(Double.NaN, Double.NaN, 1.0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,354,"assertTrue(MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,355,"assertTrue(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,356,"assertFalse(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,357,"assertFalse(MathUtils.equalsIncludingNaN(153.0000, 153.0625, .0624));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,358,"assertFalse(MathUtils.equalsIncludingNaN(152.9374, 153.0000, .0625));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,350,"ssertTrue(MathUtils.equals(153, 153, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,362,"assertTrue(MathUtils.equals(0.0, -0.0, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,364,"assertTrue(MathUtils.equals(1.0, 1 + Math.ulp(1d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,365,"assertFalse(MathUtils.equals(1.0, 1 + 2 * Math.ulp(1d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,367,final double nUp1 = Math.nextUp(1d);
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,368,final double nnUp1 = Math.nextUp(nUp1);
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,369,"assertTrue(MathUtils.equals(1.0, nUp1, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,370,"assertTrue(MathUtils.equals(nUp1, nnUp1, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,371,"assertFalse(MathUtils.equals(1.0, nnUp1, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,373,"assertTrue(MathUtils.equals(0.0, Math.ulp(0d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,374,"assertTrue(MathUtils.equals(0.0, -Math.ulp(0d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,376,"assertTrue(MathUtils.equals(153.0, 153.0, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,352,"ssertTrue(MathUtils.equals(153, 153.00000000000003, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,353,"ssertFalse(MathUtils.equals(153, 153.00000000000006, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,354,"ssertTrue(MathUtils.equals(153, 152.99999999999997, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,378,"assertTrue(MathUtils.equals(153.0, 153.00000000000003, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,379,"assertFalse(MathUtils.equals(153.0, 153.00000000000006, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,380,"assertTrue(MathUtils.equals(153.0, 152.99999999999997, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,357,"ssertTrue(MathUtils.equals(-128, -127.99999999999999, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,358,"ssertFalse(MathUtils.equals(-128, -127.99999999999997, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,359,"ssertTrue(MathUtils.equals(-128, -128.00000000000003, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,360,"ssertFalse(MathUtils.equals(-128, -128.00000000000006, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,383,"assertTrue(MathUtils.equals(-128.0, -127.99999999999999, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,384,"assertFalse(MathUtils.equals(-128.0, -127.99999999999997, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,385,"assertTrue(MathUtils.equals(-128.0, -128.00000000000003, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,386,"assertFalse(MathUtils.equals(-128.0, -128.00000000000006, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,369,"ssertTrue(MathUtils.equals(Double.NaN, Double.NaN, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,394,"assertFalse(MathUtils.equals(Double.NaN, Double.NaN, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,399,public void testEqualsIncludingNaNWithAllowedUlps() {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,400,"assertTrue(MathUtils.equalsIncludingNaN(0.0, -0.0, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,402,"assertTrue(MathUtils.equalsIncludingNaN(1.0, 1 + Math.ulp(1d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,403,"assertFalse(MathUtils.equalsIncludingNaN(1.0, 1 + 2 * Math.ulp(1d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,405,final double nUp1 = Math.nextUp(1d);
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,406,final double nnUp1 = Math.nextUp(nUp1);
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,407,"assertTrue(MathUtils.equalsIncludingNaN(1.0, nUp1, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,408,"assertTrue(MathUtils.equalsIncludingNaN(nUp1, nnUp1, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,409,"assertFalse(MathUtils.equalsIncludingNaN(1.0, nnUp1, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,411,"assertTrue(MathUtils.equalsIncludingNaN(0.0, Math.ulp(0d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,412,"assertTrue(MathUtils.equalsIncludingNaN(0.0, -Math.ulp(0d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,414,"assertTrue(MathUtils.equalsIncludingNaN(153.0, 153.0, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,416,"assertTrue(MathUtils.equalsIncludingNaN(153.0, 153.00000000000003, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,417,"assertFalse(MathUtils.equalsIncludingNaN(153.0, 153.00000000000006, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,418,"assertTrue(MathUtils.equalsIncludingNaN(153.0, 152.99999999999997, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,419,"assertFalse(MathUtils.equalsIncludingNaN(153, 152.99999999999994, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,421,"assertTrue(MathUtils.equalsIncludingNaN(-128.0, -127.99999999999999, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,422,"assertFalse(MathUtils.equalsIncludingNaN(-128.0, -127.99999999999997, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,423,"assertTrue(MathUtils.equalsIncludingNaN(-128.0, -128.00000000000003, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,424,"assertFalse(MathUtils.equalsIncludingNaN(-128.0, -128.00000000000006, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,426,"assertTrue(MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,427,"assertTrue(MathUtils.equalsIncludingNaN(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,429,"assertTrue(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,430,"assertTrue(MathUtils.equalsIncludingNaN(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,432,"assertTrue(MathUtils.equalsIncludingNaN(Double.NaN, Double.NaN, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,434,"assertFalse(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 100000));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,438,* @deprecated To be removed in release 3.0 (replaced by {@link
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,439,* #testArrayEqualsIncludingNaN()}.
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,462,public void testArrayEqualsIncludingNaN() {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,463,"assertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d }, null));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,464,"assertFalse(MathUtils.equalsIncludingNaN(null, new double[] { 1d }));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,465,"assertTrue(MathUtils.equalsIncludingNaN((double[]) null, (double[]) null));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,467,"assertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d }, new double[0]));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,468,"assertTrue(MathUtils.equalsIncludingNaN(new double[] { 1d }, new double[] { 1d }));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,469,assertTrue(MathUtils.equalsIncludingNaN(new double[] {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,470,"Double.NaN, Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,471,"Double.NEGATIVE_INFINITY, 1d, 0d"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,472,"}, new double[] {"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,473,"Double.NaN, Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,474,"Double.NEGATIVE_INFINITY, 1d, 0d"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,476,"assertFalse(MathUtils.equalsIncludingNaN(new double[] { Double.POSITIVE_INFINITY },"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,477,new double[] { Double.NEGATIVE_INFINITY }));
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,478,"assertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d },"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,479,"new double[] { MathUtils.nextAfter(MathUtils.nextAfter(1d, 2d), 2d) }));"

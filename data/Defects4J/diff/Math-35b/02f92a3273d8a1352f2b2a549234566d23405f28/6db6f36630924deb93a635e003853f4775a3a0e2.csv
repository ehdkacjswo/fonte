is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,19,mport org.apache.commons.math.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,19,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,23,import org.apache.commons.math.geometry.euclidean.oned.IntervalsSet;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,31, wich is a coordinate on the line. The point at abscissa 0 is the
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,32,* which is a coordinate on the line. The point at abscissa 0 is the
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,48,** Build a line from a point and a direction.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,49, @param p point belonging to the line (this can be any point)
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,50, @param direction direction of the line
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,51, @exception MathArithmeticException if the direction norm is too small
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,49,/** Build a line from two points.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,50,* @param p1 first point belonging to the line (this can be any point)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,51,"* @param p2 second point belonging to the line (this can be any point, different from p1)"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,52,* @exception MathIllegalArgumentException if the points are equal
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,53,"ublic Line(final Vector3D p, final Vector3D direction) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,54,"eset(p, direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,54,"public Line(final Vector3D p1, final Vector3D p2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,55,"reset(p1, p2);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,67,** Reset the instance as if built from a point and a normal.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,68, @param p point belonging to the line (this can be any point)
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,69, @param dir direction of the line
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,70, @exception MathArithmeticException if the direction norm is too small
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,68,/** Reset the instance as if built from two points.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,69,* @param p1 first point belonging to the line (this can be any point)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,70,"* @param p2 second point belonging to the line (this can be any point, different from p1)"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,71,* @exception MathIllegalArgumentException if the points are equal
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,72,"ublic void reset(final Vector3D p, final Vector3D dir) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,73,inal double norm = dir.getNorm();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,74,f (norm == 0.0) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,75,hrow new MathArithmeticException(LocalizedFormats.ZERO_NORM);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,73,"public void reset(final Vector3D p1, final Vector3D p2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,74,final Vector3D delta = p2.subtract(p1);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,75,final double norm2 = delta.getNormSq();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,76,if (norm2 == 0.0) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,77,throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,77,"his.direction = new Vector3D(1.0 / norm, dir);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,78,"ero = new Vector3D(1.0, p, -p.dotProduct(this.direction), this.direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,79,"this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,80,"zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,85,"eturn new Line(zero, direction.negate());"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,87,"return new Line(zero, zero.subtract(direction));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,218,/** Build a sub-line covering the whole line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,219,* @return a sub-line covering the whole line
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,221,public SubLine wholeLine() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,222,"return new SubLine(this, new IntervalsSet());"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,326,"eturn new Line(intersection(this, other, new Plane(direction)),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,327,irection);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,326,"final Vector3D point = intersection(this, other, new Plane(direction));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,327,"return new Line(point, point.add(direction));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,17,package org.apache.commons.math.geometry.euclidean.threed;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,20,/** Simple container for a two-points segment.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,21,* @version $Id$
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,22,* @since 3.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,24,public class Segment {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,26,/** Start point of the segment. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,27,private final Vector3D start;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,29,/** End point of the segments. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,30,private final Vector3D end;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,32,/** Line containing the segment. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,33,private final Line     line;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,35,/** Build a segment.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,36,* @param start start point of the segment
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,37,* @param end end point of the segment
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,38,* @param line line containing the segment
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,40,"public Segment(final Vector3D start, final Vector3D end, final Line line) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,41,this.start  = start;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,42,this.end    = end;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,43,this.line   = line;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,46,/** Get the start point of the segment.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,47,* @return start point of the segment
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,49,public Vector3D getStart() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,50,return start;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,53,/** Get the end point of the segment.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,54,* @return end point of the segment
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,56,public Vector3D getEnd() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,57,return end;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,60,/** Get the line containing the segment.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,61,* @return line containing the segment
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,63,public Line getLine() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Segment.java,64,return line;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,17,package org.apache.commons.math.geometry.euclidean.threed;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,20,import java.util.List;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,22,import org.apache.commons.math.geometry.euclidean.oned.Interval;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,23,import org.apache.commons.math.geometry.euclidean.oned.IntervalsSet;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,24,import org.apache.commons.math.geometry.euclidean.oned.Vector1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,25,import org.apache.commons.math.geometry.partitioning.Hyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,26,import org.apache.commons.math.geometry.partitioning.Region.Location;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,28,/** This class represents a subset of a {@link Line}.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,29,* @version $Id$
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,30,* @since 3.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,32,public class SubLine {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,34,/** Underlying line. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,35,private final Line line;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,37,/** Remaining region of the hyperplane. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,38,private final IntervalsSet remainingRegion;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,40,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,41,* @param line underlying line
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,42,* @param remainingRegion remaining region of the line
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,44,"public SubLine(final Line line, final IntervalsSet remainingRegion) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,45,this.line            = line;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,46,this.remainingRegion = remainingRegion;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,49,/** Create a sub-line from two endpoints.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,50,* @param start start point
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,51,* @param end end point
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,53,"public SubLine(final Vector3D start, final Vector3D end) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,54,"this(new Line(start, end), buildIntervalSet(start, end));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,57,/** Create a sub-line from a segment.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,58,* @param segment single segment forming the sub-line
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,60,public SubLine(final Segment segment) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,61,"this(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,64,/** Get the endpoints of the sub-line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,65,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,66,"* A subline may be any arbitrary number of disjoints segments, so the endpoints"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,67,* are provided as a list of endpoint pairs. Each element of the list represents
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,68,"* one segment, and each segment contains a start point at index 0 and an end point"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,69,"* at index 1. If the sub-line is unbounded in the negative infinity direction,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,70,* the start point of the first segment will have infinite coordinates. If the
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,71,"* sub-line is unbounded in the positive infinity direction, the end point of the"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,72,* last segment will have infinite coordinates. So a sub-line covering the whole
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,73,* line will contain just one row and both elements of this row will have infinite
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,74,"* coordinates. If the sub-line is empty, the returned list will contain 0 segments."
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,75,* </p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,76,* @return list of segments endpoints
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,78,public List<Segment> getSegments() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,80,final List<Interval> list = remainingRegion.asList();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,81,final List<Segment> segments = new ArrayList<Segment>();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,83,for (final Interval interval : list) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,84,final Vector3D start = line.toSpace(new Vector1D(interval.getLower()));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,85,final Vector3D end   = line.toSpace(new Vector1D(interval.getUpper()));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,86,"segments.add(new Segment(start, end, line));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,89,return segments;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,93,/** Get the intersection of the instance and another sub-line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,94,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,95,* This method is related to the {@link Line#intersection(Hyperplane)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,96,"* intersection} method in the {@link Line Line} class, but in addition"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,97,"* to compute the point along infinite lines, it also checks the point"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,98,* lies on both sub-line ranges.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,99,* </p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,100,* @param subLine other sub-line which may intersect instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,101,"* @param includeEndPoints if true, endpoints are considered to belong to"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,102,"* instance (i.e. they are closed sets) and may be returned, otherwise endpoints"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,103,* are considered to not belong to instance (i.e. they are open sets) and intersection
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,104,* occurring on endpoints lead to null being returned
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,105,"* @return the intersection point if there is one, null if the sub-lines don't intersect"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,107,"public Vector3D intersection(final SubLine subLine, final boolean includeEndPoints) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,109,// compute the intersection on infinite line
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,110,Vector3D v1D = line.intersection(subLine.line);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,112,// check location of point with respect to first sub-line
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,113,Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,115,// check location of point with respect to second sub-line
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,116,Location loc2 = subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,118,if (includeEndPoints) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,119,return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v1D : null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,120,} else {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,121,return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v1D : null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,126,/** Build an interval set from two points.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,127,* @param start start point
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,128,* @param end end point
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,129,* @return an interval set
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,131,"private static IntervalsSet buildIntervalSet(final Vector3D start, final Vector3D end) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,132,"final Line line = new Line(start, end);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,133,"return new IntervalsSet(line.toSubSpace(start).getX(),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java,134,line.toSubSpace(end).getX());
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,30,"ine l = new Line(p1, new Vector3D(0, 0, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,30,"Line l = new Line(p1, new Vector3D(0, 0, 2));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,45,"ine     lA  = new Line(p1, p2.subtract(p1));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,46,"ine     lB  = new Line(p2, p1.subtract(p2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,45,"Line     lA  = new Line(p1, p2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,46,"Line     lB  = new Line(p2, p1);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,48,"ssert.assertTrue(! lA.isSimilarTo(new Line(p1, lA.getDirection().orthogonal())));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,48,"Assert.assertTrue(! lA.isSimilarTo(new Line(p1, p1.add(lA.getDirection().orthogonal()))));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,53,"ine l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 1, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,53,"Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 2, 2));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,60,"ine l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 1, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,60,"Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 2, 2));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,62,".distance(new Line(new Vector3D(1, 0, 1), Vector3D.PLUS_K)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,62,"l.distance(new Line(new Vector3D(1, 0, 1), new Vector3D(1, 0, 2))),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,65,".distance(new Line(new Vector3D(-0.5, 0, 0), new Vector3D(0, -1, -1))),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,65,"l.distance(new Line(new Vector3D(-0.5, 0, 0), new Vector3D(-0.5, -1, -1))),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,71,".distance(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -1, -1))),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,71,"l.distance(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -5, -5))),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,74,".distance(new Line(new Vector3D(0, -4, -4), new Vector3D(0, 1, 0))),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,74,"l.distance(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -3, -4))),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,77,".distance(new Line(new Vector3D(0, -4, -4), new Vector3D(1, 0, 0))),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,77,"l.distance(new Line(new Vector3D(0, -4, -4), new Vector3D(1, -4, -4))),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,80,".distance(new Line(new Vector3D(0, -4, 0), new Vector3D(1, 0, 0))),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,80,"l.distance(new Line(new Vector3D(0, -4, 0), new Vector3D(1, -4, 0))),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,86,"ine l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 1, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,86,"Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 2, 2));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,88,".closestPoint(new Line(new Vector3D(1, 0, 1), Vector3D.PLUS_K)).distance(new Vector3D(0, 0, 0)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,88,"l.closestPoint(new Line(new Vector3D(1, 0, 1), new Vector3D(1, 0, 2))).distance(new Vector3D(0, 0, 0)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,91,".closestPoint(new Line(new Vector3D(-0.5, 0, 0), new Vector3D(0, -1, -1))).distance(new Vector3D(-0.5, 0, 0)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,91,"l.closestPoint(new Line(new Vector3D(-0.5, 0, 0), new Vector3D(-0.5, -1, -1))).distance(new Vector3D(-0.5, 0, 0)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,97,".closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -1, -1))).distance(new Vector3D(0, 0, 0)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,97,"l.closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -5, -5))).distance(new Vector3D(0, 0, 0)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,100,".closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(0, 1, 0))).distance(new Vector3D(0, -4, -4)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,100,"l.closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -3, -4))).distance(new Vector3D(0, -4, -4)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,103,".closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(1, 0, 0))).distance(new Vector3D(0, -4, -4)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,103,"l.closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(1, -4, -4))).distance(new Vector3D(0, -4, -4)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,106,".closestPoint(new Line(new Vector3D(0, -4, 0), new Vector3D(1, 0, 0))).distance(new Vector3D(0, -2, -2)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,106,"l.closestPoint(new Line(new Vector3D(0, -4, 0), new Vector3D(1, -4, 0))).distance(new Vector3D(0, -2, -2)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,112,"ine l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 1, 1));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,113,"ssert.assertNull(l.intersection(new Line(new Vector3D(1, 0, 1), Vector3D.PLUS_K)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,114,"ssert.assertNull(l.intersection(new Line(new Vector3D(-0.5, 0, 0), new Vector3D(0, -1, -1))));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,112,"Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 2, 2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,113,"Assert.assertNull(l.intersection(new Line(new Vector3D(1, 0, 1), new Vector3D(1, 0, 2))));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,114,"Assert.assertNull(l.intersection(new Line(new Vector3D(-0.5, 0, 0), new Vector3D(-0.5, -1, -1))));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,119,".intersection(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -1, -1))).distance(new Vector3D(0, 0, 0)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,119,"l.intersection(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -5, -5))).distance(new Vector3D(0, 0, 0)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,122,".intersection(new Line(new Vector3D(0, -4, -4), new Vector3D(0, 1, 0))).distance(new Vector3D(0, -4, -4)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,122,"l.intersection(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -3, -4))).distance(new Vector3D(0, -4, -4)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,125,".intersection(new Line(new Vector3D(0, -4, -4), new Vector3D(1, 0, 0))).distance(new Vector3D(0, -4, -4)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,125,"l.intersection(new Line(new Vector3D(0, -4, -4), new Vector3D(1, -4, -4))).distance(new Vector3D(0, -4, -4)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,127,"ssert.assertNull(l.intersection(new Line(new Vector3D(0, -4, 0), new Vector3D(1, 0, 0))));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,127,"Assert.assertNull(l.intersection(new Line(new Vector3D(0, -4, 0), new Vector3D(1, -4, 0))));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,119,"ine  l = new Line(new Vector3D(0.2, -3.5, 0.7), new Vector3D(1, 1, -1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,119,"Line  l = new Line(new Vector3D(0.2, -3.5, 0.7), new Vector3D(1.2, -2.5, -0.3));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,124,.getNormal().orthogonal())));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,124,"new Vector3D(10, 10, 10).add(p.getNormal().orthogonal()))));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,17,package org.apache.commons.math.geometry.euclidean.threed;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,19,import java.util.List;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,21,import org.apache.commons.math.geometry.euclidean.oned.Euclidean1D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,22,import org.apache.commons.math.geometry.euclidean.oned.IntervalsSet;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,23,import org.apache.commons.math.geometry.partitioning.RegionFactory;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,27,public class SubLineTest {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,29,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,30,public void testEndPoints() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,31,"Vector3D p1 = new Vector3D(-1, -7, 2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,32,"Vector3D p2 = new Vector3D(7, -1, 0);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,33,"Segment segment = new Segment(p1, p2, new Line(p1, p2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,34,SubLine sub = new SubLine(segment);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,35,List<Segment> segments = sub.getSegments();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,36,"Assert.assertEquals(1, segments.size());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,37,"Assert.assertEquals(0.0, new Vector3D(-1, -7, 2).distance(segments.get(0).getStart()), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,38,"Assert.assertEquals(0.0, new Vector3D( 7, -1, 0).distance(segments.get(0).getEnd()), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,41,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,42,public void testNoEndPoints() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,43,"SubLine wholeLine = new Line(new Vector3D(-1, 7, 2), new Vector3D(7, 1, 0)).wholeLine();"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,44,List<Segment> segments = wholeLine.getSegments();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,45,"Assert.assertEquals(1, segments.size());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,46,Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getX()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,47,segments.get(0).getStart().getX() < 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,48,Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getY()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,49,segments.get(0).getStart().getY() > 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,50,Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getZ()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,51,segments.get(0).getStart().getZ() > 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,52,Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getX()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,53,segments.get(0).getEnd().getX() > 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,54,Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getY()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,55,segments.get(0).getEnd().getY() < 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,56,Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getZ()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,57,segments.get(0).getEnd().getZ() < 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,60,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,61,public void testNoSegments() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,62,"SubLine empty = new SubLine(new Line(new Vector3D(-1, -7, 2), new Vector3D(7, -1, 0)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,63,(IntervalsSet) new RegionFactory<Euclidean1D>().getComplement(new IntervalsSet()));
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,64,List<Segment> segments = empty.getSegments();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,65,"Assert.assertEquals(0, segments.size());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,68,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,69,public void testSeveralSegments() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,70,"SubLine twoSubs = new SubLine(new Line(new Vector3D(-1, -7, 2), new Vector3D(7, -1, 0)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,71,"(IntervalsSet) new RegionFactory<Euclidean1D>().union(new IntervalsSet(1, 2),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,72,"new IntervalsSet(3, 4)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,73,List<Segment> segments = twoSubs.getSegments();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,74,"Assert.assertEquals(2, segments.size());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,77,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,78,public void testHalfInfiniteNeg() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,79,"SubLine empty = new SubLine(new Line(new Vector3D(-1, -7, 2), new Vector3D(7, -1, -2)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,80,"new IntervalsSet(Double.NEGATIVE_INFINITY, 0.0));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,81,List<Segment> segments = empty.getSegments();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,82,"Assert.assertEquals(1, segments.size());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,83,Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getX()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,84,segments.get(0).getStart().getX() < 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,85,Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getY()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,86,segments.get(0).getStart().getY() < 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,87,Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getZ()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,88,segments.get(0).getStart().getZ() > 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,89,"Assert.assertEquals(0.0, new Vector3D(3, -4, 0).distance(segments.get(0).getEnd()), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,92,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,93,public void testHalfInfinitePos() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,94,"SubLine empty = new SubLine(new Line(new Vector3D(-1, -7, 2), new Vector3D(7, -1, -2)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,95,"new IntervalsSet(0.0, Double.POSITIVE_INFINITY));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,96,List<Segment> segments = empty.getSegments();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,97,"Assert.assertEquals(1, segments.size());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,98,"Assert.assertEquals(0.0, new Vector3D(3, -4, 0).distance(segments.get(0).getStart()), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,99,Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getX()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,100,segments.get(0).getEnd().getX() > 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,101,Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getY()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,102,segments.get(0).getEnd().getY() > 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,103,Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getZ()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,104,segments.get(0).getEnd().getZ() < 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,107,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,108,public void testIntersectionInsideInside() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,109,"SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(3, 1, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,110,"SubLine sub2 = new SubLine(new Vector3D(2, 0, 0), new Vector3D(2, 2, 2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,111,"Assert.assertEquals(0.0, new Vector3D(2, 1, 1).distance(sub1.intersection(sub2, true)),  1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,112,"Assert.assertEquals(0.0, new Vector3D(2, 1, 1).distance(sub1.intersection(sub2, false)), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,115,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,116,public void testIntersectionInsideBoundary() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,117,"SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(3, 1, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,118,"SubLine sub2 = new SubLine(new Vector3D(2, 0, 0), new Vector3D(2, 1, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,119,"Assert.assertEquals(0.0, new Vector3D(2, 1, 1).distance(sub1.intersection(sub2, true)),  1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,120,"Assert.assertNull(sub1.intersection(sub2, false));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,123,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,124,public void testIntersectionInsideOutside() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,125,"SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(3, 1, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,126,"SubLine sub2 = new SubLine(new Vector3D(2, 0, 0), new Vector3D(2, 0.5, 0.5));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,127,"Assert.assertNull(sub1.intersection(sub2, true));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,128,"Assert.assertNull(sub1.intersection(sub2, false));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,131,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,132,public void testIntersectionBoundaryBoundary() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,133,"SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(2, 1, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,134,"SubLine sub2 = new SubLine(new Vector3D(2, 0, 0), new Vector3D(2, 1, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,135,"Assert.assertEquals(0.0, new Vector3D(2, 1, 1).distance(sub1.intersection(sub2, true)),  1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,136,"Assert.assertNull(sub1.intersection(sub2, false));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,139,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,140,public void testIntersectionBoundaryOutside() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,141,"SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(2, 1, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,142,"SubLine sub2 = new SubLine(new Vector3D(2, 0, 0), new Vector3D(2, 0.5, 0.5));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,143,"Assert.assertNull(sub1.intersection(sub2, true));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,144,"Assert.assertNull(sub1.intersection(sub2, false));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,147,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,148,public void testIntersectionOutsideOutside() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,149,"SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(1.5, 1, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,150,"SubLine sub2 = new SubLine(new Vector3D(2, 0, 0), new Vector3D(2, 0.5, 0.5));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,151,"Assert.assertNull(sub1.intersection(sub2, true));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/SubLineTest.java,152,"Assert.assertNull(sub1.intersection(sub2, false));"

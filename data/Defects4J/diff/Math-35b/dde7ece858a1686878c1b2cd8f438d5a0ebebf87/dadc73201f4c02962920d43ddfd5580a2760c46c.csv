is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/MathException.java,src/main/java/org/apache/commons/math/MathException.java,44,/** Deprecation message. */
True,src/main/java/org/apache/commons/math/MathException.java,src/main/java/org/apache/commons/math/MathException.java,45,"private static final String DEPRECATION_MESSAGE = ""This class is deprecated; calling this method is a bug."";"
False,src/main/java/org/apache/commons/math/MathException.java,src/main/java/org/apache/commons/math/MathException.java,108,"hrow new UnsupportedOperationException(""This class is deprecated; calling this method is a bug."");"
True,src/main/java/org/apache/commons/math/MathException.java,src/main/java/org/apache/commons/math/MathException.java,111,throw new UnsupportedOperationException(DEPRECATION_MESSAGE);
False,src/main/java/org/apache/commons/math/MathException.java,src/main/java/org/apache/commons/math/MathException.java,113,"hrow new UnsupportedOperationException(""This class is deprecated; calling this method is a bug."");"
True,src/main/java/org/apache/commons/math/MathException.java,src/main/java/org/apache/commons/math/MathException.java,116,throw new UnsupportedOperationException(DEPRECATION_MESSAGE);
False,src/main/java/org/apache/commons/math/MathException.java,src/main/java/org/apache/commons/math/MathException.java,118,"hrow new UnsupportedOperationException(""This class is deprecated; calling this method is a bug."");"
True,src/main/java/org/apache/commons/math/MathException.java,src/main/java/org/apache/commons/math/MathException.java,121,throw new UnsupportedOperationException(DEPRECATION_MESSAGE);
False,src/main/java/org/apache/commons/math/MathException.java,src/main/java/org/apache/commons/math/MathException.java,123,"hrow new UnsupportedOperationException(""This class is deprecated; calling this method is a bug."");"
True,src/main/java/org/apache/commons/math/MathException.java,src/main/java/org/apache/commons/math/MathException.java,126,throw new UnsupportedOperationException(DEPRECATION_MESSAGE);
True,src/main/java/org/apache/commons/math/MathRuntimeException.java,src/main/java/org/apache/commons/math/MathRuntimeException.java,45,/** Deprecation message. */
True,src/main/java/org/apache/commons/math/MathRuntimeException.java,src/main/java/org/apache/commons/math/MathRuntimeException.java,46,"private static final String DEPRECATION_MESSAGE = ""This class is deprecated; calling this method is a bug."";"
False,src/main/java/org/apache/commons/math/MathRuntimeException.java,src/main/java/org/apache/commons/math/MathRuntimeException.java,101,"hrow new UnsupportedOperationException(""This class is deprecated; calling this method is a bug."");"
True,src/main/java/org/apache/commons/math/MathRuntimeException.java,src/main/java/org/apache/commons/math/MathRuntimeException.java,104,throw new UnsupportedOperationException(DEPRECATION_MESSAGE);
False,src/main/java/org/apache/commons/math/MathRuntimeException.java,src/main/java/org/apache/commons/math/MathRuntimeException.java,106,"hrow new UnsupportedOperationException(""This class is deprecated; calling this method is a bug."");"
True,src/main/java/org/apache/commons/math/MathRuntimeException.java,src/main/java/org/apache/commons/math/MathRuntimeException.java,109,throw new UnsupportedOperationException(DEPRECATION_MESSAGE);
False,src/main/java/org/apache/commons/math/MathRuntimeException.java,src/main/java/org/apache/commons/math/MathRuntimeException.java,111,"hrow new UnsupportedOperationException(""This class is deprecated; calling this method is a bug."");"
True,src/main/java/org/apache/commons/math/MathRuntimeException.java,src/main/java/org/apache/commons/math/MathRuntimeException.java,114,throw new UnsupportedOperationException(DEPRECATION_MESSAGE);
False,src/main/java/org/apache/commons/math/MathRuntimeException.java,src/main/java/org/apache/commons/math/MathRuntimeException.java,116,"hrow new UnsupportedOperationException(""This class is deprecated; calling this method is a bug."");"
True,src/main/java/org/apache/commons/math/MathRuntimeException.java,src/main/java/org/apache/commons/math/MathRuntimeException.java,119,throw new UnsupportedOperationException(DEPRECATION_MESSAGE);
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,43,ublic void setMaximalIterationCount(int count);
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,43,void setMaximalIterationCount(int count);
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,50,ublic int getMaximalIterationCount();
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,50,int getMaximalIterationCount();
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,67,ublic void setAbsoluteAccuracy(double accuracy);
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,67,void setAbsoluteAccuracy(double accuracy);
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,74,ublic double getAbsoluteAccuracy();
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,74,double getAbsoluteAccuracy();
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,88,ublic void setRelativeAccuracy(double accuracy);
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,88,void setRelativeAccuracy(double accuracy);
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,94,ublic double getRelativeAccuracy();
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,94,double getRelativeAccuracy();
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,116, @param iterationCount the iteration count to set
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,116,* @param newCount the iteration count to set
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,118,"rotected final void setResult(final double newResult, final int iterationCount) {"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,118,"protected final void setResult(final double newResult, final int newCount) {"
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,120,his.iterationCount = iterationCount;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,120,this.iterationCount = newCount;
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,42,** Serializable version identifier */
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,43,rivate static final long serialVersionUID = -38038050983108802L;
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,45,/** Serializable version identifier */
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,46,private static final long serialVersionUID = -38038050983108802L;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,21, Treats the distribution of the two-sided
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,21,* Treats the distribution of the two-sided
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,23, where {@code D}<sub>{@code n}</sub>{@code = sup_x | G(x) - Gn (x) |} for the
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,23,* where {@code D}<sub>{@code n}</sub>{@code = sup_x | G(x) - Gn (x) |} for the
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,36,ublic double cdf(double d);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,36,double cdf(double d);
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,36, <p>Treats the distribution of the two-sided
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,36,* <p>Treats the distribution of the two-sided
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,38, where {@code D}<sub>{@code n}</sub>{@code = sup_x | G(x) - Gn (x) |} for the
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,38,* where {@code D}<sub>{@code n}</sub>{@code = sup_x | G(x) - Gn (x) |} for the
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,41, <p>This implementation is based on [1] with certain quick
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,41,* <p>This implementation is based on [1] with certain quick
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,44," <p>In short, when wanting to evaluate {@code P(D}<sub>{@code n}</sub>{@code < d)},"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,45, the method in [1] is to write {@code d = (k - h) / n} for positive
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,46, integer {@code k} and {@code 0 <= h < 1}. Then
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,44,"* <p>In short, when wanting to evaluate {@code P(D}<sub>{@code n}</sub>{@code < d)},"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,45,* the method in [1] is to write {@code d = (k - h) / n} for positive
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,46,* integer {@code k} and {@code 0 <= h < 1}. Then
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,48," where {@code t_kk} is the {@code (k, k)}'th entry in the special"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,49," matrix {@code H}<sup>{@code n}</sup>, i.e. {@code H} to the {@code n}'th power.</p>"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,48,"* where {@code t_kk} is the {@code (k, k)}'th entry in the special"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,49,"* matrix {@code H}<sup>{@code n}</sup>, i.e. {@code H} to the {@code n}'th power.</p>"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,54, <p>References:
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,54,* <p>References:
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,63," Note that [1] contains an error in computing h, refer to"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,63,"* Note that [1] contains an error in computing h, refer to"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,74,/** Number of observations. */
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,92, result is not exact as with
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,93,* result is not exact as with
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,94, calculations are based on double rather than
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,95,* calculations are based on double rather than
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,100,             if algorithm fails to convert {@code h} to a
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,101,*             if algorithm fails to convert {@code h} to a
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,102,             expressing {@code d} as {@code (k - h) / m} for integer
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,103,*             expressing {@code d} as {@code (k - h) / m} for integer
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,111, [1] with quick decisions for extreme values given in [2] (see above).
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,112, The result is exact in the sense that BigFraction/BigReal is used everywhere
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,113, at the expense of very slow execution time. Almost never choose this in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,112,* [1] with quick decisions for extreme values given in [2] (see above).
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,113,* The result is exact in the sense that BigFraction/BigReal is used everywhere
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,114,* at the expense of very slow execution time. Almost never choose this in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,115," verification purposes. Normally, you would choose"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,116,"* verification purposes. Normally, you would choose"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,121,             if algorithm fails to convert {@code h} to a
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,122,*             if algorithm fails to convert {@code h} to a
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,123,             expressing {@code d} as {@code (k - h) / m} for integer
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,124,*             expressing {@code d} as {@code (k - h) / m} for integer
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,139,            places to gain speed. Almost never choose {@code true} in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,140,            real applications unless you are very sure; {@code true} is
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,140,*            places to gain speed. Almost never choose {@code true} in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,141,*            real applications unless you are very sure; {@code true} is
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,144,             if algorithm fails to convert {@code h} to a
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,145,*             if algorithm fails to convert {@code h} to a
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,146,             expressing {@code d} as {@code (k - h) / m} for integer
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,147,*             expressing {@code d} as {@code (k - h) / m} for integer
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,152,inal int n = this.n;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,182,eturn (exact) ? this.exactK(d) : this.roundedK(d);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,181,return exact ? exactK(d) : roundedK(d);
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,192,             if algorithm fails to convert {@code h} to a
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,191,*             if algorithm fails to convert {@code h} to a
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,194,             expressing {@code d} as {@code (k - h) / m} for integer
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,193,*             expressing {@code d} as {@code (k - h) / m} for integer
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,200,inal int n = this.n;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,217,"eturn pFrac.bigDecimalValue(20, BigDecimal.ROUND_HALF_UP)"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,218,doubleValue();
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,215,"return pFrac.bigDecimalValue(20, BigDecimal.ROUND_HALF_UP).doubleValue();"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,228,             if algorithm fails to convert {@code h} to a
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,225,*             if algorithm fails to convert {@code h} to a
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,230,             expressing {@code d} as {@code (k - h) / m} for integer
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,227,*             expressing {@code d} as {@code (k - h) / m} for integer
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,236,inal int n = this.n;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,264,* @return H matrix
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,270,             if algorithm fails to convert {@code h} to a
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,266,*             if algorithm fails to convert {@code h} to a
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,272,             expressing {@code d} as {@code (k - h) / m} for integer
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,268,*             expressing {@code d} as {@code (k - h) / m} for integer
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,278,nt n = this.n;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,343,data[m - 1][0] = Hdata[m - 1][0].add(h.multiply(2).subtract(1)
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,344,pow(m));
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,338,Hdata[m - 1][0] = Hdata[m - 1][0].add(h.multiply(2).subtract(1).pow(m));
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,181,inal char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,181,final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,185,or (int i = 0; i < binaryRepresentation.length; ++i) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,185,for (int i = 0; i < binaryRepresentation.length; ++i) {
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,119, Returns the result multiplying this with itself <code>p</code> times.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,120," Depending on the type of the field elements, T,"
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,121, instability for high powers might occur.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,119,* Returns the result multiplying this with itself <code>p</code> times.
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,120,"* Depending on the type of the field elements, T,"
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,121,* instability for high powers might occur.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,103, Returns the result multiplying this with itself <code>p</code> times.
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,104," Depending on the underlying storage, instability for high powers might occur."
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,103,* Returns the result multiplying this with itself <code>p</code> times.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,104,"* Depending on the underlying storage, instability for high powers might occur."
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,829,rivate double valueRange = 1.0;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,829,private double valueRange;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,834,rivate boolean isRepairMode = true;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,834,private boolean isRepairMode;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,836,/** Simple constructor.
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,838,public FitnessFunction() {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,839,valueRange = 1.0;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,840,isRepairMode = true;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,841,rivate double[] encode(final double[] x) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,848,public double[] encode(final double[] x) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,857,rivate double[] decode(final double[] x) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,864,public double[] decode(final double[] x) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,873,rivate double value(final double[] point) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,880,public double value(final double[] point) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,891,rivate boolean isFeasible(final double[] x) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,898,public boolean isFeasible(final double[] x) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,907,rivate void setValueRange(double valueRange) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,914,public void setValueRange(double valueRange) {
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,48, @throws MathException if the algorithm fails to converge.
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,194, @throws MathException if the algorithm fails to converge.
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,194,* @throws MaxCountExceededException if the algorithm fails to converge.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,34,/** Ranking algorithm. */
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,62, @param x
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,63, @param y
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,64,* @param x first sample
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,65,* @param y second sample
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,88,"rivate double[] concatinateSamples(final double[] x, final double[] y) {"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,90,/** Concatenate the samples into one array.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,91,* @param x first sample
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,92,* @param y second sample
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,93,* @return concatenated array
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,95,"private double[] concatenateSamples(final double[] x, final double[] y) {"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,113,"inal double[] z = concatinateSamples(x, y);"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,120,"final double[] z = concatenateSamples(x, y);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,33,/** Ranking algorithm. */
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,61, @param x
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,62, @param y
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,63,* @param x first sample
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,64,* @param y second sample
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,90, @param x
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,91, @param y
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,92, @throws IllegalArgumentException
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,93,             if assumptions are not met
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,92,* @param x first sample
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,93,* @param y second sample
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,94,* @return z = y - x
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,95,"rivate double[] calculateDifferences(final double[] x, final double[] y)"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,96,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,96,"private double[] calculateDifferences(final double[] x, final double[] y) {"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,110, @param z
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,110,* @param z sample
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,111,* @return |z|

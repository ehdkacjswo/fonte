is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,81,"CROSSOVER_RATE(""crossover rate ({0})""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,92,"ELITISM_RATE(""elitism rate ({0})""),"
False,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,139,"NVALID_CROSSOVER_CHROMOSOME_LENGTH(""both chromosomes must have same lengths: ({0}) ({1})""),"
False,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,140,"NVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover works only on instances of AbstractListChromosome""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,141,"INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,162,"MUTATION_RATE(""mutation rate ({0})""),"
False,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,277,"UT_OF_RANGE_CROSSOVER_RATE(""crossover rate ({0}) out of [{1}, {2}] range""),"
False,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,278,"UT_OF_RANGE_ELITISM_RATE(""elitism rate ({0}) out of [{1}, {2}] range""),"
False,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,279,"UT_OF_RANGE_MUTATION_RATE(""mutation rate ({0}) out of [{1}, {2}] range""),"
False,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,318,"OO_SMALL_GENERATION_COUNT(""number of generations ({0}) must be >= {1}""),"
False,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,352,"RONG_SEQUENCE_LENGTH_RANDOMKEY(""length of sequence for decoding ({0}) has to be equal to the RandomKey length ({1})""),"
False,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,353,"RONG_REPR_AND_SREPR_SIZE(""size of representation and sorted representation must be equals: {0} != {1}""),"
False,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,354,"RONG_ORIG_AND_PERMUTED_SIZE(""original and permuted data must have same length: {0} != {1}""),"
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,97,"hrow new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_ELITISM_RATE, elitismRate, 0, 1);"
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,97,"throw new OutOfRangeException(LocalizedFormats.ELITISM_RATE, elitismRate, 0, 1);"
False,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,20,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,47,"hrow new NumberIsTooSmallException(LocalizedFormats.TOO_SMALL_GENERATION_COUNT,"
False,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,48,"axGenerations, 1, true);"
True,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,46,"throw new NumberIsTooSmallException(maxGenerations, 1, true);"
False,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,75,"hrow new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_CROSSOVER_RATE,"
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,75,"throw new OutOfRangeException(LocalizedFormats.CROSSOVER_RATE,"
False,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,79,"hrow new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_MUTATION_RATE,"
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,79,"throw new OutOfRangeException(LocalizedFormats.MUTATION_RATE,"
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,22,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,72,         not an instance of {@link AbstractListChromosome} or the length
False,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,73,         of the two chromosomes is not equal
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,73,*         not an instance of {@link AbstractListChromosome}
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,74,* @throws DimensionMismatchException if the length of the two chromosomes is different
False,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,90, @throws MathIllegalArgumentException if the length of the two chromosomes is different
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,91,* @throws DimensionMismatchException if the length of the two chromosomes is different
False,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,96,"hrow new MathIllegalArgumentException(LocalizedFormats.INVALID_CROSSOVER_CHROMOSOME_LENGTH,"
False,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,97,"ength, second.getLength());"
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,97,"throw new DimensionMismatchException(second.getLength(), length);"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,25,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,122,"* @throws DimensionMismatchException iff the length of the <code>sequence</code>,"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,123,* <code>representation</code> or <code>sortedRepr</code> lists are not equal
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,129,// the size of the three lists must be equal
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,127,"hrow new MathIllegalArgumentException(LocalizedFormats.WRONG_SEQUENCE_LENGTH_RANDOMKEY,"
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,128,", representation.size());"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,131,"throw new DimensionMismatchException(representation.size(), l);"
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,130,f (representation.size() != sortedRepr.size()) {
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,131,"hrow new MathIllegalArgumentException(LocalizedFormats.WRONG_REPR_AND_SREPR_SIZE,"
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,132,"epresentation.size(), sortedRepr.size());"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,133,if (sortedRepr.size() != l) {
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,134,"throw new DimensionMismatchException(sortedRepr.size(), l);"
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,135,ist<Double> reprCopy = new ArrayList<Double> (representation);// do not modify the orig. representation
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,137,// do not modify the original representation
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,138,List<Double> reprCopy = new ArrayList<Double> (representation);
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,189,"hrow new InvalidRepresentationException(LocalizedFormats.OUT_OF_RANGE_SIMPLE, val, 0, 1);"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,192,"throw new InvalidRepresentationException(LocalizedFormats.OUT_OF_RANGE_SIMPLE,"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,193,"val, 0, 1);"
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,258, @throws IllegalArgumentException iff the <code>permutedData</code> and
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,259, <code>originalData</code> contains different data
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,262,* @throws DimensionMismatchException iff the length of <code>originalData</code>
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,263,* and <code>permutedData</code> lists are not equal
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,264,* @throws MathIllegalArgumentException iff the <code>permutedData</code> and
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,265,* <code>originalData</code> lists contain different data
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,262,inal List<S> permutedData)
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,263,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,268,final List<S> permutedData) {
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,266,"hrow new MathIllegalArgumentException(LocalizedFormats.WRONG_ORIG_AND_PERMUTED_SIZE,"
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,267,"riginalData.size(), permutedData.size());"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,271,"throw new DimensionMismatchException(permutedData.size(), originalData.size());"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,180,ouble[][] ra = new double[m][n];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,180,double[][] ra = new double[m][n];
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,25,mport org.apache.commons.math.linear.LUDecomposition;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,25,import org.apache.commons.math.linear.QRDecomposition;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,184,* @see #getCovriances(double)
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,192,* <br/>
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,193,* Note that this operation involves the inversion of the
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,194,"* <code>J<sup>T</sup>J</code> matrix, where {@code J} is the"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,195,* Jacobian matrix.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,196,* The {@code threshold} parameter is a way for the caller to specify
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,197,"* that the result of this computation should be considered meaningless,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,198,* and thus trigger an exception.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,215," new LUDecomposition(MatrixUtils.createRealMatrix(jTj), threshold).getSolver();"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,224,"= new QRDecomposition(MatrixUtils.createRealMatrix(jTj), threshold).getSolver();"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,219,ptimizer.getCovariances();
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,219,// The default singularity threshold (1e-14) does not trigger the
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,220,// expected exception.
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,221,double[][] cov = optimizer.getCovariances(1.5e-14);

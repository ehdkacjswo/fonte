is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,23, @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,23,* @param <S> Type of the space.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,24,* @version $Id$
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,87,/** Get the opposite of the instance.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,88,* @return a new vector which is opposite to the instance
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,90,Vector<S> negate();
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,92,/** Get a normalized vector aligned with the instance.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,93,* @return a new normalized vector
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,94,* @exception ArithmeticException if the norm is zero
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,96,Vector<S> normalize();
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,98,/** Multiply the instance by a scalar.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,99,* @param a scalar
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,100,* @return a new vector
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,102,Vector<S> scalarMultiply(double a);
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,154,/** Compute the dot-product of the instance and another vector.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,155,* @param v second vector
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,156,* @return the dot product this.v
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,158,double dotProduct(Vector<S> v);
False,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,137, @param format the custom format for components.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,161,* @param format the custom format for components
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,162,* @return a string representation of this vector
False,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,139,ublic String toString(final NumberFormat format);
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,164,String toString(final NumberFormat format);
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,21,mport org.apache.commons.math.geometry.Vector;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,21,import org.apache.commons.math.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,22,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,24,import org.apache.commons.math.geometry.Vector;
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,28, @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,30,* @version $Id$
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,185,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,186,public Vector1D normalize() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,187,double s = getNorm();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,188,if (s == 0) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,189,throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,191,return scalarMultiply(1 / s);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,193,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,194,public Vector1D negate() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,195,return new Vector1D(-x);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,198,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,199,public Vector1D scalarMultiply(double a) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,200,return new Vector1D(a * x);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,241,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,242,public double dotProduct(final Vector<Euclidean1D> v) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,243,final Vector1D v1 = (Vector1D) v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,244,return x * v1.x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,38,** Serializable version id. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,39,rivate static final long serialVersionUID = 1313493323784566947L;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,73,private static final long serialVersionUID = 1313493323784566947L;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,427,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,425,/** Compute the cross-product of the instance with another vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,426,* @param v other vectorvector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,427,* @return the cross product this ^ v as a new Vector3D
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,21,import org.apache.commons.math.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,22,import org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,28, @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,30,* @version $Id$
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,154,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,155,ublic Vector2D toVector() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,156,"eturn new Vector2D(x, y);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,200,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,201,public Vector2D normalize() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,202,double s = getNorm();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,203,if (s == 0) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,204,throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,206,return scalarMultiply(1 / s);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,208,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,209,public Vector2D negate() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,210,"return new Vector2D(-x, -y);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,213,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,214,public Vector2D scalarMultiply(double a) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,215,"return new Vector2D(a * x, a * y);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,260,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,261,public double dotProduct(final Vector<Euclidean2D> v) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,262,final Vector2D v2 = (Vector2D) v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,263,return x * v2.x + y * v2.y;

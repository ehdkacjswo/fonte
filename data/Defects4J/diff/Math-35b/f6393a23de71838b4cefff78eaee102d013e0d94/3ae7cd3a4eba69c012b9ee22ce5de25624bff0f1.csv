is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,21,import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,22,import org.apache.commons.math.analysis.ParametricUnivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,23,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,24,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,25,  Sigmoid</a> function.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,29,*  sigmoid</a> function.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,30,* It is the inverse of the {@link Logit logit} function.
False,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,32,ublic class Sigmoid implements UnivariateRealFunction {
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,37,public class Sigmoid implements DifferentiableUnivariateRealFunction {
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,38,/** Lower asymptote. */
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,39,private final double lo;
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,40,/** Higher asymptote. */
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,41,private final double hi;
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,44,"* Usual sigmoid function, where the lower asymptote is 0 and the higher"
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,45,* asymptote is 1.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,47,public Sigmoid() {
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,48,"this(0, 1);"
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,52,* Sigmoid function.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,54,* @param lo Lower asymptote.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,55,* @param hi Higher asymptote.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,57,"public Sigmoid(double lo,"
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,58,double hi) {
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,59,this.lo = lo;
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,60,this.hi = hi;
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,63,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,64,public UnivariateRealFunction derivative() {
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,65,return new UnivariateRealFunction() {
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,66,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,67,public double value(double x) {
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,68,final double exp = FastMath.exp(-x);
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,69,if (Double.isInfinite(exp)) {
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,70,// Avoid returning NaN in case of overflow.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,71,return 0;
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,73,final double exp1 = 1 + exp;
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,74,return (hi - lo) * exp / (exp1 * exp1);
False,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,35,eturn 1 / (1 + FastMath.exp(-x));
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,81,"return value(x, lo, hi);"
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,85,* Parametric function where the input array contains the parameters of
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,86,"* the logit function, ordered as follows:"
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,87,* <ul>
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,88,*  <li>Lower asymptote</li>
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,89,*  <li>Higher asymptote</li>
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,90,* </ul>
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,92,public static class Parametric implements ParametricUnivariateRealFunction {
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,94,* Computes the value of the sigmoid at {@code x}.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,96,* @param x Value for which the function must be computed.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,97,* @param param Values of lower asymptote and higher asymptote.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,98,* @return the value of the function.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,99,* @throws NullArgumentException if {@code param} is {@code null}.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,100,* @throws DimensionMismatchException if the size of {@code param} is
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,101,* not 2.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,103,"public double value(double x,"
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,104,double[] param) {
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,105,validateParameters(param);
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,106,"return Sigmoid.value(x, param[0], param[1]);"
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,110,* Computes the value of the gradient at {@code x}.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,111,* The components of the gradient vector are the partial
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,112,* derivatives of the function with respect to each of the
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,113,* <em>parameters</em> (lower asymptote and higher asymptote).
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,115,* @param x Value at which the gradient must be computed.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,116,* @param param Values for lower asymptote and higher asymptote.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,117,* @return the gradient vector at {@code x}.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,118,* @throws NullArgumentException if {@code param} is {@code null}.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,119,* @throws DimensionMismatchException if the size of {@code param} is
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,120,* not 2.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,122,"public double[] gradient(double x, double[] param) {"
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,123,validateParameters(param);
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,125,final double lo = param[0];
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,126,final double hi = param[1];
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,127,final double invExp1 = 1 / (1 + FastMath.exp(-x));
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,129,"return new double[] { 1 - invExp1, invExp1 };"
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,133,* Validates parameters to ensure they are appropriate for the evaluation of
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,134,"* the {@link #value(double,double[])} and {@link #gradient(double,double[])}"
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,135,* methods.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,137,* @param param Values for lower and higher asymptotes.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,138,* @throws NullArgumentException if {@code param} is {@code null}.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,139,* @throws DimensionMismatchException if the size of {@code param} is
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,140,* not 2.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,142,private void validateParameters(double[] param) {
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,143,if (param == null) {
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,144,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,146,if (param.length != 2) {
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,147,"throw new DimensionMismatchException(param.length, 2);"
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,153,* @param x Value at which to compute the sigmoid.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,154,* @param lo Lower asymptote.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,155,* @param hi Higher asymptote.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,156,* @return the value of the sigmoid function at {@code x}.
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,158,"private static double value(double x,"
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,159,"double lo,"
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,160,double hi) {
True,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java,161,return lo + (hi - lo) / (1 + FastMath.exp(-x));
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,21,import org.apache.commons.math.exception.NullArgumentException;
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,22,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,35,ouble x;
False,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,36, = 0;
False,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,37,"ssert.assertEquals(""x="" + x, 0.5, f.value(x), EPS);"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,37,"Assert.assertEquals(0.5, f.value(0), EPS);"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,38,"Assert.assertEquals(0, f.value(Double.NEGATIVE_INFINITY), EPS);"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,39,"Assert.assertEquals(1, f.value(Double.POSITIVE_INFINITY), EPS);"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,42,@Test
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,43,public void testDerivative() {
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,44,final Sigmoid f = new Sigmoid();
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,45,final UnivariateRealFunction dfdx = f.derivative();
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,47,"Assert.assertEquals(0.25, dfdx.value(0), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,50,@Test
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,51,public void testDerivativeLargeArguments() {
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,52,"final Sigmoid f = new Sigmoid(1, 2);"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,53,final UnivariateRealFunction dfdx = f.derivative();
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,55,"Assert.assertEquals(0, dfdx.value(Double.NEGATIVE_INFINITY), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,56,"Assert.assertEquals(0, dfdx.value(-Double.MAX_VALUE), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,57,"Assert.assertEquals(0, dfdx.value(-1e50), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,58,"Assert.assertEquals(0, dfdx.value(-1e3), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,59,"Assert.assertEquals(0, dfdx.value(1e3), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,60,"Assert.assertEquals(0, dfdx.value(1e50), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,61,"Assert.assertEquals(0, dfdx.value(Double.MAX_VALUE), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,62,"Assert.assertEquals(0, dfdx.value(Double.POSITIVE_INFINITY), 0);"
False,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,39, = Double.NEGATIVE_INFINITY;
False,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,40,"ssert.assertEquals(""x="" + x, 0, f.value(x), EPS);"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,65,@Test(expected=NullArgumentException.class)
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,66,public void testParametricUsage1() {
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,67,final Sigmoid.Parametric g = new Sigmoid.Parametric();
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,68,"g.value(0, null);"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,71,@Test(expected=DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,72,public void testParametricUsage2() {
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,73,final Sigmoid.Parametric g = new Sigmoid.Parametric();
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,74,"g.value(0, new double[] {0});"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,77,@Test(expected=NullArgumentException.class)
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,78,public void testParametricUsage3() {
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,79,final Sigmoid.Parametric g = new Sigmoid.Parametric();
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,80,"g.gradient(0, null);"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,83,@Test(expected=DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,84,public void testParametricUsage4() {
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,85,final Sigmoid.Parametric g = new Sigmoid.Parametric();
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,86,"g.gradient(0, new double[] {0});"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,89,@Test
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,90,public void testParametricValue() {
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,91,final double lo = 2;
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,92,final double hi = 3;
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,93,"final Sigmoid f = new Sigmoid(lo, hi);"
False,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,42, = Double.POSITIVE_INFINITY;
False,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,43,"ssert.assertEquals(""x="" + x, 1, f.value(x), EPS);"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,95,final Sigmoid.Parametric g = new Sigmoid.Parametric();
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,96,"Assert.assertEquals(f.value(-1), g.value(-1, new double[] {lo, hi}), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,97,"Assert.assertEquals(f.value(0), g.value(0, new double[] {lo, hi}), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math/analysis/function/SigmoidTest.java,98,"Assert.assertEquals(f.value(2), g.value(2, new double[] {lo, hi}), 0);"

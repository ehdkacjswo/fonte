is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,229,/** The cubic root of {@link #MACH_PREC}. */
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,230,static final double CBRT_MACH_PREC;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,232,/** The machine precision. */
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,233,static final double MACH_PREC;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,342,/** The value of {@code b == 0} (exact floating-point equality). */
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,343,private boolean bIsNull;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,345,static {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,346,MACH_PREC = Math.ulp(1.);
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,347,CBRT_MACH_PREC = Math.cbrt(MACH_PREC);
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,393,inal double epsa = (s + SymmLQ.MACH_PREC) * SymmLQ.CBRT_MACH_PREC;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,406,final double epsa = (s + MACH_PREC) * CBRT_MACH_PREC;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,541,this.bIsNull = true;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,544,this.bIsNull = false;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,786,* Returns {@code true} if the right-hand side vector is zero exactly.
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,788,* @return the boolean value of {@code b == 0}
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,790,public boolean bEqualsNullVector() {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,791,return bIsNull;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,795,* Returns {@code true} if {@code beta} is essentially zero. This method
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,796,* is used to check for early stop of the iterations.
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,798,* @return {@code true} if {@code beta < }{@link #MACH_PREC}
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,800,public boolean betaEqualsZero() {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,801,return beta < MACH_PREC;
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,823,** The cubic root of {@link #MACH_PREC}. */
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,824,tatic final double CBRT_MACH_PREC;
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,826,** The machine precision. */
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,827,tatic final double MACH_PREC;
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,888,tatic {
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,889,ACH_PREC = Math.ulp(1.);
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,890,BRT_MACH_PREC = Math.cbrt(MACH_PREC);
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,1162,f (state.beta1 == 0.) {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,1185,if (state.bEqualsNullVector()) {
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,1169,arlyStop = (state.beta < MACH_PREC) || (state.hasConverged());
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,1192,earlyStop = state.betaEqualsZero() || state.hasConverged();

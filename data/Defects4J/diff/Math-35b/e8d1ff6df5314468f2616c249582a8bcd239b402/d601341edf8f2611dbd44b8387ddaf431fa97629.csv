is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,28,import org.apache.commons.math.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,29,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,39,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,40,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,811,/**Solve  a  system of composed of a Lower Triangular Matrix
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,812,* {@link RealMatrix}.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,813,* <p>
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,814,* This method is called to solve systems of equations which are
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,815,* of the lower triangular form. The matrix {@link RealMatrix}
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,816,"* is assumed, though not checked, to be in lower triangular form."
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,817,* The vector {@link RealVector} is overwritten with the solution.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,818,* The matrix is checked that it is square and its dimensions match
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,819,* the length of the vector.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,820,* </p>
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,821,* @param rm RealMatrix which is lower triangular
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,822,* @param b  RealVector this is overwritten
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,823,* @exception IllegalArgumentException if the matrix and vector are not conformable
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,824,* @exception ArithmeticException there is a zero or near zero on the diagonal of rm
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,826,"public static void solveLowerTriangularSystem( RealMatrix rm, RealVector b){"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,827,if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,828,"throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,829,"(rm == null) ? 0 : rm.getRowDimension(),"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,830,(b == null) ? 0 : b.getDimension());
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,832,if( rm.getColumnDimension() != rm.getRowDimension() ){
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,833,"throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,834,"rm.getRowDimension(),rm.getRowDimension(),"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,835,"rm.getRowDimension(),rm.getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,837,int rows = rm.getRowDimension();
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,838,for( int i = 0 ; i < rows ; i++ ){
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,839,"double diag = rm.getEntry(i, i);"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,840,if( FastMath.abs(diag) < MathUtils.SAFE_MIN ){
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,841,throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,843,double bi = b.getEntry(i)/diag;
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,844,"b.setEntry(i,  bi );"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,845,for( int j = i+1; j< rows; j++ ){
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,846,"b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,851,/** Solver a  system composed  of an Upper Triangular Matrix
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,852,* {@link RealMatrix}.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,853,* <p>
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,854,* This method is called to solve systems of equations which are
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,855,* of the lower triangular form. The matrix {@link RealMatrix}
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,856,"* is assumed, though not checked, to be in upper triangular form."
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,857,* The vector {@link RealVector} is overwritten with the solution.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,858,* The matrix is checked that it is square and its dimensions match
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,859,* the length of the vector.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,860,* </p>
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,861,* @param rm RealMatrix which is upper triangular
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,862,* @param b  RealVector this is overwritten
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,863,* @exception IllegalArgumentException if the matrix and vector are not conformable
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,864,* @exception ArithmeticException there is a zero or near zero on the diagonal of rm
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,866,"public static void solveUpperTriangularSystem( RealMatrix rm, RealVector b){"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,867,if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,868,"throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,869,"(rm == null) ? 0 : rm.getRowDimension(),"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,870,(b == null) ? 0 : b.getDimension());
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,872,if( rm.getColumnDimension() != rm.getRowDimension() ){
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,873,"throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,874,"rm.getRowDimension(),rm.getRowDimension(),"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,875,"rm.getRowDimension(),rm.getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,877,int rows = rm.getRowDimension();
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,878,for( int i = rows-1 ; i >-1 ; i-- ){
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,879,"double diag = rm.getEntry(i, i);"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,880,if( FastMath.abs(diag) < MathUtils.SAFE_MIN ){
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,881,throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,883,double bi = b.getEntry(i)/diag;
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,884,"b.setEntry(i,  bi );"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,885,for( int j = i-1; j>-1; j-- ){
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,886,"b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,20,import org.apache.commons.math.TestUtils;
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,305,@Test
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,306,public void testSolveLowerTriangularSystem(){
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,307,RealMatrix rm = new Array2DRowRealMatrix(
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,308,"new double[][] { {2,0,0,0 }, { 1,1,0,0 }, { 3,3,3,0 }, { 3,3,3,4 } },"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,309,false);
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,310,"RealVector b = new ArrayRealVector(new double[] { 2,3,4,8 }, false);"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,311,"MatrixUtils.solveLowerTriangularSystem(rm, b);"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,312,"TestUtils.assertEquals( new double[]{1,2,-1.66666666666667, 1.0}  , b.getData() , 1.0e-12);"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,317,* Taken from R manual http://stat.ethz.ch/R-manual/R-patched/library/base/html/backsolve.html
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,319,@Test
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,320,public void testSolveUpperTriangularSystem(){
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,321,RealMatrix rm = new Array2DRowRealMatrix(
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,322,"new double[][] { {1,2,3 }, { 0,1,1 }, { 0,0,2 } },"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,323,false);
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,324,"RealVector b = new ArrayRealVector(new double[] { 8,4,2 }, false);"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,325,"MatrixUtils.solveUpperTriangularSystem(rm, b);"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,326,"TestUtils.assertEquals( new double[]{-1,3,1}  , b.getData() , 1.0e-12);"
